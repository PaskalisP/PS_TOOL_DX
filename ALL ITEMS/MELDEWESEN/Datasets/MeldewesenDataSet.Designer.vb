'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MeldewesenDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MeldewesenDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableAWVz10POSTEN As AWVz10POSTENDataTable
    
    Private tableAWVz14 As AWVz14DataTable
    
    Private tableAWVz1415RelevantData As AWVz1415RelevantDataDataTable
    
    Private tableAWVz14z15 As AWVz14z15DataTable
    
    Private tableAWVz15 As AWVz15DataTable
    
    Private tableAWVz4DIKAPPOSTEN As AWVz4DIKAPPOSTENDataTable
    
    Private tableAWVz4DIRINVPOSTEN As AWVz4DIRINVPOSTENDataTable
    
    Private tableAWVz4TRANSITPOSTEN As AWVz4TRANSITPOSTENDataTable
    
    Private tableBANK As BANKDataTable
    
    Private tableCOUNTRIES As COUNTRIESDataTable
    
    Private tableZINSERTRAG_KUNDEN_DETAILS As ZINSERTRAG_KUNDEN_DETAILSDataTable
    
    Private tableZINSERTRAG_KUNDEN_JAHR As ZINSERTRAG_KUNDEN_JAHRDataTable
    
    Private tableZINSERTRAG_KUNDEN_MONAT As ZINSERTRAG_KUNDEN_MONATDataTable
    
    Private tableEMPLOYES_YEAR_AVERAGE As EMPLOYES_YEAR_AVERAGEDataTable
    
    Private tableZVSTA_FormsTill2013 As ZVSTA_FormsTill2013DataTable
    
    Private tableZVSTA_ProdTill2013 As ZVSTA_ProdTill2013DataTable
    
    Private tableZVSTATill2013 As ZVSTATill2013DataTable
    
    Private tableZVSTAT_Parameters_from2014 As ZVSTAT_Parameters_from2014DataTable
    
    Private tableZVSTAT_Details_from2014 As ZVSTAT_Details_from2014DataTable
    
    Private tableZVSTAT_MeldeJahr_from2014 As ZVSTAT_MeldeJahr_from2014DataTable
    
    Private tableZVSTAT_Meldepositionen_from2014 As ZVSTAT_Meldepositionen_from2014DataTable
    
    Private tableZVSTAT_Meldeschemas_from2014 As ZVSTAT_Meldeschemas_from2014DataTable
    
    Private tableAWVz11POSTEN As AWVz11POSTENDataTable
    
    Private tableMIFIR As MIFIRDataTable
    
    Private relationAWVz10POSTEN_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz14_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz1415RelevantData_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz15_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz4DIKAPPOSTEN_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz4DIRINVPOSTEN_FK00 As Global.System.Data.DataRelation
    
    Private relationAWVz4TRANSITPOSTEN_FK00 As Global.System.Data.DataRelation
    
    Private relationZINSERTRAG_KUNDEN_DETAILS_FK00 As Global.System.Data.DataRelation
    
    Private relationZINSERTRAG_KUNDEN_MONAT_FK00 As Global.System.Data.DataRelation
    
    Private relationFK_ZVSTA_Formstill2013_ZVSTAtill2013 As Global.System.Data.DataRelation
    
    Private relationFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013 As Global.System.Data.DataRelation
    
    Private relationFK_Meldepositionen_from2014 As Global.System.Data.DataRelation
    
    Private relationFK_ZVSTAT_Meldeschemas_from2014 As Global.System.Data.DataRelation
    
    Private relationFK_MeldeJahr_from2014 As Global.System.Data.DataRelation
    
    Private relationFK_AWVz11POSTEN_AWVz14z15 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AWVz10POSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz10POSTENDataTable(ds.Tables("AWVz10POSTEN")))
            End If
            If (Not (ds.Tables("AWVz14")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz14DataTable(ds.Tables("AWVz14")))
            End If
            If (Not (ds.Tables("AWVz1415RelevantData")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz1415RelevantDataDataTable(ds.Tables("AWVz1415RelevantData")))
            End If
            If (Not (ds.Tables("AWVz14z15")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz14z15DataTable(ds.Tables("AWVz14z15")))
            End If
            If (Not (ds.Tables("AWVz15")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz15DataTable(ds.Tables("AWVz15")))
            End If
            If (Not (ds.Tables("AWVz4DIKAPPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4DIKAPPOSTENDataTable(ds.Tables("AWVz4DIKAPPOSTEN")))
            End If
            If (Not (ds.Tables("AWVz4DIRINVPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4DIRINVPOSTENDataTable(ds.Tables("AWVz4DIRINVPOSTEN")))
            End If
            If (Not (ds.Tables("AWVz4TRANSITPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4TRANSITPOSTENDataTable(ds.Tables("AWVz4TRANSITPOSTEN")))
            End If
            If (Not (ds.Tables("BANK")) Is Nothing) Then
                MyBase.Tables.Add(New BANKDataTable(ds.Tables("BANK")))
            End If
            If (Not (ds.Tables("COUNTRIES")) Is Nothing) Then
                MyBase.Tables.Add(New COUNTRIESDataTable(ds.Tables("COUNTRIES")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_DETAILSDataTable(ds.Tables("ZINSERTRAG KUNDEN DETAILS")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN JAHR")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_JAHRDataTable(ds.Tables("ZINSERTRAG KUNDEN JAHR")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN MONAT")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_MONATDataTable(ds.Tables("ZINSERTRAG KUNDEN MONAT")))
            End If
            If (Not (ds.Tables("EMPLOYES YEAR AVERAGE")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLOYES_YEAR_AVERAGEDataTable(ds.Tables("EMPLOYES YEAR AVERAGE")))
            End If
            If (Not (ds.Tables("ZVSTA_FormsTill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTA_FormsTill2013DataTable(ds.Tables("ZVSTA_FormsTill2013")))
            End If
            If (Not (ds.Tables("ZVSTA_ProdTill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTA_ProdTill2013DataTable(ds.Tables("ZVSTA_ProdTill2013")))
            End If
            If (Not (ds.Tables("ZVSTATill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTATill2013DataTable(ds.Tables("ZVSTATill2013")))
            End If
            If (Not (ds.Tables("ZVSTAT_Parameters_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Parameters_from2014DataTable(ds.Tables("ZVSTAT_Parameters_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Details_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Details_from2014DataTable(ds.Tables("ZVSTAT_Details_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_MeldeJahr_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_MeldeJahr_from2014DataTable(ds.Tables("ZVSTAT_MeldeJahr_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Meldepositionen_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Meldepositionen_from2014DataTable(ds.Tables("ZVSTAT_Meldepositionen_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Meldeschemas_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Meldeschemas_from2014DataTable(ds.Tables("ZVSTAT_Meldeschemas_from2014")))
            End If
            If (Not (ds.Tables("AWVz11POSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz11POSTENDataTable(ds.Tables("AWVz11POSTEN")))
            End If
            If (Not (ds.Tables("MIFIR")) Is Nothing) Then
                MyBase.Tables.Add(New MIFIRDataTable(ds.Tables("MIFIR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz10POSTEN() As AWVz10POSTENDataTable
        Get
            Return Me.tableAWVz10POSTEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz14() As AWVz14DataTable
        Get
            Return Me.tableAWVz14
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz1415RelevantData() As AWVz1415RelevantDataDataTable
        Get
            Return Me.tableAWVz1415RelevantData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz14z15() As AWVz14z15DataTable
        Get
            Return Me.tableAWVz14z15
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz15() As AWVz15DataTable
        Get
            Return Me.tableAWVz15
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz4DIKAPPOSTEN() As AWVz4DIKAPPOSTENDataTable
        Get
            Return Me.tableAWVz4DIKAPPOSTEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz4DIRINVPOSTEN() As AWVz4DIRINVPOSTENDataTable
        Get
            Return Me.tableAWVz4DIRINVPOSTEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz4TRANSITPOSTEN() As AWVz4TRANSITPOSTENDataTable
        Get
            Return Me.tableAWVz4TRANSITPOSTEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BANK() As BANKDataTable
        Get
            Return Me.tableBANK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COUNTRIES() As COUNTRIESDataTable
        Get
            Return Me.tableCOUNTRIES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZINSERTRAG_KUNDEN_DETAILS() As ZINSERTRAG_KUNDEN_DETAILSDataTable
        Get
            Return Me.tableZINSERTRAG_KUNDEN_DETAILS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZINSERTRAG_KUNDEN_JAHR() As ZINSERTRAG_KUNDEN_JAHRDataTable
        Get
            Return Me.tableZINSERTRAG_KUNDEN_JAHR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZINSERTRAG_KUNDEN_MONAT() As ZINSERTRAG_KUNDEN_MONATDataTable
        Get
            Return Me.tableZINSERTRAG_KUNDEN_MONAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPLOYES_YEAR_AVERAGE() As EMPLOYES_YEAR_AVERAGEDataTable
        Get
            Return Me.tableEMPLOYES_YEAR_AVERAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTA_FormsTill2013() As ZVSTA_FormsTill2013DataTable
        Get
            Return Me.tableZVSTA_FormsTill2013
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTA_ProdTill2013() As ZVSTA_ProdTill2013DataTable
        Get
            Return Me.tableZVSTA_ProdTill2013
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTATill2013() As ZVSTATill2013DataTable
        Get
            Return Me.tableZVSTATill2013
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTAT_Parameters_from2014() As ZVSTAT_Parameters_from2014DataTable
        Get
            Return Me.tableZVSTAT_Parameters_from2014
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTAT_Details_from2014() As ZVSTAT_Details_from2014DataTable
        Get
            Return Me.tableZVSTAT_Details_from2014
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTAT_MeldeJahr_from2014() As ZVSTAT_MeldeJahr_from2014DataTable
        Get
            Return Me.tableZVSTAT_MeldeJahr_from2014
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTAT_Meldepositionen_from2014() As ZVSTAT_Meldepositionen_from2014DataTable
        Get
            Return Me.tableZVSTAT_Meldepositionen_from2014
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZVSTAT_Meldeschemas_from2014() As ZVSTAT_Meldeschemas_from2014DataTable
        Get
            Return Me.tableZVSTAT_Meldeschemas_from2014
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AWVz11POSTEN() As AWVz11POSTENDataTable
        Get
            Return Me.tableAWVz11POSTEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MIFIR() As MIFIRDataTable
        Get
            Return Me.tableMIFIR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MeldewesenDataSet = CType(MyBase.Clone,MeldewesenDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("AWVz10POSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz10POSTENDataTable(ds.Tables("AWVz10POSTEN")))
            End If
            If (Not (ds.Tables("AWVz14")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz14DataTable(ds.Tables("AWVz14")))
            End If
            If (Not (ds.Tables("AWVz1415RelevantData")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz1415RelevantDataDataTable(ds.Tables("AWVz1415RelevantData")))
            End If
            If (Not (ds.Tables("AWVz14z15")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz14z15DataTable(ds.Tables("AWVz14z15")))
            End If
            If (Not (ds.Tables("AWVz15")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz15DataTable(ds.Tables("AWVz15")))
            End If
            If (Not (ds.Tables("AWVz4DIKAPPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4DIKAPPOSTENDataTable(ds.Tables("AWVz4DIKAPPOSTEN")))
            End If
            If (Not (ds.Tables("AWVz4DIRINVPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4DIRINVPOSTENDataTable(ds.Tables("AWVz4DIRINVPOSTEN")))
            End If
            If (Not (ds.Tables("AWVz4TRANSITPOSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz4TRANSITPOSTENDataTable(ds.Tables("AWVz4TRANSITPOSTEN")))
            End If
            If (Not (ds.Tables("BANK")) Is Nothing) Then
                MyBase.Tables.Add(New BANKDataTable(ds.Tables("BANK")))
            End If
            If (Not (ds.Tables("COUNTRIES")) Is Nothing) Then
                MyBase.Tables.Add(New COUNTRIESDataTable(ds.Tables("COUNTRIES")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_DETAILSDataTable(ds.Tables("ZINSERTRAG KUNDEN DETAILS")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN JAHR")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_JAHRDataTable(ds.Tables("ZINSERTRAG KUNDEN JAHR")))
            End If
            If (Not (ds.Tables("ZINSERTRAG KUNDEN MONAT")) Is Nothing) Then
                MyBase.Tables.Add(New ZINSERTRAG_KUNDEN_MONATDataTable(ds.Tables("ZINSERTRAG KUNDEN MONAT")))
            End If
            If (Not (ds.Tables("EMPLOYES YEAR AVERAGE")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLOYES_YEAR_AVERAGEDataTable(ds.Tables("EMPLOYES YEAR AVERAGE")))
            End If
            If (Not (ds.Tables("ZVSTA_FormsTill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTA_FormsTill2013DataTable(ds.Tables("ZVSTA_FormsTill2013")))
            End If
            If (Not (ds.Tables("ZVSTA_ProdTill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTA_ProdTill2013DataTable(ds.Tables("ZVSTA_ProdTill2013")))
            End If
            If (Not (ds.Tables("ZVSTATill2013")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTATill2013DataTable(ds.Tables("ZVSTATill2013")))
            End If
            If (Not (ds.Tables("ZVSTAT_Parameters_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Parameters_from2014DataTable(ds.Tables("ZVSTAT_Parameters_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Details_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Details_from2014DataTable(ds.Tables("ZVSTAT_Details_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_MeldeJahr_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_MeldeJahr_from2014DataTable(ds.Tables("ZVSTAT_MeldeJahr_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Meldepositionen_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Meldepositionen_from2014DataTable(ds.Tables("ZVSTAT_Meldepositionen_from2014")))
            End If
            If (Not (ds.Tables("ZVSTAT_Meldeschemas_from2014")) Is Nothing) Then
                MyBase.Tables.Add(New ZVSTAT_Meldeschemas_from2014DataTable(ds.Tables("ZVSTAT_Meldeschemas_from2014")))
            End If
            If (Not (ds.Tables("AWVz11POSTEN")) Is Nothing) Then
                MyBase.Tables.Add(New AWVz11POSTENDataTable(ds.Tables("AWVz11POSTEN")))
            End If
            If (Not (ds.Tables("MIFIR")) Is Nothing) Then
                MyBase.Tables.Add(New MIFIRDataTable(ds.Tables("MIFIR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAWVz10POSTEN = CType(MyBase.Tables("AWVz10POSTEN"),AWVz10POSTENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz10POSTEN) Is Nothing) Then
                Me.tableAWVz10POSTEN.InitVars
            End If
        End If
        Me.tableAWVz14 = CType(MyBase.Tables("AWVz14"),AWVz14DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz14) Is Nothing) Then
                Me.tableAWVz14.InitVars
            End If
        End If
        Me.tableAWVz1415RelevantData = CType(MyBase.Tables("AWVz1415RelevantData"),AWVz1415RelevantDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz1415RelevantData) Is Nothing) Then
                Me.tableAWVz1415RelevantData.InitVars
            End If
        End If
        Me.tableAWVz14z15 = CType(MyBase.Tables("AWVz14z15"),AWVz14z15DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz14z15) Is Nothing) Then
                Me.tableAWVz14z15.InitVars
            End If
        End If
        Me.tableAWVz15 = CType(MyBase.Tables("AWVz15"),AWVz15DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz15) Is Nothing) Then
                Me.tableAWVz15.InitVars
            End If
        End If
        Me.tableAWVz4DIKAPPOSTEN = CType(MyBase.Tables("AWVz4DIKAPPOSTEN"),AWVz4DIKAPPOSTENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz4DIKAPPOSTEN) Is Nothing) Then
                Me.tableAWVz4DIKAPPOSTEN.InitVars
            End If
        End If
        Me.tableAWVz4DIRINVPOSTEN = CType(MyBase.Tables("AWVz4DIRINVPOSTEN"),AWVz4DIRINVPOSTENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz4DIRINVPOSTEN) Is Nothing) Then
                Me.tableAWVz4DIRINVPOSTEN.InitVars
            End If
        End If
        Me.tableAWVz4TRANSITPOSTEN = CType(MyBase.Tables("AWVz4TRANSITPOSTEN"),AWVz4TRANSITPOSTENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz4TRANSITPOSTEN) Is Nothing) Then
                Me.tableAWVz4TRANSITPOSTEN.InitVars
            End If
        End If
        Me.tableBANK = CType(MyBase.Tables("BANK"),BANKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBANK) Is Nothing) Then
                Me.tableBANK.InitVars
            End If
        End If
        Me.tableCOUNTRIES = CType(MyBase.Tables("COUNTRIES"),COUNTRIESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOUNTRIES) Is Nothing) Then
                Me.tableCOUNTRIES.InitVars
            End If
        End If
        Me.tableZINSERTRAG_KUNDEN_DETAILS = CType(MyBase.Tables("ZINSERTRAG KUNDEN DETAILS"),ZINSERTRAG_KUNDEN_DETAILSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZINSERTRAG_KUNDEN_DETAILS) Is Nothing) Then
                Me.tableZINSERTRAG_KUNDEN_DETAILS.InitVars
            End If
        End If
        Me.tableZINSERTRAG_KUNDEN_JAHR = CType(MyBase.Tables("ZINSERTRAG KUNDEN JAHR"),ZINSERTRAG_KUNDEN_JAHRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZINSERTRAG_KUNDEN_JAHR) Is Nothing) Then
                Me.tableZINSERTRAG_KUNDEN_JAHR.InitVars
            End If
        End If
        Me.tableZINSERTRAG_KUNDEN_MONAT = CType(MyBase.Tables("ZINSERTRAG KUNDEN MONAT"),ZINSERTRAG_KUNDEN_MONATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZINSERTRAG_KUNDEN_MONAT) Is Nothing) Then
                Me.tableZINSERTRAG_KUNDEN_MONAT.InitVars
            End If
        End If
        Me.tableEMPLOYES_YEAR_AVERAGE = CType(MyBase.Tables("EMPLOYES YEAR AVERAGE"),EMPLOYES_YEAR_AVERAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPLOYES_YEAR_AVERAGE) Is Nothing) Then
                Me.tableEMPLOYES_YEAR_AVERAGE.InitVars
            End If
        End If
        Me.tableZVSTA_FormsTill2013 = CType(MyBase.Tables("ZVSTA_FormsTill2013"),ZVSTA_FormsTill2013DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTA_FormsTill2013) Is Nothing) Then
                Me.tableZVSTA_FormsTill2013.InitVars
            End If
        End If
        Me.tableZVSTA_ProdTill2013 = CType(MyBase.Tables("ZVSTA_ProdTill2013"),ZVSTA_ProdTill2013DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTA_ProdTill2013) Is Nothing) Then
                Me.tableZVSTA_ProdTill2013.InitVars
            End If
        End If
        Me.tableZVSTATill2013 = CType(MyBase.Tables("ZVSTATill2013"),ZVSTATill2013DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTATill2013) Is Nothing) Then
                Me.tableZVSTATill2013.InitVars
            End If
        End If
        Me.tableZVSTAT_Parameters_from2014 = CType(MyBase.Tables("ZVSTAT_Parameters_from2014"),ZVSTAT_Parameters_from2014DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTAT_Parameters_from2014) Is Nothing) Then
                Me.tableZVSTAT_Parameters_from2014.InitVars
            End If
        End If
        Me.tableZVSTAT_Details_from2014 = CType(MyBase.Tables("ZVSTAT_Details_from2014"),ZVSTAT_Details_from2014DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTAT_Details_from2014) Is Nothing) Then
                Me.tableZVSTAT_Details_from2014.InitVars
            End If
        End If
        Me.tableZVSTAT_MeldeJahr_from2014 = CType(MyBase.Tables("ZVSTAT_MeldeJahr_from2014"),ZVSTAT_MeldeJahr_from2014DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTAT_MeldeJahr_from2014) Is Nothing) Then
                Me.tableZVSTAT_MeldeJahr_from2014.InitVars
            End If
        End If
        Me.tableZVSTAT_Meldepositionen_from2014 = CType(MyBase.Tables("ZVSTAT_Meldepositionen_from2014"),ZVSTAT_Meldepositionen_from2014DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTAT_Meldepositionen_from2014) Is Nothing) Then
                Me.tableZVSTAT_Meldepositionen_from2014.InitVars
            End If
        End If
        Me.tableZVSTAT_Meldeschemas_from2014 = CType(MyBase.Tables("ZVSTAT_Meldeschemas_from2014"),ZVSTAT_Meldeschemas_from2014DataTable)
        If (initTable = true) Then
            If (Not (Me.tableZVSTAT_Meldeschemas_from2014) Is Nothing) Then
                Me.tableZVSTAT_Meldeschemas_from2014.InitVars
            End If
        End If
        Me.tableAWVz11POSTEN = CType(MyBase.Tables("AWVz11POSTEN"),AWVz11POSTENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAWVz11POSTEN) Is Nothing) Then
                Me.tableAWVz11POSTEN.InitVars
            End If
        End If
        Me.tableMIFIR = CType(MyBase.Tables("MIFIR"),MIFIRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMIFIR) Is Nothing) Then
                Me.tableMIFIR.InitVars
            End If
        End If
        Me.relationAWVz10POSTEN_FK00 = Me.Relations("AWVz10POSTEN_FK00")
        Me.relationAWVz14_FK00 = Me.Relations("AWVz14_FK00")
        Me.relationAWVz1415RelevantData_FK00 = Me.Relations("AWVz1415RelevantData_FK00")
        Me.relationAWVz15_FK00 = Me.Relations("AWVz15_FK00")
        Me.relationAWVz4DIKAPPOSTEN_FK00 = Me.Relations("AWVz4DIKAPPOSTEN_FK00")
        Me.relationAWVz4DIRINVPOSTEN_FK00 = Me.Relations("AWVz4DIRINVPOSTEN_FK00")
        Me.relationAWVz4TRANSITPOSTEN_FK00 = Me.Relations("AWVz4TRANSITPOSTEN_FK00")
        Me.relationZINSERTRAG_KUNDEN_DETAILS_FK00 = Me.Relations("ZINSERTRAG KUNDEN DETAILS_FK00")
        Me.relationZINSERTRAG_KUNDEN_MONAT_FK00 = Me.Relations("ZINSERTRAG KUNDEN MONAT_FK00")
        Me.relationFK_ZVSTA_Formstill2013_ZVSTAtill2013 = Me.Relations("FK_ZVSTA_Formstill2013_ZVSTAtill2013")
        Me.relationFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013 = Me.Relations("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013")
        Me.relationFK_Meldepositionen_from2014 = Me.Relations("FK_Meldepositionen_from2014")
        Me.relationFK_ZVSTAT_Meldeschemas_from2014 = Me.Relations("FK_ZVSTAT_Meldeschemas_from2014")
        Me.relationFK_MeldeJahr_from2014 = Me.Relations("FK_MeldeJahr_from2014")
        Me.relationFK_AWVz11POSTEN_AWVz14z15 = Me.Relations("FK_AWVz11POSTEN_AWVz14z15")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "MeldewesenDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MeldewesenDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAWVz10POSTEN = New AWVz10POSTENDataTable()
        MyBase.Tables.Add(Me.tableAWVz10POSTEN)
        Me.tableAWVz14 = New AWVz14DataTable()
        MyBase.Tables.Add(Me.tableAWVz14)
        Me.tableAWVz1415RelevantData = New AWVz1415RelevantDataDataTable()
        MyBase.Tables.Add(Me.tableAWVz1415RelevantData)
        Me.tableAWVz14z15 = New AWVz14z15DataTable()
        MyBase.Tables.Add(Me.tableAWVz14z15)
        Me.tableAWVz15 = New AWVz15DataTable()
        MyBase.Tables.Add(Me.tableAWVz15)
        Me.tableAWVz4DIKAPPOSTEN = New AWVz4DIKAPPOSTENDataTable()
        MyBase.Tables.Add(Me.tableAWVz4DIKAPPOSTEN)
        Me.tableAWVz4DIRINVPOSTEN = New AWVz4DIRINVPOSTENDataTable()
        MyBase.Tables.Add(Me.tableAWVz4DIRINVPOSTEN)
        Me.tableAWVz4TRANSITPOSTEN = New AWVz4TRANSITPOSTENDataTable()
        MyBase.Tables.Add(Me.tableAWVz4TRANSITPOSTEN)
        Me.tableBANK = New BANKDataTable()
        MyBase.Tables.Add(Me.tableBANK)
        Me.tableCOUNTRIES = New COUNTRIESDataTable()
        MyBase.Tables.Add(Me.tableCOUNTRIES)
        Me.tableZINSERTRAG_KUNDEN_DETAILS = New ZINSERTRAG_KUNDEN_DETAILSDataTable()
        MyBase.Tables.Add(Me.tableZINSERTRAG_KUNDEN_DETAILS)
        Me.tableZINSERTRAG_KUNDEN_JAHR = New ZINSERTRAG_KUNDEN_JAHRDataTable()
        MyBase.Tables.Add(Me.tableZINSERTRAG_KUNDEN_JAHR)
        Me.tableZINSERTRAG_KUNDEN_MONAT = New ZINSERTRAG_KUNDEN_MONATDataTable()
        MyBase.Tables.Add(Me.tableZINSERTRAG_KUNDEN_MONAT)
        Me.tableEMPLOYES_YEAR_AVERAGE = New EMPLOYES_YEAR_AVERAGEDataTable()
        MyBase.Tables.Add(Me.tableEMPLOYES_YEAR_AVERAGE)
        Me.tableZVSTA_FormsTill2013 = New ZVSTA_FormsTill2013DataTable()
        MyBase.Tables.Add(Me.tableZVSTA_FormsTill2013)
        Me.tableZVSTA_ProdTill2013 = New ZVSTA_ProdTill2013DataTable()
        MyBase.Tables.Add(Me.tableZVSTA_ProdTill2013)
        Me.tableZVSTATill2013 = New ZVSTATill2013DataTable()
        MyBase.Tables.Add(Me.tableZVSTATill2013)
        Me.tableZVSTAT_Parameters_from2014 = New ZVSTAT_Parameters_from2014DataTable()
        MyBase.Tables.Add(Me.tableZVSTAT_Parameters_from2014)
        Me.tableZVSTAT_Details_from2014 = New ZVSTAT_Details_from2014DataTable()
        MyBase.Tables.Add(Me.tableZVSTAT_Details_from2014)
        Me.tableZVSTAT_MeldeJahr_from2014 = New ZVSTAT_MeldeJahr_from2014DataTable()
        MyBase.Tables.Add(Me.tableZVSTAT_MeldeJahr_from2014)
        Me.tableZVSTAT_Meldepositionen_from2014 = New ZVSTAT_Meldepositionen_from2014DataTable()
        MyBase.Tables.Add(Me.tableZVSTAT_Meldepositionen_from2014)
        Me.tableZVSTAT_Meldeschemas_from2014 = New ZVSTAT_Meldeschemas_from2014DataTable()
        MyBase.Tables.Add(Me.tableZVSTAT_Meldeschemas_from2014)
        Me.tableAWVz11POSTEN = New AWVz11POSTENDataTable()
        MyBase.Tables.Add(Me.tableAWVz11POSTEN)
        Me.tableMIFIR = New MIFIRDataTable()
        MyBase.Tables.Add(Me.tableMIFIR)
        Me.relationAWVz10POSTEN_FK00 = New Global.System.Data.DataRelation("AWVz10POSTEN_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz10POSTEN.IdAWVz14z15Column}, false)
        Me.Relations.Add(Me.relationAWVz10POSTEN_FK00)
        Me.relationAWVz14_FK00 = New Global.System.Data.DataRelation("AWVz14_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz14.IdZ14Z15MeldemonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz14_FK00)
        Me.relationAWVz1415RelevantData_FK00 = New Global.System.Data.DataRelation("AWVz1415RelevantData_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz1415RelevantData.IdZ14Z15MeldemonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz1415RelevantData_FK00)
        Me.relationAWVz15_FK00 = New Global.System.Data.DataRelation("AWVz15_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz15.IdZ14Z15MeldemonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz15_FK00)
        Me.relationAWVz4DIKAPPOSTEN_FK00 = New Global.System.Data.DataRelation("AWVz4DIKAPPOSTEN_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz4DIKAPPOSTEN.DIKA_MeldeMonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz4DIKAPPOSTEN_FK00)
        Me.relationAWVz4DIRINVPOSTEN_FK00 = New Global.System.Data.DataRelation("AWVz4DIRINVPOSTEN_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz4DIRINVPOSTEN.DIRINV_MeldeMonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz4DIRINVPOSTEN_FK00)
        Me.relationAWVz4TRANSITPOSTEN_FK00 = New Global.System.Data.DataRelation("AWVz4TRANSITPOSTEN_FK00", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz4TRANSITPOSTEN.TRANSIT_MeldeMonatColumn}, false)
        Me.Relations.Add(Me.relationAWVz4TRANSITPOSTEN_FK00)
        Me.relationZINSERTRAG_KUNDEN_DETAILS_FK00 = New Global.System.Data.DataRelation("ZINSERTRAG KUNDEN DETAILS_FK00", New Global.System.Data.DataColumn() {Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatColumn}, New Global.System.Data.DataColumn() {Me.tableZINSERTRAG_KUNDEN_DETAILS.IdZinsertragsMonatColumn}, false)
        Me.Relations.Add(Me.relationZINSERTRAG_KUNDEN_DETAILS_FK00)
        Me.relationZINSERTRAG_KUNDEN_MONAT_FK00 = New Global.System.Data.DataRelation("ZINSERTRAG KUNDEN MONAT_FK00", New Global.System.Data.DataColumn() {Me.tableZINSERTRAG_KUNDEN_JAHR.ErtragsJahrColumn}, New Global.System.Data.DataColumn() {Me.tableZINSERTRAG_KUNDEN_MONAT.IdZinsertragJahrColumn}, false)
        Me.Relations.Add(Me.relationZINSERTRAG_KUNDEN_MONAT_FK00)
        Me.relationFK_ZVSTA_Formstill2013_ZVSTAtill2013 = New Global.System.Data.DataRelation("FK_ZVSTA_Formstill2013_ZVSTAtill2013", New Global.System.Data.DataColumn() {Me.tableZVSTATill2013.ZVSTAMeldeJahrColumn}, New Global.System.Data.DataColumn() {Me.tableZVSTA_FormsTill2013.IdZVSTA_MeldejahrColumn}, false)
        Me.Relations.Add(Me.relationFK_ZVSTA_Formstill2013_ZVSTAtill2013)
        Me.relationFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013 = New Global.System.Data.DataRelation("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013", New Global.System.Data.DataColumn() {Me.tableZVSTA_FormsTill2013.FormSchemaColumn}, New Global.System.Data.DataColumn() {Me.tableZVSTA_ProdTill2013.IdZVSTA_FormsColumn}, false)
        Me.Relations.Add(Me.relationFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013)
        Me.relationFK_Meldepositionen_from2014 = New Global.System.Data.DataRelation("FK_Meldepositionen_from2014", New Global.System.Data.DataColumn() {Me.tableZVSTAT_Meldepositionen_from2014.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZVSTAT_Details_from2014.IdMeldepositionenColumn}, false)
        Me.Relations.Add(Me.relationFK_Meldepositionen_from2014)
        Me.relationFK_ZVSTAT_Meldeschemas_from2014 = New Global.System.Data.DataRelation("FK_ZVSTAT_Meldeschemas_from2014", New Global.System.Data.DataColumn() {Me.tableZVSTAT_Meldeschemas_from2014.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZVSTAT_Meldepositionen_from2014.IdMeldeschemasColumn}, false)
        Me.Relations.Add(Me.relationFK_ZVSTAT_Meldeschemas_from2014)
        Me.relationFK_MeldeJahr_from2014 = New Global.System.Data.DataRelation("FK_MeldeJahr_from2014", New Global.System.Data.DataColumn() {Me.tableZVSTAT_MeldeJahr_from2014.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZVSTAT_Meldeschemas_from2014.IdMeldeJahrColumn}, false)
        Me.Relations.Add(Me.relationFK_MeldeJahr_from2014)
        Me.relationFK_AWVz11POSTEN_AWVz14z15 = New Global.System.Data.DataRelation("FK_AWVz11POSTEN_AWVz14z15", New Global.System.Data.DataColumn() {Me.tableAWVz14z15.Z14Z15MeldeMonatColumn}, New Global.System.Data.DataColumn() {Me.tableAWVz11POSTEN.IdAWVz14z15Column}, false)
        Me.Relations.Add(Me.relationFK_AWVz11POSTEN_AWVz14z15)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz10POSTEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz14() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz1415RelevantData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz14z15() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz15() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz4DIKAPPOSTEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz4DIRINVPOSTEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz4TRANSITPOSTEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeBANK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeCOUNTRIES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZINSERTRAG_KUNDEN_DETAILS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZINSERTRAG_KUNDEN_JAHR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZINSERTRAG_KUNDEN_MONAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeEMPLOYES_YEAR_AVERAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTA_FormsTill2013() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTA_ProdTill2013() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTATill2013() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTAT_Parameters_from2014() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTAT_Details_from2014() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTAT_MeldeJahr_from2014() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTAT_Meldepositionen_from2014() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeZVSTAT_Meldeschemas_from2014() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAWVz11POSTEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeMIFIR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz10POSTENRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz10POSTENRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz14RowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz14RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz1415RelevantDataRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz1415RelevantDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz14z15RowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz14z15RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz15RowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz15RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz4DIKAPPOSTENRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz4DIKAPPOSTENRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz4DIRINVPOSTENRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz4DIRINVPOSTENRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz4TRANSITPOSTENRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz4TRANSITPOSTENRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub BANKRowChangeEventHandler(ByVal sender As Object, ByVal e As BANKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub COUNTRIESRowChangeEventHandler(ByVal sender As Object, ByVal e As COUNTRIESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZINSERTRAG_KUNDEN_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZINSERTRAG_KUNDEN_JAHRRowChangeEventHandler(ByVal sender As Object, ByVal e As ZINSERTRAG_KUNDEN_JAHRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZINSERTRAG_KUNDEN_MONATRowChangeEventHandler(ByVal sender As Object, ByVal e As ZINSERTRAG_KUNDEN_MONATRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub EMPLOYES_YEAR_AVERAGERowChangeEventHandler(ByVal sender As Object, ByVal e As EMPLOYES_YEAR_AVERAGERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTA_FormsTill2013RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTA_FormsTill2013RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTA_ProdTill2013RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTA_ProdTill2013RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTATill2013RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTATill2013RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTAT_Parameters_from2014RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTAT_Parameters_from2014RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTAT_Details_from2014RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTAT_Details_from2014RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTAT_MeldeJahr_from2014RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTAT_MeldeJahr_from2014RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTAT_Meldepositionen_from2014RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTAT_Meldepositionen_from2014RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ZVSTAT_Meldeschemas_from2014RowChangeEventHandler(ByVal sender As Object, ByVal e As ZVSTAT_Meldeschemas_from2014RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AWVz11POSTENRowChangeEventHandler(ByVal sender As Object, ByVal e As AWVz11POSTENRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub MIFIRRowChangeEventHandler(ByVal sender As Object, ByVal e As MIFIRRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz10POSTENDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz10POSTENRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnBELEGART As Global.System.Data.DataColumn
        
        Private columnKENNZAHL As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_ISIN As Global.System.Data.DataColumn
        
        Private columnWERTAPPIER_BEZEICHNUNG As Global.System.Data.DataColumn
        
        Private columnNOMINAL_STUECK As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_SoN As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_LAND_ISOCODE As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_LAND_NAME As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_WHG As Global.System.Data.DataColumn
        
        Private columnWERTPAPIER_BETRAG As Global.System.Data.DataColumn
        
        Private columnIdAWVz14z15 As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz10POSTEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BELEGARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBELEGART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property KENNZAHLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKENNZAHL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_ISINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_ISIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTAPPIER_BEZEICHNUNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTAPPIER_BEZEICHNUNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOMINAL_STUECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMINAL_STUECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_SoNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_SoN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_LAND_ISOCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_LAND_ISOCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_LAND_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_LAND_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_WHGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_WHG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WERTPAPIER_BETRAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWERTPAPIER_BETRAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdAWVz14z15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAWVz14z15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz10POSTENRow
            Get
                Return CType(Me.Rows(index),AWVz10POSTENRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz10POSTENRowChanging As AWVz10POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz10POSTENRowChanged As AWVz10POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz10POSTENRowDeleting As AWVz10POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz10POSTENRowDeleted As AWVz10POSTENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz10POSTENRow(ByVal row As AWVz10POSTENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz10POSTENRow(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal WERTPAPIER_ISIN As String, ByVal WERTAPPIER_BEZEICHNUNG As String, ByVal NOMINAL_STUECK As String, ByVal WERTPAPIER_SoN As Double, ByVal WERTPAPIER_LAND_ISOCODE As String, ByVal WERTPAPIER_LAND_NAME As String, ByVal WERTPAPIER_WHG As String, ByVal WERTPAPIER_BETRAG As Double, ByVal parentAWVz14z15RowByAWVz10POSTEN_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz10POSTENRow
            Dim rowAWVz10POSTENRow As AWVz10POSTENRow = CType(Me.NewRow,AWVz10POSTENRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, BELEGART, KENNZAHL, WERTPAPIER_ISIN, WERTAPPIER_BEZEICHNUNG, NOMINAL_STUECK, WERTPAPIER_SoN, WERTPAPIER_LAND_ISOCODE, WERTPAPIER_LAND_NAME, WERTPAPIER_WHG, WERTPAPIER_BETRAG, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz10POSTEN_FK00) Is Nothing) Then
                columnValuesArray(11) = parentAWVz14z15RowByAWVz10POSTEN_FK00(1)
            End If
            rowAWVz10POSTENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz10POSTENRow)
            Return rowAWVz10POSTENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz10POSTENRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz10POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz10POSTENDataTable = CType(MyBase.Clone,AWVz10POSTENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz10POSTENDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnBELEGART = MyBase.Columns("BELEGART")
            Me.columnKENNZAHL = MyBase.Columns("KENNZAHL")
            Me.columnWERTPAPIER_ISIN = MyBase.Columns("WERTPAPIER_ISIN")
            Me.columnWERTAPPIER_BEZEICHNUNG = MyBase.Columns("WERTAPPIER_BEZEICHNUNG")
            Me.columnNOMINAL_STUECK = MyBase.Columns("NOMINAL_STUECK")
            Me.columnWERTPAPIER_SoN = MyBase.Columns("WERTPAPIER_SoN")
            Me.columnWERTPAPIER_LAND_ISOCODE = MyBase.Columns("WERTPAPIER_LAND_ISOCODE")
            Me.columnWERTPAPIER_LAND_NAME = MyBase.Columns("WERTPAPIER_LAND_NAME")
            Me.columnWERTPAPIER_WHG = MyBase.Columns("WERTPAPIER_WHG")
            Me.columnWERTPAPIER_BETRAG = MyBase.Columns("WERTPAPIER_BETRAG")
            Me.columnIdAWVz14z15 = MyBase.Columns("IdAWVz14z15")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnBELEGART = New Global.System.Data.DataColumn("BELEGART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBELEGART)
            Me.columnKENNZAHL = New Global.System.Data.DataColumn("KENNZAHL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKENNZAHL)
            Me.columnWERTPAPIER_ISIN = New Global.System.Data.DataColumn("WERTPAPIER_ISIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_ISIN)
            Me.columnWERTAPPIER_BEZEICHNUNG = New Global.System.Data.DataColumn("WERTAPPIER_BEZEICHNUNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTAPPIER_BEZEICHNUNG)
            Me.columnNOMINAL_STUECK = New Global.System.Data.DataColumn("NOMINAL_STUECK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMINAL_STUECK)
            Me.columnWERTPAPIER_SoN = New Global.System.Data.DataColumn("WERTPAPIER_SoN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_SoN)
            Me.columnWERTPAPIER_LAND_ISOCODE = New Global.System.Data.DataColumn("WERTPAPIER_LAND_ISOCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_LAND_ISOCODE)
            Me.columnWERTPAPIER_LAND_NAME = New Global.System.Data.DataColumn("WERTPAPIER_LAND_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_LAND_NAME)
            Me.columnWERTPAPIER_WHG = New Global.System.Data.DataColumn("WERTPAPIER_WHG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_WHG)
            Me.columnWERTPAPIER_BETRAG = New Global.System.Data.DataColumn("WERTPAPIER_BETRAG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWERTPAPIER_BETRAG)
            Me.columnIdAWVz14z15 = New Global.System.Data.DataColumn("IdAWVz14z15", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAWVz14z15)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnBELEGART.MaxLength = 255
            Me.columnKENNZAHL.MaxLength = 255
            Me.columnWERTPAPIER_ISIN.MaxLength = 255
            Me.columnWERTAPPIER_BEZEICHNUNG.MaxLength = 255
            Me.columnNOMINAL_STUECK.MaxLength = 255
            Me.columnWERTPAPIER_LAND_ISOCODE.MaxLength = 255
            Me.columnWERTPAPIER_LAND_NAME.MaxLength = 255
            Me.columnWERTPAPIER_WHG.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz10POSTENRow() As AWVz10POSTENRow
            Return CType(Me.NewRow,AWVz10POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz10POSTENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz10POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz10POSTENRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz10POSTENRowChanged(Me, New AWVz10POSTENRowChangeEvent(CType(e.Row,AWVz10POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz10POSTENRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz10POSTENRowChanging(Me, New AWVz10POSTENRowChangeEvent(CType(e.Row,AWVz10POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz10POSTENRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz10POSTENRowDeleted(Me, New AWVz10POSTENRowChangeEvent(CType(e.Row,AWVz10POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz10POSTENRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz10POSTENRowDeleting(Me, New AWVz10POSTENRowChangeEvent(CType(e.Row,AWVz10POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz10POSTENRow(ByVal row As AWVz10POSTENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz10POSTENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz14DataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz14Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCLASS As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_CODE As Global.System.Data.DataColumn
        
        Private columnLANDKZ As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME_DE As Global.System.Data.DataColumn
        
        Private columnCountrySumAmount As Global.System.Data.DataColumn
        
        Private columnIdZ14Z15Meldemonat As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz14"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LANDKZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANDKZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAME_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CountrySumAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountrySumAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZ14Z15MeldemonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZ14Z15Meldemonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz14Row
            Get
                Return CType(Me.Rows(index),AWVz14Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14RowChanging As AWVz14RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14RowChanged As AWVz14RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14RowDeleting As AWVz14RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14RowDeleted As AWVz14RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz14Row(ByVal row As AWVz14Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz14Row(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Double, ByVal parentAWVz14z15RowByAWVz14_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz14Row
            Dim rowAWVz14Row As AWVz14Row = CType(Me.NewRow,AWVz14Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, _CLASS, COUNTRY_CODE, LANDKZ, COUNTRY_NAME, COUNTRY_NAME_DE, CountrySumAmount, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz14_FK00) Is Nothing) Then
                columnValuesArray(7) = parentAWVz14z15RowByAWVz14_FK00(1)
            End If
            rowAWVz14Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz14Row)
            Return rowAWVz14Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz14Row
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz14DataTable = CType(MyBase.Clone,AWVz14DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz14DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCLASS = MyBase.Columns("CLASS")
            Me.columnCOUNTRY_CODE = MyBase.Columns("COUNTRY CODE")
            Me.columnLANDKZ = MyBase.Columns("LANDKZ")
            Me.columnCOUNTRY_NAME = MyBase.Columns("COUNTRY NAME")
            Me.columnCOUNTRY_NAME_DE = MyBase.Columns("COUNTRY NAME DE")
            Me.columnCountrySumAmount = MyBase.Columns("CountrySumAmount")
            Me.columnIdZ14Z15Meldemonat = MyBase.Columns("IdZ14Z15Meldemonat")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCLASS = New Global.System.Data.DataColumn("CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnCLASS.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CLASSColumn")
            Me.columnCLASS.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCLASS")
            Me.columnCLASS.ExtendedProperties.Add("Generator_UserColumnName", "CLASS")
            MyBase.Columns.Add(Me.columnCLASS)
            Me.columnCOUNTRY_CODE = New Global.System.Data.DataColumn("COUNTRY CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_CODE)
            Me.columnLANDKZ = New Global.System.Data.DataColumn("LANDKZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANDKZ)
            Me.columnCOUNTRY_NAME = New Global.System.Data.DataColumn("COUNTRY NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME)
            Me.columnCOUNTRY_NAME_DE = New Global.System.Data.DataColumn("COUNTRY NAME DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME_DE)
            Me.columnCountrySumAmount = New Global.System.Data.DataColumn("CountrySumAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountrySumAmount)
            Me.columnIdZ14Z15Meldemonat = New Global.System.Data.DataColumn("IdZ14Z15Meldemonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZ14Z15Meldemonat)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCLASS.MaxLength = 255
            Me.columnCOUNTRY_CODE.MaxLength = 255
            Me.columnLANDKZ.MaxLength = 255
            Me.columnCOUNTRY_NAME.MaxLength = 255
            Me.columnCOUNTRY_NAME_DE.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz14Row() As AWVz14Row
            Return CType(Me.NewRow,AWVz14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz14Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz14RowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz14RowChanged(Me, New AWVz14RowChangeEvent(CType(e.Row,AWVz14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz14RowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz14RowChanging(Me, New AWVz14RowChangeEvent(CType(e.Row,AWVz14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz14RowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz14RowDeleted(Me, New AWVz14RowChangeEvent(CType(e.Row,AWVz14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz14RowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz14RowDeleting(Me, New AWVz14RowChangeEvent(CType(e.Row,AWVz14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz14Row(ByVal row As AWVz14Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz14DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz1415RelevantDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz1415RelevantDataRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClass As Global.System.Data.DataColumn
        
        Private columnContract As Global.System.Data.DataColumn
        
        Private columnCounterparty_Name As Global.System.Data.DataColumn
        
        Private columnCounterparty_No As Global.System.Data.DataColumn
        
        Private columnCountryCode As Global.System.Data.DataColumn
        
        Private columnTrade_Date As Global.System.Data.DataColumn
        
        Private columnStart_Date As Global.System.Data.DataColumn
        
        Private columnFinal_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnCurrent_Interest_Coupon_Period_End_Date As Global.System.Data.DataColumn
        
        Private columnInterest_Coupon_Amount_EUR_Equ As Global.System.Data.DataColumn
        
        Private columnAIARasof As Global.System.Data.DataColumn
        
        Private columnAIARrepdate As Global.System.Data.DataColumn
        
        Private columnCheckingDate As Global.System.Data.DataColumn
        
        Private columnInput As Global.System.Data.DataColumn
        
        Private columnIdZ14Z15Meldemonat As Global.System.Data.DataColumn
        
        Private columnInternalInfo As Global.System.Data.DataColumn
        
        Private columnOrigCCY As Global.System.Data.DataColumn
        
        Private columnInterest_Coupon_Amount_OrigCCY As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz1415RelevantData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Counterparty_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterparty_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Counterparty_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterparty_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CountryCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountryCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Trade_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrade_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Start_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Current_Interest_Coupon_Period_End_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrent_Interest_Coupon_Period_End_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Interest_Coupon_Amount_EUR_EquColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest_Coupon_Amount_EUR_Equ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AIARasofColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIARasof
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AIARrepdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIARrepdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CheckingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InputColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInput
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZ14Z15MeldemonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZ14Z15Meldemonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InternalInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInternalInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OrigCCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Interest_Coupon_Amount_OrigCCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest_Coupon_Amount_OrigCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz1415RelevantDataRow
            Get
                Return CType(Me.Rows(index),AWVz1415RelevantDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz1415RelevantDataRowChanging As AWVz1415RelevantDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz1415RelevantDataRowChanged As AWVz1415RelevantDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz1415RelevantDataRowDeleting As AWVz1415RelevantDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz1415RelevantDataRowDeleted As AWVz1415RelevantDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz1415RelevantDataRow(ByVal row As AWVz1415RelevantDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz1415RelevantDataRow( _
                    ByVal _Class As String,  _
                    ByVal Contract As String,  _
                    ByVal Counterparty_Name As String,  _
                    ByVal Counterparty_No As String,  _
                    ByVal CountryCode As String,  _
                    ByVal Trade_Date As Date,  _
                    ByVal Start_Date As Date,  _
                    ByVal Final_Maturity_Date As Date,  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Date,  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Double,  _
                    ByVal AIARasof As Date,  _
                    ByVal AIARrepdate As Date,  _
                    ByVal CheckingDate As Date,  _
                    ByVal Input As String,  _
                    ByVal parentAWVz14z15RowByAWVz1415RelevantData_FK00 As AWVz14z15Row,  _
                    ByVal InternalInfo As String,  _
                    ByVal OrigCCY As String,  _
                    ByVal Interest_Coupon_Amount_OrigCCY As Double,  _
                    ByVal ExchangeRate As Double) As AWVz1415RelevantDataRow
            Dim rowAWVz1415RelevantDataRow As AWVz1415RelevantDataRow = CType(Me.NewRow,AWVz1415RelevantDataRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, _Class, Contract, Counterparty_Name, Counterparty_No, CountryCode, Trade_Date, Start_Date, Final_Maturity_Date, Current_Interest_Coupon_Period_End_Date, Interest_Coupon_Amount_EUR_Equ, AIARasof, AIARrepdate, CheckingDate, Input, Nothing, InternalInfo, OrigCCY, Interest_Coupon_Amount_OrigCCY, ExchangeRate}
            If (Not (parentAWVz14z15RowByAWVz1415RelevantData_FK00) Is Nothing) Then
                columnValuesArray(15) = parentAWVz14z15RowByAWVz1415RelevantData_FK00(1)
            End If
            rowAWVz1415RelevantDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz1415RelevantDataRow)
            Return rowAWVz1415RelevantDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz1415RelevantDataRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz1415RelevantDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz1415RelevantDataDataTable = CType(MyBase.Clone,AWVz1415RelevantDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz1415RelevantDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClass = MyBase.Columns("Class")
            Me.columnContract = MyBase.Columns("Contract")
            Me.columnCounterparty_Name = MyBase.Columns("Counterparty Name")
            Me.columnCounterparty_No = MyBase.Columns("Counterparty No")
            Me.columnCountryCode = MyBase.Columns("CountryCode")
            Me.columnTrade_Date = MyBase.Columns("Trade Date")
            Me.columnStart_Date = MyBase.Columns("Start Date")
            Me.columnFinal_Maturity_Date = MyBase.Columns("Final Maturity Date")
            Me.columnCurrent_Interest_Coupon_Period_End_Date = MyBase.Columns("Current Interest Coupon Period End Date")
            Me.columnInterest_Coupon_Amount_EUR_Equ = MyBase.Columns("Interest Coupon Amount EUR Equ")
            Me.columnAIARasof = MyBase.Columns("AIARasof")
            Me.columnAIARrepdate = MyBase.Columns("AIARrepdate")
            Me.columnCheckingDate = MyBase.Columns("CheckingDate")
            Me.columnInput = MyBase.Columns("Input")
            Me.columnIdZ14Z15Meldemonat = MyBase.Columns("IdZ14Z15Meldemonat")
            Me.columnInternalInfo = MyBase.Columns("InternalInfo")
            Me.columnOrigCCY = MyBase.Columns("OrigCCY")
            Me.columnInterest_Coupon_Amount_OrigCCY = MyBase.Columns("Interest Coupon Amount OrigCCY")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClass = New Global.System.Data.DataColumn("Class", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnClass.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ClassColumn")
            Me.columnClass.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnClass")
            Me.columnClass.ExtendedProperties.Add("Generator_UserColumnName", "Class")
            MyBase.Columns.Add(Me.columnClass)
            Me.columnContract = New Global.System.Data.DataColumn("Contract", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract)
            Me.columnCounterparty_Name = New Global.System.Data.DataColumn("Counterparty Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterparty_Name)
            Me.columnCounterparty_No = New Global.System.Data.DataColumn("Counterparty No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterparty_No)
            Me.columnCountryCode = New Global.System.Data.DataColumn("CountryCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountryCode)
            Me.columnTrade_Date = New Global.System.Data.DataColumn("Trade Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrade_Date)
            Me.columnStart_Date = New Global.System.Data.DataColumn("Start Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStart_Date)
            Me.columnFinal_Maturity_Date = New Global.System.Data.DataColumn("Final Maturity Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Maturity_Date)
            Me.columnCurrent_Interest_Coupon_Period_End_Date = New Global.System.Data.DataColumn("Current Interest Coupon Period End Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrent_Interest_Coupon_Period_End_Date)
            Me.columnInterest_Coupon_Amount_EUR_Equ = New Global.System.Data.DataColumn("Interest Coupon Amount EUR Equ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest_Coupon_Amount_EUR_Equ)
            Me.columnAIARasof = New Global.System.Data.DataColumn("AIARasof", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIARasof)
            Me.columnAIARrepdate = New Global.System.Data.DataColumn("AIARrepdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIARrepdate)
            Me.columnCheckingDate = New Global.System.Data.DataColumn("CheckingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckingDate)
            Me.columnInput = New Global.System.Data.DataColumn("Input", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInput)
            Me.columnIdZ14Z15Meldemonat = New Global.System.Data.DataColumn("IdZ14Z15Meldemonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZ14Z15Meldemonat)
            Me.columnInternalInfo = New Global.System.Data.DataColumn("InternalInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInternalInfo)
            Me.columnOrigCCY = New Global.System.Data.DataColumn("OrigCCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigCCY)
            Me.columnInterest_Coupon_Amount_OrigCCY = New Global.System.Data.DataColumn("Interest Coupon Amount OrigCCY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest_Coupon_Amount_OrigCCY)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnClass.MaxLength = 255
            Me.columnContract.MaxLength = 255
            Me.columnCounterparty_Name.MaxLength = 255
            Me.columnCounterparty_No.MaxLength = 255
            Me.columnCountryCode.MaxLength = 255
            Me.columnInput.MaxLength = 255
            Me.columnInternalInfo.MaxLength = 255
            Me.columnOrigCCY.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz1415RelevantDataRow() As AWVz1415RelevantDataRow
            Return CType(Me.NewRow,AWVz1415RelevantDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz1415RelevantDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz1415RelevantDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz1415RelevantDataRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz1415RelevantDataRowChanged(Me, New AWVz1415RelevantDataRowChangeEvent(CType(e.Row,AWVz1415RelevantDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz1415RelevantDataRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz1415RelevantDataRowChanging(Me, New AWVz1415RelevantDataRowChangeEvent(CType(e.Row,AWVz1415RelevantDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz1415RelevantDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz1415RelevantDataRowDeleted(Me, New AWVz1415RelevantDataRowChangeEvent(CType(e.Row,AWVz1415RelevantDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz1415RelevantDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz1415RelevantDataRowDeleting(Me, New AWVz1415RelevantDataRowChangeEvent(CType(e.Row,AWVz1415RelevantDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz1415RelevantDataRow(ByVal row As AWVz1415RelevantDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz1415RelevantDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz14z15DataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz14z15Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnZ14Z15MeldeMonat As Global.System.Data.DataColumn
        
        Private columnZ14Z15MeldeMonatName As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        Private columnIdBank As Global.System.Data.DataColumn
        
        Private columnReportLocked As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz14z15"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Z14Z15MeldeMonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ14Z15MeldeMonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Z14Z15MeldeMonatNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ14Z15MeldeMonatName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdBankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReportLockedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportLocked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz14z15Row
            Get
                Return CType(Me.Rows(index),AWVz14z15Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14z15RowChanging As AWVz14z15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14z15RowChanged As AWVz14z15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14z15RowDeleting As AWVz14z15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz14z15RowDeleted As AWVz14z15RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz14z15Row(ByVal row As AWVz14z15Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz14z15Row(ByVal Z14Z15MeldeMonat As Date, ByVal Z14Z15MeldeMonatName As String, ByVal USER As String, ByVal IdBank As Integer, ByVal ReportLocked As Boolean) As AWVz14z15Row
            Dim rowAWVz14z15Row As AWVz14z15Row = CType(Me.NewRow,AWVz14z15Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, Z14Z15MeldeMonat, Z14Z15MeldeMonatName, USER, IdBank, ReportLocked}
            rowAWVz14z15Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz14z15Row)
            Return rowAWVz14z15Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByZ14Z15MeldeMonat(ByVal Z14Z15MeldeMonat As Date) As AWVz14z15Row
            Return CType(Me.Rows.Find(New Object() {Z14Z15MeldeMonat}),AWVz14z15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz14z15DataTable = CType(MyBase.Clone,AWVz14z15DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz14z15DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnZ14Z15MeldeMonat = MyBase.Columns("Z14Z15MeldeMonat")
            Me.columnZ14Z15MeldeMonatName = MyBase.Columns("Z14Z15MeldeMonatName")
            Me.columnUSER = MyBase.Columns("USER")
            Me.columnIdBank = MyBase.Columns("IdBank")
            Me.columnReportLocked = MyBase.Columns("ReportLocked")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnZ14Z15MeldeMonat = New Global.System.Data.DataColumn("Z14Z15MeldeMonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ14Z15MeldeMonat)
            Me.columnZ14Z15MeldeMonatName = New Global.System.Data.DataColumn("Z14Z15MeldeMonatName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ14Z15MeldeMonatName)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.columnIdBank = New Global.System.Data.DataColumn("IdBank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBank)
            Me.columnReportLocked = New Global.System.Data.DataColumn("ReportLocked", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportLocked)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnZ14Z15MeldeMonat}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnZ14Z15MeldeMonat.AllowDBNull = false
            Me.columnZ14Z15MeldeMonat.Unique = true
            Me.columnZ14Z15MeldeMonatName.MaxLength = 255
            Me.columnUSER.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz14z15Row() As AWVz14z15Row
            Return CType(Me.NewRow,AWVz14z15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz14z15Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz14z15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz14z15RowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz14z15RowChanged(Me, New AWVz14z15RowChangeEvent(CType(e.Row,AWVz14z15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz14z15RowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz14z15RowChanging(Me, New AWVz14z15RowChangeEvent(CType(e.Row,AWVz14z15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz14z15RowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz14z15RowDeleted(Me, New AWVz14z15RowChangeEvent(CType(e.Row,AWVz14z15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz14z15RowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz14z15RowDeleting(Me, New AWVz14z15RowChangeEvent(CType(e.Row,AWVz14z15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz14z15Row(ByVal row As AWVz14z15Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz14z15DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz15DataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz15Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCLASS As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_CODE As Global.System.Data.DataColumn
        
        Private columnLANDKZ As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME_DE As Global.System.Data.DataColumn
        
        Private columnCountrySumAmount As Global.System.Data.DataColumn
        
        Private columnIdZ14Z15Meldemonat As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz15"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LANDKZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANDKZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAME_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CountrySumAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountrySumAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZ14Z15MeldemonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZ14Z15Meldemonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz15Row
            Get
                Return CType(Me.Rows(index),AWVz15Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz15RowChanging As AWVz15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz15RowChanged As AWVz15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz15RowDeleting As AWVz15RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz15RowDeleted As AWVz15RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz15Row(ByVal row As AWVz15Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz15Row(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Double, ByVal parentAWVz14z15RowByAWVz15_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz15Row
            Dim rowAWVz15Row As AWVz15Row = CType(Me.NewRow,AWVz15Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, _CLASS, COUNTRY_CODE, LANDKZ, COUNTRY_NAME, COUNTRY_NAME_DE, CountrySumAmount, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz15_FK00) Is Nothing) Then
                columnValuesArray(7) = parentAWVz14z15RowByAWVz15_FK00(1)
            End If
            rowAWVz15Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz15Row)
            Return rowAWVz15Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz15Row
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz15DataTable = CType(MyBase.Clone,AWVz15DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz15DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCLASS = MyBase.Columns("CLASS")
            Me.columnCOUNTRY_CODE = MyBase.Columns("COUNTRY CODE")
            Me.columnLANDKZ = MyBase.Columns("LANDKZ")
            Me.columnCOUNTRY_NAME = MyBase.Columns("COUNTRY NAME")
            Me.columnCOUNTRY_NAME_DE = MyBase.Columns("COUNTRY NAME DE")
            Me.columnCountrySumAmount = MyBase.Columns("CountrySumAmount")
            Me.columnIdZ14Z15Meldemonat = MyBase.Columns("IdZ14Z15Meldemonat")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCLASS = New Global.System.Data.DataColumn("CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnCLASS.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CLASSColumn")
            Me.columnCLASS.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCLASS")
            Me.columnCLASS.ExtendedProperties.Add("Generator_UserColumnName", "CLASS")
            MyBase.Columns.Add(Me.columnCLASS)
            Me.columnCOUNTRY_CODE = New Global.System.Data.DataColumn("COUNTRY CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_CODE)
            Me.columnLANDKZ = New Global.System.Data.DataColumn("LANDKZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANDKZ)
            Me.columnCOUNTRY_NAME = New Global.System.Data.DataColumn("COUNTRY NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME)
            Me.columnCOUNTRY_NAME_DE = New Global.System.Data.DataColumn("COUNTRY NAME DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME_DE)
            Me.columnCountrySumAmount = New Global.System.Data.DataColumn("CountrySumAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountrySumAmount)
            Me.columnIdZ14Z15Meldemonat = New Global.System.Data.DataColumn("IdZ14Z15Meldemonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZ14Z15Meldemonat)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCLASS.MaxLength = 255
            Me.columnCOUNTRY_CODE.MaxLength = 255
            Me.columnLANDKZ.MaxLength = 255
            Me.columnCOUNTRY_NAME.MaxLength = 255
            Me.columnCOUNTRY_NAME_DE.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz15Row() As AWVz15Row
            Return CType(Me.NewRow,AWVz15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz15Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz15RowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz15RowChanged(Me, New AWVz15RowChangeEvent(CType(e.Row,AWVz15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz15RowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz15RowChanging(Me, New AWVz15RowChangeEvent(CType(e.Row,AWVz15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz15RowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz15RowDeleted(Me, New AWVz15RowChangeEvent(CType(e.Row,AWVz15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz15RowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz15RowDeleting(Me, New AWVz15RowChangeEvent(CType(e.Row,AWVz15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz15Row(ByVal row As AWVz15Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz15DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz4DIKAPPOSTENDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz4DIKAPPOSTENRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDIKA_BELEGART As Global.System.Data.DataColumn
        
        Private columnDIKA_KENNZAHL As Global.System.Data.DataColumn
        
        Private columnDIKA_ZAHLUNGSZWECK As Global.System.Data.DataColumn
        
        Private columnDIKA_ISOLAND As Global.System.Data.DataColumn
        
        Private columnDIKA_ISOLAND_NAME As Global.System.Data.DataColumn
        
        Private columnDIKA_VERRKZ As Global.System.Data.DataColumn
        
        Private columnDIKA_BETRAG As Global.System.Data.DataColumn
        
        Private columnDIKA_MeldeMonat As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz4DIKAPPOSTEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_BELEGARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_BELEGART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_KENNZAHLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_KENNZAHL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_ZAHLUNGSZWECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_ZAHLUNGSZWECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_ISOLANDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_ISOLAND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_ISOLAND_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_ISOLAND_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_VERRKZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_VERRKZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_BETRAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_BETRAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIKA_MeldeMonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIKA_MeldeMonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz4DIKAPPOSTENRow
            Get
                Return CType(Me.Rows(index),AWVz4DIKAPPOSTENRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIKAPPOSTENRowChanging As AWVz4DIKAPPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIKAPPOSTENRowChanged As AWVz4DIKAPPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIKAPPOSTENRowDeleting As AWVz4DIKAPPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIKAPPOSTENRowDeleted As AWVz4DIKAPPOSTENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz4DIKAPPOSTENRow(ByVal row As AWVz4DIKAPPOSTENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz4DIKAPPOSTENRow(ByVal DIKA_BELEGART As String, ByVal DIKA_KENNZAHL As String, ByVal DIKA_ZAHLUNGSZWECK As String, ByVal DIKA_ISOLAND As String, ByVal DIKA_ISOLAND_NAME As String, ByVal DIKA_VERRKZ As String, ByVal DIKA_BETRAG As Double, ByVal parentAWVz14z15RowByAWVz4DIKAPPOSTEN_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz4DIKAPPOSTENRow
            Dim rowAWVz4DIKAPPOSTENRow As AWVz4DIKAPPOSTENRow = CType(Me.NewRow,AWVz4DIKAPPOSTENRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DIKA_BELEGART, DIKA_KENNZAHL, DIKA_ZAHLUNGSZWECK, DIKA_ISOLAND, DIKA_ISOLAND_NAME, DIKA_VERRKZ, DIKA_BETRAG, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz4DIKAPPOSTEN_FK00) Is Nothing) Then
                columnValuesArray(8) = parentAWVz14z15RowByAWVz4DIKAPPOSTEN_FK00(1)
            End If
            rowAWVz4DIKAPPOSTENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz4DIKAPPOSTENRow)
            Return rowAWVz4DIKAPPOSTENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz4DIKAPPOSTENRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz4DIKAPPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz4DIKAPPOSTENDataTable = CType(MyBase.Clone,AWVz4DIKAPPOSTENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz4DIKAPPOSTENDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDIKA_BELEGART = MyBase.Columns("DIKA_BELEGART")
            Me.columnDIKA_KENNZAHL = MyBase.Columns("DIKA_KENNZAHL")
            Me.columnDIKA_ZAHLUNGSZWECK = MyBase.Columns("DIKA_ZAHLUNGSZWECK")
            Me.columnDIKA_ISOLAND = MyBase.Columns("DIKA_ISOLAND")
            Me.columnDIKA_ISOLAND_NAME = MyBase.Columns("DIKA_ISOLAND_NAME")
            Me.columnDIKA_VERRKZ = MyBase.Columns("DIKA_VERRKZ")
            Me.columnDIKA_BETRAG = MyBase.Columns("DIKA_BETRAG")
            Me.columnDIKA_MeldeMonat = MyBase.Columns("DIKA_MeldeMonat")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDIKA_BELEGART = New Global.System.Data.DataColumn("DIKA_BELEGART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_BELEGART)
            Me.columnDIKA_KENNZAHL = New Global.System.Data.DataColumn("DIKA_KENNZAHL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_KENNZAHL)
            Me.columnDIKA_ZAHLUNGSZWECK = New Global.System.Data.DataColumn("DIKA_ZAHLUNGSZWECK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_ZAHLUNGSZWECK)
            Me.columnDIKA_ISOLAND = New Global.System.Data.DataColumn("DIKA_ISOLAND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_ISOLAND)
            Me.columnDIKA_ISOLAND_NAME = New Global.System.Data.DataColumn("DIKA_ISOLAND_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_ISOLAND_NAME)
            Me.columnDIKA_VERRKZ = New Global.System.Data.DataColumn("DIKA_VERRKZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_VERRKZ)
            Me.columnDIKA_BETRAG = New Global.System.Data.DataColumn("DIKA_BETRAG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_BETRAG)
            Me.columnDIKA_MeldeMonat = New Global.System.Data.DataColumn("DIKA_MeldeMonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIKA_MeldeMonat)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDIKA_BELEGART.MaxLength = 255
            Me.columnDIKA_KENNZAHL.MaxLength = 255
            Me.columnDIKA_ZAHLUNGSZWECK.MaxLength = 140
            Me.columnDIKA_ISOLAND.MaxLength = 255
            Me.columnDIKA_ISOLAND_NAME.MaxLength = 255
            Me.columnDIKA_VERRKZ.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz4DIKAPPOSTENRow() As AWVz4DIKAPPOSTENRow
            Return CType(Me.NewRow,AWVz4DIKAPPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz4DIKAPPOSTENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz4DIKAPPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz4DIKAPPOSTENRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz4DIKAPPOSTENRowChanged(Me, New AWVz4DIKAPPOSTENRowChangeEvent(CType(e.Row,AWVz4DIKAPPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz4DIKAPPOSTENRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz4DIKAPPOSTENRowChanging(Me, New AWVz4DIKAPPOSTENRowChangeEvent(CType(e.Row,AWVz4DIKAPPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz4DIKAPPOSTENRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz4DIKAPPOSTENRowDeleted(Me, New AWVz4DIKAPPOSTENRowChangeEvent(CType(e.Row,AWVz4DIKAPPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz4DIKAPPOSTENRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz4DIKAPPOSTENRowDeleting(Me, New AWVz4DIKAPPOSTENRowChangeEvent(CType(e.Row,AWVz4DIKAPPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz4DIKAPPOSTENRow(ByVal row As AWVz4DIKAPPOSTENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz4DIKAPPOSTENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz4DIRINVPOSTENDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz4DIRINVPOSTENRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDIRINV_BELEGART As Global.System.Data.DataColumn
        
        Private columnDIRINV_KENNZAHL As Global.System.Data.DataColumn
        
        Private columnDIRINV_ISIN As Global.System.Data.DataColumn
        
        Private columnDIRINV_BEZEICHNUNG As Global.System.Data.DataColumn
        
        Private columnDIRINV_STUECK As Global.System.Data.DataColumn
        
        Private columnDIRINV_ISOLAND As Global.System.Data.DataColumn
        
        Private columnDIRINV_ISOLAND_NAME As Global.System.Data.DataColumn
        
        Private columnDIRINV_VERRKZ As Global.System.Data.DataColumn
        
        Private columnDIRINV_BETRAG As Global.System.Data.DataColumn
        
        Private columnDIRINV_MeldeMonat As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz4DIRINVPOSTEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_BELEGARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_BELEGART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_KENNZAHLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_KENNZAHL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_ISINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_ISIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_BEZEICHNUNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_BEZEICHNUNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_STUECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_STUECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_ISOLANDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_ISOLAND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_ISOLAND_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_ISOLAND_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_VERRKZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_VERRKZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_BETRAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_BETRAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRINV_MeldeMonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRINV_MeldeMonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz4DIRINVPOSTENRow
            Get
                Return CType(Me.Rows(index),AWVz4DIRINVPOSTENRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIRINVPOSTENRowChanging As AWVz4DIRINVPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIRINVPOSTENRowChanged As AWVz4DIRINVPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIRINVPOSTENRowDeleting As AWVz4DIRINVPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4DIRINVPOSTENRowDeleted As AWVz4DIRINVPOSTENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz4DIRINVPOSTENRow(ByVal row As AWVz4DIRINVPOSTENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz4DIRINVPOSTENRow(ByVal DIRINV_BELEGART As String, ByVal DIRINV_KENNZAHL As String, ByVal DIRINV_ISIN As String, ByVal DIRINV_BEZEICHNUNG As String, ByVal DIRINV_STUECK As Double, ByVal DIRINV_ISOLAND As String, ByVal DIRINV_ISOLAND_NAME As String, ByVal DIRINV_VERRKZ As String, ByVal DIRINV_BETRAG As Double, ByVal parentAWVz14z15RowByAWVz4DIRINVPOSTEN_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz4DIRINVPOSTENRow
            Dim rowAWVz4DIRINVPOSTENRow As AWVz4DIRINVPOSTENRow = CType(Me.NewRow,AWVz4DIRINVPOSTENRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DIRINV_BELEGART, DIRINV_KENNZAHL, DIRINV_ISIN, DIRINV_BEZEICHNUNG, DIRINV_STUECK, DIRINV_ISOLAND, DIRINV_ISOLAND_NAME, DIRINV_VERRKZ, DIRINV_BETRAG, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz4DIRINVPOSTEN_FK00) Is Nothing) Then
                columnValuesArray(10) = parentAWVz14z15RowByAWVz4DIRINVPOSTEN_FK00(1)
            End If
            rowAWVz4DIRINVPOSTENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz4DIRINVPOSTENRow)
            Return rowAWVz4DIRINVPOSTENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz4DIRINVPOSTENRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz4DIRINVPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz4DIRINVPOSTENDataTable = CType(MyBase.Clone,AWVz4DIRINVPOSTENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz4DIRINVPOSTENDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDIRINV_BELEGART = MyBase.Columns("DIRINV_BELEGART")
            Me.columnDIRINV_KENNZAHL = MyBase.Columns("DIRINV_KENNZAHL")
            Me.columnDIRINV_ISIN = MyBase.Columns("DIRINV_ISIN")
            Me.columnDIRINV_BEZEICHNUNG = MyBase.Columns("DIRINV_BEZEICHNUNG")
            Me.columnDIRINV_STUECK = MyBase.Columns("DIRINV_STUECK")
            Me.columnDIRINV_ISOLAND = MyBase.Columns("DIRINV_ISOLAND")
            Me.columnDIRINV_ISOLAND_NAME = MyBase.Columns("DIRINV_ISOLAND_NAME")
            Me.columnDIRINV_VERRKZ = MyBase.Columns("DIRINV_VERRKZ")
            Me.columnDIRINV_BETRAG = MyBase.Columns("DIRINV_BETRAG")
            Me.columnDIRINV_MeldeMonat = MyBase.Columns("DIRINV_MeldeMonat")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDIRINV_BELEGART = New Global.System.Data.DataColumn("DIRINV_BELEGART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_BELEGART)
            Me.columnDIRINV_KENNZAHL = New Global.System.Data.DataColumn("DIRINV_KENNZAHL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_KENNZAHL)
            Me.columnDIRINV_ISIN = New Global.System.Data.DataColumn("DIRINV_ISIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_ISIN)
            Me.columnDIRINV_BEZEICHNUNG = New Global.System.Data.DataColumn("DIRINV_BEZEICHNUNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_BEZEICHNUNG)
            Me.columnDIRINV_STUECK = New Global.System.Data.DataColumn("DIRINV_STUECK", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_STUECK)
            Me.columnDIRINV_ISOLAND = New Global.System.Data.DataColumn("DIRINV_ISOLAND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_ISOLAND)
            Me.columnDIRINV_ISOLAND_NAME = New Global.System.Data.DataColumn("DIRINV_ISOLAND_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_ISOLAND_NAME)
            Me.columnDIRINV_VERRKZ = New Global.System.Data.DataColumn("DIRINV_VERRKZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_VERRKZ)
            Me.columnDIRINV_BETRAG = New Global.System.Data.DataColumn("DIRINV_BETRAG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_BETRAG)
            Me.columnDIRINV_MeldeMonat = New Global.System.Data.DataColumn("DIRINV_MeldeMonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRINV_MeldeMonat)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDIRINV_BELEGART.MaxLength = 255
            Me.columnDIRINV_KENNZAHL.MaxLength = 255
            Me.columnDIRINV_ISIN.MaxLength = 140
            Me.columnDIRINV_BEZEICHNUNG.MaxLength = 255
            Me.columnDIRINV_ISOLAND.MaxLength = 255
            Me.columnDIRINV_ISOLAND_NAME.MaxLength = 255
            Me.columnDIRINV_VERRKZ.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz4DIRINVPOSTENRow() As AWVz4DIRINVPOSTENRow
            Return CType(Me.NewRow,AWVz4DIRINVPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz4DIRINVPOSTENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz4DIRINVPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz4DIRINVPOSTENRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz4DIRINVPOSTENRowChanged(Me, New AWVz4DIRINVPOSTENRowChangeEvent(CType(e.Row,AWVz4DIRINVPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz4DIRINVPOSTENRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz4DIRINVPOSTENRowChanging(Me, New AWVz4DIRINVPOSTENRowChangeEvent(CType(e.Row,AWVz4DIRINVPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz4DIRINVPOSTENRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz4DIRINVPOSTENRowDeleted(Me, New AWVz4DIRINVPOSTENRowChangeEvent(CType(e.Row,AWVz4DIRINVPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz4DIRINVPOSTENRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz4DIRINVPOSTENRowDeleting(Me, New AWVz4DIRINVPOSTENRowChangeEvent(CType(e.Row,AWVz4DIRINVPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz4DIRINVPOSTENRow(ByVal row As AWVz4DIRINVPOSTENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz4DIRINVPOSTENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz4TRANSITPOSTENDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz4TRANSITPOSTENRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnTRANSIT_BELEGART As Global.System.Data.DataColumn
        
        Private columnTRANSIT_KENNZAHL As Global.System.Data.DataColumn
        
        Private columnTRANSIT_WARENCODE As Global.System.Data.DataColumn
        
        Private columnTRANSIT_WARENBEZEICHNUNG As Global.System.Data.DataColumn
        
        Private columnTRANSIT_ISOLAND As Global.System.Data.DataColumn
        
        Private columnTRANSIT_ISOLAND_NAME As Global.System.Data.DataColumn
        
        Private columnTRANSIT_VERRKZ As Global.System.Data.DataColumn
        
        Private columnTRANSIT_BETRAG As Global.System.Data.DataColumn
        
        Private columnTRANSIT_MeldeMonat As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz4TRANSITPOSTEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_BELEGARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_BELEGART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_KENNZAHLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_KENNZAHL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_WARENCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_WARENCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_WARENBEZEICHNUNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_WARENBEZEICHNUNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_ISOLANDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_ISOLAND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_ISOLAND_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_ISOLAND_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_VERRKZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_VERRKZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_BETRAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_BETRAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSIT_MeldeMonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSIT_MeldeMonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz4TRANSITPOSTENRow
            Get
                Return CType(Me.Rows(index),AWVz4TRANSITPOSTENRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4TRANSITPOSTENRowChanging As AWVz4TRANSITPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4TRANSITPOSTENRowChanged As AWVz4TRANSITPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4TRANSITPOSTENRowDeleting As AWVz4TRANSITPOSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz4TRANSITPOSTENRowDeleted As AWVz4TRANSITPOSTENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz4TRANSITPOSTENRow(ByVal row As AWVz4TRANSITPOSTENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz4TRANSITPOSTENRow(ByVal TRANSIT_BELEGART As String, ByVal TRANSIT_KENNZAHL As String, ByVal TRANSIT_WARENCODE As String, ByVal TRANSIT_WARENBEZEICHNUNG As String, ByVal TRANSIT_ISOLAND As String, ByVal TRANSIT_ISOLAND_NAME As String, ByVal TRANSIT_VERRKZ As String, ByVal TRANSIT_BETRAG As Double, ByVal parentAWVz14z15RowByAWVz4TRANSITPOSTEN_FK00 As AWVz14z15Row, ByVal BETRAG_REF As String) As AWVz4TRANSITPOSTENRow
            Dim rowAWVz4TRANSITPOSTENRow As AWVz4TRANSITPOSTENRow = CType(Me.NewRow,AWVz4TRANSITPOSTENRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRANSIT_BELEGART, TRANSIT_KENNZAHL, TRANSIT_WARENCODE, TRANSIT_WARENBEZEICHNUNG, TRANSIT_ISOLAND, TRANSIT_ISOLAND_NAME, TRANSIT_VERRKZ, TRANSIT_BETRAG, Nothing, BETRAG_REF}
            If (Not (parentAWVz14z15RowByAWVz4TRANSITPOSTEN_FK00) Is Nothing) Then
                columnValuesArray(9) = parentAWVz14z15RowByAWVz4TRANSITPOSTEN_FK00(1)
            End If
            rowAWVz4TRANSITPOSTENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz4TRANSITPOSTENRow)
            Return rowAWVz4TRANSITPOSTENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz4TRANSITPOSTENRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz4TRANSITPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz4TRANSITPOSTENDataTable = CType(MyBase.Clone,AWVz4TRANSITPOSTENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz4TRANSITPOSTENDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnTRANSIT_BELEGART = MyBase.Columns("TRANSIT_BELEGART")
            Me.columnTRANSIT_KENNZAHL = MyBase.Columns("TRANSIT_KENNZAHL")
            Me.columnTRANSIT_WARENCODE = MyBase.Columns("TRANSIT_WARENCODE")
            Me.columnTRANSIT_WARENBEZEICHNUNG = MyBase.Columns("TRANSIT_WARENBEZEICHNUNG")
            Me.columnTRANSIT_ISOLAND = MyBase.Columns("TRANSIT_ISOLAND")
            Me.columnTRANSIT_ISOLAND_NAME = MyBase.Columns("TRANSIT_ISOLAND_NAME")
            Me.columnTRANSIT_VERRKZ = MyBase.Columns("TRANSIT_VERRKZ")
            Me.columnTRANSIT_BETRAG = MyBase.Columns("TRANSIT_BETRAG")
            Me.columnTRANSIT_MeldeMonat = MyBase.Columns("TRANSIT_MeldeMonat")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnTRANSIT_BELEGART = New Global.System.Data.DataColumn("TRANSIT_BELEGART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_BELEGART)
            Me.columnTRANSIT_KENNZAHL = New Global.System.Data.DataColumn("TRANSIT_KENNZAHL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_KENNZAHL)
            Me.columnTRANSIT_WARENCODE = New Global.System.Data.DataColumn("TRANSIT_WARENCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_WARENCODE)
            Me.columnTRANSIT_WARENBEZEICHNUNG = New Global.System.Data.DataColumn("TRANSIT_WARENBEZEICHNUNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_WARENBEZEICHNUNG)
            Me.columnTRANSIT_ISOLAND = New Global.System.Data.DataColumn("TRANSIT_ISOLAND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_ISOLAND)
            Me.columnTRANSIT_ISOLAND_NAME = New Global.System.Data.DataColumn("TRANSIT_ISOLAND_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_ISOLAND_NAME)
            Me.columnTRANSIT_VERRKZ = New Global.System.Data.DataColumn("TRANSIT_VERRKZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_VERRKZ)
            Me.columnTRANSIT_BETRAG = New Global.System.Data.DataColumn("TRANSIT_BETRAG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_BETRAG)
            Me.columnTRANSIT_MeldeMonat = New Global.System.Data.DataColumn("TRANSIT_MeldeMonat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSIT_MeldeMonat)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnTRANSIT_BELEGART.MaxLength = 255
            Me.columnTRANSIT_KENNZAHL.MaxLength = 255
            Me.columnTRANSIT_WARENCODE.MaxLength = 140
            Me.columnTRANSIT_WARENBEZEICHNUNG.MaxLength = 255
            Me.columnTRANSIT_ISOLAND.MaxLength = 255
            Me.columnTRANSIT_ISOLAND_NAME.MaxLength = 255
            Me.columnTRANSIT_VERRKZ.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz4TRANSITPOSTENRow() As AWVz4TRANSITPOSTENRow
            Return CType(Me.NewRow,AWVz4TRANSITPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz4TRANSITPOSTENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz4TRANSITPOSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz4TRANSITPOSTENRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz4TRANSITPOSTENRowChanged(Me, New AWVz4TRANSITPOSTENRowChangeEvent(CType(e.Row,AWVz4TRANSITPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz4TRANSITPOSTENRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz4TRANSITPOSTENRowChanging(Me, New AWVz4TRANSITPOSTENRowChangeEvent(CType(e.Row,AWVz4TRANSITPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz4TRANSITPOSTENRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz4TRANSITPOSTENRowDeleted(Me, New AWVz4TRANSITPOSTENRowChangeEvent(CType(e.Row,AWVz4TRANSITPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz4TRANSITPOSTENRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz4TRANSITPOSTENRowDeleting(Me, New AWVz4TRANSITPOSTENRowChangeEvent(CType(e.Row,AWVz4TRANSITPOSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz4TRANSITPOSTENRow(ByVal row As AWVz4TRANSITPOSTENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz4TRANSITPOSTENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BANKDataTable
        Inherits Global.System.Data.TypedTableBase(Of BANKRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName_Bank As Global.System.Data.DataColumn
        
        Private columnBranch_Bank As Global.System.Data.DataColumn
        
        Private columnStrasse_Bank As Global.System.Data.DataColumn
        
        Private columnPLZ_Bank As Global.System.Data.DataColumn
        
        Private columnOrt_Bank As Global.System.Data.DataColumn
        
        Private columnLand_Bank As Global.System.Data.DataColumn
        
        Private columnBANK_LOGO As Global.System.Data.DataColumn
        
        Private columnSteuerNr As Global.System.Data.DataColumn
        
        Private columnUstID As Global.System.Data.DataColumn
        
        Private _columnE_Mail_Bank As Global.System.Data.DataColumn
        
        Private columnWebsite_Bank As Global.System.Data.DataColumn
        
        Private columnTel_Bank As Global.System.Data.DataColumn
        
        Private columnFax_Bank As Global.System.Data.DataColumn
        
        Private columnBIC_Bank As Global.System.Data.DataColumn
        
        Private columnBLZ_Bank As Global.System.Data.DataColumn
        
        Private columnTELEX_Bank As Global.System.Data.DataColumn
        
        Private columnHRB As Global.System.Data.DataColumn
        
        Private columnSEPA_Creditor_ID As Global.System.Data.DataColumn
        
        Private columnFormular_Rechts_DE As Global.System.Data.DataColumn
        
        Private columnFormular_Rechts_GB As Global.System.Data.DataColumn
        
        Private columnFormular_Rechts_GR As Global.System.Data.DataColumn
        
        Private columnFormular_Links_DE As Global.System.Data.DataColumn
        
        Private columnFormular_Links_GB As Global.System.Data.DataColumn
        
        Private columnFormular_Links_GR As Global.System.Data.DataColumn
        
        Private columnUNTER_BEARBEITUNG_VON As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BANK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Name_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Branch_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranch_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Strasse_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrasse_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PLZ_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLZ_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Ort_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrt_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Land_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLand_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BANK_LOGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_LOGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SteuerNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSteuerNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _E_Mail_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnE_Mail_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Website_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebsite_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Tel_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Fax_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIC_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIC_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BLZ_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLZ_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TELEX_BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEX_Bank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property HRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SEPA_Creditor_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEPA_Creditor_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Rechts_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Rechts_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Rechts_GBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Rechts_GB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Rechts_GRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Rechts_GR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Links_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Links_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Links_GBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Links_GB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Formular_Links_GRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormular_Links_GR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNTER_BEARBEITUNG_VONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNTER_BEARBEITUNG_VON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BANKRow
            Get
                Return CType(Me.Rows(index),BANKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event BANKRowChanging As BANKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event BANKRowChanged As BANKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event BANKRowDeleting As BANKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event BANKRowDeleted As BANKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddBANKRow(ByVal row As BANKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddBANKRow( _
                    ByVal Name_Bank As String,  _
                    ByVal Branch_Bank As String,  _
                    ByVal Strasse_Bank As String,  _
                    ByVal PLZ_Bank As String,  _
                    ByVal Ort_Bank As String,  _
                    ByVal Land_Bank As String,  _
                    ByVal BANK_LOGO() As Byte,  _
                    ByVal SteuerNr As String,  _
                    ByVal UstID As String,  _
                    ByVal _E_Mail_Bank As String,  _
                    ByVal Website_Bank As String,  _
                    ByVal Tel_Bank As String,  _
                    ByVal Fax_Bank As String,  _
                    ByVal BIC_Bank As String,  _
                    ByVal BLZ_Bank As String,  _
                    ByVal TELEX_Bank As String,  _
                    ByVal HRB As String,  _
                    ByVal SEPA_Creditor_ID As String,  _
                    ByVal Formular_Rechts_DE As String,  _
                    ByVal Formular_Rechts_GB As String,  _
                    ByVal Formular_Rechts_GR As String,  _
                    ByVal Formular_Links_DE As String,  _
                    ByVal Formular_Links_GB As String,  _
                    ByVal Formular_Links_GR As String,  _
                    ByVal UNTER_BEARBEITUNG_VON As String,  _
                    ByVal USER As String) As BANKRow
            Dim rowBANKRow As BANKRow = CType(Me.NewRow,BANKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name_Bank, Branch_Bank, Strasse_Bank, PLZ_Bank, Ort_Bank, Land_Bank, BANK_LOGO, SteuerNr, UstID, _E_Mail_Bank, Website_Bank, Tel_Bank, Fax_Bank, BIC_Bank, BLZ_Bank, TELEX_Bank, HRB, SEPA_Creditor_ID, Formular_Rechts_DE, Formular_Rechts_GB, Formular_Rechts_GR, Formular_Links_DE, Formular_Links_GB, Formular_Links_GR, UNTER_BEARBEITUNG_VON, USER}
            rowBANKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBANKRow)
            Return rowBANKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As BANKRow
            Return CType(Me.Rows.Find(New Object() {ID}),BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BANKDataTable = CType(MyBase.Clone,BANKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BANKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName_Bank = MyBase.Columns("Name Bank")
            Me.columnBranch_Bank = MyBase.Columns("Branch Bank")
            Me.columnStrasse_Bank = MyBase.Columns("Strasse Bank")
            Me.columnPLZ_Bank = MyBase.Columns("PLZ Bank")
            Me.columnOrt_Bank = MyBase.Columns("Ort Bank")
            Me.columnLand_Bank = MyBase.Columns("Land Bank")
            Me.columnBANK_LOGO = MyBase.Columns("BANK LOGO")
            Me.columnSteuerNr = MyBase.Columns("SteuerNr")
            Me.columnUstID = MyBase.Columns("UstID")
            Me._columnE_Mail_Bank = MyBase.Columns("E-Mail Bank")
            Me.columnWebsite_Bank = MyBase.Columns("Website Bank")
            Me.columnTel_Bank = MyBase.Columns("Tel Bank")
            Me.columnFax_Bank = MyBase.Columns("Fax Bank")
            Me.columnBIC_Bank = MyBase.Columns("BIC Bank")
            Me.columnBLZ_Bank = MyBase.Columns("BLZ Bank")
            Me.columnTELEX_Bank = MyBase.Columns("TELEX Bank")
            Me.columnHRB = MyBase.Columns("HRB")
            Me.columnSEPA_Creditor_ID = MyBase.Columns("SEPA Creditor ID")
            Me.columnFormular_Rechts_DE = MyBase.Columns("Formular Rechts DE")
            Me.columnFormular_Rechts_GB = MyBase.Columns("Formular Rechts GB")
            Me.columnFormular_Rechts_GR = MyBase.Columns("Formular Rechts GR")
            Me.columnFormular_Links_DE = MyBase.Columns("Formular Links DE")
            Me.columnFormular_Links_GB = MyBase.Columns("Formular Links GB")
            Me.columnFormular_Links_GR = MyBase.Columns("Formular Links GR")
            Me.columnUNTER_BEARBEITUNG_VON = MyBase.Columns("UNTER BEARBEITUNG VON")
            Me.columnUSER = MyBase.Columns("USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName_Bank = New Global.System.Data.DataColumn("Name Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bank)
            Me.columnBranch_Bank = New Global.System.Data.DataColumn("Branch Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranch_Bank)
            Me.columnStrasse_Bank = New Global.System.Data.DataColumn("Strasse Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrasse_Bank)
            Me.columnPLZ_Bank = New Global.System.Data.DataColumn("PLZ Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLZ_Bank)
            Me.columnOrt_Bank = New Global.System.Data.DataColumn("Ort Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrt_Bank)
            Me.columnLand_Bank = New Global.System.Data.DataColumn("Land Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLand_Bank)
            Me.columnBANK_LOGO = New Global.System.Data.DataColumn("BANK LOGO", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_LOGO)
            Me.columnSteuerNr = New Global.System.Data.DataColumn("SteuerNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSteuerNr)
            Me.columnUstID = New Global.System.Data.DataColumn("UstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUstID)
            Me._columnE_Mail_Bank = New Global.System.Data.DataColumn("E-Mail Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnE_Mail_Bank.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE_Mail_Bank")
            Me._columnE_Mail_Bank.ExtendedProperties.Add("Generator_UserColumnName", "E-Mail Bank")
            MyBase.Columns.Add(Me._columnE_Mail_Bank)
            Me.columnWebsite_Bank = New Global.System.Data.DataColumn("Website Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebsite_Bank)
            Me.columnTel_Bank = New Global.System.Data.DataColumn("Tel Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Bank)
            Me.columnFax_Bank = New Global.System.Data.DataColumn("Fax Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax_Bank)
            Me.columnBIC_Bank = New Global.System.Data.DataColumn("BIC Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIC_Bank)
            Me.columnBLZ_Bank = New Global.System.Data.DataColumn("BLZ Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLZ_Bank)
            Me.columnTELEX_Bank = New Global.System.Data.DataColumn("TELEX Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEX_Bank)
            Me.columnHRB = New Global.System.Data.DataColumn("HRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHRB)
            Me.columnSEPA_Creditor_ID = New Global.System.Data.DataColumn("SEPA Creditor ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEPA_Creditor_ID)
            Me.columnFormular_Rechts_DE = New Global.System.Data.DataColumn("Formular Rechts DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Rechts_DE)
            Me.columnFormular_Rechts_GB = New Global.System.Data.DataColumn("Formular Rechts GB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Rechts_GB)
            Me.columnFormular_Rechts_GR = New Global.System.Data.DataColumn("Formular Rechts GR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Rechts_GR)
            Me.columnFormular_Links_DE = New Global.System.Data.DataColumn("Formular Links DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Links_DE)
            Me.columnFormular_Links_GB = New Global.System.Data.DataColumn("Formular Links GB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Links_GB)
            Me.columnFormular_Links_GR = New Global.System.Data.DataColumn("Formular Links GR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormular_Links_GR)
            Me.columnUNTER_BEARBEITUNG_VON = New Global.System.Data.DataColumn("UNTER BEARBEITUNG VON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNTER_BEARBEITUNG_VON)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName_Bank.AllowDBNull = false
            Me.columnName_Bank.MaxLength = 255
            Me.columnBranch_Bank.AllowDBNull = false
            Me.columnBranch_Bank.MaxLength = 255
            Me.columnStrasse_Bank.AllowDBNull = false
            Me.columnStrasse_Bank.MaxLength = 255
            Me.columnPLZ_Bank.AllowDBNull = false
            Me.columnPLZ_Bank.MaxLength = 255
            Me.columnOrt_Bank.AllowDBNull = false
            Me.columnOrt_Bank.MaxLength = 255
            Me.columnLand_Bank.AllowDBNull = false
            Me.columnLand_Bank.MaxLength = 255
            Me.columnSteuerNr.MaxLength = 255
            Me.columnUstID.MaxLength = 255
            Me._columnE_Mail_Bank.MaxLength = 255
            Me.columnWebsite_Bank.MaxLength = 255
            Me.columnTel_Bank.MaxLength = 255
            Me.columnFax_Bank.MaxLength = 255
            Me.columnBIC_Bank.AllowDBNull = false
            Me.columnBIC_Bank.MaxLength = 255
            Me.columnBLZ_Bank.MaxLength = 255
            Me.columnTELEX_Bank.MaxLength = 255
            Me.columnHRB.MaxLength = 255
            Me.columnSEPA_Creditor_ID.MaxLength = 255
            Me.columnFormular_Rechts_DE.MaxLength = 1073741823
            Me.columnFormular_Rechts_GB.MaxLength = 1073741823
            Me.columnFormular_Rechts_GR.MaxLength = 1073741823
            Me.columnFormular_Links_DE.MaxLength = 1073741823
            Me.columnFormular_Links_GB.MaxLength = 1073741823
            Me.columnFormular_Links_GR.MaxLength = 1073741823
            Me.columnUNTER_BEARBEITUNG_VON.MaxLength = 255
            Me.columnUSER.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewBANKRow() As BANKRow
            Return CType(Me.NewRow,BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BANKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BANKRowChangedEvent) Is Nothing) Then
                RaiseEvent BANKRowChanged(Me, New BANKRowChangeEvent(CType(e.Row,BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BANKRowChangingEvent) Is Nothing) Then
                RaiseEvent BANKRowChanging(Me, New BANKRowChangeEvent(CType(e.Row,BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BANKRowDeletedEvent) Is Nothing) Then
                RaiseEvent BANKRowDeleted(Me, New BANKRowChangeEvent(CType(e.Row,BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BANKRowDeletingEvent) Is Nothing) Then
                RaiseEvent BANKRowDeleting(Me, New BANKRowChangeEvent(CType(e.Row,BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveBANKRow(ByVal row As BANKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BANKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COUNTRIESDataTable
        Inherits Global.System.Data.TypedTableBase(Of COUNTRIESRow)
        
        Private columnCOUNTRY_CODE As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME As Global.System.Data.DataColumn
        
        Private columnCOUNTRY_NAME_DE As Global.System.Data.DataColumn
        
        Private columnLANDKZ_BUBA As Global.System.Data.DataColumn
        
        Private columnCURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnCURRENCY_NAME As Global.System.Data.DataColumn
        
        Private columnEU_EEA As Global.System.Data.DataColumn
        
        Private columnIBAN_COUNTRY As Global.System.Data.DataColumn
        
        Private columnIBAN_CALC As Global.System.Data.DataColumn
        
        Private columnIBAN_MAX As Global.System.Data.DataColumn
        
        Private columnVALID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COUNTRIES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COUNTRY_NAME_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY_NAME_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LANDKZ_BUBAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANDKZ_BUBA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CURRENCY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EU_EEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEU_EEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IBAN_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIBAN_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IBAN_CALCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIBAN_CALC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IBAN_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIBAN_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COUNTRIESRow
            Get
                Return CType(Me.Rows(index),COUNTRIESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event COUNTRIESRowChanging As COUNTRIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event COUNTRIESRowChanged As COUNTRIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event COUNTRIESRowDeleting As COUNTRIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event COUNTRIESRowDeleted As COUNTRIESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddCOUNTRIESRow(ByVal row As COUNTRIESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddCOUNTRIESRow(ByVal COUNTRY_CODE As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal LANDKZ_BUBA As String, ByVal CURRENCY_CODE As String, ByVal CURRENCY_NAME As String, ByVal EU_EEA As String, ByVal IBAN_COUNTRY As String, ByVal IBAN_CALC As String, ByVal IBAN_MAX As Double, ByVal VALID As String) As COUNTRIESRow
            Dim rowCOUNTRIESRow As COUNTRIESRow = CType(Me.NewRow,COUNTRIESRow)
            Dim columnValuesArray() As Object = New Object() {COUNTRY_CODE, COUNTRY_NAME, COUNTRY_NAME_DE, LANDKZ_BUBA, CURRENCY_CODE, CURRENCY_NAME, EU_EEA, IBAN_COUNTRY, IBAN_CALC, IBAN_MAX, VALID}
            rowCOUNTRIESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOUNTRIESRow)
            Return rowCOUNTRIESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByCOUNTRY_CODE(ByVal COUNTRY_CODE As String) As COUNTRIESRow
            Return CType(Me.Rows.Find(New Object() {COUNTRY_CODE}),COUNTRIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COUNTRIESDataTable = CType(MyBase.Clone,COUNTRIESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COUNTRIESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOUNTRY_CODE = MyBase.Columns("COUNTRY CODE")
            Me.columnCOUNTRY_NAME = MyBase.Columns("COUNTRY NAME")
            Me.columnCOUNTRY_NAME_DE = MyBase.Columns("COUNTRY NAME DE")
            Me.columnLANDKZ_BUBA = MyBase.Columns("LANDKZ BUBA")
            Me.columnCURRENCY_CODE = MyBase.Columns("CURRENCY CODE")
            Me.columnCURRENCY_NAME = MyBase.Columns("CURRENCY NAME")
            Me.columnEU_EEA = MyBase.Columns("EU EEA")
            Me.columnIBAN_COUNTRY = MyBase.Columns("IBAN COUNTRY")
            Me.columnIBAN_CALC = MyBase.Columns("IBAN CALC")
            Me.columnIBAN_MAX = MyBase.Columns("IBAN MAX")
            Me.columnVALID = MyBase.Columns("VALID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOUNTRY_CODE = New Global.System.Data.DataColumn("COUNTRY CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_CODE)
            Me.columnCOUNTRY_NAME = New Global.System.Data.DataColumn("COUNTRY NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME)
            Me.columnCOUNTRY_NAME_DE = New Global.System.Data.DataColumn("COUNTRY NAME DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY_NAME_DE)
            Me.columnLANDKZ_BUBA = New Global.System.Data.DataColumn("LANDKZ BUBA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANDKZ_BUBA)
            Me.columnCURRENCY_CODE = New Global.System.Data.DataColumn("CURRENCY CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY_CODE)
            Me.columnCURRENCY_NAME = New Global.System.Data.DataColumn("CURRENCY NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY_NAME)
            Me.columnEU_EEA = New Global.System.Data.DataColumn("EU EEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEU_EEA)
            Me.columnIBAN_COUNTRY = New Global.System.Data.DataColumn("IBAN COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIBAN_COUNTRY)
            Me.columnIBAN_CALC = New Global.System.Data.DataColumn("IBAN CALC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIBAN_CALC)
            Me.columnIBAN_MAX = New Global.System.Data.DataColumn("IBAN MAX", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIBAN_MAX)
            Me.columnVALID = New Global.System.Data.DataColumn("VALID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOUNTRY_CODE}, true))
            Me.columnCOUNTRY_CODE.AllowDBNull = false
            Me.columnCOUNTRY_CODE.Unique = true
            Me.columnCOUNTRY_CODE.MaxLength = 255
            Me.columnCOUNTRY_NAME.MaxLength = 255
            Me.columnCOUNTRY_NAME_DE.MaxLength = 255
            Me.columnLANDKZ_BUBA.MaxLength = 255
            Me.columnCURRENCY_CODE.MaxLength = 255
            Me.columnCURRENCY_NAME.MaxLength = 255
            Me.columnEU_EEA.MaxLength = 50
            Me.columnIBAN_COUNTRY.MaxLength = 50
            Me.columnIBAN_CALC.MaxLength = 50
            Me.columnVALID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewCOUNTRIESRow() As COUNTRIESRow
            Return CType(Me.NewRow,COUNTRIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COUNTRIESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COUNTRIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COUNTRIESRowChangedEvent) Is Nothing) Then
                RaiseEvent COUNTRIESRowChanged(Me, New COUNTRIESRowChangeEvent(CType(e.Row,COUNTRIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COUNTRIESRowChangingEvent) Is Nothing) Then
                RaiseEvent COUNTRIESRowChanging(Me, New COUNTRIESRowChangeEvent(CType(e.Row,COUNTRIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COUNTRIESRowDeletedEvent) Is Nothing) Then
                RaiseEvent COUNTRIESRowDeleted(Me, New COUNTRIESRowChangeEvent(CType(e.Row,COUNTRIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COUNTRIESRowDeletingEvent) Is Nothing) Then
                RaiseEvent COUNTRIESRowDeleting(Me, New COUNTRIESRowChangeEvent(CType(e.Row,COUNTRIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveCOUNTRIESRow(ByVal row As COUNTRIESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COUNTRIESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_DETAILSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZINSERTRAG_KUNDEN_DETAILSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnValDateFrom As Global.System.Data.DataColumn
        
        Private columnValDate As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        Private columnValYear As Global.System.Data.DataColumn
        
        Private columnCustomerName As Global.System.Data.DataColumn
        
        Private columnAccount As Global.System.Data.DataColumn
        
        Private columnRegistrationCountry As Global.System.Data.DataColumn
        
        Private columnContract As Global.System.Data.DataColumn
        
        Private columnCCY As Global.System.Data.DataColumn
        
        Private columnProduct As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        Private columnAmountEuro As Global.System.Data.DataColumn
        
        Private columnDB As Global.System.Data.DataColumn
        
        Private columnKapertstG As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnSoli As Global.System.Data.DataColumn
        
        Private columnKAPISTPFLICHTIG As Global.System.Data.DataColumn
        
        Private columnBUNDESLAND As Global.System.Data.DataColumn
        
        Private columnIdValueCustomer As Global.System.Data.DataColumn
        
        Private columnIdZinsertragsMonat As Global.System.Data.DataColumn
        
        Private columnIdErtragJahr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZINSERTRAG KUNDEN DETAILS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValDateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustomerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegistrationCountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AmountEuroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountEuro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property KapertstGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKapertstG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SoliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property KAPISTPFLICHTIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKAPISTPFLICHTIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUNDESLANDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUNDESLAND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdValueCustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdValueCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZinsertragsMonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZinsertragsMonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdErtragJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdErtragJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZINSERTRAG_KUNDEN_DETAILSRow
            Get
                Return CType(Me.Rows(index),ZINSERTRAG_KUNDEN_DETAILSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_DETAILSRowChanging As ZINSERTRAG_KUNDEN_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_DETAILSRowChanged As ZINSERTRAG_KUNDEN_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_DETAILSRowDeleting As ZINSERTRAG_KUNDEN_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_DETAILSRowDeleted As ZINSERTRAG_KUNDEN_DETAILSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZINSERTRAG_KUNDEN_DETAILSRow(ByVal row As ZINSERTRAG_KUNDEN_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZINSERTRAG_KUNDEN_DETAILSRow( _
                    ByVal ValDateFrom As Date,  _
                    ByVal ValDate As Date,  _
                    ByVal Customer As String,  _
                    ByVal ValYear As Double,  _
                    ByVal CustomerName As String,  _
                    ByVal Account As String,  _
                    ByVal RegistrationCountry As String,  _
                    ByVal Contract As String,  _
                    ByVal CCY As String,  _
                    ByVal Product As String,  _
                    ByVal Amount As Double,  _
                    ByVal ExchangeRate As Double,  _
                    ByVal AmountEuro As Double,  _
                    ByVal DB As String,  _
                    ByVal KapertstG As Double,  _
                    ByVal Remark As String,  _
                    ByVal Soli As Double,  _
                    ByVal KAPISTPFLICHTIG As String,  _
                    ByVal BUNDESLAND As String,  _
                    ByVal IdValueCustomer As String,  _
                    ByVal parentZINSERTRAG_KUNDEN_MONATRowByZINSERTRAG_KUNDEN_DETAILS_FK00 As ZINSERTRAG_KUNDEN_MONATRow,  _
                    ByVal IdErtragJahr As Double) As ZINSERTRAG_KUNDEN_DETAILSRow
            Dim rowZINSERTRAG_KUNDEN_DETAILSRow As ZINSERTRAG_KUNDEN_DETAILSRow = CType(Me.NewRow,ZINSERTRAG_KUNDEN_DETAILSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ValDateFrom, ValDate, Customer, ValYear, CustomerName, Account, RegistrationCountry, Contract, CCY, Product, Amount, ExchangeRate, AmountEuro, DB, KapertstG, Remark, Soli, KAPISTPFLICHTIG, BUNDESLAND, IdValueCustomer, Nothing, IdErtragJahr}
            If (Not (parentZINSERTRAG_KUNDEN_MONATRowByZINSERTRAG_KUNDEN_DETAILS_FK00) Is Nothing) Then
                columnValuesArray(21) = parentZINSERTRAG_KUNDEN_MONATRowByZINSERTRAG_KUNDEN_DETAILS_FK00(1)
            End If
            rowZINSERTRAG_KUNDEN_DETAILSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZINSERTRAG_KUNDEN_DETAILSRow)
            Return rowZINSERTRAG_KUNDEN_DETAILSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZINSERTRAG_KUNDEN_DETAILSRow
            Return CType(Me.Rows.Find(New Object() {ID}),ZINSERTRAG_KUNDEN_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZINSERTRAG_KUNDEN_DETAILSDataTable = CType(MyBase.Clone,ZINSERTRAG_KUNDEN_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZINSERTRAG_KUNDEN_DETAILSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnValDateFrom = MyBase.Columns("ValDateFrom")
            Me.columnValDate = MyBase.Columns("ValDate")
            Me.columnCustomer = MyBase.Columns("Customer")
            Me.columnValYear = MyBase.Columns("ValYear")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnAccount = MyBase.Columns("Account")
            Me.columnRegistrationCountry = MyBase.Columns("RegistrationCountry")
            Me.columnContract = MyBase.Columns("Contract")
            Me.columnCCY = MyBase.Columns("CCY")
            Me.columnProduct = MyBase.Columns("Product")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
            Me.columnAmountEuro = MyBase.Columns("AmountEuro")
            Me.columnDB = MyBase.Columns("DB")
            Me.columnKapertstG = MyBase.Columns("KapertstG")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnSoli = MyBase.Columns("Soli")
            Me.columnKAPISTPFLICHTIG = MyBase.Columns("KAPISTPFLICHTIG")
            Me.columnBUNDESLAND = MyBase.Columns("BUNDESLAND")
            Me.columnIdValueCustomer = MyBase.Columns("IdValueCustomer")
            Me.columnIdZinsertragsMonat = MyBase.Columns("IdZinsertragsMonat")
            Me.columnIdErtragJahr = MyBase.Columns("IdErtragJahr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnValDateFrom = New Global.System.Data.DataColumn("ValDateFrom", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValDateFrom)
            Me.columnValDate = New Global.System.Data.DataColumn("ValDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValDate)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.columnValYear = New Global.System.Data.DataColumn("ValYear", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValYear)
            Me.columnCustomerName = New Global.System.Data.DataColumn("CustomerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnAccount = New Global.System.Data.DataColumn("Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccount)
            Me.columnRegistrationCountry = New Global.System.Data.DataColumn("RegistrationCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationCountry)
            Me.columnContract = New Global.System.Data.DataColumn("Contract", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract)
            Me.columnCCY = New Global.System.Data.DataColumn("CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY)
            Me.columnProduct = New Global.System.Data.DataColumn("Product", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.columnAmountEuro = New Global.System.Data.DataColumn("AmountEuro", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountEuro)
            Me.columnDB = New Global.System.Data.DataColumn("DB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDB)
            Me.columnKapertstG = New Global.System.Data.DataColumn("KapertstG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKapertstG)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnSoli = New Global.System.Data.DataColumn("Soli", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoli)
            Me.columnKAPISTPFLICHTIG = New Global.System.Data.DataColumn("KAPISTPFLICHTIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKAPISTPFLICHTIG)
            Me.columnBUNDESLAND = New Global.System.Data.DataColumn("BUNDESLAND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUNDESLAND)
            Me.columnIdValueCustomer = New Global.System.Data.DataColumn("IdValueCustomer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdValueCustomer)
            Me.columnIdZinsertragsMonat = New Global.System.Data.DataColumn("IdZinsertragsMonat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZinsertragsMonat)
            Me.columnIdErtragJahr = New Global.System.Data.DataColumn("IdErtragJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdErtragJahr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCustomer.MaxLength = 255
            Me.columnCustomerName.MaxLength = 255
            Me.columnAccount.MaxLength = 255
            Me.columnRegistrationCountry.MaxLength = 255
            Me.columnContract.MaxLength = 255
            Me.columnCCY.MaxLength = 255
            Me.columnProduct.MaxLength = 255
            Me.columnDB.MaxLength = 255
            Me.columnRemark.MaxLength = 255
            Me.columnKAPISTPFLICHTIG.MaxLength = 255
            Me.columnBUNDESLAND.MaxLength = 255
            Me.columnIdValueCustomer.MaxLength = 255
            Me.columnIdZinsertragsMonat.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZINSERTRAG_KUNDEN_DETAILSRow() As ZINSERTRAG_KUNDEN_DETAILSRow
            Return CType(Me.NewRow,ZINSERTRAG_KUNDEN_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZINSERTRAG_KUNDEN_DETAILSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZINSERTRAG_KUNDEN_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_DETAILSRowChanged(Me, New ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_DETAILSRowChanging(Me, New ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_DETAILSRowDeleted(Me, New ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_DETAILSRowDeleting(Me, New ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZINSERTRAG_KUNDEN_DETAILSRow(ByVal row As ZINSERTRAG_KUNDEN_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZINSERTRAG_KUNDEN_DETAILSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_JAHRDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZINSERTRAG_KUNDEN_JAHRRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnErtragsJahr As Global.System.Data.DataColumn
        
        Private columnSummeKapErSt As Global.System.Data.DataColumn
        
        Private columnSummeSoli As Global.System.Data.DataColumn
        
        Private columnIdBank As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZINSERTRAG KUNDEN JAHR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ErtragsJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnErtragsJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SummeKapErStColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSummeKapErSt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SummeSoliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSummeSoli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdBankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZINSERTRAG_KUNDEN_JAHRRow
            Get
                Return CType(Me.Rows(index),ZINSERTRAG_KUNDEN_JAHRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_JAHRRowChanging As ZINSERTRAG_KUNDEN_JAHRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_JAHRRowChanged As ZINSERTRAG_KUNDEN_JAHRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_JAHRRowDeleting As ZINSERTRAG_KUNDEN_JAHRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_JAHRRowDeleted As ZINSERTRAG_KUNDEN_JAHRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZINSERTRAG_KUNDEN_JAHRRow(ByVal row As ZINSERTRAG_KUNDEN_JAHRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZINSERTRAG_KUNDEN_JAHRRow(ByVal ErtragsJahr As Double, ByVal SummeKapErSt As Double, ByVal SummeSoli As Double, ByVal IdBank As Integer) As ZINSERTRAG_KUNDEN_JAHRRow
            Dim rowZINSERTRAG_KUNDEN_JAHRRow As ZINSERTRAG_KUNDEN_JAHRRow = CType(Me.NewRow,ZINSERTRAG_KUNDEN_JAHRRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ErtragsJahr, SummeKapErSt, SummeSoli, IdBank}
            rowZINSERTRAG_KUNDEN_JAHRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZINSERTRAG_KUNDEN_JAHRRow)
            Return rowZINSERTRAG_KUNDEN_JAHRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByErtragsJahr(ByVal ErtragsJahr As Double) As ZINSERTRAG_KUNDEN_JAHRRow
            Return CType(Me.Rows.Find(New Object() {ErtragsJahr}),ZINSERTRAG_KUNDEN_JAHRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZINSERTRAG_KUNDEN_JAHRDataTable = CType(MyBase.Clone,ZINSERTRAG_KUNDEN_JAHRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZINSERTRAG_KUNDEN_JAHRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnErtragsJahr = MyBase.Columns("ErtragsJahr")
            Me.columnSummeKapErSt = MyBase.Columns("SummeKapErSt")
            Me.columnSummeSoli = MyBase.Columns("SummeSoli")
            Me.columnIdBank = MyBase.Columns("IdBank")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnErtragsJahr = New Global.System.Data.DataColumn("ErtragsJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnErtragsJahr)
            Me.columnSummeKapErSt = New Global.System.Data.DataColumn("SummeKapErSt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSummeKapErSt)
            Me.columnSummeSoli = New Global.System.Data.DataColumn("SummeSoli", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSummeSoli)
            Me.columnIdBank = New Global.System.Data.DataColumn("IdBank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBank)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnErtragsJahr}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnErtragsJahr.AllowDBNull = false
            Me.columnErtragsJahr.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZINSERTRAG_KUNDEN_JAHRRow() As ZINSERTRAG_KUNDEN_JAHRRow
            Return CType(Me.NewRow,ZINSERTRAG_KUNDEN_JAHRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZINSERTRAG_KUNDEN_JAHRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZINSERTRAG_KUNDEN_JAHRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_JAHRRowChangedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_JAHRRowChanged(Me, New ZINSERTRAG_KUNDEN_JAHRRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_JAHRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_JAHRRowChangingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_JAHRRowChanging(Me, New ZINSERTRAG_KUNDEN_JAHRRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_JAHRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_JAHRRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_JAHRRowDeleted(Me, New ZINSERTRAG_KUNDEN_JAHRRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_JAHRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_JAHRRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_JAHRRowDeleting(Me, New ZINSERTRAG_KUNDEN_JAHRRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_JAHRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZINSERTRAG_KUNDEN_JAHRRow(ByVal row As ZINSERTRAG_KUNDEN_JAHRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZINSERTRAG_KUNDEN_JAHRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_MONATDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZINSERTRAG_KUNDEN_MONATRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnZinsertragsmonat As Global.System.Data.DataColumn
        
        Private columnSummeKapErSt As Global.System.Data.DataColumn
        
        Private columnSummeSoli As Global.System.Data.DataColumn
        
        Private columnIdZinsertragJahr As Global.System.Data.DataColumn
        
        Private columnZinsertragsmonatDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZINSERTRAG KUNDEN MONAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ZinsertragsmonatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZinsertragsmonat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SummeKapErStColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSummeKapErSt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SummeSoliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSummeSoli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZinsertragJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZinsertragJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ZinsertragsmonatDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZinsertragsmonatDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZINSERTRAG_KUNDEN_MONATRow
            Get
                Return CType(Me.Rows(index),ZINSERTRAG_KUNDEN_MONATRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_MONATRowChanging As ZINSERTRAG_KUNDEN_MONATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_MONATRowChanged As ZINSERTRAG_KUNDEN_MONATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_MONATRowDeleting As ZINSERTRAG_KUNDEN_MONATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZINSERTRAG_KUNDEN_MONATRowDeleted As ZINSERTRAG_KUNDEN_MONATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZINSERTRAG_KUNDEN_MONATRow(ByVal row As ZINSERTRAG_KUNDEN_MONATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZINSERTRAG_KUNDEN_MONATRow(ByVal Zinsertragsmonat As String, ByVal SummeKapErSt As Double, ByVal SummeSoli As Double, ByVal parentZINSERTRAG_KUNDEN_JAHRRowByZINSERTRAG_KUNDEN_MONAT_FK00 As ZINSERTRAG_KUNDEN_JAHRRow, ByVal ZinsertragsmonatDATE As Date) As ZINSERTRAG_KUNDEN_MONATRow
            Dim rowZINSERTRAG_KUNDEN_MONATRow As ZINSERTRAG_KUNDEN_MONATRow = CType(Me.NewRow,ZINSERTRAG_KUNDEN_MONATRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Zinsertragsmonat, SummeKapErSt, SummeSoli, Nothing, ZinsertragsmonatDATE}
            If (Not (parentZINSERTRAG_KUNDEN_JAHRRowByZINSERTRAG_KUNDEN_MONAT_FK00) Is Nothing) Then
                columnValuesArray(4) = parentZINSERTRAG_KUNDEN_JAHRRowByZINSERTRAG_KUNDEN_MONAT_FK00(1)
            End If
            rowZINSERTRAG_KUNDEN_MONATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZINSERTRAG_KUNDEN_MONATRow)
            Return rowZINSERTRAG_KUNDEN_MONATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByZinsertragsmonat(ByVal Zinsertragsmonat As String) As ZINSERTRAG_KUNDEN_MONATRow
            Return CType(Me.Rows.Find(New Object() {Zinsertragsmonat}),ZINSERTRAG_KUNDEN_MONATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZINSERTRAG_KUNDEN_MONATDataTable = CType(MyBase.Clone,ZINSERTRAG_KUNDEN_MONATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZINSERTRAG_KUNDEN_MONATDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnZinsertragsmonat = MyBase.Columns("Zinsertragsmonat")
            Me.columnSummeKapErSt = MyBase.Columns("SummeKapErSt")
            Me.columnSummeSoli = MyBase.Columns("SummeSoli")
            Me.columnIdZinsertragJahr = MyBase.Columns("IdZinsertragJahr")
            Me.columnZinsertragsmonatDATE = MyBase.Columns("ZinsertragsmonatDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnZinsertragsmonat = New Global.System.Data.DataColumn("Zinsertragsmonat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZinsertragsmonat)
            Me.columnSummeKapErSt = New Global.System.Data.DataColumn("SummeKapErSt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSummeKapErSt)
            Me.columnSummeSoli = New Global.System.Data.DataColumn("SummeSoli", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSummeSoli)
            Me.columnIdZinsertragJahr = New Global.System.Data.DataColumn("IdZinsertragJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZinsertragJahr)
            Me.columnZinsertragsmonatDATE = New Global.System.Data.DataColumn("ZinsertragsmonatDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZinsertragsmonatDATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnZinsertragsmonat}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnZinsertragsmonat.AllowDBNull = false
            Me.columnZinsertragsmonat.Unique = true
            Me.columnZinsertragsmonat.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZINSERTRAG_KUNDEN_MONATRow() As ZINSERTRAG_KUNDEN_MONATRow
            Return CType(Me.NewRow,ZINSERTRAG_KUNDEN_MONATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZINSERTRAG_KUNDEN_MONATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZINSERTRAG_KUNDEN_MONATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_MONATRowChangedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_MONATRowChanged(Me, New ZINSERTRAG_KUNDEN_MONATRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_MONATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_MONATRowChangingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_MONATRowChanging(Me, New ZINSERTRAG_KUNDEN_MONATRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_MONATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_MONATRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_MONATRowDeleted(Me, New ZINSERTRAG_KUNDEN_MONATRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_MONATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZINSERTRAG_KUNDEN_MONATRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZINSERTRAG_KUNDEN_MONATRowDeleting(Me, New ZINSERTRAG_KUNDEN_MONATRowChangeEvent(CType(e.Row,ZINSERTRAG_KUNDEN_MONATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZINSERTRAG_KUNDEN_MONATRow(ByVal row As ZINSERTRAG_KUNDEN_MONATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZINSERTRAG_KUNDEN_MONATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPLOYES_YEAR_AVERAGEDataTable
        Inherits Global.System.Data.TypedTableBase(Of EMPLOYES_YEAR_AVERAGERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnJahrLfd As Global.System.Data.DataColumn
        
        Private column1VJ As Global.System.Data.DataColumn
        
        Private column2VJ As Global.System.Data.DataColumn
        
        Private column3VJ As Global.System.Data.DataColumn
        
        Private column4VJ As Global.System.Data.DataColumn
        
        Private columnEmplAverage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPLOYES YEAR AVERAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property JahrLfdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJahrLfd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _1VJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column1VJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _2VJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column2VJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _3VJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column3VJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _4VJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column4VJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EmplAverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmplAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPLOYES_YEAR_AVERAGERow
            Get
                Return CType(Me.Rows(index),EMPLOYES_YEAR_AVERAGERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event EMPLOYES_YEAR_AVERAGERowChanging As EMPLOYES_YEAR_AVERAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event EMPLOYES_YEAR_AVERAGERowChanged As EMPLOYES_YEAR_AVERAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event EMPLOYES_YEAR_AVERAGERowDeleting As EMPLOYES_YEAR_AVERAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event EMPLOYES_YEAR_AVERAGERowDeleted As EMPLOYES_YEAR_AVERAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddEMPLOYES_YEAR_AVERAGERow(ByVal row As EMPLOYES_YEAR_AVERAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddEMPLOYES_YEAR_AVERAGERow(ByVal JahrLfd As Double, ByVal _1VJ As Double, ByVal _2VJ As Double, ByVal _3VJ As Double, ByVal _4VJ As Double, ByVal EmplAverage As Double) As EMPLOYES_YEAR_AVERAGERow
            Dim rowEMPLOYES_YEAR_AVERAGERow As EMPLOYES_YEAR_AVERAGERow = CType(Me.NewRow,EMPLOYES_YEAR_AVERAGERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, JahrLfd, _1VJ, _2VJ, _3VJ, _4VJ, EmplAverage}
            rowEMPLOYES_YEAR_AVERAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEMPLOYES_YEAR_AVERAGERow)
            Return rowEMPLOYES_YEAR_AVERAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As EMPLOYES_YEAR_AVERAGERow
            Return CType(Me.Rows.Find(New Object() {ID}),EMPLOYES_YEAR_AVERAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EMPLOYES_YEAR_AVERAGEDataTable = CType(MyBase.Clone,EMPLOYES_YEAR_AVERAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EMPLOYES_YEAR_AVERAGEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnJahrLfd = MyBase.Columns("JahrLfd")
            Me.column1VJ = MyBase.Columns("1VJ")
            Me.column2VJ = MyBase.Columns("2VJ")
            Me.column3VJ = MyBase.Columns("3VJ")
            Me.column4VJ = MyBase.Columns("4VJ")
            Me.columnEmplAverage = MyBase.Columns("EmplAverage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnJahrLfd = New Global.System.Data.DataColumn("JahrLfd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJahrLfd)
            Me.column1VJ = New Global.System.Data.DataColumn("1VJ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.column1VJ.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1VJ")
            Me.column1VJ.ExtendedProperties.Add("Generator_UserColumnName", "1VJ")
            MyBase.Columns.Add(Me.column1VJ)
            Me.column2VJ = New Global.System.Data.DataColumn("2VJ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.column2VJ.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2VJ")
            Me.column2VJ.ExtendedProperties.Add("Generator_UserColumnName", "2VJ")
            MyBase.Columns.Add(Me.column2VJ)
            Me.column3VJ = New Global.System.Data.DataColumn("3VJ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.column3VJ.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column3VJ")
            Me.column3VJ.ExtendedProperties.Add("Generator_UserColumnName", "3VJ")
            MyBase.Columns.Add(Me.column3VJ)
            Me.column4VJ = New Global.System.Data.DataColumn("4VJ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.column4VJ.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column4VJ")
            Me.column4VJ.ExtendedProperties.Add("Generator_UserColumnName", "4VJ")
            MyBase.Columns.Add(Me.column4VJ)
            Me.columnEmplAverage = New Global.System.Data.DataColumn("EmplAverage", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmplAverage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewEMPLOYES_YEAR_AVERAGERow() As EMPLOYES_YEAR_AVERAGERow
            Return CType(Me.NewRow,EMPLOYES_YEAR_AVERAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EMPLOYES_YEAR_AVERAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EMPLOYES_YEAR_AVERAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPLOYES_YEAR_AVERAGERowChangedEvent) Is Nothing) Then
                RaiseEvent EMPLOYES_YEAR_AVERAGERowChanged(Me, New EMPLOYES_YEAR_AVERAGERowChangeEvent(CType(e.Row,EMPLOYES_YEAR_AVERAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPLOYES_YEAR_AVERAGERowChangingEvent) Is Nothing) Then
                RaiseEvent EMPLOYES_YEAR_AVERAGERowChanging(Me, New EMPLOYES_YEAR_AVERAGERowChangeEvent(CType(e.Row,EMPLOYES_YEAR_AVERAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPLOYES_YEAR_AVERAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPLOYES_YEAR_AVERAGERowDeleted(Me, New EMPLOYES_YEAR_AVERAGERowChangeEvent(CType(e.Row,EMPLOYES_YEAR_AVERAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPLOYES_YEAR_AVERAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPLOYES_YEAR_AVERAGERowDeleting(Me, New EMPLOYES_YEAR_AVERAGERowChangeEvent(CType(e.Row,EMPLOYES_YEAR_AVERAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveEMPLOYES_YEAR_AVERAGERow(ByVal row As EMPLOYES_YEAR_AVERAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPLOYES_YEAR_AVERAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTA_FormsTill2013DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTA_FormsTill2013Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFormSchema As Global.System.Data.DataColumn
        
        Private columnFormSchemaName As Global.System.Data.DataColumn
        
        Private columnIdZVSTA_Meldejahr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTA_FormsTill2013"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FormSchemaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormSchema
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FormSchemaNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormSchemaName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZVSTA_MeldejahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZVSTA_Meldejahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTA_FormsTill2013Row
            Get
                Return CType(Me.Rows(index),ZVSTA_FormsTill2013Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_FormsTill2013RowChanging As ZVSTA_FormsTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_FormsTill2013RowChanged As ZVSTA_FormsTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_FormsTill2013RowDeleting As ZVSTA_FormsTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_FormsTill2013RowDeleted As ZVSTA_FormsTill2013RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTA_FormsTill2013Row(ByVal row As ZVSTA_FormsTill2013Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTA_FormsTill2013Row(ByVal FormSchema As String, ByVal FormSchemaName As String, ByVal parentZVSTATill2013RowByFK_ZVSTA_Formstill2013_ZVSTAtill2013 As ZVSTATill2013Row) As ZVSTA_FormsTill2013Row
            Dim rowZVSTA_FormsTill2013Row As ZVSTA_FormsTill2013Row = CType(Me.NewRow,ZVSTA_FormsTill2013Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, FormSchema, FormSchemaName, Nothing}
            If (Not (parentZVSTATill2013RowByFK_ZVSTA_Formstill2013_ZVSTAtill2013) Is Nothing) Then
                columnValuesArray(3) = parentZVSTATill2013RowByFK_ZVSTA_Formstill2013_ZVSTAtill2013(1)
            End If
            rowZVSTA_FormsTill2013Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTA_FormsTill2013Row)
            Return rowZVSTA_FormsTill2013Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByFormSchema(ByVal FormSchema As String) As ZVSTA_FormsTill2013Row
            Return CType(Me.Rows.Find(New Object() {FormSchema}),ZVSTA_FormsTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTA_FormsTill2013DataTable = CType(MyBase.Clone,ZVSTA_FormsTill2013DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTA_FormsTill2013DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFormSchema = MyBase.Columns("FormSchema")
            Me.columnFormSchemaName = MyBase.Columns("FormSchemaName")
            Me.columnIdZVSTA_Meldejahr = MyBase.Columns("IdZVSTA_Meldejahr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFormSchema = New Global.System.Data.DataColumn("FormSchema", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormSchema)
            Me.columnFormSchemaName = New Global.System.Data.DataColumn("FormSchemaName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormSchemaName)
            Me.columnIdZVSTA_Meldejahr = New Global.System.Data.DataColumn("IdZVSTA_Meldejahr", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZVSTA_Meldejahr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFormSchema}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnFormSchema.AllowDBNull = false
            Me.columnFormSchema.Unique = true
            Me.columnFormSchema.MaxLength = 255
            Me.columnFormSchemaName.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTA_FormsTill2013Row() As ZVSTA_FormsTill2013Row
            Return CType(Me.NewRow,ZVSTA_FormsTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTA_FormsTill2013Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTA_FormsTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTA_FormsTill2013RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTA_FormsTill2013RowChanged(Me, New ZVSTA_FormsTill2013RowChangeEvent(CType(e.Row,ZVSTA_FormsTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTA_FormsTill2013RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTA_FormsTill2013RowChanging(Me, New ZVSTA_FormsTill2013RowChangeEvent(CType(e.Row,ZVSTA_FormsTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTA_FormsTill2013RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTA_FormsTill2013RowDeleted(Me, New ZVSTA_FormsTill2013RowChangeEvent(CType(e.Row,ZVSTA_FormsTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTA_FormsTill2013RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTA_FormsTill2013RowDeleting(Me, New ZVSTA_FormsTill2013RowChangeEvent(CType(e.Row,ZVSTA_FormsTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTA_FormsTill2013Row(ByVal row As ZVSTA_FormsTill2013Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTA_FormsTill2013DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTA_ProdTill2013DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTA_ProdTill2013Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFeldname As Global.System.Data.DataColumn
        
        Private columnFeldposition As Global.System.Data.DataColumn
        
        Private columnFeldeinheit As Global.System.Data.DataColumn
        
        Private columnFelddim As Global.System.Data.DataColumn
        
        Private columnFeldvalue As Global.System.Data.DataColumn
        
        Private columnFeldSQLcommand As Global.System.Data.DataColumn
        
        Private columnFeldvalueRep As Global.System.Data.DataColumn
        
        Private columnFeldSQLcommandSum As Global.System.Data.DataColumn
        
        Private columnFeldmemo As Global.System.Data.DataColumn
        
        Private columnIdZVSTA_Forms As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTA_ProdTill2013"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldpositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldposition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldeinheitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldeinheit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FelddimColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFelddim
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldvalueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldvalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldSQLcommandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldSQLcommand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldvalueRepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldvalueRep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldSQLcommandSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldSQLcommandSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FeldmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeldmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdZVSTA_FormsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdZVSTA_Forms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTA_ProdTill2013Row
            Get
                Return CType(Me.Rows(index),ZVSTA_ProdTill2013Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_ProdTill2013RowChanging As ZVSTA_ProdTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_ProdTill2013RowChanged As ZVSTA_ProdTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_ProdTill2013RowDeleting As ZVSTA_ProdTill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTA_ProdTill2013RowDeleted As ZVSTA_ProdTill2013RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTA_ProdTill2013Row(ByVal row As ZVSTA_ProdTill2013Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTA_ProdTill2013Row(ByVal Feldname As String, ByVal Feldposition As String, ByVal Feldeinheit As String, ByVal Felddim As String, ByVal Feldvalue As Double, ByVal FeldSQLcommand As String, ByVal FeldvalueRep As Double, ByVal FeldSQLcommandSum As String, ByVal Feldmemo As String, ByVal parentZVSTA_FormsTill2013RowByFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013 As ZVSTA_FormsTill2013Row) As ZVSTA_ProdTill2013Row
            Dim rowZVSTA_ProdTill2013Row As ZVSTA_ProdTill2013Row = CType(Me.NewRow,ZVSTA_ProdTill2013Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, Feldname, Feldposition, Feldeinheit, Felddim, Feldvalue, FeldSQLcommand, FeldvalueRep, FeldSQLcommandSum, Feldmemo, Nothing}
            If (Not (parentZVSTA_FormsTill2013RowByFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013) Is Nothing) Then
                columnValuesArray(10) = parentZVSTA_FormsTill2013RowByFK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013(1)
            End If
            rowZVSTA_ProdTill2013Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTA_ProdTill2013Row)
            Return rowZVSTA_ProdTill2013Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTA_ProdTill2013Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTA_ProdTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTA_ProdTill2013DataTable = CType(MyBase.Clone,ZVSTA_ProdTill2013DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTA_ProdTill2013DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFeldname = MyBase.Columns("Feldname")
            Me.columnFeldposition = MyBase.Columns("Feldposition")
            Me.columnFeldeinheit = MyBase.Columns("Feldeinheit")
            Me.columnFelddim = MyBase.Columns("Felddim")
            Me.columnFeldvalue = MyBase.Columns("Feldvalue")
            Me.columnFeldSQLcommand = MyBase.Columns("FeldSQLcommand")
            Me.columnFeldvalueRep = MyBase.Columns("FeldvalueRep")
            Me.columnFeldSQLcommandSum = MyBase.Columns("FeldSQLcommandSum")
            Me.columnFeldmemo = MyBase.Columns("Feldmemo")
            Me.columnIdZVSTA_Forms = MyBase.Columns("IdZVSTA_Forms")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFeldname = New Global.System.Data.DataColumn("Feldname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldname)
            Me.columnFeldposition = New Global.System.Data.DataColumn("Feldposition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldposition)
            Me.columnFeldeinheit = New Global.System.Data.DataColumn("Feldeinheit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldeinheit)
            Me.columnFelddim = New Global.System.Data.DataColumn("Felddim", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFelddim)
            Me.columnFeldvalue = New Global.System.Data.DataColumn("Feldvalue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldvalue)
            Me.columnFeldSQLcommand = New Global.System.Data.DataColumn("FeldSQLcommand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldSQLcommand)
            Me.columnFeldvalueRep = New Global.System.Data.DataColumn("FeldvalueRep", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldvalueRep)
            Me.columnFeldSQLcommandSum = New Global.System.Data.DataColumn("FeldSQLcommandSum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldSQLcommandSum)
            Me.columnFeldmemo = New Global.System.Data.DataColumn("Feldmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeldmemo)
            Me.columnIdZVSTA_Forms = New Global.System.Data.DataColumn("IdZVSTA_Forms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdZVSTA_Forms)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnFeldname.MaxLength = 255
            Me.columnFeldposition.MaxLength = 255
            Me.columnFeldeinheit.MaxLength = 255
            Me.columnFelddim.MaxLength = 255
            Me.columnFeldSQLcommand.MaxLength = 1073741823
            Me.columnFeldSQLcommandSum.MaxLength = 1073741823
            Me.columnFeldmemo.MaxLength = 1073741823
            Me.columnIdZVSTA_Forms.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTA_ProdTill2013Row() As ZVSTA_ProdTill2013Row
            Return CType(Me.NewRow,ZVSTA_ProdTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTA_ProdTill2013Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTA_ProdTill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTA_ProdTill2013RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTA_ProdTill2013RowChanged(Me, New ZVSTA_ProdTill2013RowChangeEvent(CType(e.Row,ZVSTA_ProdTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTA_ProdTill2013RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTA_ProdTill2013RowChanging(Me, New ZVSTA_ProdTill2013RowChangeEvent(CType(e.Row,ZVSTA_ProdTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTA_ProdTill2013RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTA_ProdTill2013RowDeleted(Me, New ZVSTA_ProdTill2013RowChangeEvent(CType(e.Row,ZVSTA_ProdTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTA_ProdTill2013RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTA_ProdTill2013RowDeleting(Me, New ZVSTA_ProdTill2013RowChangeEvent(CType(e.Row,ZVSTA_ProdTill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTA_ProdTill2013Row(ByVal row As ZVSTA_ProdTill2013Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTA_ProdTill2013DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTATill2013DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTATill2013Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnZVSTAMeldeJahr As Global.System.Data.DataColumn
        
        Private columnMeldeJahr As Global.System.Data.DataColumn
        
        Private columnBemerkungen As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        Private columnIdBank As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTATill2013"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ZVSTAMeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZVSTAMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BemerkungenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBemerkungen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdBankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTATill2013Row
            Get
                Return CType(Me.Rows(index),ZVSTATill2013Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTATill2013RowChanging As ZVSTATill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTATill2013RowChanged As ZVSTATill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTATill2013RowDeleting As ZVSTATill2013RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTATill2013RowDeleted As ZVSTATill2013RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTATill2013Row(ByVal row As ZVSTATill2013Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTATill2013Row(ByVal ZVSTAMeldeJahr As Date, ByVal MeldeJahr As Double, ByVal Bemerkungen As String, ByVal USER As String, ByVal IdBank As Integer) As ZVSTATill2013Row
            Dim rowZVSTATill2013Row As ZVSTATill2013Row = CType(Me.NewRow,ZVSTATill2013Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, ZVSTAMeldeJahr, MeldeJahr, Bemerkungen, USER, IdBank}
            rowZVSTATill2013Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTATill2013Row)
            Return rowZVSTATill2013Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByZVSTAMeldeJahr(ByVal ZVSTAMeldeJahr As Date) As ZVSTATill2013Row
            Return CType(Me.Rows.Find(New Object() {ZVSTAMeldeJahr}),ZVSTATill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTATill2013DataTable = CType(MyBase.Clone,ZVSTATill2013DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTATill2013DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnZVSTAMeldeJahr = MyBase.Columns("ZVSTAMeldeJahr")
            Me.columnMeldeJahr = MyBase.Columns("MeldeJahr")
            Me.columnBemerkungen = MyBase.Columns("Bemerkungen")
            Me.columnUSER = MyBase.Columns("USER")
            Me.columnIdBank = MyBase.Columns("IdBank")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnZVSTAMeldeJahr = New Global.System.Data.DataColumn("ZVSTAMeldeJahr", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZVSTAMeldeJahr)
            Me.columnMeldeJahr = New Global.System.Data.DataColumn("MeldeJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeJahr)
            Me.columnBemerkungen = New Global.System.Data.DataColumn("Bemerkungen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBemerkungen)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.columnIdBank = New Global.System.Data.DataColumn("IdBank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBank)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnZVSTAMeldeJahr}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnZVSTAMeldeJahr.AllowDBNull = false
            Me.columnZVSTAMeldeJahr.Unique = true
            Me.columnBemerkungen.MaxLength = 1073741823
            Me.columnUSER.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTATill2013Row() As ZVSTATill2013Row
            Return CType(Me.NewRow,ZVSTATill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTATill2013Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTATill2013Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTATill2013RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTATill2013RowChanged(Me, New ZVSTATill2013RowChangeEvent(CType(e.Row,ZVSTATill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTATill2013RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTATill2013RowChanging(Me, New ZVSTATill2013RowChangeEvent(CType(e.Row,ZVSTATill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTATill2013RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTATill2013RowDeleted(Me, New ZVSTATill2013RowChangeEvent(CType(e.Row,ZVSTATill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTATill2013RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTATill2013RowDeleting(Me, New ZVSTATill2013RowChangeEvent(CType(e.Row,ZVSTATill2013Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTATill2013Row(ByVal row As ZVSTATill2013Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTATill2013DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTAT_Parameters_from2014DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTAT_Parameters_from2014Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFormNr As Global.System.Data.DataColumn
        
        Private columnFormName As Global.System.Data.DataColumn
        
        Private columnPositionNr As Global.System.Data.DataColumn
        
        Private columnPositionName As Global.System.Data.DataColumn
        
        Private columnLandkontext As Global.System.Data.DataColumn
        
        Private columnLandCode As Global.System.Data.DataColumn
        
        Private columnAnzahl As Global.System.Data.DataColumn
        
        Private columnWert As Global.System.Data.DataColumn
        
        Private columnPositionSQLcommand As Global.System.Data.DataColumn
        
        Private columnLfdNr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTAT_Parameters_from2014"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FormNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FormNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LandkontextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLandkontext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LandCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLandCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AnzahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnzahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionSQLcommandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionSQLcommand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LfdNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLfdNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTAT_Parameters_from2014Row
            Get
                Return CType(Me.Rows(index),ZVSTAT_Parameters_from2014Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Parameters_from2014RowChanging As ZVSTAT_Parameters_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Parameters_from2014RowChanged As ZVSTAT_Parameters_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Parameters_from2014RowDeleting As ZVSTAT_Parameters_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Parameters_from2014RowDeleted As ZVSTAT_Parameters_from2014RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTAT_Parameters_from2014Row(ByVal row As ZVSTAT_Parameters_from2014Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTAT_Parameters_from2014Row(ByVal FormNr As String, ByVal FormName As String, ByVal PositionNr As String, ByVal PositionName As String, ByVal Landkontext As String, ByVal LandCode As String, ByVal Anzahl As String, ByVal Wert As String, ByVal PositionSQLcommand As String, ByVal LfdNr As Double) As ZVSTAT_Parameters_from2014Row
            Dim rowZVSTAT_Parameters_from2014Row As ZVSTAT_Parameters_from2014Row = CType(Me.NewRow,ZVSTAT_Parameters_from2014Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, FormNr, FormName, PositionNr, PositionName, Landkontext, LandCode, Anzahl, Wert, PositionSQLcommand, LfdNr}
            rowZVSTAT_Parameters_from2014Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTAT_Parameters_from2014Row)
            Return rowZVSTAT_Parameters_from2014Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTAT_Parameters_from2014Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTAT_Parameters_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTAT_Parameters_from2014DataTable = CType(MyBase.Clone,ZVSTAT_Parameters_from2014DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTAT_Parameters_from2014DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFormNr = MyBase.Columns("FormNr")
            Me.columnFormName = MyBase.Columns("FormName")
            Me.columnPositionNr = MyBase.Columns("PositionNr")
            Me.columnPositionName = MyBase.Columns("PositionName")
            Me.columnLandkontext = MyBase.Columns("Landkontext")
            Me.columnLandCode = MyBase.Columns("LandCode")
            Me.columnAnzahl = MyBase.Columns("Anzahl")
            Me.columnWert = MyBase.Columns("Wert")
            Me.columnPositionSQLcommand = MyBase.Columns("PositionSQLcommand")
            Me.columnLfdNr = MyBase.Columns("LfdNr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFormNr = New Global.System.Data.DataColumn("FormNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormNr)
            Me.columnFormName = New Global.System.Data.DataColumn("FormName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormName)
            Me.columnPositionNr = New Global.System.Data.DataColumn("PositionNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionNr)
            Me.columnPositionName = New Global.System.Data.DataColumn("PositionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionName)
            Me.columnLandkontext = New Global.System.Data.DataColumn("Landkontext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLandkontext)
            Me.columnLandCode = New Global.System.Data.DataColumn("LandCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLandCode)
            Me.columnAnzahl = New Global.System.Data.DataColumn("Anzahl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnzahl)
            Me.columnWert = New Global.System.Data.DataColumn("Wert", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWert)
            Me.columnPositionSQLcommand = New Global.System.Data.DataColumn("PositionSQLcommand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionSQLcommand)
            Me.columnLfdNr = New Global.System.Data.DataColumn("LfdNr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLfdNr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnFormNr.MaxLength = 10
            Me.columnFormName.MaxLength = 255
            Me.columnPositionNr.MaxLength = 50
            Me.columnPositionName.MaxLength = 255
            Me.columnLandkontext.MaxLength = 10
            Me.columnLandCode.MaxLength = 2
            Me.columnAnzahl.MaxLength = 1
            Me.columnWert.MaxLength = 1
            Me.columnPositionSQLcommand.MaxLength = 1073741823
            Me.columnLfdNr.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTAT_Parameters_from2014Row() As ZVSTAT_Parameters_from2014Row
            Return CType(Me.NewRow,ZVSTAT_Parameters_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTAT_Parameters_from2014Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTAT_Parameters_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTAT_Parameters_from2014RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Parameters_from2014RowChanged(Me, New ZVSTAT_Parameters_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Parameters_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTAT_Parameters_from2014RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Parameters_from2014RowChanging(Me, New ZVSTAT_Parameters_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Parameters_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTAT_Parameters_from2014RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Parameters_from2014RowDeleted(Me, New ZVSTAT_Parameters_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Parameters_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTAT_Parameters_from2014RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Parameters_from2014RowDeleting(Me, New ZVSTAT_Parameters_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Parameters_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTAT_Parameters_from2014Row(ByVal row As ZVSTAT_Parameters_from2014Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTAT_Parameters_from2014DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTAT_Details_from2014DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTAT_Details_from2014Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnReportYear As Global.System.Data.DataColumn
        
        Private columnRegisterDate As Global.System.Data.DataColumn
        
        Private columnValueDate As Global.System.Data.DataColumn
        
        Private columnOrig_Cur As Global.System.Data.DataColumn
        
        Private columnOrig_Amt As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        Private columnAmt_EUR As Global.System.Data.DataColumn
        
        Private columnPaym_Art As Global.System.Data.DataColumn
        
        Private columnIdMeldepositionen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTAT_Details_from2014"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReportYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegisterDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegisterDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Orig_CurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrig_Cur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Orig_AmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrig_Amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Amt_EURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_EUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Paym_ArtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaym_Art
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdMeldepositionenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdMeldepositionen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTAT_Details_from2014Row
            Get
                Return CType(Me.Rows(index),ZVSTAT_Details_from2014Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Details_from2014RowChanging As ZVSTAT_Details_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Details_from2014RowChanged As ZVSTAT_Details_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Details_from2014RowDeleting As ZVSTAT_Details_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Details_from2014RowDeleted As ZVSTAT_Details_from2014RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTAT_Details_from2014Row(ByVal row As ZVSTAT_Details_from2014Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTAT_Details_from2014Row(ByVal Description As String, ByVal Reference As String, ByVal ReportYear As Integer, ByVal RegisterDate As Date, ByVal ValueDate As Date, ByVal Orig_Cur As String, ByVal Orig_Amt As Double, ByVal ExchangeRate As Double, ByVal Amt_EUR As Double, ByVal Paym_Art As String, ByVal parentZVSTAT_Meldepositionen_from2014RowByFK_Meldepositionen_from2014 As ZVSTAT_Meldepositionen_from2014Row) As ZVSTAT_Details_from2014Row
            Dim rowZVSTAT_Details_from2014Row As ZVSTAT_Details_from2014Row = CType(Me.NewRow,ZVSTAT_Details_from2014Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, Description, Reference, ReportYear, RegisterDate, ValueDate, Orig_Cur, Orig_Amt, ExchangeRate, Amt_EUR, Paym_Art, Nothing}
            If (Not (parentZVSTAT_Meldepositionen_from2014RowByFK_Meldepositionen_from2014) Is Nothing) Then
                columnValuesArray(11) = parentZVSTAT_Meldepositionen_from2014RowByFK_Meldepositionen_from2014(0)
            End If
            rowZVSTAT_Details_from2014Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTAT_Details_from2014Row)
            Return rowZVSTAT_Details_from2014Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTAT_Details_from2014Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTAT_Details_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTAT_Details_from2014DataTable = CType(MyBase.Clone,ZVSTAT_Details_from2014DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTAT_Details_from2014DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnReportYear = MyBase.Columns("ReportYear")
            Me.columnRegisterDate = MyBase.Columns("RegisterDate")
            Me.columnValueDate = MyBase.Columns("ValueDate")
            Me.columnOrig_Cur = MyBase.Columns("Orig_Cur")
            Me.columnOrig_Amt = MyBase.Columns("Orig_Amt")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
            Me.columnAmt_EUR = MyBase.Columns("Amt_EUR")
            Me.columnPaym_Art = MyBase.Columns("Paym_Art")
            Me.columnIdMeldepositionen = MyBase.Columns("IdMeldepositionen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnReportYear = New Global.System.Data.DataColumn("ReportYear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportYear)
            Me.columnRegisterDate = New Global.System.Data.DataColumn("RegisterDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegisterDate)
            Me.columnValueDate = New Global.System.Data.DataColumn("ValueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueDate)
            Me.columnOrig_Cur = New Global.System.Data.DataColumn("Orig_Cur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrig_Cur)
            Me.columnOrig_Amt = New Global.System.Data.DataColumn("Orig_Amt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrig_Amt)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.columnAmt_EUR = New Global.System.Data.DataColumn("Amt_EUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_EUR)
            Me.columnPaym_Art = New Global.System.Data.DataColumn("Paym_Art", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaym_Art)
            Me.columnIdMeldepositionen = New Global.System.Data.DataColumn("IdMeldepositionen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdMeldepositionen)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDescription.MaxLength = 50
            Me.columnReference.MaxLength = 150
            Me.columnOrig_Cur.MaxLength = 3
            Me.columnPaym_Art.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTAT_Details_from2014Row() As ZVSTAT_Details_from2014Row
            Return CType(Me.NewRow,ZVSTAT_Details_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTAT_Details_from2014Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTAT_Details_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTAT_Details_from2014RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Details_from2014RowChanged(Me, New ZVSTAT_Details_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Details_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTAT_Details_from2014RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Details_from2014RowChanging(Me, New ZVSTAT_Details_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Details_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTAT_Details_from2014RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Details_from2014RowDeleted(Me, New ZVSTAT_Details_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Details_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTAT_Details_from2014RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Details_from2014RowDeleting(Me, New ZVSTAT_Details_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Details_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTAT_Details_from2014Row(ByVal row As ZVSTAT_Details_from2014Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTAT_Details_from2014DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTAT_MeldeJahr_from2014DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTAT_MeldeJahr_from2014Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMeldeJahr As Global.System.Data.DataColumn
        
        Private columnReportLocked As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTAT_MeldeJahr_from2014"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReportLockedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportLocked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTAT_MeldeJahr_from2014Row
            Get
                Return CType(Me.Rows(index),ZVSTAT_MeldeJahr_from2014Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_MeldeJahr_from2014RowChanging As ZVSTAT_MeldeJahr_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_MeldeJahr_from2014RowChanged As ZVSTAT_MeldeJahr_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_MeldeJahr_from2014RowDeleting As ZVSTAT_MeldeJahr_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_MeldeJahr_from2014RowDeleted As ZVSTAT_MeldeJahr_from2014RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTAT_MeldeJahr_from2014Row(ByVal row As ZVSTAT_MeldeJahr_from2014Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTAT_MeldeJahr_from2014Row(ByVal MeldeJahr As Double, ByVal ReportLocked As Boolean) As ZVSTAT_MeldeJahr_from2014Row
            Dim rowZVSTAT_MeldeJahr_from2014Row As ZVSTAT_MeldeJahr_from2014Row = CType(Me.NewRow,ZVSTAT_MeldeJahr_from2014Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, MeldeJahr, ReportLocked}
            rowZVSTAT_MeldeJahr_from2014Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTAT_MeldeJahr_from2014Row)
            Return rowZVSTAT_MeldeJahr_from2014Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTAT_MeldeJahr_from2014Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTAT_MeldeJahr_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTAT_MeldeJahr_from2014DataTable = CType(MyBase.Clone,ZVSTAT_MeldeJahr_from2014DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTAT_MeldeJahr_from2014DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMeldeJahr = MyBase.Columns("MeldeJahr")
            Me.columnReportLocked = MyBase.Columns("ReportLocked")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMeldeJahr = New Global.System.Data.DataColumn("MeldeJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeJahr)
            Me.columnReportLocked = New Global.System.Data.DataColumn("ReportLocked", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportLocked)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTAT_MeldeJahr_from2014Row() As ZVSTAT_MeldeJahr_from2014Row
            Return CType(Me.NewRow,ZVSTAT_MeldeJahr_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTAT_MeldeJahr_from2014Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTAT_MeldeJahr_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTAT_MeldeJahr_from2014RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_MeldeJahr_from2014RowChanged(Me, New ZVSTAT_MeldeJahr_from2014RowChangeEvent(CType(e.Row,ZVSTAT_MeldeJahr_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTAT_MeldeJahr_from2014RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_MeldeJahr_from2014RowChanging(Me, New ZVSTAT_MeldeJahr_from2014RowChangeEvent(CType(e.Row,ZVSTAT_MeldeJahr_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTAT_MeldeJahr_from2014RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_MeldeJahr_from2014RowDeleted(Me, New ZVSTAT_MeldeJahr_from2014RowChangeEvent(CType(e.Row,ZVSTAT_MeldeJahr_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTAT_MeldeJahr_from2014RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_MeldeJahr_from2014RowDeleting(Me, New ZVSTAT_MeldeJahr_from2014RowChangeEvent(CType(e.Row,ZVSTAT_MeldeJahr_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTAT_MeldeJahr_from2014Row(ByVal row As ZVSTAT_MeldeJahr_from2014Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTAT_MeldeJahr_from2014DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTAT_Meldepositionen_from2014DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTAT_Meldepositionen_from2014Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMeldeJahr As Global.System.Data.DataColumn
        
        Private columnPositionNr As Global.System.Data.DataColumn
        
        Private columnPositionName As Global.System.Data.DataColumn
        
        Private columnLandkontext As Global.System.Data.DataColumn
        
        Private columnLandCode As Global.System.Data.DataColumn
        
        Private columnAnzahlKz As Global.System.Data.DataColumn
        
        Private columnAnzahl As Global.System.Data.DataColumn
        
        Private columnWertKz As Global.System.Data.DataColumn
        
        Private columnWert As Global.System.Data.DataColumn
        
        Private columnPositionSQLcommand As Global.System.Data.DataColumn
        
        Private columnIdMeldeschemas As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTAT_Meldepositionen_from2014"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LandkontextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLandkontext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LandCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLandCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AnzahlKzColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnzahlKz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AnzahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnzahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WertKzColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWertKz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PositionSQLcommandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionSQLcommand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdMeldeschemasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdMeldeschemas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTAT_Meldepositionen_from2014Row
            Get
                Return CType(Me.Rows(index),ZVSTAT_Meldepositionen_from2014Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldepositionen_from2014RowChanging As ZVSTAT_Meldepositionen_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldepositionen_from2014RowChanged As ZVSTAT_Meldepositionen_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldepositionen_from2014RowDeleting As ZVSTAT_Meldepositionen_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldepositionen_from2014RowDeleted As ZVSTAT_Meldepositionen_from2014RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTAT_Meldepositionen_from2014Row(ByVal row As ZVSTAT_Meldepositionen_from2014Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTAT_Meldepositionen_from2014Row(ByVal MeldeJahr As Double, ByVal PositionNr As String, ByVal PositionName As String, ByVal Landkontext As String, ByVal LandCode As String, ByVal AnzahlKz As String, ByVal Anzahl As Double, ByVal WertKz As String, ByVal Wert As Double, ByVal PositionSQLcommand As String, ByVal parentZVSTAT_Meldeschemas_from2014RowByFK_ZVSTAT_Meldeschemas_from2014 As ZVSTAT_Meldeschemas_from2014Row) As ZVSTAT_Meldepositionen_from2014Row
            Dim rowZVSTAT_Meldepositionen_from2014Row As ZVSTAT_Meldepositionen_from2014Row = CType(Me.NewRow,ZVSTAT_Meldepositionen_from2014Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, MeldeJahr, PositionNr, PositionName, Landkontext, LandCode, AnzahlKz, Anzahl, WertKz, Wert, PositionSQLcommand, Nothing}
            If (Not (parentZVSTAT_Meldeschemas_from2014RowByFK_ZVSTAT_Meldeschemas_from2014) Is Nothing) Then
                columnValuesArray(11) = parentZVSTAT_Meldeschemas_from2014RowByFK_ZVSTAT_Meldeschemas_from2014(0)
            End If
            rowZVSTAT_Meldepositionen_from2014Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTAT_Meldepositionen_from2014Row)
            Return rowZVSTAT_Meldepositionen_from2014Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTAT_Meldepositionen_from2014Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTAT_Meldepositionen_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTAT_Meldepositionen_from2014DataTable = CType(MyBase.Clone,ZVSTAT_Meldepositionen_from2014DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTAT_Meldepositionen_from2014DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMeldeJahr = MyBase.Columns("MeldeJahr")
            Me.columnPositionNr = MyBase.Columns("PositionNr")
            Me.columnPositionName = MyBase.Columns("PositionName")
            Me.columnLandkontext = MyBase.Columns("Landkontext")
            Me.columnLandCode = MyBase.Columns("LandCode")
            Me.columnAnzahlKz = MyBase.Columns("AnzahlKz")
            Me.columnAnzahl = MyBase.Columns("Anzahl")
            Me.columnWertKz = MyBase.Columns("WertKz")
            Me.columnWert = MyBase.Columns("Wert")
            Me.columnPositionSQLcommand = MyBase.Columns("PositionSQLcommand")
            Me.columnIdMeldeschemas = MyBase.Columns("IdMeldeschemas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMeldeJahr = New Global.System.Data.DataColumn("MeldeJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeJahr)
            Me.columnPositionNr = New Global.System.Data.DataColumn("PositionNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionNr)
            Me.columnPositionName = New Global.System.Data.DataColumn("PositionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionName)
            Me.columnLandkontext = New Global.System.Data.DataColumn("Landkontext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLandkontext)
            Me.columnLandCode = New Global.System.Data.DataColumn("LandCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLandCode)
            Me.columnAnzahlKz = New Global.System.Data.DataColumn("AnzahlKz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnzahlKz)
            Me.columnAnzahl = New Global.System.Data.DataColumn("Anzahl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnzahl)
            Me.columnWertKz = New Global.System.Data.DataColumn("WertKz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWertKz)
            Me.columnWert = New Global.System.Data.DataColumn("Wert", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWert)
            Me.columnPositionSQLcommand = New Global.System.Data.DataColumn("PositionSQLcommand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionSQLcommand)
            Me.columnIdMeldeschemas = New Global.System.Data.DataColumn("IdMeldeschemas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdMeldeschemas)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnPositionNr.MaxLength = 50
            Me.columnPositionName.MaxLength = 255
            Me.columnLandkontext.MaxLength = 10
            Me.columnLandCode.MaxLength = 2
            Me.columnAnzahlKz.MaxLength = 1
            Me.columnWertKz.MaxLength = 1
            Me.columnPositionSQLcommand.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTAT_Meldepositionen_from2014Row() As ZVSTAT_Meldepositionen_from2014Row
            Return CType(Me.NewRow,ZVSTAT_Meldepositionen_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTAT_Meldepositionen_from2014Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTAT_Meldepositionen_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTAT_Meldepositionen_from2014RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldepositionen_from2014RowChanged(Me, New ZVSTAT_Meldepositionen_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldepositionen_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTAT_Meldepositionen_from2014RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldepositionen_from2014RowChanging(Me, New ZVSTAT_Meldepositionen_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldepositionen_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTAT_Meldepositionen_from2014RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldepositionen_from2014RowDeleted(Me, New ZVSTAT_Meldepositionen_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldepositionen_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTAT_Meldepositionen_from2014RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldepositionen_from2014RowDeleting(Me, New ZVSTAT_Meldepositionen_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldepositionen_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTAT_Meldepositionen_from2014Row(ByVal row As ZVSTAT_Meldepositionen_from2014Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTAT_Meldepositionen_from2014DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZVSTAT_Meldeschemas_from2014DataTable
        Inherits Global.System.Data.TypedTableBase(Of ZVSTAT_Meldeschemas_from2014Row)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMeldeschemaNr As Global.System.Data.DataColumn
        
        Private columnMeldeschemaName As Global.System.Data.DataColumn
        
        Private columnMeldeJahr As Global.System.Data.DataColumn
        
        Private columnIdMeldeJahr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZVSTAT_Meldeschemas_from2014"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeschemaNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeschemaNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeschemaNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeschemaName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdMeldeJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdMeldeJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZVSTAT_Meldeschemas_from2014Row
            Get
                Return CType(Me.Rows(index),ZVSTAT_Meldeschemas_from2014Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldeschemas_from2014RowChanging As ZVSTAT_Meldeschemas_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldeschemas_from2014RowChanged As ZVSTAT_Meldeschemas_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldeschemas_from2014RowDeleting As ZVSTAT_Meldeschemas_from2014RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ZVSTAT_Meldeschemas_from2014RowDeleted As ZVSTAT_Meldeschemas_from2014RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddZVSTAT_Meldeschemas_from2014Row(ByVal row As ZVSTAT_Meldeschemas_from2014Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddZVSTAT_Meldeschemas_from2014Row(ByVal MeldeschemaNr As String, ByVal MeldeschemaName As String, ByVal MeldeJahr As Double, ByVal parentZVSTAT_MeldeJahr_from2014RowByFK_MeldeJahr_from2014 As ZVSTAT_MeldeJahr_from2014Row) As ZVSTAT_Meldeschemas_from2014Row
            Dim rowZVSTAT_Meldeschemas_from2014Row As ZVSTAT_Meldeschemas_from2014Row = CType(Me.NewRow,ZVSTAT_Meldeschemas_from2014Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, MeldeschemaNr, MeldeschemaName, MeldeJahr, Nothing}
            If (Not (parentZVSTAT_MeldeJahr_from2014RowByFK_MeldeJahr_from2014) Is Nothing) Then
                columnValuesArray(4) = parentZVSTAT_MeldeJahr_from2014RowByFK_MeldeJahr_from2014(0)
            End If
            rowZVSTAT_Meldeschemas_from2014Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowZVSTAT_Meldeschemas_from2014Row)
            Return rowZVSTAT_Meldeschemas_from2014Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ZVSTAT_Meldeschemas_from2014Row
            Return CType(Me.Rows.Find(New Object() {ID}),ZVSTAT_Meldeschemas_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZVSTAT_Meldeschemas_from2014DataTable = CType(MyBase.Clone,ZVSTAT_Meldeschemas_from2014DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZVSTAT_Meldeschemas_from2014DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMeldeschemaNr = MyBase.Columns("MeldeschemaNr")
            Me.columnMeldeschemaName = MyBase.Columns("MeldeschemaName")
            Me.columnMeldeJahr = MyBase.Columns("MeldeJahr")
            Me.columnIdMeldeJahr = MyBase.Columns("IdMeldeJahr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMeldeschemaNr = New Global.System.Data.DataColumn("MeldeschemaNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeschemaNr)
            Me.columnMeldeschemaName = New Global.System.Data.DataColumn("MeldeschemaName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeschemaName)
            Me.columnMeldeJahr = New Global.System.Data.DataColumn("MeldeJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeldeJahr)
            Me.columnIdMeldeJahr = New Global.System.Data.DataColumn("IdMeldeJahr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdMeldeJahr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnMeldeschemaNr.MaxLength = 50
            Me.columnMeldeschemaName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewZVSTAT_Meldeschemas_from2014Row() As ZVSTAT_Meldeschemas_from2014Row
            Return CType(Me.NewRow,ZVSTAT_Meldeschemas_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZVSTAT_Meldeschemas_from2014Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZVSTAT_Meldeschemas_from2014Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZVSTAT_Meldeschemas_from2014RowChangedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldeschemas_from2014RowChanged(Me, New ZVSTAT_Meldeschemas_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldeschemas_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZVSTAT_Meldeschemas_from2014RowChangingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldeschemas_from2014RowChanging(Me, New ZVSTAT_Meldeschemas_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldeschemas_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZVSTAT_Meldeschemas_from2014RowDeletedEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldeschemas_from2014RowDeleted(Me, New ZVSTAT_Meldeschemas_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldeschemas_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZVSTAT_Meldeschemas_from2014RowDeletingEvent) Is Nothing) Then
                RaiseEvent ZVSTAT_Meldeschemas_from2014RowDeleting(Me, New ZVSTAT_Meldeschemas_from2014RowChangeEvent(CType(e.Row,ZVSTAT_Meldeschemas_from2014Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveZVSTAT_Meldeschemas_from2014Row(ByVal row As ZVSTAT_Meldeschemas_from2014Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZVSTAT_Meldeschemas_from2014DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AWVz11POSTENDataTable
        Inherits Global.System.Data.TypedTableBase(Of AWVz11POSTENRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnBELEGART As Global.System.Data.DataColumn
        
        Private columnKENNZAHL As Global.System.Data.DataColumn
        
        Private columnLAND_ISOCODE As Global.System.Data.DataColumn
        
        Private columnLAND_NAME As Global.System.Data.DataColumn
        
        Private columnBETRAG As Global.System.Data.DataColumn
        
        Private columnBETRAG_REF As Global.System.Data.DataColumn
        
        Private columnIdAWVz14z15 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AWVz11POSTEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BELEGARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBELEGART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property KENNZAHLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKENNZAHL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LAND_ISOCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAND_ISOCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LAND_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAND_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BETRAG_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBETRAG_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdAWVz14z15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAWVz14z15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AWVz11POSTENRow
            Get
                Return CType(Me.Rows(index),AWVz11POSTENRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz11POSTENRowChanging As AWVz11POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz11POSTENRowChanged As AWVz11POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz11POSTENRowDeleting As AWVz11POSTENRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AWVz11POSTENRowDeleted As AWVz11POSTENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAWVz11POSTENRow(ByVal row As AWVz11POSTENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAWVz11POSTENRow(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal LAND_ISOCODE As String, ByVal LAND_NAME As String, ByVal BETRAG As Double, ByVal BETRAG_REF As String, ByVal parentAWVz14z15RowByFK_AWVz11POSTEN_AWVz14z15 As AWVz14z15Row) As AWVz11POSTENRow
            Dim rowAWVz11POSTENRow As AWVz11POSTENRow = CType(Me.NewRow,AWVz11POSTENRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, BELEGART, KENNZAHL, LAND_ISOCODE, LAND_NAME, BETRAG, BETRAG_REF, Nothing}
            If (Not (parentAWVz14z15RowByFK_AWVz11POSTEN_AWVz14z15) Is Nothing) Then
                columnValuesArray(7) = parentAWVz14z15RowByFK_AWVz11POSTEN_AWVz14z15(1)
            End If
            rowAWVz11POSTENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAWVz11POSTENRow)
            Return rowAWVz11POSTENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As AWVz11POSTENRow
            Return CType(Me.Rows.Find(New Object() {ID}),AWVz11POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AWVz11POSTENDataTable = CType(MyBase.Clone,AWVz11POSTENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AWVz11POSTENDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnBELEGART = MyBase.Columns("BELEGART")
            Me.columnKENNZAHL = MyBase.Columns("KENNZAHL")
            Me.columnLAND_ISOCODE = MyBase.Columns("LAND_ISOCODE")
            Me.columnLAND_NAME = MyBase.Columns("LAND_NAME")
            Me.columnBETRAG = MyBase.Columns("BETRAG")
            Me.columnBETRAG_REF = MyBase.Columns("BETRAG_REF")
            Me.columnIdAWVz14z15 = MyBase.Columns("IdAWVz14z15")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnBELEGART = New Global.System.Data.DataColumn("BELEGART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBELEGART)
            Me.columnKENNZAHL = New Global.System.Data.DataColumn("KENNZAHL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKENNZAHL)
            Me.columnLAND_ISOCODE = New Global.System.Data.DataColumn("LAND_ISOCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAND_ISOCODE)
            Me.columnLAND_NAME = New Global.System.Data.DataColumn("LAND_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAND_NAME)
            Me.columnBETRAG = New Global.System.Data.DataColumn("BETRAG", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG)
            Me.columnBETRAG_REF = New Global.System.Data.DataColumn("BETRAG_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBETRAG_REF)
            Me.columnIdAWVz14z15 = New Global.System.Data.DataColumn("IdAWVz14z15", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAWVz14z15)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnBELEGART.MaxLength = 255
            Me.columnKENNZAHL.MaxLength = 255
            Me.columnLAND_ISOCODE.MaxLength = 255
            Me.columnLAND_NAME.MaxLength = 255
            Me.columnBETRAG_REF.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAWVz11POSTENRow() As AWVz11POSTENRow
            Return CType(Me.NewRow,AWVz11POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AWVz11POSTENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AWVz11POSTENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AWVz11POSTENRowChangedEvent) Is Nothing) Then
                RaiseEvent AWVz11POSTENRowChanged(Me, New AWVz11POSTENRowChangeEvent(CType(e.Row,AWVz11POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AWVz11POSTENRowChangingEvent) Is Nothing) Then
                RaiseEvent AWVz11POSTENRowChanging(Me, New AWVz11POSTENRowChangeEvent(CType(e.Row,AWVz11POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AWVz11POSTENRowDeletedEvent) Is Nothing) Then
                RaiseEvent AWVz11POSTENRowDeleted(Me, New AWVz11POSTENRowChangeEvent(CType(e.Row,AWVz11POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AWVz11POSTENRowDeletingEvent) Is Nothing) Then
                RaiseEvent AWVz11POSTENRowDeleting(Me, New AWVz11POSTENRowChangeEvent(CType(e.Row,AWVz11POSTENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAWVz11POSTENRow(ByVal row As AWVz11POSTENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AWVz11POSTENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MIFIRDataTable
        Inherits Global.System.Data.TypedTableBase(Of MIFIRRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnReportStatus As Global.System.Data.DataColumn
        
        Private columnTradeDate As Global.System.Data.DataColumn
        
        Private columnValueDate As Global.System.Data.DataColumn
        
        Private columnFixingDate As Global.System.Data.DataColumn
        
        Private columnClientOrderID As Global.System.Data.DataColumn
        
        Private columnFxAllID As Global.System.Data.DataColumn
        
        Private columnTradingVenueTransactionIdentificationCode As Global.System.Data.DataColumn
        
        Private columnCustomerUSI As Global.System.Data.DataColumn
        
        Private columnProviderUSI As Global.System.Data.DataColumn
        
        Private columnProduct As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnFixingTime As Global.System.Data.DataColumn
        
        Private columnFixingSeries As Global.System.Data.DataColumn
        
        Private columnCustBS As Global.System.Data.DataColumn
        
        Private columnCustTradeSide As Global.System.Data.DataColumn
        
        Private columnCustomerName As Global.System.Data.DataColumn
        
        Private columnCustTrader As Global.System.Data.DataColumn
        
        Private columnAccount As Global.System.Data.DataColumn
        
        Private columnAccountLongName As Global.System.Data.DataColumn
        
        Private columnCCYPair As Global.System.Data.DataColumn
        
        Private columnNotionalCCY As Global.System.Data.DataColumn
        
        Private columnNotional As Global.System.Data.DataColumn
        
        Private columnContraCCY As Global.System.Data.DataColumn
        
        Private columnContraAmount As Global.System.Data.DataColumn
        
        Private columnPriceTreasury As Global.System.Data.DataColumn
        
        Private columnFwdPts As Global.System.Data.DataColumn
        
        Private columnAllIn As Global.System.Data.DataColumn
        
        Private columnComplexTradeID As Global.System.Data.DataColumn
        
        Private columnCARStatus As Global.System.Data.DataColumn
        
        Private columnCARSubmitID As Global.System.Data.DataColumn
        
        Private columnCARTime As Global.System.Data.DataColumn
        
        Private columnExecutionWithinTheFirm As Global.System.Data.DataColumn
        
        Private columnISIN As Global.System.Data.DataColumn
        
        Private columnCFICodeForTheInstrument As Global.System.Data.DataColumn
        
        Private columnWaiverIndicator As Global.System.Data.DataColumn
        
        Private columnMTFExecutionTime As Global.System.Data.DataColumn
        
        Private columnLiqVenue As Global.System.Data.DataColumn
        
        Private columnCapacity As Global.System.Data.DataColumn
        
        Private columnNPFT As Global.System.Data.DataColumn
        
        Private columnSEC_FIN As Global.System.Data.DataColumn
        
        Private columnCustomerLEI As Global.System.Data.DataColumn
        
        Private columnAccountLEI As Global.System.Data.DataColumn
        
        Private columnProviderLEI As Global.System.Data.DataColumn
        
        Private columnDateTimeOfferToDeal As Global.System.Data.DataColumn
        
        Private columnTransmissionOfOrderIndicator As Global.System.Data.DataColumn
        
        Private columnLiquidityProvisionActivity As Global.System.Data.DataColumn
        
        Private columnDateTimeOrderSubmission As Global.System.Data.DataColumn
        
        Private columnVenueTreasury As Global.System.Data.DataColumn
        
        Private columnDateReceiptOrder As Global.System.Data.DataColumn
        
        Private columnTRADE_DATE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_TRANSACTION_ID As Global.System.Data.DataColumn
        
        Private columnACTION_TYPE As Global.System.Data.DataColumn
        
        Private columnBUSINESS_UNIT As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnMIFIR_REPORTING As Global.System.Data.DataColumn
        
        Private columnCOMMENT As Global.System.Data.DataColumn
        
        Private columnTRADE_REPORT_ID As Global.System.Data.DataColumn
        
        Private columnSOURCE_SYSTEM As Global.System.Data.DataColumn
        
        Private columnRECORD_MODE As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD1 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD2 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD3 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD4 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD5 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD6 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD7 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD8 As Global.System.Data.DataColumn
        
        Private columnUSER_FIELD9 As Global.System.Data.DataColumn
        
        Private columnPARTIAL_ASSISTANCE_FLAG As Global.System.Data.DataColumn
        
        Private columnPARTIAL_ASSISTANCE_SUBMITTER_ID As Global.System.Data.DataColumn
        
        Private columnPAIRING_ID As Global.System.Data.DataColumn
        
        Private columnEXECUTING_ENTITY_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnEXECUTING_ENTITY_ID As Global.System.Data.DataColumn
        
        Private columnMIFID_INVESTMENT_FIRM As Global.System.Data.DataColumn
        
        Private columnBRANCH_MEMBERSHIP_COUNTRY As Global.System.Data.DataColumn
        
        Private columnBUYER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnBUYER_ID As Global.System.Data.DataColumn
        
        Private columnBUYER_BRANCH_COUNTRY As Global.System.Data.DataColumn
        
        Private columnBUYER_FIRSTNAME As Global.System.Data.DataColumn
        
        Private columnBUYER_SURNAME As Global.System.Data.DataColumn
        
        Private columnBUYER_BIRTHDATE As Global.System.Data.DataColumn
        
        Private columnBUYER_DECISION_MAKER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnBUYER_DECISION_MAKER_ID As Global.System.Data.DataColumn
        
        Private columnBUYER_DECISION_FIRSTNAME As Global.System.Data.DataColumn
        
        Private columnBUYER_DECISION_SURNAME As Global.System.Data.DataColumn
        
        Private columnBUYER_DECISION_BIRTHDATE As Global.System.Data.DataColumn
        
        Private columnSELLER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnSELLER_ID As Global.System.Data.DataColumn
        
        Private columnSELLER_BRANCH_COUNTRY As Global.System.Data.DataColumn
        
        Private columnSELLER_FIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSELLER_SURNAME As Global.System.Data.DataColumn
        
        Private columnSELLER_BIRTHDATE As Global.System.Data.DataColumn
        
        Private columnSELLER_DECISION_MAKER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnSELLER_DECISION_MAKER_ID As Global.System.Data.DataColumn
        
        Private columnSELLER_DECISION_FIRST_NAME As Global.System.Data.DataColumn
        
        Private columnSELLER_DECISION_SURNAME As Global.System.Data.DataColumn
        
        Private columnSELLER_DECISION_BIRTHDATE As Global.System.Data.DataColumn
        
        Private columnTRANSMISSION_IND As Global.System.Data.DataColumn
        
        Private columnTRANSMITTING_ENTITY_BUYER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnTRANSMITTING_ENTITY_BUYER_ID As Global.System.Data.DataColumn
        
        Private columnTRANSMITTING_ENTITY_SELLER_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnTRANSMITTING_ENTITY_SELLER_ID As Global.System.Data.DataColumn
        
        Private columnTRN_REF_NUMBER As Global.System.Data.DataColumn
        
        Private columnTRADING_VENUE_TRN_ID_CODE As Global.System.Data.DataColumn
        
        Private columnVENUE As Global.System.Data.DataColumn
        
        Private columnTRADE_TIME As Global.System.Data.DataColumn
        
        Private columnMIFIR_TRADING_CAPACITY As Global.System.Data.DataColumn
        
        Private columnQUANTITY_NOTATION As Global.System.Data.DataColumn
        
        Private columnQUANTITY As Global.System.Data.DataColumn
        
        Private columnQUANTITY_CURRENCY As Global.System.Data.DataColumn
        
        Private columnNOTIONAL_INCREASE_DECREASE As Global.System.Data.DataColumn
        
        Private columnPRICE_NOTATION As Global.System.Data.DataColumn
        
        Private columnPRICE As Global.System.Data.DataColumn
        
        Private columnPRICE_CURRENCY As Global.System.Data.DataColumn
        
        Private columnNET_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUPFRONT_PAYMENT As Global.System.Data.DataColumn
        
        Private columnUPFRONT_PAYMENT_CURRENCY As Global.System.Data.DataColumn
        
        Private columnCOMPLEX_TRADE_COMPONENT_ID As Global.System.Data.DataColumn
        
        Private columnINSTRUMENT_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnINSTRUMENT_NAME As Global.System.Data.DataColumn
        
        Private columnINSTRUMENT_ID As Global.System.Data.DataColumn
        
        Private columnINSTRUMENT_CLASS As Global.System.Data.DataColumn
        
        Private columnNOTIONAL_CURRENCY_1 As Global.System.Data.DataColumn
        
        Private columnNOTIONAL_CURRENCY_2 As Global.System.Data.DataColumn
        
        Private columnPRICE_MULTIPLIER As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INSTRUMENT_DIRECTION As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INSTRUMENT_CODE As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INDEX_CODE As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INDEX_NAME As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INDEX_TERM As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INDEX_TERM_UNIT As Global.System.Data.DataColumn
        
        Private columnSTRIKE_PRICE_NOTATION As Global.System.Data.DataColumn
        
        Private columnSTRIKE_PRICE As Global.System.Data.DataColumn
        
        Private columnSTRIKE_PRICE_CURRENCY As Global.System.Data.DataColumn
        
        Private columnOPTION_EXERCISE_STYLE As Global.System.Data.DataColumn
        
        Private columnMATURITY_DATE_INSTRUMENT As Global.System.Data.DataColumn
        
        Private columnEXPIRY_DATE As Global.System.Data.DataColumn
        
        Private columnDELIVERY_TYPE As Global.System.Data.DataColumn
        
        Private columnINVESTMENT_DECISION_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnINVESTMENT_DECISION_ID As Global.System.Data.DataColumn
        
        Private columnINVESTMENT_DECISION_BRANCH_COUNTRY As Global.System.Data.DataColumn
        
        Private columnEXECUTION_ID_TYPE As Global.System.Data.DataColumn
        
        Private columnEXECUTION_ID As Global.System.Data.DataColumn
        
        Private columnSUPERVISING_BRANCH_COUNTRY As Global.System.Data.DataColumn
        
        Private columnWAIVER_INDICATOR As Global.System.Data.DataColumn
        
        Private columnSHORT_SELLING_INDICATOR As Global.System.Data.DataColumn
        
        Private columnCOMMODITY_DERIVATIVE_INDICATOR As Global.System.Data.DataColumn
        
        Private columnSFTR_INDICATOR As Global.System.Data.DataColumn
        
        Private columnDIRECTED_ORDER_FLAG As Global.System.Data.DataColumn
        
        Private columnORDER_GROUP_ID As Global.System.Data.DataColumn
        
        Private columnTOAX_FLAG As Global.System.Data.DataColumn
        
        Private columnLIQP_FLAG As Global.System.Data.DataColumn
        
        Private columnORDER_TYPE As Global.System.Data.DataColumn
        
        Private columnCLIENT_TYPE As Global.System.Data.DataColumn
        
        Private columnOTC_POST_TRADE_INDICATOR As Global.System.Data.DataColumn
        
        Private columnOPTION_TYPE As Global.System.Data.DataColumn
        
        Private columnUNDERLYING_INDEX_DIRECTION As Global.System.Data.DataColumn
        
        Private columnOrderType As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnCountryOfResidence As Global.System.Data.DataColumn
        
        Private columnBuyer As Global.System.Data.DataColumn
        
        Private columnSeller As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MIFIR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReportStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TradeDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FixingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientOrderIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientOrderID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FxAllIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFxAllID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TradingVenueTransactionIdentificationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradingVenueTransactionIdentificationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustomerUSIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerUSI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ProviderUSIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProviderUSI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FixingTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixingTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FixingSeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixingSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustBSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustBS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustTradeSideColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustTradeSide
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustomerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustTraderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustTrader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AccountLongNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountLongName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CCYPairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCYPair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NotionalCCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotionalCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NotionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContraCCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContraCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContraAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContraAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PriceTreasuryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriceTreasury
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FwdPtsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFwdPts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AllInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ComplexTradeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComplexTradeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CARStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CARSubmitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARSubmitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CARTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ExecutionWithinTheFirmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExecutionWithinTheFirm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ISINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CFICodeForTheInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCFICodeForTheInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WaiverIndicatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaiverIndicator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MTFExecutionTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTFExecutionTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LiqVenueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiqVenue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CapacityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NPFTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNPFT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SEC_FINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_FIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CustomerLEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerLEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AccountLEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountLEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ProviderLEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProviderLEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateTimeOfferToDealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeOfferToDeal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TransmissionOfOrderIndicatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransmissionOfOrderIndicator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LiquidityProvisionActivityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidityProvisionActivity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateTimeOrderSubmissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeOrderSubmission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VenueTreasuryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVenueTreasury
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateReceiptOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReceiptOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRADE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRADE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_TRANSACTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_TRANSACTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ACTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTION_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUSINESS_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUSINESS_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MIFIR_REPORTINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIFIR_REPORTING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COMMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRADE_REPORT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRADE_REPORT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SOURCE_SYSTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE_SYSTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RECORD_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECORD_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property USER_FIELD9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_FIELD9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PARTIAL_ASSISTANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARTIAL_ASSISTANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PARTIAL_ASSISTANCE_SUBMITTER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARTIAL_ASSISTANCE_SUBMITTER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PAIRING_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIRING_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EXECUTING_ENTITY_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXECUTING_ENTITY_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EXECUTING_ENTITY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXECUTING_ENTITY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MIFID_INVESTMENT_FIRMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIFID_INVESTMENT_FIRM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BRANCH_MEMBERSHIP_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANCH_MEMBERSHIP_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_BRANCH_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_BRANCH_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_FIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_SURNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_SURNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_BIRTHDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_BIRTHDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_DECISION_MAKER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_DECISION_MAKER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_DECISION_MAKER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_DECISION_MAKER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_DECISION_FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_DECISION_FIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_DECISION_SURNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_DECISION_SURNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BUYER_DECISION_BIRTHDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUYER_DECISION_BIRTHDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_BRANCH_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_BRANCH_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_FIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_SURNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_SURNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_BIRTHDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_BIRTHDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_DECISION_MAKER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_DECISION_MAKER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_DECISION_MAKER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_DECISION_MAKER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_DECISION_FIRST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_DECISION_FIRST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_DECISION_SURNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_DECISION_SURNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SELLER_DECISION_BIRTHDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELLER_DECISION_BIRTHDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSMISSION_INDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSMISSION_IND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSMITTING_ENTITY_BUYER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSMITTING_ENTITY_BUYER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSMITTING_ENTITY_BUYER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSMITTING_ENTITY_BUYER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSMITTING_ENTITY_SELLER_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSMITTING_ENTITY_SELLER_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRANSMITTING_ENTITY_SELLER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSMITTING_ENTITY_SELLER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRN_REF_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRN_REF_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRADING_VENUE_TRN_ID_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRADING_VENUE_TRN_ID_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VENUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TRADE_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRADE_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MIFIR_TRADING_CAPACITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIFIR_TRADING_CAPACITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QUANTITY_NOTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY_NOTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QUANTITY_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOTIONAL_INCREASE_DECREASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTIONAL_INCREASE_DECREASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PRICE_NOTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_NOTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PRICE_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NET_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNET_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UPFRONT_PAYMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPFRONT_PAYMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UPFRONT_PAYMENT_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPFRONT_PAYMENT_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COMPLEX_TRADE_COMPONENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPLEX_TRADE_COMPONENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INSTRUMENT_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUMENT_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INSTRUMENT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUMENT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INSTRUMENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUMENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INSTRUMENT_CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUMENT_CLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOTIONAL_CURRENCY_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTIONAL_CURRENCY_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NOTIONAL_CURRENCY_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTIONAL_CURRENCY_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PRICE_MULTIPLIERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_MULTIPLIER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INSTRUMENT_DIRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INSTRUMENT_DIRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INSTRUMENT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INSTRUMENT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INDEX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INDEX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INDEX_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INDEX_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INDEX_TERMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INDEX_TERM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INDEX_TERM_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INDEX_TERM_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property STRIKE_PRICE_NOTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRIKE_PRICE_NOTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property STRIKE_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRIKE_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property STRIKE_PRICE_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRIKE_PRICE_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OPTION_EXERCISE_STYLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_EXERCISE_STYLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MATURITY_DATE_INSTRUMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATURITY_DATE_INSTRUMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EXPIRY_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPIRY_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DELIVERY_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELIVERY_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INVESTMENT_DECISION_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVESTMENT_DECISION_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INVESTMENT_DECISION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVESTMENT_DECISION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INVESTMENT_DECISION_BRANCH_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVESTMENT_DECISION_BRANCH_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EXECUTION_ID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXECUTION_ID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EXECUTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXECUTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SUPERVISING_BRANCH_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPERVISING_BRANCH_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property WAIVER_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAIVER_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SHORT_SELLING_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHORT_SELLING_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COMMODITY_DERIVATIVE_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMODITY_DERIVATIVE_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SFTR_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSFTR_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DIRECTED_ORDER_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECTED_ORDER_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ORDER_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TOAX_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOAX_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LIQP_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIQP_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ORDER_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CLIENT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OTC_POST_TRADE_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_POST_TRADE_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OPTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UNDERLYING_INDEX_DIRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDERLYING_INDEX_DIRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OrderTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CountryOfResidenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountryOfResidence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BuyerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuyer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SellerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeller
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MIFIRRow
            Get
                Return CType(Me.Rows(index),MIFIRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MIFIRRowChanging As MIFIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MIFIRRowChanged As MIFIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MIFIRRowDeleting As MIFIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event MIFIRRowDeleted As MIFIRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddMIFIRRow(ByVal row As MIFIRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddMIFIRRow( _
                    ByVal ReportStatus As String,  _
                    ByVal TradeDate As Date,  _
                    ByVal ValueDate As Date,  _
                    ByVal FixingDate As Date,  _
                    ByVal ClientOrderID As String,  _
                    ByVal FxAllID As String,  _
                    ByVal TradingVenueTransactionIdentificationCode As String,  _
                    ByVal CustomerUSI As String,  _
                    ByVal ProviderUSI As String,  _
                    ByVal Product As String,  _
                    ByVal Status As String,  _
                    ByVal FixingTime As Date,  _
                    ByVal FixingSeries As String,  _
                    ByVal CustBS As String,  _
                    ByVal CustTradeSide As String,  _
                    ByVal CustomerName As String,  _
                    ByVal CustTrader As String,  _
                    ByVal Account As String,  _
                    ByVal AccountLongName As String,  _
                    ByVal CCYPair As String,  _
                    ByVal NotionalCCY As String,  _
                    ByVal Notional As Double,  _
                    ByVal ContraCCY As String,  _
                    ByVal ContraAmount As Double,  _
                    ByVal PriceTreasury As Double,  _
                    ByVal FwdPts As Double,  _
                    ByVal AllIn As Double,  _
                    ByVal ComplexTradeID As String,  _
                    ByVal CARStatus As String,  _
                    ByVal CARSubmitID As String,  _
                    ByVal CARTime As Date,  _
                    ByVal ExecutionWithinTheFirm As String,  _
                    ByVal ISIN As String,  _
                    ByVal CFICodeForTheInstrument As String,  _
                    ByVal WaiverIndicator As String,  _
                    ByVal MTFExecutionTime As Date,  _
                    ByVal LiqVenue As String,  _
                    ByVal Capacity As String,  _
                    ByVal NPFT As String,  _
                    ByVal SEC_FIN As String,  _
                    ByVal CustomerLEI As String,  _
                    ByVal AccountLEI As String,  _
                    ByVal ProviderLEI As String,  _
                    ByVal DateTimeOfferToDeal As Date,  _
                    ByVal TransmissionOfOrderIndicator As String,  _
                    ByVal LiquidityProvisionActivity As String,  _
                    ByVal DateTimeOrderSubmission As Date,  _
                    ByVal VenueTreasury As String,  _
                    ByVal DateReceiptOrder As Date,  _
                    ByVal TRADE_DATE As Date,  _
                    ByVal CUSTOMER_TRANSACTION_ID As String,  _
                    ByVal ACTION_TYPE As String,  _
                    ByVal BUSINESS_UNIT As String,  _
                    ByVal USER_ID As String,  _
                    ByVal MIFIR_REPORTING As String,  _
                    ByVal COMMENT As String,  _
                    ByVal TRADE_REPORT_ID As String,  _
                    ByVal SOURCE_SYSTEM As String,  _
                    ByVal RECORD_MODE As String,  _
                    ByVal USER_FIELD1 As String,  _
                    ByVal USER_FIELD2 As String,  _
                    ByVal USER_FIELD3 As String,  _
                    ByVal USER_FIELD4 As String,  _
                    ByVal USER_FIELD5 As String,  _
                    ByVal USER_FIELD6 As String,  _
                    ByVal USER_FIELD7 As String,  _
                    ByVal USER_FIELD8 As String,  _
                    ByVal USER_FIELD9 As String,  _
                    ByVal PARTIAL_ASSISTANCE_FLAG As String,  _
                    ByVal PARTIAL_ASSISTANCE_SUBMITTER_ID As String,  _
                    ByVal PAIRING_ID As String,  _
                    ByVal EXECUTING_ENTITY_ID_TYPE As String,  _
                    ByVal EXECUTING_ENTITY_ID As String,  _
                    ByVal MIFID_INVESTMENT_FIRM As String,  _
                    ByVal BRANCH_MEMBERSHIP_COUNTRY As String,  _
                    ByVal BUYER_ID_TYPE As String,  _
                    ByVal BUYER_ID As String,  _
                    ByVal BUYER_BRANCH_COUNTRY As String,  _
                    ByVal BUYER_FIRSTNAME As String,  _
                    ByVal BUYER_SURNAME As String,  _
                    ByVal BUYER_BIRTHDATE As Date,  _
                    ByVal BUYER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal BUYER_DECISION_MAKER_ID As String,  _
                    ByVal BUYER_DECISION_FIRSTNAME As String,  _
                    ByVal BUYER_DECISION_SURNAME As String,  _
                    ByVal BUYER_DECISION_BIRTHDATE As Date,  _
                    ByVal SELLER_ID_TYPE As String,  _
                    ByVal SELLER_ID As String,  _
                    ByVal SELLER_BRANCH_COUNTRY As String,  _
                    ByVal SELLER_FIRSTNAME As String,  _
                    ByVal SELLER_SURNAME As String,  _
                    ByVal SELLER_BIRTHDATE As Date,  _
                    ByVal SELLER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal SELLER_DECISION_MAKER_ID As String,  _
                    ByVal SELLER_DECISION_FIRST_NAME As String,  _
                    ByVal SELLER_DECISION_SURNAME As String,  _
                    ByVal SELLER_DECISION_BIRTHDATE As Date,  _
                    ByVal TRANSMISSION_IND As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID As String,  _
                    ByVal TRN_REF_NUMBER As String,  _
                    ByVal TRADING_VENUE_TRN_ID_CODE As String,  _
                    ByVal VENUE As String,  _
                    ByVal TRADE_TIME As Date,  _
                    ByVal MIFIR_TRADING_CAPACITY As String,  _
                    ByVal QUANTITY_NOTATION As String,  _
                    ByVal QUANTITY As Double,  _
                    ByVal QUANTITY_CURRENCY As String,  _
                    ByVal NOTIONAL_INCREASE_DECREASE As String,  _
                    ByVal PRICE_NOTATION As String,  _
                    ByVal PRICE As Double,  _
                    ByVal PRICE_CURRENCY As String,  _
                    ByVal NET_AMOUNT As Double,  _
                    ByVal UPFRONT_PAYMENT As Double,  _
                    ByVal UPFRONT_PAYMENT_CURRENCY As String,  _
                    ByVal COMPLEX_TRADE_COMPONENT_ID As String,  _
                    ByVal INSTRUMENT_ID_TYPE As String,  _
                    ByVal INSTRUMENT_NAME As String,  _
                    ByVal INSTRUMENT_ID As String,  _
                    ByVal INSTRUMENT_CLASS As String,  _
                    ByVal NOTIONAL_CURRENCY_1 As String,  _
                    ByVal NOTIONAL_CURRENCY_2 As String,  _
                    ByVal PRICE_MULTIPLIER As Double,  _
                    ByVal UNDERLYING_INSTRUMENT_DIRECTION As String,  _
                    ByVal UNDERLYING_INSTRUMENT_CODE As String,  _
                    ByVal UNDERLYING_INDEX_CODE As String,  _
                    ByVal UNDERLYING_INDEX_NAME As String,  _
                    ByVal UNDERLYING_INDEX_TERM As String,  _
                    ByVal UNDERLYING_INDEX_TERM_UNIT As String,  _
                    ByVal STRIKE_PRICE_NOTATION As String,  _
                    ByVal STRIKE_PRICE As Double,  _
                    ByVal STRIKE_PRICE_CURRENCY As String,  _
                    ByVal OPTION_EXERCISE_STYLE As String,  _
                    ByVal MATURITY_DATE_INSTRUMENT As Date,  _
                    ByVal EXPIRY_DATE As Date,  _
                    ByVal DELIVERY_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID As String,  _
                    ByVal INVESTMENT_DECISION_BRANCH_COUNTRY As String,  _
                    ByVal EXECUTION_ID_TYPE As String,  _
                    ByVal EXECUTION_ID As String,  _
                    ByVal SUPERVISING_BRANCH_COUNTRY As String,  _
                    ByVal WAIVER_INDICATOR As String,  _
                    ByVal SHORT_SELLING_INDICATOR As String,  _
                    ByVal COMMODITY_DERIVATIVE_INDICATOR As String,  _
                    ByVal SFTR_INDICATOR As String,  _
                    ByVal DIRECTED_ORDER_FLAG As String,  _
                    ByVal ORDER_GROUP_ID As String,  _
                    ByVal TOAX_FLAG As String,  _
                    ByVal LIQP_FLAG As String,  _
                    ByVal ORDER_TYPE As String,  _
                    ByVal CLIENT_TYPE As String,  _
                    ByVal OTC_POST_TRADE_INDICATOR As String,  _
                    ByVal OPTION_TYPE As String,  _
                    ByVal UNDERLYING_INDEX_DIRECTION As String,  _
                    ByVal OrderType As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal CountryOfResidence As String,  _
                    ByVal Buyer As String,  _
                    ByVal Seller As String) As MIFIRRow
            Dim rowMIFIRRow As MIFIRRow = CType(Me.NewRow,MIFIRRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ReportStatus, TradeDate, ValueDate, FixingDate, ClientOrderID, FxAllID, TradingVenueTransactionIdentificationCode, CustomerUSI, ProviderUSI, Product, Status, FixingTime, FixingSeries, CustBS, CustTradeSide, CustomerName, CustTrader, Account, AccountLongName, CCYPair, NotionalCCY, Notional, ContraCCY, ContraAmount, PriceTreasury, FwdPts, AllIn, ComplexTradeID, CARStatus, CARSubmitID, CARTime, ExecutionWithinTheFirm, ISIN, CFICodeForTheInstrument, WaiverIndicator, MTFExecutionTime, LiqVenue, Capacity, NPFT, SEC_FIN, CustomerLEI, AccountLEI, ProviderLEI, DateTimeOfferToDeal, TransmissionOfOrderIndicator, LiquidityProvisionActivity, DateTimeOrderSubmission, VenueTreasury, DateReceiptOrder, TRADE_DATE, CUSTOMER_TRANSACTION_ID, ACTION_TYPE, BUSINESS_UNIT, USER_ID, MIFIR_REPORTING, COMMENT, TRADE_REPORT_ID, SOURCE_SYSTEM, RECORD_MODE, USER_FIELD1, USER_FIELD2, USER_FIELD3, USER_FIELD4, USER_FIELD5, USER_FIELD6, USER_FIELD7, USER_FIELD8, USER_FIELD9, PARTIAL_ASSISTANCE_FLAG, PARTIAL_ASSISTANCE_SUBMITTER_ID, PAIRING_ID, EXECUTING_ENTITY_ID_TYPE, EXECUTING_ENTITY_ID, MIFID_INVESTMENT_FIRM, BRANCH_MEMBERSHIP_COUNTRY, BUYER_ID_TYPE, BUYER_ID, BUYER_BRANCH_COUNTRY, BUYER_FIRSTNAME, BUYER_SURNAME, BUYER_BIRTHDATE, BUYER_DECISION_MAKER_ID_TYPE, BUYER_DECISION_MAKER_ID, BUYER_DECISION_FIRSTNAME, BUYER_DECISION_SURNAME, BUYER_DECISION_BIRTHDATE, SELLER_ID_TYPE, SELLER_ID, SELLER_BRANCH_COUNTRY, SELLER_FIRSTNAME, SELLER_SURNAME, SELLER_BIRTHDATE, SELLER_DECISION_MAKER_ID_TYPE, SELLER_DECISION_MAKER_ID, SELLER_DECISION_FIRST_NAME, SELLER_DECISION_SURNAME, SELLER_DECISION_BIRTHDATE, TRANSMISSION_IND, TRANSMITTING_ENTITY_BUYER_ID_TYPE, TRANSMITTING_ENTITY_BUYER_ID, TRANSMITTING_ENTITY_SELLER_ID_TYPE, TRANSMITTING_ENTITY_SELLER_ID, TRN_REF_NUMBER, TRADING_VENUE_TRN_ID_CODE, VENUE, TRADE_TIME, MIFIR_TRADING_CAPACITY, QUANTITY_NOTATION, QUANTITY, QUANTITY_CURRENCY, NOTIONAL_INCREASE_DECREASE, PRICE_NOTATION, PRICE, PRICE_CURRENCY, NET_AMOUNT, UPFRONT_PAYMENT, UPFRONT_PAYMENT_CURRENCY, COMPLEX_TRADE_COMPONENT_ID, INSTRUMENT_ID_TYPE, INSTRUMENT_NAME, INSTRUMENT_ID, INSTRUMENT_CLASS, NOTIONAL_CURRENCY_1, NOTIONAL_CURRENCY_2, PRICE_MULTIPLIER, UNDERLYING_INSTRUMENT_DIRECTION, UNDERLYING_INSTRUMENT_CODE, UNDERLYING_INDEX_CODE, UNDERLYING_INDEX_NAME, UNDERLYING_INDEX_TERM, UNDERLYING_INDEX_TERM_UNIT, STRIKE_PRICE_NOTATION, STRIKE_PRICE, STRIKE_PRICE_CURRENCY, OPTION_EXERCISE_STYLE, MATURITY_DATE_INSTRUMENT, EXPIRY_DATE, DELIVERY_TYPE, INVESTMENT_DECISION_ID_TYPE, INVESTMENT_DECISION_ID, INVESTMENT_DECISION_BRANCH_COUNTRY, EXECUTION_ID_TYPE, EXECUTION_ID, SUPERVISING_BRANCH_COUNTRY, WAIVER_INDICATOR, SHORT_SELLING_INDICATOR, COMMODITY_DERIVATIVE_INDICATOR, SFTR_INDICATOR, DIRECTED_ORDER_FLAG, ORDER_GROUP_ID, TOAX_FLAG, LIQP_FLAG, ORDER_TYPE, CLIENT_TYPE, OTC_POST_TRADE_INDICATOR, OPTION_TYPE, UNDERLYING_INDEX_DIRECTION, OrderType, ClientNr, ClientName, CountryOfResidence, Buyer, Seller}
            rowMIFIRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMIFIRRow)
            Return rowMIFIRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As MIFIRRow
            Return CType(Me.Rows.Find(New Object() {ID}),MIFIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MIFIRDataTable = CType(MyBase.Clone,MIFIRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MIFIRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnReportStatus = MyBase.Columns("ReportStatus")
            Me.columnTradeDate = MyBase.Columns("TradeDate")
            Me.columnValueDate = MyBase.Columns("ValueDate")
            Me.columnFixingDate = MyBase.Columns("FixingDate")
            Me.columnClientOrderID = MyBase.Columns("ClientOrderID")
            Me.columnFxAllID = MyBase.Columns("FxAllID")
            Me.columnTradingVenueTransactionIdentificationCode = MyBase.Columns("TradingVenueTransactionIdentificationCode")
            Me.columnCustomerUSI = MyBase.Columns("CustomerUSI")
            Me.columnProviderUSI = MyBase.Columns("ProviderUSI")
            Me.columnProduct = MyBase.Columns("Product")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnFixingTime = MyBase.Columns("FixingTime")
            Me.columnFixingSeries = MyBase.Columns("FixingSeries")
            Me.columnCustBS = MyBase.Columns("CustBS")
            Me.columnCustTradeSide = MyBase.Columns("CustTradeSide")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnCustTrader = MyBase.Columns("CustTrader")
            Me.columnAccount = MyBase.Columns("Account")
            Me.columnAccountLongName = MyBase.Columns("AccountLongName")
            Me.columnCCYPair = MyBase.Columns("CCYPair")
            Me.columnNotionalCCY = MyBase.Columns("NotionalCCY")
            Me.columnNotional = MyBase.Columns("Notional")
            Me.columnContraCCY = MyBase.Columns("ContraCCY")
            Me.columnContraAmount = MyBase.Columns("ContraAmount")
            Me.columnPriceTreasury = MyBase.Columns("PriceTreasury")
            Me.columnFwdPts = MyBase.Columns("FwdPts")
            Me.columnAllIn = MyBase.Columns("AllIn")
            Me.columnComplexTradeID = MyBase.Columns("ComplexTradeID")
            Me.columnCARStatus = MyBase.Columns("CARStatus")
            Me.columnCARSubmitID = MyBase.Columns("CARSubmitID")
            Me.columnCARTime = MyBase.Columns("CARTime")
            Me.columnExecutionWithinTheFirm = MyBase.Columns("ExecutionWithinTheFirm")
            Me.columnISIN = MyBase.Columns("ISIN")
            Me.columnCFICodeForTheInstrument = MyBase.Columns("CFICodeForTheInstrument")
            Me.columnWaiverIndicator = MyBase.Columns("WaiverIndicator")
            Me.columnMTFExecutionTime = MyBase.Columns("MTFExecutionTime")
            Me.columnLiqVenue = MyBase.Columns("LiqVenue")
            Me.columnCapacity = MyBase.Columns("Capacity")
            Me.columnNPFT = MyBase.Columns("NPFT")
            Me.columnSEC_FIN = MyBase.Columns("SEC_FIN")
            Me.columnCustomerLEI = MyBase.Columns("CustomerLEI")
            Me.columnAccountLEI = MyBase.Columns("AccountLEI")
            Me.columnProviderLEI = MyBase.Columns("ProviderLEI")
            Me.columnDateTimeOfferToDeal = MyBase.Columns("DateTimeOfferToDeal")
            Me.columnTransmissionOfOrderIndicator = MyBase.Columns("TransmissionOfOrderIndicator")
            Me.columnLiquidityProvisionActivity = MyBase.Columns("LiquidityProvisionActivity")
            Me.columnDateTimeOrderSubmission = MyBase.Columns("DateTimeOrderSubmission")
            Me.columnVenueTreasury = MyBase.Columns("VenueTreasury")
            Me.columnDateReceiptOrder = MyBase.Columns("DateReceiptOrder")
            Me.columnTRADE_DATE = MyBase.Columns("TRADE_DATE")
            Me.columnCUSTOMER_TRANSACTION_ID = MyBase.Columns("CUSTOMER_TRANSACTION_ID")
            Me.columnACTION_TYPE = MyBase.Columns("ACTION_TYPE")
            Me.columnBUSINESS_UNIT = MyBase.Columns("BUSINESS_UNIT")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnMIFIR_REPORTING = MyBase.Columns("MIFIR_REPORTING")
            Me.columnCOMMENT = MyBase.Columns("COMMENT")
            Me.columnTRADE_REPORT_ID = MyBase.Columns("TRADE_REPORT_ID")
            Me.columnSOURCE_SYSTEM = MyBase.Columns("SOURCE_SYSTEM")
            Me.columnRECORD_MODE = MyBase.Columns("RECORD_MODE")
            Me.columnUSER_FIELD1 = MyBase.Columns("USER_FIELD1")
            Me.columnUSER_FIELD2 = MyBase.Columns("USER_FIELD2")
            Me.columnUSER_FIELD3 = MyBase.Columns("USER_FIELD3")
            Me.columnUSER_FIELD4 = MyBase.Columns("USER_FIELD4")
            Me.columnUSER_FIELD5 = MyBase.Columns("USER_FIELD5")
            Me.columnUSER_FIELD6 = MyBase.Columns("USER_FIELD6")
            Me.columnUSER_FIELD7 = MyBase.Columns("USER_FIELD7")
            Me.columnUSER_FIELD8 = MyBase.Columns("USER_FIELD8")
            Me.columnUSER_FIELD9 = MyBase.Columns("USER_FIELD9")
            Me.columnPARTIAL_ASSISTANCE_FLAG = MyBase.Columns("PARTIAL_ASSISTANCE_FLAG")
            Me.columnPARTIAL_ASSISTANCE_SUBMITTER_ID = MyBase.Columns("PARTIAL_ASSISTANCE_SUBMITTER_ID")
            Me.columnPAIRING_ID = MyBase.Columns("PAIRING_ID")
            Me.columnEXECUTING_ENTITY_ID_TYPE = MyBase.Columns("EXECUTING_ENTITY_ID_TYPE")
            Me.columnEXECUTING_ENTITY_ID = MyBase.Columns("EXECUTING_ENTITY_ID")
            Me.columnMIFID_INVESTMENT_FIRM = MyBase.Columns("MIFID_INVESTMENT_FIRM")
            Me.columnBRANCH_MEMBERSHIP_COUNTRY = MyBase.Columns("BRANCH_MEMBERSHIP_COUNTRY")
            Me.columnBUYER_ID_TYPE = MyBase.Columns("BUYER_ID_TYPE")
            Me.columnBUYER_ID = MyBase.Columns("BUYER_ID")
            Me.columnBUYER_BRANCH_COUNTRY = MyBase.Columns("BUYER_BRANCH_COUNTRY")
            Me.columnBUYER_FIRSTNAME = MyBase.Columns("BUYER_FIRSTNAME")
            Me.columnBUYER_SURNAME = MyBase.Columns("BUYER_SURNAME")
            Me.columnBUYER_BIRTHDATE = MyBase.Columns("BUYER_BIRTHDATE")
            Me.columnBUYER_DECISION_MAKER_ID_TYPE = MyBase.Columns("BUYER_DECISION_MAKER_ID_TYPE")
            Me.columnBUYER_DECISION_MAKER_ID = MyBase.Columns("BUYER_DECISION_MAKER_ID")
            Me.columnBUYER_DECISION_FIRSTNAME = MyBase.Columns("BUYER_DECISION_FIRSTNAME")
            Me.columnBUYER_DECISION_SURNAME = MyBase.Columns("BUYER_DECISION_SURNAME")
            Me.columnBUYER_DECISION_BIRTHDATE = MyBase.Columns("BUYER_DECISION_BIRTHDATE")
            Me.columnSELLER_ID_TYPE = MyBase.Columns("SELLER_ID_TYPE")
            Me.columnSELLER_ID = MyBase.Columns("SELLER_ID")
            Me.columnSELLER_BRANCH_COUNTRY = MyBase.Columns("SELLER_BRANCH_COUNTRY")
            Me.columnSELLER_FIRSTNAME = MyBase.Columns("SELLER_FIRSTNAME")
            Me.columnSELLER_SURNAME = MyBase.Columns("SELLER_SURNAME")
            Me.columnSELLER_BIRTHDATE = MyBase.Columns("SELLER_BIRTHDATE")
            Me.columnSELLER_DECISION_MAKER_ID_TYPE = MyBase.Columns("SELLER_DECISION_MAKER_ID_TYPE")
            Me.columnSELLER_DECISION_MAKER_ID = MyBase.Columns("SELLER_DECISION_MAKER_ID")
            Me.columnSELLER_DECISION_FIRST_NAME = MyBase.Columns("SELLER_DECISION_FIRST_NAME")
            Me.columnSELLER_DECISION_SURNAME = MyBase.Columns("SELLER_DECISION_SURNAME")
            Me.columnSELLER_DECISION_BIRTHDATE = MyBase.Columns("SELLER_DECISION_BIRTHDATE")
            Me.columnTRANSMISSION_IND = MyBase.Columns("TRANSMISSION_IND")
            Me.columnTRANSMITTING_ENTITY_BUYER_ID_TYPE = MyBase.Columns("TRANSMITTING_ENTITY_BUYER_ID_TYPE")
            Me.columnTRANSMITTING_ENTITY_BUYER_ID = MyBase.Columns("TRANSMITTING_ENTITY_BUYER_ID")
            Me.columnTRANSMITTING_ENTITY_SELLER_ID_TYPE = MyBase.Columns("TRANSMITTING_ENTITY_SELLER_ID_TYPE")
            Me.columnTRANSMITTING_ENTITY_SELLER_ID = MyBase.Columns("TRANSMITTING_ENTITY_SELLER_ID")
            Me.columnTRN_REF_NUMBER = MyBase.Columns("TRN_REF_NUMBER")
            Me.columnTRADING_VENUE_TRN_ID_CODE = MyBase.Columns("TRADING_VENUE_TRN_ID_CODE")
            Me.columnVENUE = MyBase.Columns("VENUE")
            Me.columnTRADE_TIME = MyBase.Columns("TRADE_TIME")
            Me.columnMIFIR_TRADING_CAPACITY = MyBase.Columns("MIFIR_TRADING_CAPACITY")
            Me.columnQUANTITY_NOTATION = MyBase.Columns("QUANTITY_NOTATION")
            Me.columnQUANTITY = MyBase.Columns("QUANTITY")
            Me.columnQUANTITY_CURRENCY = MyBase.Columns("QUANTITY_CURRENCY")
            Me.columnNOTIONAL_INCREASE_DECREASE = MyBase.Columns("NOTIONAL_INCREASE_DECREASE")
            Me.columnPRICE_NOTATION = MyBase.Columns("PRICE_NOTATION")
            Me.columnPRICE = MyBase.Columns("PRICE")
            Me.columnPRICE_CURRENCY = MyBase.Columns("PRICE_CURRENCY")
            Me.columnNET_AMOUNT = MyBase.Columns("NET_AMOUNT")
            Me.columnUPFRONT_PAYMENT = MyBase.Columns("UPFRONT_PAYMENT")
            Me.columnUPFRONT_PAYMENT_CURRENCY = MyBase.Columns("UPFRONT_PAYMENT_CURRENCY")
            Me.columnCOMPLEX_TRADE_COMPONENT_ID = MyBase.Columns("COMPLEX_TRADE_COMPONENT_ID")
            Me.columnINSTRUMENT_ID_TYPE = MyBase.Columns("INSTRUMENT_ID_TYPE")
            Me.columnINSTRUMENT_NAME = MyBase.Columns("INSTRUMENT_NAME")
            Me.columnINSTRUMENT_ID = MyBase.Columns("INSTRUMENT_ID")
            Me.columnINSTRUMENT_CLASS = MyBase.Columns("INSTRUMENT_CLASS")
            Me.columnNOTIONAL_CURRENCY_1 = MyBase.Columns("NOTIONAL_CURRENCY_1")
            Me.columnNOTIONAL_CURRENCY_2 = MyBase.Columns("NOTIONAL_CURRENCY_2")
            Me.columnPRICE_MULTIPLIER = MyBase.Columns("PRICE_MULTIPLIER")
            Me.columnUNDERLYING_INSTRUMENT_DIRECTION = MyBase.Columns("UNDERLYING_INSTRUMENT_DIRECTION")
            Me.columnUNDERLYING_INSTRUMENT_CODE = MyBase.Columns("UNDERLYING_INSTRUMENT_CODE")
            Me.columnUNDERLYING_INDEX_CODE = MyBase.Columns("UNDERLYING_INDEX_CODE")
            Me.columnUNDERLYING_INDEX_NAME = MyBase.Columns("UNDERLYING_INDEX_NAME")
            Me.columnUNDERLYING_INDEX_TERM = MyBase.Columns("UNDERLYING_INDEX_TERM")
            Me.columnUNDERLYING_INDEX_TERM_UNIT = MyBase.Columns("UNDERLYING_INDEX_TERM_UNIT")
            Me.columnSTRIKE_PRICE_NOTATION = MyBase.Columns("STRIKE_PRICE_NOTATION")
            Me.columnSTRIKE_PRICE = MyBase.Columns("STRIKE_PRICE")
            Me.columnSTRIKE_PRICE_CURRENCY = MyBase.Columns("STRIKE_PRICE_CURRENCY")
            Me.columnOPTION_EXERCISE_STYLE = MyBase.Columns("OPTION_EXERCISE_STYLE")
            Me.columnMATURITY_DATE_INSTRUMENT = MyBase.Columns("MATURITY_DATE_INSTRUMENT")
            Me.columnEXPIRY_DATE = MyBase.Columns("EXPIRY_DATE")
            Me.columnDELIVERY_TYPE = MyBase.Columns("DELIVERY_TYPE")
            Me.columnINVESTMENT_DECISION_ID_TYPE = MyBase.Columns("INVESTMENT_DECISION_ID_TYPE")
            Me.columnINVESTMENT_DECISION_ID = MyBase.Columns("INVESTMENT_DECISION_ID")
            Me.columnINVESTMENT_DECISION_BRANCH_COUNTRY = MyBase.Columns("INVESTMENT_DECISION_BRANCH_COUNTRY")
            Me.columnEXECUTION_ID_TYPE = MyBase.Columns("EXECUTION_ID_TYPE")
            Me.columnEXECUTION_ID = MyBase.Columns("EXECUTION_ID")
            Me.columnSUPERVISING_BRANCH_COUNTRY = MyBase.Columns("SUPERVISING_BRANCH_COUNTRY")
            Me.columnWAIVER_INDICATOR = MyBase.Columns("WAIVER_INDICATOR")
            Me.columnSHORT_SELLING_INDICATOR = MyBase.Columns("SHORT_SELLING_INDICATOR")
            Me.columnCOMMODITY_DERIVATIVE_INDICATOR = MyBase.Columns("COMMODITY_DERIVATIVE_INDICATOR")
            Me.columnSFTR_INDICATOR = MyBase.Columns("SFTR_INDICATOR")
            Me.columnDIRECTED_ORDER_FLAG = MyBase.Columns("DIRECTED_ORDER_FLAG")
            Me.columnORDER_GROUP_ID = MyBase.Columns("ORDER_GROUP_ID")
            Me.columnTOAX_FLAG = MyBase.Columns("TOAX_FLAG")
            Me.columnLIQP_FLAG = MyBase.Columns("LIQP_FLAG")
            Me.columnORDER_TYPE = MyBase.Columns("ORDER_TYPE")
            Me.columnCLIENT_TYPE = MyBase.Columns("CLIENT_TYPE")
            Me.columnOTC_POST_TRADE_INDICATOR = MyBase.Columns("OTC_POST_TRADE_INDICATOR")
            Me.columnOPTION_TYPE = MyBase.Columns("OPTION_TYPE")
            Me.columnUNDERLYING_INDEX_DIRECTION = MyBase.Columns("UNDERLYING_INDEX_DIRECTION")
            Me.columnOrderType = MyBase.Columns("OrderType")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnCountryOfResidence = MyBase.Columns("CountryOfResidence")
            Me.columnBuyer = MyBase.Columns("Buyer")
            Me.columnSeller = MyBase.Columns("Seller")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnReportStatus = New Global.System.Data.DataColumn("ReportStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportStatus)
            Me.columnTradeDate = New Global.System.Data.DataColumn("TradeDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeDate)
            Me.columnValueDate = New Global.System.Data.DataColumn("ValueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueDate)
            Me.columnFixingDate = New Global.System.Data.DataColumn("FixingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixingDate)
            Me.columnClientOrderID = New Global.System.Data.DataColumn("ClientOrderID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientOrderID)
            Me.columnFxAllID = New Global.System.Data.DataColumn("FxAllID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFxAllID)
            Me.columnTradingVenueTransactionIdentificationCode = New Global.System.Data.DataColumn("TradingVenueTransactionIdentificationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradingVenueTransactionIdentificationCode)
            Me.columnCustomerUSI = New Global.System.Data.DataColumn("CustomerUSI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerUSI)
            Me.columnProviderUSI = New Global.System.Data.DataColumn("ProviderUSI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProviderUSI)
            Me.columnProduct = New Global.System.Data.DataColumn("Product", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnFixingTime = New Global.System.Data.DataColumn("FixingTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixingTime)
            Me.columnFixingSeries = New Global.System.Data.DataColumn("FixingSeries", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixingSeries)
            Me.columnCustBS = New Global.System.Data.DataColumn("CustBS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustBS)
            Me.columnCustTradeSide = New Global.System.Data.DataColumn("CustTradeSide", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustTradeSide)
            Me.columnCustomerName = New Global.System.Data.DataColumn("CustomerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnCustTrader = New Global.System.Data.DataColumn("CustTrader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustTrader)
            Me.columnAccount = New Global.System.Data.DataColumn("Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccount)
            Me.columnAccountLongName = New Global.System.Data.DataColumn("AccountLongName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountLongName)
            Me.columnCCYPair = New Global.System.Data.DataColumn("CCYPair", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCYPair)
            Me.columnNotionalCCY = New Global.System.Data.DataColumn("NotionalCCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotionalCCY)
            Me.columnNotional = New Global.System.Data.DataColumn("Notional", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotional)
            Me.columnContraCCY = New Global.System.Data.DataColumn("ContraCCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContraCCY)
            Me.columnContraAmount = New Global.System.Data.DataColumn("ContraAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContraAmount)
            Me.columnPriceTreasury = New Global.System.Data.DataColumn("PriceTreasury", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriceTreasury)
            Me.columnFwdPts = New Global.System.Data.DataColumn("FwdPts", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFwdPts)
            Me.columnAllIn = New Global.System.Data.DataColumn("AllIn", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllIn)
            Me.columnComplexTradeID = New Global.System.Data.DataColumn("ComplexTradeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComplexTradeID)
            Me.columnCARStatus = New Global.System.Data.DataColumn("CARStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARStatus)
            Me.columnCARSubmitID = New Global.System.Data.DataColumn("CARSubmitID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARSubmitID)
            Me.columnCARTime = New Global.System.Data.DataColumn("CARTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARTime)
            Me.columnExecutionWithinTheFirm = New Global.System.Data.DataColumn("ExecutionWithinTheFirm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExecutionWithinTheFirm)
            Me.columnISIN = New Global.System.Data.DataColumn("ISIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN)
            Me.columnCFICodeForTheInstrument = New Global.System.Data.DataColumn("CFICodeForTheInstrument", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCFICodeForTheInstrument)
            Me.columnWaiverIndicator = New Global.System.Data.DataColumn("WaiverIndicator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaiverIndicator)
            Me.columnMTFExecutionTime = New Global.System.Data.DataColumn("MTFExecutionTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTFExecutionTime)
            Me.columnLiqVenue = New Global.System.Data.DataColumn("LiqVenue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiqVenue)
            Me.columnCapacity = New Global.System.Data.DataColumn("Capacity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacity)
            Me.columnNPFT = New Global.System.Data.DataColumn("NPFT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNPFT)
            Me.columnSEC_FIN = New Global.System.Data.DataColumn("SEC_FIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_FIN)
            Me.columnCustomerLEI = New Global.System.Data.DataColumn("CustomerLEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerLEI)
            Me.columnAccountLEI = New Global.System.Data.DataColumn("AccountLEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountLEI)
            Me.columnProviderLEI = New Global.System.Data.DataColumn("ProviderLEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProviderLEI)
            Me.columnDateTimeOfferToDeal = New Global.System.Data.DataColumn("DateTimeOfferToDeal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeOfferToDeal)
            Me.columnTransmissionOfOrderIndicator = New Global.System.Data.DataColumn("TransmissionOfOrderIndicator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransmissionOfOrderIndicator)
            Me.columnLiquidityProvisionActivity = New Global.System.Data.DataColumn("LiquidityProvisionActivity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidityProvisionActivity)
            Me.columnDateTimeOrderSubmission = New Global.System.Data.DataColumn("DateTimeOrderSubmission", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeOrderSubmission)
            Me.columnVenueTreasury = New Global.System.Data.DataColumn("VenueTreasury", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVenueTreasury)
            Me.columnDateReceiptOrder = New Global.System.Data.DataColumn("DateReceiptOrder", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReceiptOrder)
            Me.columnTRADE_DATE = New Global.System.Data.DataColumn("TRADE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRADE_DATE)
            Me.columnCUSTOMER_TRANSACTION_ID = New Global.System.Data.DataColumn("CUSTOMER_TRANSACTION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_TRANSACTION_ID)
            Me.columnACTION_TYPE = New Global.System.Data.DataColumn("ACTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTION_TYPE)
            Me.columnBUSINESS_UNIT = New Global.System.Data.DataColumn("BUSINESS_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUSINESS_UNIT)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnMIFIR_REPORTING = New Global.System.Data.DataColumn("MIFIR_REPORTING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIFIR_REPORTING)
            Me.columnCOMMENT = New Global.System.Data.DataColumn("COMMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT)
            Me.columnTRADE_REPORT_ID = New Global.System.Data.DataColumn("TRADE_REPORT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRADE_REPORT_ID)
            Me.columnSOURCE_SYSTEM = New Global.System.Data.DataColumn("SOURCE_SYSTEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE_SYSTEM)
            Me.columnRECORD_MODE = New Global.System.Data.DataColumn("RECORD_MODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECORD_MODE)
            Me.columnUSER_FIELD1 = New Global.System.Data.DataColumn("USER_FIELD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD1)
            Me.columnUSER_FIELD2 = New Global.System.Data.DataColumn("USER_FIELD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD2)
            Me.columnUSER_FIELD3 = New Global.System.Data.DataColumn("USER_FIELD3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD3)
            Me.columnUSER_FIELD4 = New Global.System.Data.DataColumn("USER_FIELD4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD4)
            Me.columnUSER_FIELD5 = New Global.System.Data.DataColumn("USER_FIELD5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD5)
            Me.columnUSER_FIELD6 = New Global.System.Data.DataColumn("USER_FIELD6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD6)
            Me.columnUSER_FIELD7 = New Global.System.Data.DataColumn("USER_FIELD7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD7)
            Me.columnUSER_FIELD8 = New Global.System.Data.DataColumn("USER_FIELD8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD8)
            Me.columnUSER_FIELD9 = New Global.System.Data.DataColumn("USER_FIELD9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_FIELD9)
            Me.columnPARTIAL_ASSISTANCE_FLAG = New Global.System.Data.DataColumn("PARTIAL_ASSISTANCE_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARTIAL_ASSISTANCE_FLAG)
            Me.columnPARTIAL_ASSISTANCE_SUBMITTER_ID = New Global.System.Data.DataColumn("PARTIAL_ASSISTANCE_SUBMITTER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARTIAL_ASSISTANCE_SUBMITTER_ID)
            Me.columnPAIRING_ID = New Global.System.Data.DataColumn("PAIRING_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIRING_ID)
            Me.columnEXECUTING_ENTITY_ID_TYPE = New Global.System.Data.DataColumn("EXECUTING_ENTITY_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXECUTING_ENTITY_ID_TYPE)
            Me.columnEXECUTING_ENTITY_ID = New Global.System.Data.DataColumn("EXECUTING_ENTITY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXECUTING_ENTITY_ID)
            Me.columnMIFID_INVESTMENT_FIRM = New Global.System.Data.DataColumn("MIFID_INVESTMENT_FIRM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIFID_INVESTMENT_FIRM)
            Me.columnBRANCH_MEMBERSHIP_COUNTRY = New Global.System.Data.DataColumn("BRANCH_MEMBERSHIP_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANCH_MEMBERSHIP_COUNTRY)
            Me.columnBUYER_ID_TYPE = New Global.System.Data.DataColumn("BUYER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_ID_TYPE)
            Me.columnBUYER_ID = New Global.System.Data.DataColumn("BUYER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_ID)
            Me.columnBUYER_BRANCH_COUNTRY = New Global.System.Data.DataColumn("BUYER_BRANCH_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_BRANCH_COUNTRY)
            Me.columnBUYER_FIRSTNAME = New Global.System.Data.DataColumn("BUYER_FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_FIRSTNAME)
            Me.columnBUYER_SURNAME = New Global.System.Data.DataColumn("BUYER_SURNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_SURNAME)
            Me.columnBUYER_BIRTHDATE = New Global.System.Data.DataColumn("BUYER_BIRTHDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_BIRTHDATE)
            Me.columnBUYER_DECISION_MAKER_ID_TYPE = New Global.System.Data.DataColumn("BUYER_DECISION_MAKER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_DECISION_MAKER_ID_TYPE)
            Me.columnBUYER_DECISION_MAKER_ID = New Global.System.Data.DataColumn("BUYER_DECISION_MAKER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_DECISION_MAKER_ID)
            Me.columnBUYER_DECISION_FIRSTNAME = New Global.System.Data.DataColumn("BUYER_DECISION_FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_DECISION_FIRSTNAME)
            Me.columnBUYER_DECISION_SURNAME = New Global.System.Data.DataColumn("BUYER_DECISION_SURNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_DECISION_SURNAME)
            Me.columnBUYER_DECISION_BIRTHDATE = New Global.System.Data.DataColumn("BUYER_DECISION_BIRTHDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUYER_DECISION_BIRTHDATE)
            Me.columnSELLER_ID_TYPE = New Global.System.Data.DataColumn("SELLER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_ID_TYPE)
            Me.columnSELLER_ID = New Global.System.Data.DataColumn("SELLER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_ID)
            Me.columnSELLER_BRANCH_COUNTRY = New Global.System.Data.DataColumn("SELLER_BRANCH_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_BRANCH_COUNTRY)
            Me.columnSELLER_FIRSTNAME = New Global.System.Data.DataColumn("SELLER_FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_FIRSTNAME)
            Me.columnSELLER_SURNAME = New Global.System.Data.DataColumn("SELLER_SURNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_SURNAME)
            Me.columnSELLER_BIRTHDATE = New Global.System.Data.DataColumn("SELLER_BIRTHDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_BIRTHDATE)
            Me.columnSELLER_DECISION_MAKER_ID_TYPE = New Global.System.Data.DataColumn("SELLER_DECISION_MAKER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_DECISION_MAKER_ID_TYPE)
            Me.columnSELLER_DECISION_MAKER_ID = New Global.System.Data.DataColumn("SELLER_DECISION_MAKER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_DECISION_MAKER_ID)
            Me.columnSELLER_DECISION_FIRST_NAME = New Global.System.Data.DataColumn("SELLER_DECISION_FIRST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_DECISION_FIRST_NAME)
            Me.columnSELLER_DECISION_SURNAME = New Global.System.Data.DataColumn("SELLER_DECISION_SURNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_DECISION_SURNAME)
            Me.columnSELLER_DECISION_BIRTHDATE = New Global.System.Data.DataColumn("SELLER_DECISION_BIRTHDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELLER_DECISION_BIRTHDATE)
            Me.columnTRANSMISSION_IND = New Global.System.Data.DataColumn("TRANSMISSION_IND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSMISSION_IND)
            Me.columnTRANSMITTING_ENTITY_BUYER_ID_TYPE = New Global.System.Data.DataColumn("TRANSMITTING_ENTITY_BUYER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSMITTING_ENTITY_BUYER_ID_TYPE)
            Me.columnTRANSMITTING_ENTITY_BUYER_ID = New Global.System.Data.DataColumn("TRANSMITTING_ENTITY_BUYER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSMITTING_ENTITY_BUYER_ID)
            Me.columnTRANSMITTING_ENTITY_SELLER_ID_TYPE = New Global.System.Data.DataColumn("TRANSMITTING_ENTITY_SELLER_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSMITTING_ENTITY_SELLER_ID_TYPE)
            Me.columnTRANSMITTING_ENTITY_SELLER_ID = New Global.System.Data.DataColumn("TRANSMITTING_ENTITY_SELLER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSMITTING_ENTITY_SELLER_ID)
            Me.columnTRN_REF_NUMBER = New Global.System.Data.DataColumn("TRN_REF_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRN_REF_NUMBER)
            Me.columnTRADING_VENUE_TRN_ID_CODE = New Global.System.Data.DataColumn("TRADING_VENUE_TRN_ID_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRADING_VENUE_TRN_ID_CODE)
            Me.columnVENUE = New Global.System.Data.DataColumn("VENUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENUE)
            Me.columnTRADE_TIME = New Global.System.Data.DataColumn("TRADE_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRADE_TIME)
            Me.columnMIFIR_TRADING_CAPACITY = New Global.System.Data.DataColumn("MIFIR_TRADING_CAPACITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIFIR_TRADING_CAPACITY)
            Me.columnQUANTITY_NOTATION = New Global.System.Data.DataColumn("QUANTITY_NOTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY_NOTATION)
            Me.columnQUANTITY = New Global.System.Data.DataColumn("QUANTITY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY)
            Me.columnQUANTITY_CURRENCY = New Global.System.Data.DataColumn("QUANTITY_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY_CURRENCY)
            Me.columnNOTIONAL_INCREASE_DECREASE = New Global.System.Data.DataColumn("NOTIONAL_INCREASE_DECREASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTIONAL_INCREASE_DECREASE)
            Me.columnPRICE_NOTATION = New Global.System.Data.DataColumn("PRICE_NOTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_NOTATION)
            Me.columnPRICE = New Global.System.Data.DataColumn("PRICE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE)
            Me.columnPRICE_CURRENCY = New Global.System.Data.DataColumn("PRICE_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_CURRENCY)
            Me.columnNET_AMOUNT = New Global.System.Data.DataColumn("NET_AMOUNT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_AMOUNT)
            Me.columnUPFRONT_PAYMENT = New Global.System.Data.DataColumn("UPFRONT_PAYMENT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPFRONT_PAYMENT)
            Me.columnUPFRONT_PAYMENT_CURRENCY = New Global.System.Data.DataColumn("UPFRONT_PAYMENT_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPFRONT_PAYMENT_CURRENCY)
            Me.columnCOMPLEX_TRADE_COMPONENT_ID = New Global.System.Data.DataColumn("COMPLEX_TRADE_COMPONENT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPLEX_TRADE_COMPONENT_ID)
            Me.columnINSTRUMENT_ID_TYPE = New Global.System.Data.DataColumn("INSTRUMENT_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUMENT_ID_TYPE)
            Me.columnINSTRUMENT_NAME = New Global.System.Data.DataColumn("INSTRUMENT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUMENT_NAME)
            Me.columnINSTRUMENT_ID = New Global.System.Data.DataColumn("INSTRUMENT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUMENT_ID)
            Me.columnINSTRUMENT_CLASS = New Global.System.Data.DataColumn("INSTRUMENT_CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUMENT_CLASS)
            Me.columnNOTIONAL_CURRENCY_1 = New Global.System.Data.DataColumn("NOTIONAL_CURRENCY_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTIONAL_CURRENCY_1)
            Me.columnNOTIONAL_CURRENCY_2 = New Global.System.Data.DataColumn("NOTIONAL_CURRENCY_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTIONAL_CURRENCY_2)
            Me.columnPRICE_MULTIPLIER = New Global.System.Data.DataColumn("PRICE_MULTIPLIER", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_MULTIPLIER)
            Me.columnUNDERLYING_INSTRUMENT_DIRECTION = New Global.System.Data.DataColumn("UNDERLYING_INSTRUMENT_DIRECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INSTRUMENT_DIRECTION)
            Me.columnUNDERLYING_INSTRUMENT_CODE = New Global.System.Data.DataColumn("UNDERLYING_INSTRUMENT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INSTRUMENT_CODE)
            Me.columnUNDERLYING_INDEX_CODE = New Global.System.Data.DataColumn("UNDERLYING_INDEX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INDEX_CODE)
            Me.columnUNDERLYING_INDEX_NAME = New Global.System.Data.DataColumn("UNDERLYING_INDEX_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INDEX_NAME)
            Me.columnUNDERLYING_INDEX_TERM = New Global.System.Data.DataColumn("UNDERLYING_INDEX_TERM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INDEX_TERM)
            Me.columnUNDERLYING_INDEX_TERM_UNIT = New Global.System.Data.DataColumn("UNDERLYING_INDEX_TERM_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INDEX_TERM_UNIT)
            Me.columnSTRIKE_PRICE_NOTATION = New Global.System.Data.DataColumn("STRIKE_PRICE_NOTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRIKE_PRICE_NOTATION)
            Me.columnSTRIKE_PRICE = New Global.System.Data.DataColumn("STRIKE_PRICE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRIKE_PRICE)
            Me.columnSTRIKE_PRICE_CURRENCY = New Global.System.Data.DataColumn("STRIKE_PRICE_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRIKE_PRICE_CURRENCY)
            Me.columnOPTION_EXERCISE_STYLE = New Global.System.Data.DataColumn("OPTION_EXERCISE_STYLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_EXERCISE_STYLE)
            Me.columnMATURITY_DATE_INSTRUMENT = New Global.System.Data.DataColumn("MATURITY_DATE_INSTRUMENT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATURITY_DATE_INSTRUMENT)
            Me.columnEXPIRY_DATE = New Global.System.Data.DataColumn("EXPIRY_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPIRY_DATE)
            Me.columnDELIVERY_TYPE = New Global.System.Data.DataColumn("DELIVERY_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELIVERY_TYPE)
            Me.columnINVESTMENT_DECISION_ID_TYPE = New Global.System.Data.DataColumn("INVESTMENT_DECISION_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVESTMENT_DECISION_ID_TYPE)
            Me.columnINVESTMENT_DECISION_ID = New Global.System.Data.DataColumn("INVESTMENT_DECISION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVESTMENT_DECISION_ID)
            Me.columnINVESTMENT_DECISION_BRANCH_COUNTRY = New Global.System.Data.DataColumn("INVESTMENT_DECISION_BRANCH_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVESTMENT_DECISION_BRANCH_COUNTRY)
            Me.columnEXECUTION_ID_TYPE = New Global.System.Data.DataColumn("EXECUTION_ID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXECUTION_ID_TYPE)
            Me.columnEXECUTION_ID = New Global.System.Data.DataColumn("EXECUTION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXECUTION_ID)
            Me.columnSUPERVISING_BRANCH_COUNTRY = New Global.System.Data.DataColumn("SUPERVISING_BRANCH_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPERVISING_BRANCH_COUNTRY)
            Me.columnWAIVER_INDICATOR = New Global.System.Data.DataColumn("WAIVER_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAIVER_INDICATOR)
            Me.columnSHORT_SELLING_INDICATOR = New Global.System.Data.DataColumn("SHORT_SELLING_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHORT_SELLING_INDICATOR)
            Me.columnCOMMODITY_DERIVATIVE_INDICATOR = New Global.System.Data.DataColumn("COMMODITY_DERIVATIVE_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMODITY_DERIVATIVE_INDICATOR)
            Me.columnSFTR_INDICATOR = New Global.System.Data.DataColumn("SFTR_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSFTR_INDICATOR)
            Me.columnDIRECTED_ORDER_FLAG = New Global.System.Data.DataColumn("DIRECTED_ORDER_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECTED_ORDER_FLAG)
            Me.columnORDER_GROUP_ID = New Global.System.Data.DataColumn("ORDER_GROUP_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_GROUP_ID)
            Me.columnTOAX_FLAG = New Global.System.Data.DataColumn("TOAX_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOAX_FLAG)
            Me.columnLIQP_FLAG = New Global.System.Data.DataColumn("LIQP_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIQP_FLAG)
            Me.columnORDER_TYPE = New Global.System.Data.DataColumn("ORDER_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_TYPE)
            Me.columnCLIENT_TYPE = New Global.System.Data.DataColumn("CLIENT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_TYPE)
            Me.columnOTC_POST_TRADE_INDICATOR = New Global.System.Data.DataColumn("OTC_POST_TRADE_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_POST_TRADE_INDICATOR)
            Me.columnOPTION_TYPE = New Global.System.Data.DataColumn("OPTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_TYPE)
            Me.columnUNDERLYING_INDEX_DIRECTION = New Global.System.Data.DataColumn("UNDERLYING_INDEX_DIRECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDERLYING_INDEX_DIRECTION)
            Me.columnOrderType = New Global.System.Data.DataColumn("OrderType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderType)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnCountryOfResidence = New Global.System.Data.DataColumn("CountryOfResidence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountryOfResidence)
            Me.columnBuyer = New Global.System.Data.DataColumn("Buyer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuyer)
            Me.columnSeller = New Global.System.Data.DataColumn("Seller", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeller)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnReportStatus.MaxLength = 50
            Me.columnClientOrderID.MaxLength = 50
            Me.columnFxAllID.MaxLength = 50
            Me.columnTradingVenueTransactionIdentificationCode.MaxLength = 50
            Me.columnCustomerUSI.MaxLength = 50
            Me.columnProviderUSI.MaxLength = 50
            Me.columnProduct.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnFixingSeries.MaxLength = 50
            Me.columnCustBS.MaxLength = 50
            Me.columnCustTradeSide.MaxLength = 50
            Me.columnCustomerName.MaxLength = 50
            Me.columnCustTrader.MaxLength = 255
            Me.columnAccount.MaxLength = 50
            Me.columnAccountLongName.MaxLength = 255
            Me.columnCCYPair.MaxLength = 50
            Me.columnNotionalCCY.MaxLength = 3
            Me.columnContraCCY.MaxLength = 3
            Me.columnComplexTradeID.MaxLength = 50
            Me.columnCARStatus.MaxLength = 50
            Me.columnCARSubmitID.MaxLength = 50
            Me.columnExecutionWithinTheFirm.MaxLength = 50
            Me.columnISIN.MaxLength = 50
            Me.columnCFICodeForTheInstrument.MaxLength = 50
            Me.columnWaiverIndicator.MaxLength = 50
            Me.columnLiqVenue.MaxLength = 50
            Me.columnCapacity.MaxLength = 50
            Me.columnNPFT.MaxLength = 50
            Me.columnSEC_FIN.MaxLength = 50
            Me.columnCustomerLEI.MaxLength = 50
            Me.columnAccountLEI.MaxLength = 50
            Me.columnProviderLEI.MaxLength = 50
            Me.columnTransmissionOfOrderIndicator.MaxLength = 50
            Me.columnLiquidityProvisionActivity.MaxLength = 50
            Me.columnVenueTreasury.MaxLength = 50
            Me.columnCUSTOMER_TRANSACTION_ID.MaxLength = 52
            Me.columnACTION_TYPE.MaxLength = 1
            Me.columnBUSINESS_UNIT.MaxLength = 8
            Me.columnUSER_ID.MaxLength = 50
            Me.columnMIFIR_REPORTING.MaxLength = 1
            Me.columnCOMMENT.MaxLength = 100
            Me.columnTRADE_REPORT_ID.MaxLength = 52
            Me.columnSOURCE_SYSTEM.MaxLength = 50
            Me.columnRECORD_MODE.MaxLength = 15
            Me.columnUSER_FIELD1.MaxLength = 50
            Me.columnUSER_FIELD2.MaxLength = 50
            Me.columnUSER_FIELD3.MaxLength = 50
            Me.columnUSER_FIELD4.MaxLength = 50
            Me.columnUSER_FIELD5.MaxLength = 50
            Me.columnUSER_FIELD6.MaxLength = 50
            Me.columnUSER_FIELD7.MaxLength = 50
            Me.columnUSER_FIELD8.MaxLength = 50
            Me.columnUSER_FIELD9.MaxLength = 50
            Me.columnPARTIAL_ASSISTANCE_FLAG.MaxLength = 1
            Me.columnPARTIAL_ASSISTANCE_SUBMITTER_ID.MaxLength = 20
            Me.columnPAIRING_ID.MaxLength = 32
            Me.columnEXECUTING_ENTITY_ID_TYPE.MaxLength = 3
            Me.columnEXECUTING_ENTITY_ID.MaxLength = 20
            Me.columnMIFID_INVESTMENT_FIRM.MaxLength = 1
            Me.columnBRANCH_MEMBERSHIP_COUNTRY.MaxLength = 2
            Me.columnBUYER_ID_TYPE.MaxLength = 3
            Me.columnBUYER_ID.MaxLength = 20
            Me.columnBUYER_BRANCH_COUNTRY.MaxLength = 2
            Me.columnBUYER_FIRSTNAME.MaxLength = 140
            Me.columnBUYER_SURNAME.MaxLength = 140
            Me.columnBUYER_DECISION_MAKER_ID_TYPE.MaxLength = 3
            Me.columnBUYER_DECISION_MAKER_ID.MaxLength = 20
            Me.columnBUYER_DECISION_FIRSTNAME.MaxLength = 140
            Me.columnBUYER_DECISION_SURNAME.MaxLength = 140
            Me.columnSELLER_ID_TYPE.MaxLength = 3
            Me.columnSELLER_ID.MaxLength = 20
            Me.columnSELLER_BRANCH_COUNTRY.MaxLength = 2
            Me.columnSELLER_FIRSTNAME.MaxLength = 140
            Me.columnSELLER_SURNAME.MaxLength = 140
            Me.columnSELLER_DECISION_MAKER_ID_TYPE.MaxLength = 3
            Me.columnSELLER_DECISION_MAKER_ID.MaxLength = 20
            Me.columnSELLER_DECISION_FIRST_NAME.MaxLength = 140
            Me.columnSELLER_DECISION_SURNAME.MaxLength = 140
            Me.columnTRANSMISSION_IND.MaxLength = 1
            Me.columnTRANSMITTING_ENTITY_BUYER_ID_TYPE.MaxLength = 3
            Me.columnTRANSMITTING_ENTITY_BUYER_ID.MaxLength = 20
            Me.columnTRANSMITTING_ENTITY_SELLER_ID_TYPE.MaxLength = 3
            Me.columnTRANSMITTING_ENTITY_SELLER_ID.MaxLength = 20
            Me.columnTRN_REF_NUMBER.MaxLength = 52
            Me.columnTRADING_VENUE_TRN_ID_CODE.MaxLength = 52
            Me.columnVENUE.MaxLength = 4
            Me.columnMIFIR_TRADING_CAPACITY.MaxLength = 4
            Me.columnQUANTITY_NOTATION.MaxLength = 8
            Me.columnQUANTITY_CURRENCY.MaxLength = 3
            Me.columnNOTIONAL_INCREASE_DECREASE.MaxLength = 4
            Me.columnPRICE_NOTATION.MaxLength = 12
            Me.columnPRICE_CURRENCY.MaxLength = 3
            Me.columnUPFRONT_PAYMENT_CURRENCY.MaxLength = 3
            Me.columnCOMPLEX_TRADE_COMPONENT_ID.MaxLength = 35
            Me.columnINSTRUMENT_ID_TYPE.MaxLength = 4
            Me.columnINSTRUMENT_NAME.MaxLength = 255
            Me.columnINSTRUMENT_ID.MaxLength = 12
            Me.columnINSTRUMENT_CLASS.MaxLength = 6
            Me.columnNOTIONAL_CURRENCY_1.MaxLength = 3
            Me.columnNOTIONAL_CURRENCY_2.MaxLength = 3
            Me.columnUNDERLYING_INSTRUMENT_DIRECTION.MaxLength = 1
            Me.columnUNDERLYING_INSTRUMENT_CODE.MaxLength = 12
            Me.columnUNDERLYING_INDEX_CODE.MaxLength = 12
            Me.columnUNDERLYING_INDEX_NAME.MaxLength = 25
            Me.columnUNDERLYING_INDEX_TERM.MaxLength = 3
            Me.columnUNDERLYING_INDEX_TERM_UNIT.MaxLength = 4
            Me.columnSTRIKE_PRICE_NOTATION.MaxLength = 12
            Me.columnSTRIKE_PRICE_CURRENCY.MaxLength = 3
            Me.columnOPTION_EXERCISE_STYLE.MaxLength = 4
            Me.columnDELIVERY_TYPE.MaxLength = 4
            Me.columnINVESTMENT_DECISION_ID_TYPE.MaxLength = 18
            Me.columnINVESTMENT_DECISION_ID.MaxLength = 35
            Me.columnINVESTMENT_DECISION_BRANCH_COUNTRY.MaxLength = 2
            Me.columnEXECUTION_ID_TYPE.MaxLength = 18
            Me.columnEXECUTION_ID.MaxLength = 35
            Me.columnSUPERVISING_BRANCH_COUNTRY.MaxLength = 2
            Me.columnWAIVER_INDICATOR.MaxLength = 4
            Me.columnSHORT_SELLING_INDICATOR.MaxLength = 4
            Me.columnCOMMODITY_DERIVATIVE_INDICATOR.MaxLength = 1
            Me.columnSFTR_INDICATOR.MaxLength = 1
            Me.columnDIRECTED_ORDER_FLAG.MaxLength = 1
            Me.columnORDER_GROUP_ID.MaxLength = 50
            Me.columnTOAX_FLAG.MaxLength = 1
            Me.columnLIQP_FLAG.MaxLength = 1
            Me.columnORDER_TYPE.MaxLength = 1
            Me.columnCLIENT_TYPE.MaxLength = 1
            Me.columnOTC_POST_TRADE_INDICATOR.MaxLength = 4
            Me.columnOPTION_TYPE.MaxLength = 4
            Me.columnUNDERLYING_INDEX_DIRECTION.MaxLength = 1
            Me.columnOrderType.MaxLength = 50
            Me.columnClientNr.MaxLength = 50
            Me.columnClientName.MaxLength = 255
            Me.columnCountryOfResidence.MaxLength = 2
            Me.columnBuyer.MaxLength = 50
            Me.columnSeller.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewMIFIRRow() As MIFIRRow
            Return CType(Me.NewRow,MIFIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MIFIRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MIFIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MIFIRRowChangedEvent) Is Nothing) Then
                RaiseEvent MIFIRRowChanged(Me, New MIFIRRowChangeEvent(CType(e.Row,MIFIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MIFIRRowChangingEvent) Is Nothing) Then
                RaiseEvent MIFIRRowChanging(Me, New MIFIRRowChangeEvent(CType(e.Row,MIFIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MIFIRRowDeletedEvent) Is Nothing) Then
                RaiseEvent MIFIRRowDeleted(Me, New MIFIRRowChangeEvent(CType(e.Row,MIFIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MIFIRRowDeletingEvent) Is Nothing) Then
                RaiseEvent MIFIRRowDeleting(Me, New MIFIRRowChangeEvent(CType(e.Row,MIFIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveMIFIRRow(ByVal row As MIFIRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MeldewesenDataSet = New MeldewesenDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MIFIRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz10POSTENRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz10POSTEN As AWVz10POSTENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz10POSTEN = CType(Me.Table,AWVz10POSTENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz10POSTEN.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BELEGART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.BELEGARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BELEGART' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.BELEGARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property KENNZAHL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.KENNZAHLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KENNZAHL' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.KENNZAHLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_ISIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_ISINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_ISIN' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_ISINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTAPPIER_BEZEICHNUNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTAPPIER_BEZEICHNUNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTAPPIER_BEZEICHNUNG' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTAPPIER_BEZEICHNUNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOMINAL_STUECK() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.NOMINAL_STUECKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMINAL_STUECK' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.NOMINAL_STUECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_SoN() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_SoNColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_SoN' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_SoNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_LAND_ISOCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_ISOCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_LAND_ISOCODE' in table 'AWVz10POSTEN' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_ISOCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_LAND_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_LAND_NAME' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_WHG() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_WHGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_WHG' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_WHGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WERTPAPIER_BETRAG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.WERTPAPIER_BETRAGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WERTPAPIER_BETRAG' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.WERTPAPIER_BETRAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdAWVz14z15() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.IdAWVz14z15Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdAWVz14z15' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.IdAWVz14z15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz10POSTEN.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz10POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz10POSTEN.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz10POSTEN_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz10POSTEN_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBELEGARTNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.BELEGARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBELEGARTNull()
            Me(Me.tableAWVz10POSTEN.BELEGARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsKENNZAHLNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.KENNZAHLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetKENNZAHLNull()
            Me(Me.tableAWVz10POSTEN.KENNZAHLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_ISINNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_ISINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_ISINNull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_ISINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTAPPIER_BEZEICHNUNGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTAPPIER_BEZEICHNUNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTAPPIER_BEZEICHNUNGNull()
            Me(Me.tableAWVz10POSTEN.WERTAPPIER_BEZEICHNUNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOMINAL_STUECKNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.NOMINAL_STUECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOMINAL_STUECKNull()
            Me(Me.tableAWVz10POSTEN.NOMINAL_STUECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_SoNNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_SoNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_SoNNull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_SoNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_LAND_ISOCODENull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_ISOCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_LAND_ISOCODENull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_ISOCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_LAND_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_LAND_NAMENull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_LAND_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_WHGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_WHGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_WHGNull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_WHGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWERTPAPIER_BETRAGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.WERTPAPIER_BETRAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWERTPAPIER_BETRAGNull()
            Me(Me.tableAWVz10POSTEN.WERTPAPIER_BETRAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdAWVz14z15Null() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.IdAWVz14z15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdAWVz14z15Null()
            Me(Me.tableAWVz10POSTEN.IdAWVz14z15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz10POSTEN.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz10POSTEN.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz14Row
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz14 As AWVz14DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz14 = CType(Me.Table,AWVz14DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz14.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz14.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLASS' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.COUNTRY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY CODE' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.COUNTRY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LANDKZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.LANDKZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LANDKZ' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.LANDKZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.COUNTRY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.COUNTRY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.COUNTRY_NAME_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME DE' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.COUNTRY_NAME_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CountrySumAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.CountrySumAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountrySumAmount' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.CountrySumAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZ14Z15Meldemonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.IdZ14Z15MeldemonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZ14Z15Meldemonat' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.IdZ14Z15MeldemonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz14_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz14_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_CLASSNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_CLASSNull()
            Me(Me.tableAWVz14.CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_CODENull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.COUNTRY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_CODENull()
            Me(Me.tableAWVz14.COUNTRY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLANDKZNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.LANDKZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLANDKZNull()
            Me(Me.tableAWVz14.LANDKZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.COUNTRY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAMENull()
            Me(Me.tableAWVz14.COUNTRY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAME_DENull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.COUNTRY_NAME_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAME_DENull()
            Me(Me.tableAWVz14.COUNTRY_NAME_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCountrySumAmountNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.CountrySumAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCountrySumAmountNull()
            Me(Me.tableAWVz14.CountrySumAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZ14Z15MeldemonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.IdZ14Z15MeldemonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZ14Z15MeldemonatNull()
            Me(Me.tableAWVz14.IdZ14Z15MeldemonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz14.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz1415RelevantDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz1415RelevantData As AWVz1415RelevantDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz1415RelevantData = CType(Me.Table,AWVz1415RelevantDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz1415RelevantData.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Class() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.ClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.ClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Contract() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.ContractColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Counterparty_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Counterparty_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counterparty Name' in table 'AWVz1415RelevantData' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Counterparty_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Counterparty_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Counterparty_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counterparty No' in table 'AWVz1415RelevantData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Counterparty_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CountryCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.CountryCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountryCode' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.CountryCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trade_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Trade_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trade Date' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Trade_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Start_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Start_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Start Date' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Start_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final Maturity Date' in table 'AWVz1415RelevantData' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Current_Interest_Coupon_Period_End_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Current_Interest_Coupon_Period_End_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Current Interest Coupon Period End Date' in table 'AWVz1415"& _ 
                            "RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Current_Interest_Coupon_Period_End_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Interest_Coupon_Amount_EUR_Equ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_EUR_EquColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Coupon Amount EUR Equ' in table 'AWVz1415RelevantD"& _ 
                            "ata' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_EUR_EquColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AIARasof() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.AIARasofColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AIARasof' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.AIARasofColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AIARrepdate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.AIARrepdateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AIARrepdate' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.AIARrepdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CheckingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.CheckingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckingDate' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.CheckingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Input() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.InputColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Input' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.InputColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZ14Z15Meldemonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.IdZ14Z15MeldemonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZ14Z15Meldemonat' in table 'AWVz1415RelevantData' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.IdZ14Z15MeldemonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InternalInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.InternalInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InternalInfo' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.InternalInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OrigCCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.OrigCCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrigCCY' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.OrigCCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Interest_Coupon_Amount_OrigCCY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_OrigCCYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Coupon Amount OrigCCY' in table 'AWVz1415RelevantD"& _ 
                            "ata' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_OrigCCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz1415RelevantData.ExchangeRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'AWVz1415RelevantData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz1415RelevantData.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz1415RelevantData_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz1415RelevantData_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_ClassNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.ClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_ClassNull()
            Me(Me.tableAWVz1415RelevantData.ClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNull()
            Me(Me.tableAWVz1415RelevantData.ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCounterparty_NameNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Counterparty_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCounterparty_NameNull()
            Me(Me.tableAWVz1415RelevantData.Counterparty_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCounterparty_NoNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Counterparty_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCounterparty_NoNull()
            Me(Me.tableAWVz1415RelevantData.Counterparty_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCountryCodeNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.CountryCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCountryCodeNull()
            Me(Me.tableAWVz1415RelevantData.CountryCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrade_DateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Trade_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrade_DateNull()
            Me(Me.tableAWVz1415RelevantData.Trade_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Start_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStart_DateNull()
            Me(Me.tableAWVz1415RelevantData.Start_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinal_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinal_Maturity_DateNull()
            Me(Me.tableAWVz1415RelevantData.Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrent_Interest_Coupon_Period_End_DateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Current_Interest_Coupon_Period_End_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrent_Interest_Coupon_Period_End_DateNull()
            Me(Me.tableAWVz1415RelevantData.Current_Interest_Coupon_Period_End_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInterest_Coupon_Amount_EUR_EquNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_EUR_EquColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInterest_Coupon_Amount_EUR_EquNull()
            Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_EUR_EquColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAIARasofNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.AIARasofColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAIARasofNull()
            Me(Me.tableAWVz1415RelevantData.AIARasofColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAIARrepdateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.AIARrepdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAIARrepdateNull()
            Me(Me.tableAWVz1415RelevantData.AIARrepdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCheckingDateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.CheckingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCheckingDateNull()
            Me(Me.tableAWVz1415RelevantData.CheckingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInputNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.InputColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInputNull()
            Me(Me.tableAWVz1415RelevantData.InputColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZ14Z15MeldemonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.IdZ14Z15MeldemonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZ14Z15MeldemonatNull()
            Me(Me.tableAWVz1415RelevantData.IdZ14Z15MeldemonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInternalInfoNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.InternalInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInternalInfoNull()
            Me(Me.tableAWVz1415RelevantData.InternalInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrigCCYNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.OrigCCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrigCCYNull()
            Me(Me.tableAWVz1415RelevantData.OrigCCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInterest_Coupon_Amount_OrigCCYNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_OrigCCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInterest_Coupon_Amount_OrigCCYNull()
            Me(Me.tableAWVz1415RelevantData.Interest_Coupon_Amount_OrigCCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableAWVz1415RelevantData.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableAWVz1415RelevantData.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz14z15Row
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz14z15 As AWVz14z15DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz14z15 = CType(Me.Table,AWVz14z15DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz14z15.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz14z15.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Z14Z15MeldeMonat() As Date
            Get
                Return CType(Me(Me.tableAWVz14z15.Z14Z15MeldeMonatColumn),Date)
            End Get
            Set
                Me(Me.tableAWVz14z15.Z14Z15MeldeMonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Z14Z15MeldeMonatName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14z15.Z14Z15MeldeMonatNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z14Z15MeldeMonatName' in table 'AWVz14z15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14z15.Z14Z15MeldeMonatNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14z15.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'AWVz14z15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14z15.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdBank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14z15.IdBankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBank' in table 'AWVz14z15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14z15.IdBankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReportLocked() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAWVz14z15.ReportLockedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportLocked' in table 'AWVz14z15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz14z15.ReportLockedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsZ14Z15MeldeMonatNameNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14z15.Z14Z15MeldeMonatNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetZ14Z15MeldeMonatNameNull()
            Me(Me.tableAWVz14z15.Z14Z15MeldeMonatNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14z15.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSERNull()
            Me(Me.tableAWVz14z15.USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdBankNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14z15.IdBankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdBankNull()
            Me(Me.tableAWVz14z15.IdBankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReportLockedNull() As Boolean
            Return Me.IsNull(Me.tableAWVz14z15.ReportLockedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReportLockedNull()
            Me(Me.tableAWVz14z15.ReportLockedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz10POSTENRows() As AWVz10POSTENRow()
            If (Me.Table.ChildRelations("AWVz10POSTEN_FK00") Is Nothing) Then
                Return New AWVz10POSTENRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz10POSTEN_FK00")),AWVz10POSTENRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz14Rows() As AWVz14Row()
            If (Me.Table.ChildRelations("AWVz14_FK00") Is Nothing) Then
                Return New AWVz14Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz14_FK00")),AWVz14Row())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz1415RelevantDataRows() As AWVz1415RelevantDataRow()
            If (Me.Table.ChildRelations("AWVz1415RelevantData_FK00") Is Nothing) Then
                Return New AWVz1415RelevantDataRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz1415RelevantData_FK00")),AWVz1415RelevantDataRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz15Rows() As AWVz15Row()
            If (Me.Table.ChildRelations("AWVz15_FK00") Is Nothing) Then
                Return New AWVz15Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz15_FK00")),AWVz15Row())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz4DIKAPPOSTENRows() As AWVz4DIKAPPOSTENRow()
            If (Me.Table.ChildRelations("AWVz4DIKAPPOSTEN_FK00") Is Nothing) Then
                Return New AWVz4DIKAPPOSTENRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz4DIKAPPOSTEN_FK00")),AWVz4DIKAPPOSTENRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz4DIRINVPOSTENRows() As AWVz4DIRINVPOSTENRow()
            If (Me.Table.ChildRelations("AWVz4DIRINVPOSTEN_FK00") Is Nothing) Then
                Return New AWVz4DIRINVPOSTENRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz4DIRINVPOSTEN_FK00")),AWVz4DIRINVPOSTENRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz4TRANSITPOSTENRows() As AWVz4TRANSITPOSTENRow()
            If (Me.Table.ChildRelations("AWVz4TRANSITPOSTEN_FK00") Is Nothing) Then
                Return New AWVz4TRANSITPOSTENRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AWVz4TRANSITPOSTEN_FK00")),AWVz4TRANSITPOSTENRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetAWVz11POSTENRows() As AWVz11POSTENRow()
            If (Me.Table.ChildRelations("FK_AWVz11POSTEN_AWVz14z15") Is Nothing) Then
                Return New AWVz11POSTENRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AWVz11POSTEN_AWVz14z15")),AWVz11POSTENRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz15Row
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz15 As AWVz15DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz15 = CType(Me.Table,AWVz15DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz15.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz15.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLASS' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.COUNTRY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY CODE' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.COUNTRY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LANDKZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.LANDKZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LANDKZ' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.LANDKZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.COUNTRY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.COUNTRY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.COUNTRY_NAME_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME DE' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.COUNTRY_NAME_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CountrySumAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.CountrySumAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountrySumAmount' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.CountrySumAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZ14Z15Meldemonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.IdZ14Z15MeldemonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZ14Z15Meldemonat' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.IdZ14Z15MeldemonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz15.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz15' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz15.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz15_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz15_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_CLASSNull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_CLASSNull()
            Me(Me.tableAWVz15.CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_CODENull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.COUNTRY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_CODENull()
            Me(Me.tableAWVz15.COUNTRY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLANDKZNull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.LANDKZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLANDKZNull()
            Me(Me.tableAWVz15.LANDKZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.COUNTRY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAMENull()
            Me(Me.tableAWVz15.COUNTRY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAME_DENull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.COUNTRY_NAME_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAME_DENull()
            Me(Me.tableAWVz15.COUNTRY_NAME_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCountrySumAmountNull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.CountrySumAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCountrySumAmountNull()
            Me(Me.tableAWVz15.CountrySumAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZ14Z15MeldemonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.IdZ14Z15MeldemonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZ14Z15MeldemonatNull()
            Me(Me.tableAWVz15.IdZ14Z15MeldemonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz15.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz15.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz4DIKAPPOSTENRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz4DIKAPPOSTEN As AWVz4DIKAPPOSTENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz4DIKAPPOSTEN = CType(Me.Table,AWVz4DIKAPPOSTENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_BELEGART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BELEGARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_BELEGART' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BELEGARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_KENNZAHL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_KENNZAHLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_KENNZAHL' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_KENNZAHLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_ZAHLUNGSZWECK() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ZAHLUNGSZWECKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_ZAHLUNGSZWECK' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ZAHLUNGSZWECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_ISOLAND() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLANDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_ISOLAND' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLANDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_ISOLAND_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLAND_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_ISOLAND_NAME' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLAND_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_VERRKZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_VERRKZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_VERRKZ' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_VERRKZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_BETRAG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BETRAGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_BETRAG' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BETRAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIKA_MeldeMonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_MeldeMonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIKA_MeldeMonat' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_MeldeMonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIKAPPOSTEN.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz4DIKAPPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIKAPPOSTEN.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz4DIKAPPOSTEN_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz4DIKAPPOSTEN_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_BELEGARTNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_BELEGARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_BELEGARTNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BELEGARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_KENNZAHLNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_KENNZAHLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_KENNZAHLNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_KENNZAHLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_ZAHLUNGSZWECKNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_ZAHLUNGSZWECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_ZAHLUNGSZWECKNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ZAHLUNGSZWECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_ISOLANDNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLANDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_ISOLANDNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLANDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_ISOLAND_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLAND_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_ISOLAND_NAMENull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_ISOLAND_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_VERRKZNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_VERRKZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_VERRKZNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_VERRKZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_BETRAGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_BETRAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_BETRAGNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_BETRAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIKA_MeldeMonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.DIKA_MeldeMonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIKA_MeldeMonatNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.DIKA_MeldeMonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIKAPPOSTEN.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz4DIKAPPOSTEN.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz4DIRINVPOSTENRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz4DIRINVPOSTEN As AWVz4DIRINVPOSTENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz4DIRINVPOSTEN = CType(Me.Table,AWVz4DIRINVPOSTENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_BELEGART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BELEGARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_BELEGART' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BELEGARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_KENNZAHL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_KENNZAHLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_KENNZAHL' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_KENNZAHLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_ISIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_ISIN' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_BEZEICHNUNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BEZEICHNUNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_BEZEICHNUNG' in table 'AWVz4DIRINVPOSTEN' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BEZEICHNUNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_STUECK() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_STUECKColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_STUECK' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_STUECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_ISOLAND() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLANDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_ISOLAND' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLANDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_ISOLAND_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLAND_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_ISOLAND_NAME' in table 'AWVz4DIRINVPOSTEN' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLAND_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_VERRKZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_VERRKZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_VERRKZ' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_VERRKZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_BETRAG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BETRAGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_BETRAG' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BETRAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRINV_MeldeMonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_MeldeMonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRINV_MeldeMonat' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_MeldeMonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4DIRINVPOSTEN.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz4DIRINVPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4DIRINVPOSTEN.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz4DIRINVPOSTEN_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz4DIRINVPOSTEN_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_BELEGARTNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BELEGARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_BELEGARTNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BELEGARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_KENNZAHLNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_KENNZAHLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_KENNZAHLNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_KENNZAHLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_ISINNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_ISINNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_BEZEICHNUNGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BEZEICHNUNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_BEZEICHNUNGNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BEZEICHNUNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_STUECKNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_STUECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_STUECKNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_STUECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_ISOLANDNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLANDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_ISOLANDNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLANDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_ISOLAND_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLAND_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_ISOLAND_NAMENull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_ISOLAND_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_VERRKZNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_VERRKZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_VERRKZNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_VERRKZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_BETRAGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BETRAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_BETRAGNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_BETRAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRINV_MeldeMonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.DIRINV_MeldeMonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRINV_MeldeMonatNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.DIRINV_MeldeMonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4DIRINVPOSTEN.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz4DIRINVPOSTEN.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz4TRANSITPOSTENRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz4TRANSITPOSTEN As AWVz4TRANSITPOSTENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz4TRANSITPOSTEN = CType(Me.Table,AWVz4TRANSITPOSTENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_BELEGART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BELEGARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_BELEGART' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BELEGARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_KENNZAHL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_KENNZAHLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_KENNZAHL' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_KENNZAHLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_WARENCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_WARENCODE' in table 'AWVz4TRANSITPOSTEN' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_WARENBEZEICHNUNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENBEZEICHNUNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_WARENBEZEICHNUNG' in table 'AWVz4TRANSITPOSTEN' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENBEZEICHNUNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_ISOLAND() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLANDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_ISOLAND' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLANDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_ISOLAND_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLAND_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_ISOLAND_NAME' in table 'AWVz4TRANSITPOSTEN' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLAND_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_VERRKZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_VERRKZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_VERRKZ' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_VERRKZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_BETRAG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BETRAGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_BETRAG' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BETRAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSIT_MeldeMonat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_MeldeMonatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSIT_MeldeMonat' in table 'AWVz4TRANSITPOSTEN' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_MeldeMonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz4TRANSITPOSTEN.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz4TRANSITPOSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz4TRANSITPOSTEN.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AWVz4TRANSITPOSTEN_FK00")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AWVz4TRANSITPOSTEN_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_BELEGARTNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BELEGARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_BELEGARTNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BELEGARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_KENNZAHLNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_KENNZAHLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_KENNZAHLNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_KENNZAHLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_WARENCODENull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_WARENCODENull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_WARENBEZEICHNUNGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENBEZEICHNUNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_WARENBEZEICHNUNGNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_WARENBEZEICHNUNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_ISOLANDNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLANDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_ISOLANDNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLANDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_ISOLAND_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLAND_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_ISOLAND_NAMENull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_ISOLAND_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_VERRKZNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_VERRKZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_VERRKZNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_VERRKZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_BETRAGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BETRAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_BETRAGNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_BETRAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSIT_MeldeMonatNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_MeldeMonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSIT_MeldeMonatNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.TRANSIT_MeldeMonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz4TRANSITPOSTEN.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz4TRANSITPOSTEN.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BANKRow
        Inherits Global.System.Data.DataRow
        
        Private tableBANK As BANKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBANK = CType(Me.Table,BANKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableBANK.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableBANK.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Name_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.Name_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.Name_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Branch_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.Branch_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.Branch_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Strasse_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.Strasse_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.Strasse_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PLZ_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.PLZ_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.PLZ_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Ort_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.Ort_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.Ort_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Land_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.Land_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.Land_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BANK_LOGO() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBANK.BANK_LOGOColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK LOGO' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.BANK_LOGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SteuerNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.SteuerNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SteuerNr' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.SteuerNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UstID() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.UstIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UstID' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.UstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _E_Mail_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK._E_Mail_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'E-Mail Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK._E_Mail_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Website_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Website_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Website Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Website_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Tel_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Tel_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tel Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Tel_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Fax_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Fax_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Fax_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIC_Bank() As String
            Get
                Return CType(Me(Me.tableBANK.BIC_BankColumn),String)
            End Get
            Set
                Me(Me.tableBANK.BIC_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BLZ_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.BLZ_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLZ Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.BLZ_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TELEX_Bank() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.TELEX_BankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TELEX Bank' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.TELEX_BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property HRB() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.HRBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HRB' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.HRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SEPA_Creditor_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.SEPA_Creditor_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEPA Creditor ID' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.SEPA_Creditor_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Rechts_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Rechts_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Rechts DE' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Rechts_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Rechts_GB() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Rechts_GBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Rechts GB' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Rechts_GBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Rechts_GR() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Rechts_GRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Rechts GR' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Rechts_GRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Links_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Links_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Links DE' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Links_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Links_GB() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Links_GBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Links GB' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Links_GBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Formular_Links_GR() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.Formular_Links_GRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Formular Links GR' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.Formular_Links_GRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNTER_BEARBEITUNG_VON() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.UNTER_BEARBEITUNG_VONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNTER BEARBEITUNG VON' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.UNTER_BEARBEITUNG_VONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableBANK.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'BANK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANK.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBANK_LOGONull() As Boolean
            Return Me.IsNull(Me.tableBANK.BANK_LOGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBANK_LOGONull()
            Me(Me.tableBANK.BANK_LOGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSteuerNrNull() As Boolean
            Return Me.IsNull(Me.tableBANK.SteuerNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSteuerNrNull()
            Me(Me.tableBANK.SteuerNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUstIDNull() As Boolean
            Return Me.IsNull(Me.tableBANK.UstIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUstIDNull()
            Me(Me.tableBANK.UstIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_E_Mail_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK._E_Mail_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_E_Mail_BankNull()
            Me(Me.tableBANK._E_Mail_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWebsite_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Website_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWebsite_BankNull()
            Me(Me.tableBANK.Website_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTel_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Tel_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTel_BankNull()
            Me(Me.tableBANK.Tel_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFax_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Fax_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFax_BankNull()
            Me(Me.tableBANK.Fax_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBLZ_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK.BLZ_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBLZ_BankNull()
            Me(Me.tableBANK.BLZ_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTELEX_BankNull() As Boolean
            Return Me.IsNull(Me.tableBANK.TELEX_BankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTELEX_BankNull()
            Me(Me.tableBANK.TELEX_BankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsHRBNull() As Boolean
            Return Me.IsNull(Me.tableBANK.HRBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetHRBNull()
            Me(Me.tableBANK.HRBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSEPA_Creditor_IDNull() As Boolean
            Return Me.IsNull(Me.tableBANK.SEPA_Creditor_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSEPA_Creditor_IDNull()
            Me(Me.tableBANK.SEPA_Creditor_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Rechts_DENull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Rechts_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Rechts_DENull()
            Me(Me.tableBANK.Formular_Rechts_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Rechts_GBNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Rechts_GBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Rechts_GBNull()
            Me(Me.tableBANK.Formular_Rechts_GBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Rechts_GRNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Rechts_GRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Rechts_GRNull()
            Me(Me.tableBANK.Formular_Rechts_GRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Links_DENull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Links_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Links_DENull()
            Me(Me.tableBANK.Formular_Links_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Links_GBNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Links_GBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Links_GBNull()
            Me(Me.tableBANK.Formular_Links_GBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormular_Links_GRNull() As Boolean
            Return Me.IsNull(Me.tableBANK.Formular_Links_GRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormular_Links_GRNull()
            Me(Me.tableBANK.Formular_Links_GRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNTER_BEARBEITUNG_VONNull() As Boolean
            Return Me.IsNull(Me.tableBANK.UNTER_BEARBEITUNG_VONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNTER_BEARBEITUNG_VONNull()
            Me(Me.tableBANK.UNTER_BEARBEITUNG_VONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableBANK.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSERNull()
            Me(Me.tableBANK.USERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class COUNTRIESRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOUNTRIES As COUNTRIESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOUNTRIES = CType(Me.Table,COUNTRIESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_CODE() As String
            Get
                Return CType(Me(Me.tableCOUNTRIES.COUNTRY_CODEColumn),String)
            End Get
            Set
                Me(Me.tableCOUNTRIES.COUNTRY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.COUNTRY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.COUNTRY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COUNTRY_NAME_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.COUNTRY_NAME_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY NAME DE' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.COUNTRY_NAME_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LANDKZ_BUBA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.LANDKZ_BUBAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LANDKZ BUBA' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.LANDKZ_BUBAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CURRENCY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.CURRENCY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY CODE' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CURRENCY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.CURRENCY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY NAME' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.CURRENCY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EU_EEA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.EU_EEAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EU EEA' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.EU_EEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IBAN_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.IBAN_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IBAN COUNTRY' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.IBAN_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IBAN_CALC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.IBAN_CALCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IBAN CALC' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.IBAN_CALCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IBAN_MAX() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.IBAN_MAXColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IBAN MAX' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.IBAN_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VALID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOUNTRIES.VALIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALID' in table 'COUNTRIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOUNTRIES.VALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.COUNTRY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAMENull()
            Me(Me.tableCOUNTRIES.COUNTRY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOUNTRY_NAME_DENull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.COUNTRY_NAME_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOUNTRY_NAME_DENull()
            Me(Me.tableCOUNTRIES.COUNTRY_NAME_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLANDKZ_BUBANull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.LANDKZ_BUBAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLANDKZ_BUBANull()
            Me(Me.tableCOUNTRIES.LANDKZ_BUBAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCURRENCY_CODENull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.CURRENCY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCURRENCY_CODENull()
            Me(Me.tableCOUNTRIES.CURRENCY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCURRENCY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.CURRENCY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCURRENCY_NAMENull()
            Me(Me.tableCOUNTRIES.CURRENCY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEU_EEANull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.EU_EEAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEU_EEANull()
            Me(Me.tableCOUNTRIES.EU_EEAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIBAN_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.IBAN_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIBAN_COUNTRYNull()
            Me(Me.tableCOUNTRIES.IBAN_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIBAN_CALCNull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.IBAN_CALCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIBAN_CALCNull()
            Me(Me.tableCOUNTRIES.IBAN_CALCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIBAN_MAXNull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.IBAN_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIBAN_MAXNull()
            Me(Me.tableCOUNTRIES.IBAN_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVALIDNull() As Boolean
            Return Me.IsNull(Me.tableCOUNTRIES.VALIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVALIDNull()
            Me(Me.tableCOUNTRIES.VALIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZINSERTRAG_KUNDEN_DETAILSRow
        Inherits Global.System.Data.DataRow
        
        Private tableZINSERTRAG_KUNDEN_DETAILS As ZINSERTRAG_KUNDEN_DETAILSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZINSERTRAG_KUNDEN_DETAILS = CType(Me.Table,ZINSERTRAG_KUNDEN_DETAILSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValDateFrom() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateFromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValDateFrom' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValDate' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValYear() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValYearColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValYear' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustomerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerName' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Account' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RegistrationCountry() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RegistrationCountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegistrationCountry' in table 'ZINSERTRAG KUNDEN DETAILS' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RegistrationCountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Contract() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ContractColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Product() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ProductColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Product' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ExchangeRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AmountEuro() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountEuroColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountEuro' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountEuroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DB() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.DBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DB' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.DBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property KapertstG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KapertstGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KapertstG' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KapertstGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Soli() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.SoliColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Soli' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.SoliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property KAPISTPFLICHTIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KAPISTPFLICHTIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KAPISTPFLICHTIG' in table 'ZINSERTRAG KUNDEN DETAILS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KAPISTPFLICHTIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUNDESLAND() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.BUNDESLANDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUNDESLAND' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.BUNDESLANDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdValueCustomer() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdValueCustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdValueCustomer' in table 'ZINSERTRAG KUNDEN DETAILS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdValueCustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZinsertragsMonat() As String
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdZinsertragsMonatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZinsertragsMonat' in table 'ZINSERTRAG KUNDEN DETAILS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdZinsertragsMonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdErtragJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdErtragJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdErtragJahr' in table 'ZINSERTRAG KUNDEN DETAILS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdErtragJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZINSERTRAG_KUNDEN_MONATRow() As ZINSERTRAG_KUNDEN_MONATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ZINSERTRAG KUNDEN DETAILS_FK00")),ZINSERTRAG_KUNDEN_MONATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ZINSERTRAG KUNDEN DETAILS_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValDateFromNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValDateFromNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValDateNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValDateNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustomerNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValYearNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValYearNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ValYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustomerNameNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CustomerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAccountNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAccountNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRegistrationCountryNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.RegistrationCountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRegistrationCountryNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RegistrationCountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCCYNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCCYNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProductNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ProductColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProductNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ProductColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAmountNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAmountEuroNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountEuroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAmountEuroNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.AmountEuroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDBNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.DBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDBNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.DBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsKapertstGNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.KapertstGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetKapertstGNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KapertstGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRemarkNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSoliNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.SoliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSoliNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.SoliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsKAPISTPFLICHTIGNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.KAPISTPFLICHTIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetKAPISTPFLICHTIGNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.KAPISTPFLICHTIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUNDESLANDNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.BUNDESLANDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUNDESLANDNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.BUNDESLANDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdValueCustomerNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdValueCustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdValueCustomerNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdValueCustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZinsertragsMonatNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdZinsertragsMonatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZinsertragsMonatNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdZinsertragsMonatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdErtragJahrNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdErtragJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdErtragJahrNull()
            Me(Me.tableZINSERTRAG_KUNDEN_DETAILS.IdErtragJahrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZINSERTRAG_KUNDEN_JAHRRow
        Inherits Global.System.Data.DataRow
        
        Private tableZINSERTRAG_KUNDEN_JAHR As ZINSERTRAG_KUNDEN_JAHRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZINSERTRAG_KUNDEN_JAHR = CType(Me.Table,ZINSERTRAG_KUNDEN_JAHRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZINSERTRAG_KUNDEN_JAHR.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_JAHR.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ErtragsJahr() As Double
            Get
                Return CType(Me(Me.tableZINSERTRAG_KUNDEN_JAHR.ErtragsJahrColumn),Double)
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_JAHR.ErtragsJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SummeKapErSt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeKapErStColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SummeKapErSt' in table 'ZINSERTRAG KUNDEN JAHR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeKapErStColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SummeSoli() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeSoliColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SummeSoli' in table 'ZINSERTRAG KUNDEN JAHR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeSoliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdBank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_JAHR.IdBankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBank' in table 'ZINSERTRAG KUNDEN JAHR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_JAHR.IdBankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSummeKapErStNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeKapErStColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSummeKapErStNull()
            Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeKapErStColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSummeSoliNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeSoliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSummeSoliNull()
            Me(Me.tableZINSERTRAG_KUNDEN_JAHR.SummeSoliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdBankNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_JAHR.IdBankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdBankNull()
            Me(Me.tableZINSERTRAG_KUNDEN_JAHR.IdBankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZINSERTRAG_KUNDEN_MONATRows() As ZINSERTRAG_KUNDEN_MONATRow()
            If (Me.Table.ChildRelations("ZINSERTRAG KUNDEN MONAT_FK00") Is Nothing) Then
                Return New ZINSERTRAG_KUNDEN_MONATRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ZINSERTRAG KUNDEN MONAT_FK00")),ZINSERTRAG_KUNDEN_MONATRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZINSERTRAG_KUNDEN_MONATRow
        Inherits Global.System.Data.DataRow
        
        Private tableZINSERTRAG_KUNDEN_MONAT As ZINSERTRAG_KUNDEN_MONATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZINSERTRAG_KUNDEN_MONAT = CType(Me.Table,ZINSERTRAG_KUNDEN_MONATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Zinsertragsmonat() As String
            Get
                Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatColumn),String)
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SummeKapErSt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeKapErStColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SummeKapErSt' in table 'ZINSERTRAG KUNDEN MONAT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeKapErStColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SummeSoli() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeSoliColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SummeSoli' in table 'ZINSERTRAG KUNDEN MONAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeSoliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZinsertragJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.IdZinsertragJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZinsertragJahr' in table 'ZINSERTRAG KUNDEN MONAT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.IdZinsertragJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZinsertragsmonatDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZinsertragsmonatDATE' in table 'ZINSERTRAG KUNDEN MONAT' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZINSERTRAG_KUNDEN_JAHRRow() As ZINSERTRAG_KUNDEN_JAHRRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ZINSERTRAG KUNDEN MONAT_FK00")),ZINSERTRAG_KUNDEN_JAHRRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ZINSERTRAG KUNDEN MONAT_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSummeKapErStNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeKapErStColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSummeKapErStNull()
            Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeKapErStColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSummeSoliNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeSoliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSummeSoliNull()
            Me(Me.tableZINSERTRAG_KUNDEN_MONAT.SummeSoliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZinsertragJahrNull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_MONAT.IdZinsertragJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZinsertragJahrNull()
            Me(Me.tableZINSERTRAG_KUNDEN_MONAT.IdZinsertragJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsZinsertragsmonatDATENull() As Boolean
            Return Me.IsNull(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetZinsertragsmonatDATENull()
            Me(Me.tableZINSERTRAG_KUNDEN_MONAT.ZinsertragsmonatDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZINSERTRAG_KUNDEN_DETAILSRows() As ZINSERTRAG_KUNDEN_DETAILSRow()
            If (Me.Table.ChildRelations("ZINSERTRAG KUNDEN DETAILS_FK00") Is Nothing) Then
                Return New ZINSERTRAG_KUNDEN_DETAILSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ZINSERTRAG KUNDEN DETAILS_FK00")),ZINSERTRAG_KUNDEN_DETAILSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EMPLOYES_YEAR_AVERAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableEMPLOYES_YEAR_AVERAGE As EMPLOYES_YEAR_AVERAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPLOYES_YEAR_AVERAGE = CType(Me.Table,EMPLOYES_YEAR_AVERAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property JahrLfd() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE.JahrLfdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JahrLfd' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE.JahrLfdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _1VJ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE._1VJColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '1VJ' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE._1VJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _2VJ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE._2VJColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '2VJ' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE._2VJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _3VJ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE._3VJColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '3VJ' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE._3VJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _4VJ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE._4VJColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '4VJ' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE._4VJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EmplAverage() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYES_YEAR_AVERAGE.EmplAverageColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmplAverage' in table 'EMPLOYES YEAR AVERAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYES_YEAR_AVERAGE.EmplAverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsJahrLfdNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE.JahrLfdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetJahrLfdNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE.JahrLfdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_1VJNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE._1VJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_1VJNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE._1VJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_2VJNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE._2VJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_2VJNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE._2VJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_3VJNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE._3VJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_3VJNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE._3VJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_4VJNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE._4VJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_4VJNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE._4VJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEmplAverageNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYES_YEAR_AVERAGE.EmplAverageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEmplAverageNull()
            Me(Me.tableEMPLOYES_YEAR_AVERAGE.EmplAverageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTA_FormsTill2013Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTA_FormsTill2013 As ZVSTA_FormsTill2013DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTA_FormsTill2013 = CType(Me.Table,ZVSTA_FormsTill2013DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTA_FormsTill2013.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTA_FormsTill2013.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FormSchema() As String
            Get
                Return CType(Me(Me.tableZVSTA_FormsTill2013.FormSchemaColumn),String)
            End Get
            Set
                Me(Me.tableZVSTA_FormsTill2013.FormSchemaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FormSchemaName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_FormsTill2013.FormSchemaNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormSchemaName' in table 'ZVSTA_FormsTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_FormsTill2013.FormSchemaNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZVSTA_Meldejahr() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_FormsTill2013.IdZVSTA_MeldejahrColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZVSTA_Meldejahr' in table 'ZVSTA_FormsTill2013' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_FormsTill2013.IdZVSTA_MeldejahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTATill2013Row() As ZVSTATill2013Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ZVSTA_Formstill2013_ZVSTAtill2013")),ZVSTATill2013Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ZVSTA_Formstill2013_ZVSTAtill2013"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormSchemaNameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_FormsTill2013.FormSchemaNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormSchemaNameNull()
            Me(Me.tableZVSTA_FormsTill2013.FormSchemaNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZVSTA_MeldejahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_FormsTill2013.IdZVSTA_MeldejahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZVSTA_MeldejahrNull()
            Me(Me.tableZVSTA_FormsTill2013.IdZVSTA_MeldejahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZVSTA_ProdTill2013Rows() As ZVSTA_ProdTill2013Row()
            If (Me.Table.ChildRelations("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013") Is Nothing) Then
                Return New ZVSTA_ProdTill2013Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013")),ZVSTA_ProdTill2013Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTA_ProdTill2013Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTA_ProdTill2013 As ZVSTA_ProdTill2013DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTA_ProdTill2013 = CType(Me.Table,ZVSTA_ProdTill2013DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTA_ProdTill2013.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Feldname() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Feldname' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Feldposition() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldpositionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Feldposition' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldpositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Feldeinheit() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldeinheitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Feldeinheit' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldeinheitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Felddim() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FelddimColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Felddim' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FelddimColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Feldvalue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldvalueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Feldvalue' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldvalueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FeldSQLcommand() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FeldSQLcommand' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FeldvalueRep() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldvalueRepColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FeldvalueRep' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldvalueRepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FeldSQLcommandSum() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandSumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FeldSQLcommandSum' in table 'ZVSTA_ProdTill2013' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Feldmemo() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.FeldmemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Feldmemo' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.FeldmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdZVSTA_Forms() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTA_ProdTill2013.IdZVSTA_FormsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdZVSTA_Forms' in table 'ZVSTA_ProdTill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTA_ProdTill2013.IdZVSTA_FormsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTA_FormsTill2013Row() As ZVSTA_FormsTill2013Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013")),ZVSTA_FormsTill2013Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ZVSTA_Prodtill2013_ZVSTA_Formstill2013"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldnameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldnameNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldpositionNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldpositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldpositionNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldpositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldeinheitNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldeinheitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldeinheitNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldeinheitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFelddimNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FelddimColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFelddimNull()
            Me(Me.tableZVSTA_ProdTill2013.FelddimColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldvalueNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldvalueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldvalueNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldvalueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldSQLcommandNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldSQLcommandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldSQLcommandNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldvalueRepNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldvalueRepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldvalueRepNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldvalueRepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldSQLcommandSumNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldSQLcommandSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldSQLcommandSumNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldSQLcommandSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFeldmemoNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.FeldmemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFeldmemoNull()
            Me(Me.tableZVSTA_ProdTill2013.FeldmemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdZVSTA_FormsNull() As Boolean
            Return Me.IsNull(Me.tableZVSTA_ProdTill2013.IdZVSTA_FormsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdZVSTA_FormsNull()
            Me(Me.tableZVSTA_ProdTill2013.IdZVSTA_FormsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTATill2013Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTATill2013 As ZVSTATill2013DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTATill2013 = CType(Me.Table,ZVSTATill2013DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTATill2013.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTATill2013.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTAMeldeJahr() As Date
            Get
                Return CType(Me(Me.tableZVSTATill2013.ZVSTAMeldeJahrColumn),Date)
            End Get
            Set
                Me(Me.tableZVSTATill2013.ZVSTAMeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTATill2013.MeldeJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeJahr' in table 'ZVSTATill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTATill2013.MeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bemerkungen() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTATill2013.BemerkungenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bemerkungen' in table 'ZVSTATill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTATill2013.BemerkungenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTATill2013.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'ZVSTATill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTATill2013.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdBank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZVSTATill2013.IdBankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBank' in table 'ZVSTATill2013' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTATill2013.IdBankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeJahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTATill2013.MeldeJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeJahrNull()
            Me(Me.tableZVSTATill2013.MeldeJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBemerkungenNull() As Boolean
            Return Me.IsNull(Me.tableZVSTATill2013.BemerkungenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBemerkungenNull()
            Me(Me.tableZVSTATill2013.BemerkungenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableZVSTATill2013.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSERNull()
            Me(Me.tableZVSTATill2013.USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdBankNull() As Boolean
            Return Me.IsNull(Me.tableZVSTATill2013.IdBankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdBankNull()
            Me(Me.tableZVSTATill2013.IdBankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZVSTA_FormsTill2013Rows() As ZVSTA_FormsTill2013Row()
            If (Me.Table.ChildRelations("FK_ZVSTA_Formstill2013_ZVSTAtill2013") Is Nothing) Then
                Return New ZVSTA_FormsTill2013Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ZVSTA_Formstill2013_ZVSTAtill2013")),ZVSTA_FormsTill2013Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTAT_Parameters_from2014Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTAT_Parameters_from2014 As ZVSTAT_Parameters_from2014DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTAT_Parameters_from2014 = CType(Me.Table,ZVSTAT_Parameters_from2014DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTAT_Parameters_from2014.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FormNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.FormNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormNr' in table 'ZVSTAT_Parameters_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.FormNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FormName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.FormNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormName' in table 'ZVSTAT_Parameters_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.FormNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.PositionNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionNr' in table 'ZVSTAT_Parameters_from2014' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.PositionNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.PositionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionName' in table 'ZVSTAT_Parameters_from2014' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.PositionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Landkontext() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.LandkontextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Landkontext' in table 'ZVSTAT_Parameters_from2014' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.LandkontextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LandCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.LandCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LandCode' in table 'ZVSTAT_Parameters_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.LandCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Anzahl() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.AnzahlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anzahl' in table 'ZVSTAT_Parameters_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.AnzahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Wert() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.WertColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wert' in table 'ZVSTAT_Parameters_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.WertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionSQLcommand() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Parameters_from2014.PositionSQLcommandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionSQLcommand' in table 'ZVSTAT_Parameters_from2014' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.PositionSQLcommandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LfdNr() As Double
            Get
                Return CType(Me(Me.tableZVSTAT_Parameters_from2014.LfdNrColumn),Double)
            End Get
            Set
                Me(Me.tableZVSTAT_Parameters_from2014.LfdNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormNrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.FormNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormNrNull()
            Me(Me.tableZVSTAT_Parameters_from2014.FormNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFormNameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.FormNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFormNameNull()
            Me(Me.tableZVSTAT_Parameters_from2014.FormNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionNrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.PositionNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionNrNull()
            Me(Me.tableZVSTAT_Parameters_from2014.PositionNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionNameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.PositionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionNameNull()
            Me(Me.tableZVSTAT_Parameters_from2014.PositionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLandkontextNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.LandkontextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLandkontextNull()
            Me(Me.tableZVSTAT_Parameters_from2014.LandkontextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLandCodeNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.LandCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLandCodeNull()
            Me(Me.tableZVSTAT_Parameters_from2014.LandCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAnzahlNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.AnzahlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAnzahlNull()
            Me(Me.tableZVSTAT_Parameters_from2014.AnzahlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWertNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.WertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWertNull()
            Me(Me.tableZVSTAT_Parameters_from2014.WertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionSQLcommandNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Parameters_from2014.PositionSQLcommandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionSQLcommandNull()
            Me(Me.tableZVSTAT_Parameters_from2014.PositionSQLcommandColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTAT_Details_from2014Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTAT_Details_from2014 As ZVSTAT_Details_from2014DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTAT_Details_from2014 = CType(Me.Table,ZVSTAT_Details_from2014DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTAT_Details_from2014.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReportYear() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.ReportYearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportYear' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.ReportYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RegisterDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.RegisterDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegisterDate' in table 'ZVSTAT_Details_from2014' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.RegisterDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.ValueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueDate' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.ValueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Orig_Cur() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.Orig_CurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orig_Cur' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.Orig_CurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Orig_Amt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.Orig_AmtColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orig_Amt' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.Orig_AmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.ExchangeRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'ZVSTAT_Details_from2014' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Amt_EUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.Amt_EURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amt_EUR' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.Amt_EURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Paym_Art() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.Paym_ArtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paym_Art' in table 'ZVSTAT_Details_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.Paym_ArtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdMeldepositionen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Details_from2014.IdMeldepositionenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdMeldepositionen' in table 'ZVSTAT_Details_from2014' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Details_from2014.IdMeldepositionenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTAT_Meldepositionen_from2014Row() As ZVSTAT_Meldepositionen_from2014Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Meldepositionen_from2014")),ZVSTAT_Meldepositionen_from2014Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Meldepositionen_from2014"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableZVSTAT_Details_from2014.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReferenceNull()
            Me(Me.tableZVSTAT_Details_from2014.ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReportYearNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.ReportYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReportYearNull()
            Me(Me.tableZVSTAT_Details_from2014.ReportYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRegisterDateNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.RegisterDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRegisterDateNull()
            Me(Me.tableZVSTAT_Details_from2014.RegisterDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueDateNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.ValueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueDateNull()
            Me(Me.tableZVSTAT_Details_from2014.ValueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrig_CurNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.Orig_CurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrig_CurNull()
            Me(Me.tableZVSTAT_Details_from2014.Orig_CurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrig_AmtNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.Orig_AmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrig_AmtNull()
            Me(Me.tableZVSTAT_Details_from2014.Orig_AmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableZVSTAT_Details_from2014.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAmt_EURNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.Amt_EURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAmt_EURNull()
            Me(Me.tableZVSTAT_Details_from2014.Amt_EURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPaym_ArtNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.Paym_ArtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPaym_ArtNull()
            Me(Me.tableZVSTAT_Details_from2014.Paym_ArtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdMeldepositionenNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Details_from2014.IdMeldepositionenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdMeldepositionenNull()
            Me(Me.tableZVSTAT_Details_from2014.IdMeldepositionenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTAT_MeldeJahr_from2014Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTAT_MeldeJahr_from2014 As ZVSTAT_MeldeJahr_from2014DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTAT_MeldeJahr_from2014 = CType(Me.Table,ZVSTAT_MeldeJahr_from2014DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTAT_MeldeJahr_from2014.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTAT_MeldeJahr_from2014.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_MeldeJahr_from2014.MeldeJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeJahr' in table 'ZVSTAT_MeldeJahr_from2014' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_MeldeJahr_from2014.MeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReportLocked() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_MeldeJahr_from2014.ReportLockedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportLocked' in table 'ZVSTAT_MeldeJahr_from2014' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_MeldeJahr_from2014.ReportLockedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeJahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_MeldeJahr_from2014.MeldeJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeJahrNull()
            Me(Me.tableZVSTAT_MeldeJahr_from2014.MeldeJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReportLockedNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_MeldeJahr_from2014.ReportLockedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReportLockedNull()
            Me(Me.tableZVSTAT_MeldeJahr_from2014.ReportLockedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZVSTAT_Meldeschemas_from2014Rows() As ZVSTAT_Meldeschemas_from2014Row()
            If (Me.Table.ChildRelations("FK_MeldeJahr_from2014") Is Nothing) Then
                Return New ZVSTAT_Meldeschemas_from2014Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MeldeJahr_from2014")),ZVSTAT_Meldeschemas_from2014Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTAT_Meldepositionen_from2014Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTAT_Meldepositionen_from2014 As ZVSTAT_Meldepositionen_from2014DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTAT_Meldepositionen_from2014 = CType(Me.Table,ZVSTAT_Meldepositionen_from2014DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.MeldeJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeJahr' in table 'ZVSTAT_Meldepositionen_from2014' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.MeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionNr' in table 'ZVSTAT_Meldepositionen_from2014' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionName' in table 'ZVSTAT_Meldepositionen_from2014' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Landkontext() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.LandkontextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Landkontext' in table 'ZVSTAT_Meldepositionen_from2014' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.LandkontextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LandCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.LandCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LandCode' in table 'ZVSTAT_Meldepositionen_from2014' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.LandCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AnzahlKz() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlKzColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnzahlKz' in table 'ZVSTAT_Meldepositionen_from2014' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlKzColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Anzahl() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anzahl' in table 'ZVSTAT_Meldepositionen_from2014' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WertKz() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.WertKzColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WertKz' in table 'ZVSTAT_Meldepositionen_from2014' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.WertKzColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Wert() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.WertColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wert' in table 'ZVSTAT_Meldepositionen_from2014' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.WertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PositionSQLcommand() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionSQLcommandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PositionSQLcommand' in table 'ZVSTAT_Meldepositionen_from20"& _ 
                            "14' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionSQLcommandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdMeldeschemas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldepositionen_from2014.IdMeldeschemasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdMeldeschemas' in table 'ZVSTAT_Meldepositionen_from2014' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldepositionen_from2014.IdMeldeschemasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTAT_Meldeschemas_from2014Row() As ZVSTAT_Meldeschemas_from2014Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ZVSTAT_Meldeschemas_from2014")),ZVSTAT_Meldeschemas_from2014Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ZVSTAT_Meldeschemas_from2014"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeJahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.MeldeJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeJahrNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.MeldeJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionNrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.PositionNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionNrNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionNameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.PositionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionNameNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLandkontextNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.LandkontextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLandkontextNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.LandkontextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLandCodeNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.LandCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLandCodeNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.LandCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAnzahlKzNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlKzColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAnzahlKzNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlKzColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAnzahlNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAnzahlNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.AnzahlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWertKzNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.WertKzColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWertKzNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.WertKzColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWertNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.WertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWertNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.WertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPositionSQLcommandNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.PositionSQLcommandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPositionSQLcommandNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.PositionSQLcommandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdMeldeschemasNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldepositionen_from2014.IdMeldeschemasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdMeldeschemasNull()
            Me(Me.tableZVSTAT_Meldepositionen_from2014.IdMeldeschemasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZVSTAT_Details_from2014Rows() As ZVSTAT_Details_from2014Row()
            If (Me.Table.ChildRelations("FK_Meldepositionen_from2014") Is Nothing) Then
                Return New ZVSTAT_Details_from2014Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Meldepositionen_from2014")),ZVSTAT_Details_from2014Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZVSTAT_Meldeschemas_from2014Row
        Inherits Global.System.Data.DataRow
        
        Private tableZVSTAT_Meldeschemas_from2014 As ZVSTAT_Meldeschemas_from2014DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZVSTAT_Meldeschemas_from2014 = CType(Me.Table,ZVSTAT_Meldeschemas_from2014DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableZVSTAT_Meldeschemas_from2014.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableZVSTAT_Meldeschemas_from2014.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeschemaNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeschemaNr' in table 'ZVSTAT_Meldeschemas_from2014' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeschemaName() As String
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeschemaName' in table 'ZVSTAT_Meldeschemas_from2014' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MeldeJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeldeJahr' in table 'ZVSTAT_Meldeschemas_from2014' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdMeldeJahr() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZVSTAT_Meldeschemas_from2014.IdMeldeJahrColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdMeldeJahr' in table 'ZVSTAT_Meldeschemas_from2014' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZVSTAT_Meldeschemas_from2014.IdMeldeJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZVSTAT_MeldeJahr_from2014Row() As ZVSTAT_MeldeJahr_from2014Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MeldeJahr_from2014")),ZVSTAT_MeldeJahr_from2014Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MeldeJahr_from2014"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeschemaNrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeschemaNrNull()
            Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeschemaNameNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeschemaNameNull()
            Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeschemaNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMeldeJahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldeschemas_from2014.MeldeJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMeldeJahrNull()
            Me(Me.tableZVSTAT_Meldeschemas_from2014.MeldeJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdMeldeJahrNull() As Boolean
            Return Me.IsNull(Me.tableZVSTAT_Meldeschemas_from2014.IdMeldeJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdMeldeJahrNull()
            Me(Me.tableZVSTAT_Meldeschemas_from2014.IdMeldeJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetZVSTAT_Meldepositionen_from2014Rows() As ZVSTAT_Meldepositionen_from2014Row()
            If (Me.Table.ChildRelations("FK_ZVSTAT_Meldeschemas_from2014") Is Nothing) Then
                Return New ZVSTAT_Meldepositionen_from2014Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ZVSTAT_Meldeschemas_from2014")),ZVSTAT_Meldepositionen_from2014Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AWVz11POSTENRow
        Inherits Global.System.Data.DataRow
        
        Private tableAWVz11POSTEN As AWVz11POSTENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAWVz11POSTEN = CType(Me.Table,AWVz11POSTENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableAWVz11POSTEN.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BELEGART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.BELEGARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BELEGART' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.BELEGARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property KENNZAHL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.KENNZAHLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KENNZAHL' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.KENNZAHLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LAND_ISOCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.LAND_ISOCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAND_ISOCODE' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.LAND_ISOCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LAND_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.LAND_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAND_NAME' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.LAND_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.BETRAGColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.BETRAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BETRAG_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.BETRAG_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BETRAG_REF' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.BETRAG_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdAWVz14z15() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAWVz11POSTEN.IdAWVz14z15Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdAWVz14z15' in table 'AWVz11POSTEN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAWVz11POSTEN.IdAWVz14z15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AWVz14z15Row() As AWVz14z15Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AWVz11POSTEN_AWVz14z15")),AWVz14z15Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AWVz11POSTEN_AWVz14z15"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBELEGARTNull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.BELEGARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBELEGARTNull()
            Me(Me.tableAWVz11POSTEN.BELEGARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsKENNZAHLNull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.KENNZAHLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetKENNZAHLNull()
            Me(Me.tableAWVz11POSTEN.KENNZAHLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLAND_ISOCODENull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.LAND_ISOCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLAND_ISOCODENull()
            Me(Me.tableAWVz11POSTEN.LAND_ISOCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLAND_NAMENull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.LAND_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLAND_NAMENull()
            Me(Me.tableAWVz11POSTEN.LAND_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAGNull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.BETRAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAGNull()
            Me(Me.tableAWVz11POSTEN.BETRAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBETRAG_REFNull() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.BETRAG_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBETRAG_REFNull()
            Me(Me.tableAWVz11POSTEN.BETRAG_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdAWVz14z15Null() As Boolean
            Return Me.IsNull(Me.tableAWVz11POSTEN.IdAWVz14z15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdAWVz14z15Null()
            Me(Me.tableAWVz11POSTEN.IdAWVz14z15Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MIFIRRow
        Inherits Global.System.Data.DataRow
        
        Private tableMIFIR As MIFIRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMIFIR = CType(Me.Table,MIFIRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableMIFIR.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMIFIR.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReportStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ReportStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportStatus' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ReportStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TradeDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TradeDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeDate' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TradeDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ValueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueDate' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ValueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FixingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.FixingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FixingDate' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.FixingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientOrderID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ClientOrderIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientOrderID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ClientOrderIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FxAllID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.FxAllIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FxAllID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.FxAllIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TradingVenueTransactionIdentificationCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TradingVenueTransactionIdentificationCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradingVenueTransactionIdentificationCode' in table 'MIFIR'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TradingVenueTransactionIdentificationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustomerUSI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustomerUSIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerUSI' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustomerUSIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ProviderUSI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ProviderUSIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProviderUSI' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ProviderUSIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Product() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ProductColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Product' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FixingTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.FixingTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FixingTime' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.FixingTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FixingSeries() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.FixingSeriesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FixingSeries' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.FixingSeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustBS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustBSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustBS' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustBSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustTradeSide() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustTradeSideColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustTradeSide' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustTradeSideColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustomerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustomerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerName' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustomerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustTrader() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustTraderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustTrader' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustTraderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Account' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AccountLongName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.AccountLongNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountLongName' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.AccountLongNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CCYPair() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CCYPairColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCYPair' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CCYPairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NotionalCCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NotionalCCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NotionalCCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NotionalCCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Notional() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NotionalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notional' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NotionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContraCCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ContraCCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContraCCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ContraCCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContraAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ContraAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContraAmount' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ContraAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PriceTreasury() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PriceTreasuryColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PriceTreasury' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PriceTreasuryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FwdPts() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.FwdPtsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FwdPts' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.FwdPtsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AllIn() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.AllInColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AllIn' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.AllInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ComplexTradeID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ComplexTradeIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComplexTradeID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ComplexTradeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CARStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CARStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CARStatus' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CARStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CARSubmitID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CARSubmitIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CARSubmitID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CARSubmitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CARTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CARTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CARTime' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CARTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ExecutionWithinTheFirm() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ExecutionWithinTheFirmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExecutionWithinTheFirm' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ExecutionWithinTheFirmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ISIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ISINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ISINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CFICodeForTheInstrument() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CFICodeForTheInstrumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CFICodeForTheInstrument' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CFICodeForTheInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WaiverIndicator() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.WaiverIndicatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WaiverIndicator' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.WaiverIndicatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MTFExecutionTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.MTFExecutionTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTFExecutionTime' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.MTFExecutionTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LiqVenue() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.LiqVenueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiqVenue' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.LiqVenueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Capacity() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CapacityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capacity' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CapacityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NPFT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NPFTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NPFT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NPFTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SEC_FIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SEC_FINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEC_FIN' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SEC_FINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CustomerLEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CustomerLEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerLEI' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CustomerLEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AccountLEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.AccountLEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountLEI' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.AccountLEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ProviderLEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ProviderLEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProviderLEI' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ProviderLEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DateTimeOfferToDeal() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.DateTimeOfferToDealColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateTimeOfferToDeal' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.DateTimeOfferToDealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TransmissionOfOrderIndicator() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TransmissionOfOrderIndicatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransmissionOfOrderIndicator' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TransmissionOfOrderIndicatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LiquidityProvisionActivity() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.LiquidityProvisionActivityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiquidityProvisionActivity' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.LiquidityProvisionActivityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DateTimeOrderSubmission() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.DateTimeOrderSubmissionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateTimeOrderSubmission' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.DateTimeOrderSubmissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VenueTreasury() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.VenueTreasuryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VenueTreasury' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.VenueTreasuryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DateReceiptOrder() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.DateReceiptOrderColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateReceiptOrder' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.DateReceiptOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRADE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRADE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRADE_DATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRADE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CUSTOMER_TRANSACTION_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CUSTOMER_TRANSACTION_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_TRANSACTION_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CUSTOMER_TRANSACTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ACTION_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ACTION_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTION_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ACTION_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUSINESS_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUSINESS_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUSINESS_UNIT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUSINESS_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MIFIR_REPORTING() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.MIFIR_REPORTINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MIFIR_REPORTING' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.MIFIR_REPORTINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COMMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.COMMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.COMMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRADE_REPORT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRADE_REPORT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRADE_REPORT_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRADE_REPORT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SOURCE_SYSTEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SOURCE_SYSTEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE_SYSTEM' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SOURCE_SYSTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RECORD_MODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.RECORD_MODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECORD_MODE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.RECORD_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD1' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD2' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD3' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD4' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD5' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD6' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD7() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD7' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD8() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD8' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property USER_FIELD9() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.USER_FIELD9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_FIELD9' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.USER_FIELD9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PARTIAL_ASSISTANCE_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARTIAL_ASSISTANCE_FLAG' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PARTIAL_ASSISTANCE_SUBMITTER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_SUBMITTER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARTIAL_ASSISTANCE_SUBMITTER_ID' in table 'MIFIR' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_SUBMITTER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PAIRING_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PAIRING_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIRING_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PAIRING_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EXECUTING_ENTITY_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.EXECUTING_ENTITY_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXECUTING_ENTITY_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.EXECUTING_ENTITY_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EXECUTING_ENTITY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.EXECUTING_ENTITY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXECUTING_ENTITY_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.EXECUTING_ENTITY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MIFID_INVESTMENT_FIRM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.MIFID_INVESTMENT_FIRMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MIFID_INVESTMENT_FIRM' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.MIFID_INVESTMENT_FIRMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BRANCH_MEMBERSHIP_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BRANCH_MEMBERSHIP_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANCH_MEMBERSHIP_COUNTRY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BRANCH_MEMBERSHIP_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_BRANCH_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_BRANCH_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_BRANCH_COUNTRY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_BRANCH_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_FIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_FIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_FIRSTNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_SURNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_SURNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_SURNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_SURNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_BIRTHDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_BIRTHDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_BIRTHDATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_BIRTHDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_DECISION_MAKER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_DECISION_MAKER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_DECISION_MAKER_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_DECISION_MAKER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_DECISION_MAKER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_DECISION_MAKER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_DECISION_MAKER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_DECISION_MAKER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_DECISION_FIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_DECISION_FIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_DECISION_FIRSTNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_DECISION_FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_DECISION_SURNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_DECISION_SURNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_DECISION_SURNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_DECISION_SURNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BUYER_DECISION_BIRTHDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BUYER_DECISION_BIRTHDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUYER_DECISION_BIRTHDATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BUYER_DECISION_BIRTHDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_BRANCH_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_BRANCH_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_BRANCH_COUNTRY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_BRANCH_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_FIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_FIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_FIRSTNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_SURNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_SURNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_SURNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_SURNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_BIRTHDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_BIRTHDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_BIRTHDATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_BIRTHDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_DECISION_MAKER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_DECISION_MAKER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_DECISION_MAKER_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_DECISION_MAKER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_DECISION_MAKER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_DECISION_MAKER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_DECISION_MAKER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_DECISION_MAKER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_DECISION_FIRST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_DECISION_FIRST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_DECISION_FIRST_NAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_DECISION_FIRST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_DECISION_SURNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_DECISION_SURNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_DECISION_SURNAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_DECISION_SURNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SELLER_DECISION_BIRTHDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SELLER_DECISION_BIRTHDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELLER_DECISION_BIRTHDATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SELLER_DECISION_BIRTHDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSMISSION_IND() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRANSMISSION_INDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSMISSION_IND' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRANSMISSION_INDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSMITTING_ENTITY_BUYER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSMITTING_ENTITY_BUYER_ID_TYPE' in table 'MIFIR' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSMITTING_ENTITY_BUYER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSMITTING_ENTITY_BUYER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSMITTING_ENTITY_SELLER_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSMITTING_ENTITY_SELLER_ID_TYPE' in table 'MIFIR' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRANSMITTING_ENTITY_SELLER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSMITTING_ENTITY_SELLER_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRN_REF_NUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRN_REF_NUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRN_REF_NUMBER' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRN_REF_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRADING_VENUE_TRN_ID_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRADING_VENUE_TRN_ID_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRADING_VENUE_TRN_ID_CODE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRADING_VENUE_TRN_ID_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VENUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.VENUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VENUE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.VENUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TRADE_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TRADE_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRADE_TIME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TRADE_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MIFIR_TRADING_CAPACITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.MIFIR_TRADING_CAPACITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MIFIR_TRADING_CAPACITY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.MIFIR_TRADING_CAPACITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property QUANTITY_NOTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.QUANTITY_NOTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUANTITY_NOTATION' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.QUANTITY_NOTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property QUANTITY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.QUANTITYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUANTITY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property QUANTITY_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.QUANTITY_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUANTITY_CURRENCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.QUANTITY_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOTIONAL_INCREASE_DECREASE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NOTIONAL_INCREASE_DECREASEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTIONAL_INCREASE_DECREASE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NOTIONAL_INCREASE_DECREASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PRICE_NOTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PRICE_NOTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_NOTATION' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PRICE_NOTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PRICE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PRICEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PRICE_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PRICE_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_CURRENCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PRICE_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NET_AMOUNT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NET_AMOUNTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NET_AMOUNT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NET_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UPFRONT_PAYMENT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UPFRONT_PAYMENTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPFRONT_PAYMENT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UPFRONT_PAYMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UPFRONT_PAYMENT_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UPFRONT_PAYMENT_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPFRONT_PAYMENT_CURRENCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UPFRONT_PAYMENT_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COMPLEX_TRADE_COMPONENT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.COMPLEX_TRADE_COMPONENT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMPLEX_TRADE_COMPONENT_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.COMPLEX_TRADE_COMPONENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INSTRUMENT_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INSTRUMENT_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INSTRUMENT_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INSTRUMENT_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INSTRUMENT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INSTRUMENT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INSTRUMENT_NAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INSTRUMENT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INSTRUMENT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INSTRUMENT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INSTRUMENT_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INSTRUMENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INSTRUMENT_CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INSTRUMENT_CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INSTRUMENT_CLASS' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INSTRUMENT_CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOTIONAL_CURRENCY_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NOTIONAL_CURRENCY_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTIONAL_CURRENCY_1' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NOTIONAL_CURRENCY_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NOTIONAL_CURRENCY_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.NOTIONAL_CURRENCY_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTIONAL_CURRENCY_2' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.NOTIONAL_CURRENCY_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PRICE_MULTIPLIER() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.PRICE_MULTIPLIERColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_MULTIPLIER' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.PRICE_MULTIPLIERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INSTRUMENT_DIRECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_DIRECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INSTRUMENT_DIRECTION' in table 'MIFIR' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_DIRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INSTRUMENT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INSTRUMENT_CODE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INDEX_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INDEX_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INDEX_CODE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INDEX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INDEX_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INDEX_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INDEX_NAME' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INDEX_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INDEX_TERM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INDEX_TERMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INDEX_TERM' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INDEX_TERMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INDEX_TERM_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INDEX_TERM_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INDEX_TERM_UNIT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INDEX_TERM_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property STRIKE_PRICE_NOTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.STRIKE_PRICE_NOTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRIKE_PRICE_NOTATION' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.STRIKE_PRICE_NOTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property STRIKE_PRICE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.STRIKE_PRICEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRIKE_PRICE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.STRIKE_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property STRIKE_PRICE_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.STRIKE_PRICE_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRIKE_PRICE_CURRENCY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.STRIKE_PRICE_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OPTION_EXERCISE_STYLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.OPTION_EXERCISE_STYLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_EXERCISE_STYLE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.OPTION_EXERCISE_STYLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MATURITY_DATE_INSTRUMENT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.MATURITY_DATE_INSTRUMENTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATURITY_DATE_INSTRUMENT' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.MATURITY_DATE_INSTRUMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EXPIRY_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.EXPIRY_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPIRY_DATE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.EXPIRY_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DELIVERY_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.DELIVERY_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELIVERY_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.DELIVERY_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INVESTMENT_DECISION_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INVESTMENT_DECISION_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVESTMENT_DECISION_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INVESTMENT_DECISION_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INVESTMENT_DECISION_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INVESTMENT_DECISION_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVESTMENT_DECISION_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INVESTMENT_DECISION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INVESTMENT_DECISION_BRANCH_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.INVESTMENT_DECISION_BRANCH_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVESTMENT_DECISION_BRANCH_COUNTRY' in table 'MIFIR' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.INVESTMENT_DECISION_BRANCH_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EXECUTION_ID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.EXECUTION_ID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXECUTION_ID_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.EXECUTION_ID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EXECUTION_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.EXECUTION_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXECUTION_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.EXECUTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SUPERVISING_BRANCH_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SUPERVISING_BRANCH_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPERVISING_BRANCH_COUNTRY' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SUPERVISING_BRANCH_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property WAIVER_INDICATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.WAIVER_INDICATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAIVER_INDICATOR' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.WAIVER_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SHORT_SELLING_INDICATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SHORT_SELLING_INDICATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHORT_SELLING_INDICATOR' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SHORT_SELLING_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COMMODITY_DERIVATIVE_INDICATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.COMMODITY_DERIVATIVE_INDICATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMODITY_DERIVATIVE_INDICATOR' in table 'MIFIR' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.COMMODITY_DERIVATIVE_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SFTR_INDICATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SFTR_INDICATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SFTR_INDICATOR' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SFTR_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DIRECTED_ORDER_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.DIRECTED_ORDER_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIRECTED_ORDER_FLAG' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.DIRECTED_ORDER_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ORDER_GROUP_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ORDER_GROUP_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_GROUP_ID' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ORDER_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TOAX_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.TOAX_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOAX_FLAG' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.TOAX_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LIQP_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.LIQP_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIQP_FLAG' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.LIQP_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ORDER_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ORDER_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ORDER_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CLIENT_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CLIENT_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CLIENT_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OTC_POST_TRADE_INDICATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.OTC_POST_TRADE_INDICATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTC_POST_TRADE_INDICATOR' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.OTC_POST_TRADE_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OPTION_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.OPTION_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_TYPE' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.OPTION_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UNDERLYING_INDEX_DIRECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.UNDERLYING_INDEX_DIRECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNDERLYING_INDEX_DIRECTION' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.UNDERLYING_INDEX_DIRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OrderType() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.OrderTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderType' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.OrderTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CountryOfResidence() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.CountryOfResidenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountryOfResidence' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.CountryOfResidenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Buyer() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.BuyerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Buyer' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.BuyerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Seller() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIFIR.SellerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seller' in table 'MIFIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIFIR.SellerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReportStatusNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ReportStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReportStatusNull()
            Me(Me.tableMIFIR.ReportStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTradeDateNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TradeDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTradeDateNull()
            Me(Me.tableMIFIR.TradeDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueDateNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ValueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueDateNull()
            Me(Me.tableMIFIR.ValueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFixingDateNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.FixingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFixingDateNull()
            Me(Me.tableMIFIR.FixingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientOrderIDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ClientOrderIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientOrderIDNull()
            Me(Me.tableMIFIR.ClientOrderIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFxAllIDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.FxAllIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFxAllIDNull()
            Me(Me.tableMIFIR.FxAllIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTradingVenueTransactionIdentificationCodeNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TradingVenueTransactionIdentificationCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTradingVenueTransactionIdentificationCodeNull()
            Me(Me.tableMIFIR.TradingVenueTransactionIdentificationCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustomerUSINull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustomerUSIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustomerUSINull()
            Me(Me.tableMIFIR.CustomerUSIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProviderUSINull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ProviderUSIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProviderUSINull()
            Me(Me.tableMIFIR.ProviderUSIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProductNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ProductColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProductNull()
            Me(Me.tableMIFIR.ProductColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatusNull()
            Me(Me.tableMIFIR.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFixingTimeNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.FixingTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFixingTimeNull()
            Me(Me.tableMIFIR.FixingTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFixingSeriesNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.FixingSeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFixingSeriesNull()
            Me(Me.tableMIFIR.FixingSeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustBSNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustBSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustBSNull()
            Me(Me.tableMIFIR.CustBSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustTradeSideNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustTradeSideColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustTradeSideNull()
            Me(Me.tableMIFIR.CustTradeSideColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustomerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustomerNameNull()
            Me(Me.tableMIFIR.CustomerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustTraderNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustTraderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustTraderNull()
            Me(Me.tableMIFIR.CustTraderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAccountNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAccountNull()
            Me(Me.tableMIFIR.AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAccountLongNameNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.AccountLongNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAccountLongNameNull()
            Me(Me.tableMIFIR.AccountLongNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCCYPairNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CCYPairColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCCYPairNull()
            Me(Me.tableMIFIR.CCYPairColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNotionalCCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NotionalCCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNotionalCCYNull()
            Me(Me.tableMIFIR.NotionalCCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNotionalNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NotionalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNotionalNull()
            Me(Me.tableMIFIR.NotionalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContraCCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ContraCCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContraCCYNull()
            Me(Me.tableMIFIR.ContraCCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContraAmountNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ContraAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContraAmountNull()
            Me(Me.tableMIFIR.ContraAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPriceTreasuryNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PriceTreasuryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPriceTreasuryNull()
            Me(Me.tableMIFIR.PriceTreasuryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFwdPtsNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.FwdPtsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFwdPtsNull()
            Me(Me.tableMIFIR.FwdPtsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAllInNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.AllInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAllInNull()
            Me(Me.tableMIFIR.AllInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsComplexTradeIDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ComplexTradeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetComplexTradeIDNull()
            Me(Me.tableMIFIR.ComplexTradeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCARStatusNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CARStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCARStatusNull()
            Me(Me.tableMIFIR.CARStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCARSubmitIDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CARSubmitIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCARSubmitIDNull()
            Me(Me.tableMIFIR.CARSubmitIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCARTimeNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CARTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCARTimeNull()
            Me(Me.tableMIFIR.CARTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExecutionWithinTheFirmNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ExecutionWithinTheFirmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExecutionWithinTheFirmNull()
            Me(Me.tableMIFIR.ExecutionWithinTheFirmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsISINNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ISINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetISINNull()
            Me(Me.tableMIFIR.ISINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCFICodeForTheInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CFICodeForTheInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCFICodeForTheInstrumentNull()
            Me(Me.tableMIFIR.CFICodeForTheInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWaiverIndicatorNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.WaiverIndicatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWaiverIndicatorNull()
            Me(Me.tableMIFIR.WaiverIndicatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMTFExecutionTimeNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.MTFExecutionTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMTFExecutionTimeNull()
            Me(Me.tableMIFIR.MTFExecutionTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLiqVenueNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.LiqVenueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLiqVenueNull()
            Me(Me.tableMIFIR.LiqVenueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCapacityNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CapacityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCapacityNull()
            Me(Me.tableMIFIR.CapacityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNPFTNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NPFTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNPFTNull()
            Me(Me.tableMIFIR.NPFTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSEC_FINNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SEC_FINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSEC_FINNull()
            Me(Me.tableMIFIR.SEC_FINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCustomerLEINull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CustomerLEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCustomerLEINull()
            Me(Me.tableMIFIR.CustomerLEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAccountLEINull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.AccountLEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAccountLEINull()
            Me(Me.tableMIFIR.AccountLEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProviderLEINull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ProviderLEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProviderLEINull()
            Me(Me.tableMIFIR.ProviderLEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDateTimeOfferToDealNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.DateTimeOfferToDealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDateTimeOfferToDealNull()
            Me(Me.tableMIFIR.DateTimeOfferToDealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTransmissionOfOrderIndicatorNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TransmissionOfOrderIndicatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTransmissionOfOrderIndicatorNull()
            Me(Me.tableMIFIR.TransmissionOfOrderIndicatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLiquidityProvisionActivityNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.LiquidityProvisionActivityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLiquidityProvisionActivityNull()
            Me(Me.tableMIFIR.LiquidityProvisionActivityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDateTimeOrderSubmissionNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.DateTimeOrderSubmissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDateTimeOrderSubmissionNull()
            Me(Me.tableMIFIR.DateTimeOrderSubmissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVenueTreasuryNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.VenueTreasuryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVenueTreasuryNull()
            Me(Me.tableMIFIR.VenueTreasuryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDateReceiptOrderNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.DateReceiptOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDateReceiptOrderNull()
            Me(Me.tableMIFIR.DateReceiptOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRADE_DATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRADE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRADE_DATENull()
            Me(Me.tableMIFIR.TRADE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCUSTOMER_TRANSACTION_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CUSTOMER_TRANSACTION_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCUSTOMER_TRANSACTION_IDNull()
            Me(Me.tableMIFIR.CUSTOMER_TRANSACTION_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsACTION_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ACTION_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetACTION_TYPENull()
            Me(Me.tableMIFIR.ACTION_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUSINESS_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUSINESS_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUSINESS_UNITNull()
            Me(Me.tableMIFIR.BUSINESS_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tableMIFIR.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMIFIR_REPORTINGNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.MIFIR_REPORTINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMIFIR_REPORTINGNull()
            Me(Me.tableMIFIR.MIFIR_REPORTINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOMMENTNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.COMMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOMMENTNull()
            Me(Me.tableMIFIR.COMMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRADE_REPORT_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRADE_REPORT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRADE_REPORT_IDNull()
            Me(Me.tableMIFIR.TRADE_REPORT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSOURCE_SYSTEMNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SOURCE_SYSTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSOURCE_SYSTEMNull()
            Me(Me.tableMIFIR.SOURCE_SYSTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRECORD_MODENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.RECORD_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRECORD_MODENull()
            Me(Me.tableMIFIR.RECORD_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD1Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD1Null()
            Me(Me.tableMIFIR.USER_FIELD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD2Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD2Null()
            Me(Me.tableMIFIR.USER_FIELD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD3Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD3Null()
            Me(Me.tableMIFIR.USER_FIELD3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD4Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD4Null()
            Me(Me.tableMIFIR.USER_FIELD4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD5Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD5Null()
            Me(Me.tableMIFIR.USER_FIELD5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD6Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD6Null()
            Me(Me.tableMIFIR.USER_FIELD6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD7Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD7Null()
            Me(Me.tableMIFIR.USER_FIELD7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD8Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD8Null()
            Me(Me.tableMIFIR.USER_FIELD8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUSER_FIELD9Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.USER_FIELD9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUSER_FIELD9Null()
            Me(Me.tableMIFIR.USER_FIELD9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPARTIAL_ASSISTANCE_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PARTIAL_ASSISTANCE_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPARTIAL_ASSISTANCE_FLAGNull()
            Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPARTIAL_ASSISTANCE_SUBMITTER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PARTIAL_ASSISTANCE_SUBMITTER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPARTIAL_ASSISTANCE_SUBMITTER_IDNull()
            Me(Me.tableMIFIR.PARTIAL_ASSISTANCE_SUBMITTER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPAIRING_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PAIRING_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPAIRING_IDNull()
            Me(Me.tableMIFIR.PAIRING_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEXECUTING_ENTITY_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.EXECUTING_ENTITY_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEXECUTING_ENTITY_ID_TYPENull()
            Me(Me.tableMIFIR.EXECUTING_ENTITY_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEXECUTING_ENTITY_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.EXECUTING_ENTITY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEXECUTING_ENTITY_IDNull()
            Me(Me.tableMIFIR.EXECUTING_ENTITY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMIFID_INVESTMENT_FIRMNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.MIFID_INVESTMENT_FIRMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMIFID_INVESTMENT_FIRMNull()
            Me(Me.tableMIFIR.MIFID_INVESTMENT_FIRMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBRANCH_MEMBERSHIP_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BRANCH_MEMBERSHIP_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBRANCH_MEMBERSHIP_COUNTRYNull()
            Me(Me.tableMIFIR.BRANCH_MEMBERSHIP_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_ID_TYPENull()
            Me(Me.tableMIFIR.BUYER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_IDNull()
            Me(Me.tableMIFIR.BUYER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_BRANCH_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_BRANCH_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_BRANCH_COUNTRYNull()
            Me(Me.tableMIFIR.BUYER_BRANCH_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_FIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_FIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_FIRSTNAMENull()
            Me(Me.tableMIFIR.BUYER_FIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_SURNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_SURNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_SURNAMENull()
            Me(Me.tableMIFIR.BUYER_SURNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_BIRTHDATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_BIRTHDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_BIRTHDATENull()
            Me(Me.tableMIFIR.BUYER_BIRTHDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_DECISION_MAKER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_DECISION_MAKER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_DECISION_MAKER_ID_TYPENull()
            Me(Me.tableMIFIR.BUYER_DECISION_MAKER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_DECISION_MAKER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_DECISION_MAKER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_DECISION_MAKER_IDNull()
            Me(Me.tableMIFIR.BUYER_DECISION_MAKER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_DECISION_FIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_DECISION_FIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_DECISION_FIRSTNAMENull()
            Me(Me.tableMIFIR.BUYER_DECISION_FIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_DECISION_SURNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_DECISION_SURNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_DECISION_SURNAMENull()
            Me(Me.tableMIFIR.BUYER_DECISION_SURNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBUYER_DECISION_BIRTHDATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BUYER_DECISION_BIRTHDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBUYER_DECISION_BIRTHDATENull()
            Me(Me.tableMIFIR.BUYER_DECISION_BIRTHDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_ID_TYPENull()
            Me(Me.tableMIFIR.SELLER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_IDNull()
            Me(Me.tableMIFIR.SELLER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_BRANCH_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_BRANCH_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_BRANCH_COUNTRYNull()
            Me(Me.tableMIFIR.SELLER_BRANCH_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_FIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_FIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_FIRSTNAMENull()
            Me(Me.tableMIFIR.SELLER_FIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_SURNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_SURNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_SURNAMENull()
            Me(Me.tableMIFIR.SELLER_SURNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_BIRTHDATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_BIRTHDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_BIRTHDATENull()
            Me(Me.tableMIFIR.SELLER_BIRTHDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_DECISION_MAKER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_DECISION_MAKER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_DECISION_MAKER_ID_TYPENull()
            Me(Me.tableMIFIR.SELLER_DECISION_MAKER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_DECISION_MAKER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_DECISION_MAKER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_DECISION_MAKER_IDNull()
            Me(Me.tableMIFIR.SELLER_DECISION_MAKER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_DECISION_FIRST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_DECISION_FIRST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_DECISION_FIRST_NAMENull()
            Me(Me.tableMIFIR.SELLER_DECISION_FIRST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_DECISION_SURNAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_DECISION_SURNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_DECISION_SURNAMENull()
            Me(Me.tableMIFIR.SELLER_DECISION_SURNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSELLER_DECISION_BIRTHDATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SELLER_DECISION_BIRTHDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSELLER_DECISION_BIRTHDATENull()
            Me(Me.tableMIFIR.SELLER_DECISION_BIRTHDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSMISSION_INDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRANSMISSION_INDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSMISSION_INDNull()
            Me(Me.tableMIFIR.TRANSMISSION_INDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSMITTING_ENTITY_BUYER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSMITTING_ENTITY_BUYER_ID_TYPENull()
            Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSMITTING_ENTITY_BUYER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSMITTING_ENTITY_BUYER_IDNull()
            Me(Me.tableMIFIR.TRANSMITTING_ENTITY_BUYER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSMITTING_ENTITY_SELLER_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSMITTING_ENTITY_SELLER_ID_TYPENull()
            Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRANSMITTING_ENTITY_SELLER_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRANSMITTING_ENTITY_SELLER_IDNull()
            Me(Me.tableMIFIR.TRANSMITTING_ENTITY_SELLER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRN_REF_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRN_REF_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRN_REF_NUMBERNull()
            Me(Me.tableMIFIR.TRN_REF_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRADING_VENUE_TRN_ID_CODENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRADING_VENUE_TRN_ID_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRADING_VENUE_TRN_ID_CODENull()
            Me(Me.tableMIFIR.TRADING_VENUE_TRN_ID_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVENUENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.VENUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVENUENull()
            Me(Me.tableMIFIR.VENUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTRADE_TIMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TRADE_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTRADE_TIMENull()
            Me(Me.tableMIFIR.TRADE_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMIFIR_TRADING_CAPACITYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.MIFIR_TRADING_CAPACITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMIFIR_TRADING_CAPACITYNull()
            Me(Me.tableMIFIR.MIFIR_TRADING_CAPACITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQUANTITY_NOTATIONNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.QUANTITY_NOTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQUANTITY_NOTATIONNull()
            Me(Me.tableMIFIR.QUANTITY_NOTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQUANTITYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.QUANTITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQUANTITYNull()
            Me(Me.tableMIFIR.QUANTITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQUANTITY_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.QUANTITY_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQUANTITY_CURRENCYNull()
            Me(Me.tableMIFIR.QUANTITY_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOTIONAL_INCREASE_DECREASENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NOTIONAL_INCREASE_DECREASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOTIONAL_INCREASE_DECREASENull()
            Me(Me.tableMIFIR.NOTIONAL_INCREASE_DECREASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPRICE_NOTATIONNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PRICE_NOTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPRICE_NOTATIONNull()
            Me(Me.tableMIFIR.PRICE_NOTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPRICENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPRICENull()
            Me(Me.tableMIFIR.PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPRICE_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PRICE_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPRICE_CURRENCYNull()
            Me(Me.tableMIFIR.PRICE_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNET_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NET_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNET_AMOUNTNull()
            Me(Me.tableMIFIR.NET_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUPFRONT_PAYMENTNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UPFRONT_PAYMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUPFRONT_PAYMENTNull()
            Me(Me.tableMIFIR.UPFRONT_PAYMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUPFRONT_PAYMENT_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UPFRONT_PAYMENT_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUPFRONT_PAYMENT_CURRENCYNull()
            Me(Me.tableMIFIR.UPFRONT_PAYMENT_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOMPLEX_TRADE_COMPONENT_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.COMPLEX_TRADE_COMPONENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOMPLEX_TRADE_COMPONENT_IDNull()
            Me(Me.tableMIFIR.COMPLEX_TRADE_COMPONENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINSTRUMENT_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INSTRUMENT_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINSTRUMENT_ID_TYPENull()
            Me(Me.tableMIFIR.INSTRUMENT_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINSTRUMENT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INSTRUMENT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINSTRUMENT_NAMENull()
            Me(Me.tableMIFIR.INSTRUMENT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINSTRUMENT_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INSTRUMENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINSTRUMENT_IDNull()
            Me(Me.tableMIFIR.INSTRUMENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINSTRUMENT_CLASSNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INSTRUMENT_CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINSTRUMENT_CLASSNull()
            Me(Me.tableMIFIR.INSTRUMENT_CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOTIONAL_CURRENCY_1Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NOTIONAL_CURRENCY_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOTIONAL_CURRENCY_1Null()
            Me(Me.tableMIFIR.NOTIONAL_CURRENCY_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNOTIONAL_CURRENCY_2Null() As Boolean
            Return Me.IsNull(Me.tableMIFIR.NOTIONAL_CURRENCY_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNOTIONAL_CURRENCY_2Null()
            Me(Me.tableMIFIR.NOTIONAL_CURRENCY_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPRICE_MULTIPLIERNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.PRICE_MULTIPLIERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPRICE_MULTIPLIERNull()
            Me(Me.tableMIFIR.PRICE_MULTIPLIERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INSTRUMENT_DIRECTIONNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INSTRUMENT_DIRECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INSTRUMENT_DIRECTIONNull()
            Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_DIRECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INSTRUMENT_CODENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INSTRUMENT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INSTRUMENT_CODENull()
            Me(Me.tableMIFIR.UNDERLYING_INSTRUMENT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INDEX_CODENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INDEX_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INDEX_CODENull()
            Me(Me.tableMIFIR.UNDERLYING_INDEX_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INDEX_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INDEX_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INDEX_NAMENull()
            Me(Me.tableMIFIR.UNDERLYING_INDEX_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INDEX_TERMNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INDEX_TERMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INDEX_TERMNull()
            Me(Me.tableMIFIR.UNDERLYING_INDEX_TERMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INDEX_TERM_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INDEX_TERM_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INDEX_TERM_UNITNull()
            Me(Me.tableMIFIR.UNDERLYING_INDEX_TERM_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSTRIKE_PRICE_NOTATIONNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.STRIKE_PRICE_NOTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSTRIKE_PRICE_NOTATIONNull()
            Me(Me.tableMIFIR.STRIKE_PRICE_NOTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSTRIKE_PRICENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.STRIKE_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSTRIKE_PRICENull()
            Me(Me.tableMIFIR.STRIKE_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSTRIKE_PRICE_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.STRIKE_PRICE_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSTRIKE_PRICE_CURRENCYNull()
            Me(Me.tableMIFIR.STRIKE_PRICE_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOPTION_EXERCISE_STYLENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.OPTION_EXERCISE_STYLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOPTION_EXERCISE_STYLENull()
            Me(Me.tableMIFIR.OPTION_EXERCISE_STYLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMATURITY_DATE_INSTRUMENTNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.MATURITY_DATE_INSTRUMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMATURITY_DATE_INSTRUMENTNull()
            Me(Me.tableMIFIR.MATURITY_DATE_INSTRUMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEXPIRY_DATENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.EXPIRY_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEXPIRY_DATENull()
            Me(Me.tableMIFIR.EXPIRY_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDELIVERY_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.DELIVERY_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDELIVERY_TYPENull()
            Me(Me.tableMIFIR.DELIVERY_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINVESTMENT_DECISION_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INVESTMENT_DECISION_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINVESTMENT_DECISION_ID_TYPENull()
            Me(Me.tableMIFIR.INVESTMENT_DECISION_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINVESTMENT_DECISION_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INVESTMENT_DECISION_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINVESTMENT_DECISION_IDNull()
            Me(Me.tableMIFIR.INVESTMENT_DECISION_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINVESTMENT_DECISION_BRANCH_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.INVESTMENT_DECISION_BRANCH_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINVESTMENT_DECISION_BRANCH_COUNTRYNull()
            Me(Me.tableMIFIR.INVESTMENT_DECISION_BRANCH_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEXECUTION_ID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.EXECUTION_ID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEXECUTION_ID_TYPENull()
            Me(Me.tableMIFIR.EXECUTION_ID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEXECUTION_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.EXECUTION_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEXECUTION_IDNull()
            Me(Me.tableMIFIR.EXECUTION_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSUPERVISING_BRANCH_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SUPERVISING_BRANCH_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSUPERVISING_BRANCH_COUNTRYNull()
            Me(Me.tableMIFIR.SUPERVISING_BRANCH_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsWAIVER_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.WAIVER_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetWAIVER_INDICATORNull()
            Me(Me.tableMIFIR.WAIVER_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSHORT_SELLING_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SHORT_SELLING_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSHORT_SELLING_INDICATORNull()
            Me(Me.tableMIFIR.SHORT_SELLING_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOMMODITY_DERIVATIVE_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.COMMODITY_DERIVATIVE_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOMMODITY_DERIVATIVE_INDICATORNull()
            Me(Me.tableMIFIR.COMMODITY_DERIVATIVE_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSFTR_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SFTR_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSFTR_INDICATORNull()
            Me(Me.tableMIFIR.SFTR_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDIRECTED_ORDER_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.DIRECTED_ORDER_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDIRECTED_ORDER_FLAGNull()
            Me(Me.tableMIFIR.DIRECTED_ORDER_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsORDER_GROUP_IDNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ORDER_GROUP_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetORDER_GROUP_IDNull()
            Me(Me.tableMIFIR.ORDER_GROUP_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTOAX_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.TOAX_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTOAX_FLAGNull()
            Me(Me.tableMIFIR.TOAX_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLIQP_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.LIQP_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLIQP_FLAGNull()
            Me(Me.tableMIFIR.LIQP_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsORDER_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ORDER_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetORDER_TYPENull()
            Me(Me.tableMIFIR.ORDER_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCLIENT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CLIENT_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCLIENT_TYPENull()
            Me(Me.tableMIFIR.CLIENT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOTC_POST_TRADE_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.OTC_POST_TRADE_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOTC_POST_TRADE_INDICATORNull()
            Me(Me.tableMIFIR.OTC_POST_TRADE_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOPTION_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.OPTION_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOPTION_TYPENull()
            Me(Me.tableMIFIR.OPTION_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUNDERLYING_INDEX_DIRECTIONNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.UNDERLYING_INDEX_DIRECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUNDERLYING_INDEX_DIRECTIONNull()
            Me(Me.tableMIFIR.UNDERLYING_INDEX_DIRECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrderTypeNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.OrderTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrderTypeNull()
            Me(Me.tableMIFIR.OrderTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableMIFIR.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableMIFIR.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCountryOfResidenceNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.CountryOfResidenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCountryOfResidenceNull()
            Me(Me.tableMIFIR.CountryOfResidenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBuyerNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.BuyerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBuyerNull()
            Me(Me.tableMIFIR.BuyerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSellerNull() As Boolean
            Return Me.IsNull(Me.tableMIFIR.SellerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSellerNull()
            Me(Me.tableMIFIR.SellerColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz10POSTENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz10POSTENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz10POSTENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz10POSTENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz14RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz14Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz14Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz14Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz1415RelevantDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz1415RelevantDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz1415RelevantDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz1415RelevantDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz14z15RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz14z15Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz14z15Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz14z15Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz15RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz15Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz15Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz15Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz4DIKAPPOSTENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz4DIKAPPOSTENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz4DIKAPPOSTENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz4DIKAPPOSTENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz4DIRINVPOSTENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz4DIRINVPOSTENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz4DIRINVPOSTENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz4DIRINVPOSTENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz4TRANSITPOSTENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz4TRANSITPOSTENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz4TRANSITPOSTENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz4TRANSITPOSTENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class BANKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BANKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As BANKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As BANKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class COUNTRIESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COUNTRIESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As COUNTRIESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As COUNTRIESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZINSERTRAG_KUNDEN_DETAILSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZINSERTRAG_KUNDEN_DETAILSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZINSERTRAG_KUNDEN_DETAILSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZINSERTRAG_KUNDEN_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZINSERTRAG_KUNDEN_JAHRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZINSERTRAG_KUNDEN_JAHRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZINSERTRAG_KUNDEN_JAHRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZINSERTRAG_KUNDEN_JAHRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZINSERTRAG_KUNDEN_MONATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZINSERTRAG_KUNDEN_MONATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZINSERTRAG_KUNDEN_MONATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZINSERTRAG_KUNDEN_MONATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class EMPLOYES_YEAR_AVERAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EMPLOYES_YEAR_AVERAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As EMPLOYES_YEAR_AVERAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As EMPLOYES_YEAR_AVERAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTA_FormsTill2013RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTA_FormsTill2013Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTA_FormsTill2013Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTA_FormsTill2013Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTA_ProdTill2013RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTA_ProdTill2013Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTA_ProdTill2013Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTA_ProdTill2013Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTATill2013RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTATill2013Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTATill2013Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTATill2013Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTAT_Parameters_from2014RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTAT_Parameters_from2014Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTAT_Parameters_from2014Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTAT_Parameters_from2014Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTAT_Details_from2014RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTAT_Details_from2014Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTAT_Details_from2014Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTAT_Details_from2014Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTAT_MeldeJahr_from2014RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTAT_MeldeJahr_from2014Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTAT_MeldeJahr_from2014Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTAT_MeldeJahr_from2014Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTAT_Meldepositionen_from2014RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTAT_Meldepositionen_from2014Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTAT_Meldepositionen_from2014Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTAT_Meldepositionen_from2014Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ZVSTAT_Meldeschemas_from2014RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZVSTAT_Meldeschemas_from2014Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ZVSTAT_Meldeschemas_from2014Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ZVSTAT_Meldeschemas_from2014Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AWVz11POSTENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AWVz11POSTENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AWVz11POSTENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AWVz11POSTENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class MIFIRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MIFIRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As MIFIRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As MIFIRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MeldewesenDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz10POSTENTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz10POSTEN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("BELEGART", "BELEGART")
            tableMapping.ColumnMappings.Add("KENNZAHL", "KENNZAHL")
            tableMapping.ColumnMappings.Add("WERTPAPIER_ISIN", "WERTPAPIER_ISIN")
            tableMapping.ColumnMappings.Add("WERTAPPIER_BEZEICHNUNG", "WERTAPPIER_BEZEICHNUNG")
            tableMapping.ColumnMappings.Add("NOMINAL_STUECK", "NOMINAL_STUECK")
            tableMapping.ColumnMappings.Add("WERTPAPIER_SoN", "WERTPAPIER_SoN")
            tableMapping.ColumnMappings.Add("WERTPAPIER_LAND_ISOCODE", "WERTPAPIER_LAND_ISOCODE")
            tableMapping.ColumnMappings.Add("WERTPAPIER_LAND_NAME", "WERTPAPIER_LAND_NAME")
            tableMapping.ColumnMappings.Add("WERTPAPIER_WHG", "WERTPAPIER_WHG")
            tableMapping.ColumnMappings.Add("WERTPAPIER_BETRAG", "WERTPAPIER_BETRAG")
            tableMapping.ColumnMappings.Add("IdAWVz14z15", "IdAWVz14z15")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz10POSTEN] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz10POSTEN] ([BELEGART], [KENNZAHL], [WERTPAPIER_ISIN], [WERTAPPIE"& _ 
                "R_BEZEICHNUNG], [NOMINAL_STUECK], [WERTPAPIER_SoN], [WERTPAPIER_LAND_ISOCODE], ["& _ 
                "WERTPAPIER_LAND_NAME], [WERTPAPIER_WHG], [WERTPAPIER_BETRAG], [IdAWVz14z15], [BE"& _ 
                "TRAG_REF]) VALUES (@BELEGART, @KENNZAHL, @WERTPAPIER_ISIN, @WERTAPPIER_BEZEICHNU"& _ 
                "NG, @NOMINAL_STUECK, @WERTPAPIER_SoN, @WERTPAPIER_LAND_ISOCODE, @WERTPAPIER_LAND"& _ 
                "_NAME, @WERTPAPIER_WHG, @WERTPAPIER_BETRAG, @IdAWVz14z15, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTAPPIER_BEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTAPPIER_BEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMINAL_STUECK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMINAL_STUECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_SoN", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_SoN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_LAND_ISOCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_LAND_ISOCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_LAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_LAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_WHG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_WHG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdAWVz14z15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz10POSTEN] SET [BELEGART] = @BELEGART, [KENNZAHL] = @KENNZAHL, [WERTPA"& _ 
                "PIER_ISIN] = @WERTPAPIER_ISIN, [WERTAPPIER_BEZEICHNUNG] = @WERTAPPIER_BEZEICHNUN"& _ 
                "G, [NOMINAL_STUECK] = @NOMINAL_STUECK, [WERTPAPIER_SoN] = @WERTPAPIER_SoN, [WERT"& _ 
                "PAPIER_LAND_ISOCODE] = @WERTPAPIER_LAND_ISOCODE, [WERTPAPIER_LAND_NAME] = @WERTP"& _ 
                "APIER_LAND_NAME, [WERTPAPIER_WHG] = @WERTPAPIER_WHG, [WERTPAPIER_BETRAG] = @WERT"& _ 
                "PAPIER_BETRAG, [IdAWVz14z15] = @IdAWVz14z15, [BETRAG_REF] = @BETRAG_REF WHERE (("& _ 
                "[ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTAPPIER_BEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTAPPIER_BEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMINAL_STUECK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMINAL_STUECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_SoN", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_SoN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_LAND_ISOCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_LAND_ISOCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_LAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_LAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_WHG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_WHG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WERTPAPIER_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WERTPAPIER_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdAWVz14z15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, BELEGART, KENNZAHL, WERTPAPIER_ISIN, WERTAPPIER_BEZEICHNUNG, NO"& _ 
                "MINAL_STUECK, WERTPAPIER_SoN, WERTPAPIER_LAND_ISOCODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  WERTPAPIER_LAND_NAME, WERTPAPIER_WHG, WERTPAPIER_BETRAG, IdAWVz14z15, BETRAG_R"& _ 
                "EF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz10POSTEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BELEGART, BETRAG_REF, ID, IdAWVz14z15, KENNZAHL, NOMINAL_STUECK, WERTAPPIE"& _ 
                "R_BEZEICHNUNG, WERTPAPIER_BETRAG, WERTPAPIER_ISIN, WERTPAPIER_LAND_ISOCODE, WERT"& _ 
                "PAPIER_LAND_NAME, WERTPAPIER_SoN, WERTPAPIER_WHG FROM AWVz10POSTEN WHERE (IdAWVz"& _ 
                "14z15 = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz10POSTENDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz10POSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz10POSTENDataTable = New MeldewesenDataSet.AWVz10POSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz10POSTENDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz10POSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz10POSTENDataTable = New MeldewesenDataSet.AWVz10POSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz10POSTENDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz10POSTEN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal WERTPAPIER_ISIN As String, ByVal WERTAPPIER_BEZEICHNUNG As String, ByVal NOMINAL_STUECK As String, ByVal WERTPAPIER_SoN As Global.System.Nullable(Of Double), ByVal WERTPAPIER_LAND_ISOCODE As String, ByVal WERTPAPIER_LAND_NAME As String, ByVal WERTPAPIER_WHG As String, ByVal WERTPAPIER_BETRAG As Global.System.Nullable(Of Double), ByVal IdAWVz14z15 As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (BELEGART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(BELEGART,String)
            End If
            If (KENNZAHL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(KENNZAHL,String)
            End If
            If (WERTPAPIER_ISIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(WERTPAPIER_ISIN,String)
            End If
            If (WERTAPPIER_BEZEICHNUNG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WERTAPPIER_BEZEICHNUNG,String)
            End If
            If (NOMINAL_STUECK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NOMINAL_STUECK,String)
            End If
            If (WERTPAPIER_SoN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(WERTPAPIER_SoN.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (WERTPAPIER_LAND_ISOCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(WERTPAPIER_LAND_ISOCODE,String)
            End If
            If (WERTPAPIER_LAND_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(WERTPAPIER_LAND_NAME,String)
            End If
            If (WERTPAPIER_WHG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(WERTPAPIER_WHG,String)
            End If
            If (WERTPAPIER_BETRAG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(WERTPAPIER_BETRAG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IdAWVz14z15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IdAWVz14z15.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal WERTPAPIER_ISIN As String, ByVal WERTAPPIER_BEZEICHNUNG As String, ByVal NOMINAL_STUECK As String, ByVal WERTPAPIER_SoN As Global.System.Nullable(Of Double), ByVal WERTPAPIER_LAND_ISOCODE As String, ByVal WERTPAPIER_LAND_NAME As String, ByVal WERTPAPIER_WHG As String, ByVal WERTPAPIER_BETRAG As Global.System.Nullable(Of Double), ByVal IdAWVz14z15 As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (BELEGART Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BELEGART,String)
            End If
            If (KENNZAHL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(KENNZAHL,String)
            End If
            If (WERTPAPIER_ISIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(WERTPAPIER_ISIN,String)
            End If
            If (WERTAPPIER_BEZEICHNUNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WERTAPPIER_BEZEICHNUNG,String)
            End If
            If (NOMINAL_STUECK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NOMINAL_STUECK,String)
            End If
            If (WERTPAPIER_SoN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WERTPAPIER_SoN.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (WERTPAPIER_LAND_ISOCODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WERTPAPIER_LAND_ISOCODE,String)
            End If
            If (WERTPAPIER_LAND_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(WERTPAPIER_LAND_NAME,String)
            End If
            If (WERTPAPIER_WHG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(WERTPAPIER_WHG,String)
            End If
            If (WERTPAPIER_BETRAG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(WERTPAPIER_BETRAG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IdAWVz14z15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IdAWVz14z15.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz14TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz14"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CLASS", "CLASS")
            tableMapping.ColumnMappings.Add("COUNTRY CODE", "COUNTRY CODE")
            tableMapping.ColumnMappings.Add("LANDKZ", "LANDKZ")
            tableMapping.ColumnMappings.Add("COUNTRY NAME", "COUNTRY NAME")
            tableMapping.ColumnMappings.Add("COUNTRY NAME DE", "COUNTRY NAME DE")
            tableMapping.ColumnMappings.Add("CountrySumAmount", "CountrySumAmount")
            tableMapping.ColumnMappings.Add("IdZ14Z15Meldemonat", "IdZ14Z15Meldemonat")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz14] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz14] ([CLASS], [COUNTRY CODE], [LANDKZ], [COUNTRY NAME], [COUNTRY"& _ 
                " NAME DE], [CountrySumAmount], [IdZ14Z15Meldemonat], [BETRAG_REF]) VALUES (@CLAS"& _ 
                "S, @COUNTRY_CODE, @LANDKZ, @COUNTRY_NAME, @COUNTRY_NAME_DE, @CountrySumAmount, @"& _ 
                "IdZ14Z15Meldemonat, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountrySumAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountrySumAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz14] SET [CLASS] = @CLASS, [COUNTRY CODE] = @COUNTRY_CODE, [LANDKZ] = "& _ 
                "@LANDKZ, [COUNTRY NAME] = @COUNTRY_NAME, [COUNTRY NAME DE] = @COUNTRY_NAME_DE, ["& _ 
                "CountrySumAmount] = @CountrySumAmount, [IdZ14Z15Meldemonat] = @IdZ14Z15Meldemona"& _ 
                "t, [BETRAG_REF] = @BETRAG_REF WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountrySumAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountrySumAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, CLASS, [COUNTRY CODE], LANDKZ, [COUNTRY NAME], [COUNTRY NAME DE"& _ 
                "], CountrySumAmount, IdZ14Z15Meldemonat, BETRAG_REF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz14"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BETRAG_REF, CLASS, [COUNTRY CODE], [COUNTRY NAME], [COUNTRY NAME DE], Coun"& _ 
                "trySumAmount, ID, IdZ14Z15Meldemonat, LANDKZ FROM AWVz14 WHERE (IdZ14Z15Meldemon"& _ 
                "at = @Param1) AND (CountrySumAmount <> 0) ORDER BY CountrySumAmount DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz14DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz14DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz14DataTable = New MeldewesenDataSet.AWVz14DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz14DataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz14DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz14DataTable = New MeldewesenDataSet.AWVz14DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz14DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz14")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Global.System.Nullable(Of Double), ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_CLASS,String)
            End If
            If (COUNTRY_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COUNTRY_CODE,String)
            End If
            If (LANDKZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LANDKZ,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (CountrySumAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CountrySumAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Global.System.Nullable(Of Double), ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(_CLASS,String)
            End If
            If (COUNTRY_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COUNTRY_CODE,String)
            End If
            If (LANDKZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LANDKZ,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (CountrySumAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CountrySumAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz1415RelevantDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz1415RelevantData"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Class", "Class")
            tableMapping.ColumnMappings.Add("Contract", "Contract")
            tableMapping.ColumnMappings.Add("Counterparty Name", "Counterparty Name")
            tableMapping.ColumnMappings.Add("Counterparty No", "Counterparty No")
            tableMapping.ColumnMappings.Add("CountryCode", "CountryCode")
            tableMapping.ColumnMappings.Add("Trade Date", "Trade Date")
            tableMapping.ColumnMappings.Add("Start Date", "Start Date")
            tableMapping.ColumnMappings.Add("Final Maturity Date", "Final Maturity Date")
            tableMapping.ColumnMappings.Add("Current Interest Coupon Period End Date", "Current Interest Coupon Period End Date")
            tableMapping.ColumnMappings.Add("Interest Coupon Amount EUR Equ", "Interest Coupon Amount EUR Equ")
            tableMapping.ColumnMappings.Add("AIARasof", "AIARasof")
            tableMapping.ColumnMappings.Add("AIARrepdate", "AIARrepdate")
            tableMapping.ColumnMappings.Add("CheckingDate", "CheckingDate")
            tableMapping.ColumnMappings.Add("Input", "Input")
            tableMapping.ColumnMappings.Add("IdZ14Z15Meldemonat", "IdZ14Z15Meldemonat")
            tableMapping.ColumnMappings.Add("InternalInfo", "InternalInfo")
            tableMapping.ColumnMappings.Add("OrigCCY", "OrigCCY")
            tableMapping.ColumnMappings.Add("Interest Coupon Amount OrigCCY", "Interest Coupon Amount OrigCCY")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz1415RelevantData] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz1415RelevantData] ([Class], [Contract], [Counterparty Name], [Co"& _ 
                "unterparty No], [CountryCode], [Trade Date], [Start Date], [Final Maturity Date]"& _ 
                ", [Current Interest Coupon Period End Date], [Interest Coupon Amount EUR Equ], ["& _ 
                "AIARasof], [AIARrepdate], [CheckingDate], [Input], [IdZ14Z15Meldemonat], [Intern"& _ 
                "alInfo], [OrigCCY], [Interest Coupon Amount OrigCCY], [ExchangeRate]) VALUES (@C"& _ 
                "lass, @Contract, @Counterparty_Name, @Counterparty_No, @CountryCode, @Trade_Date"& _ 
                ", @Start_Date, @Final_Maturity_Date, @Current_Interest_Coupon_Period_End_Date, @"& _ 
                "Interest_Coupon_Amount_EUR_Equ, @AIARasof, @AIARrepdate, @CheckingDate, @Input, "& _ 
                "@IdZ14Z15Meldemonat, @InternalInfo, @OrigCCY, @Interest_Coupon_Amount_OrigCCY, @"& _ 
                "ExchangeRate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Counterparty_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Counterparty_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Trade_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Trade Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIARasof", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIARasof", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIARrepdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIARrepdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InternalInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InternalInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrigCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrigCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_OrigCCY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount OrigCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz1415RelevantData] SET [Class] = @Class, [Contract] = @Contract, [Coun"& _ 
                "terparty Name] = @Counterparty_Name, [Counterparty No] = @Counterparty_No, [Coun"& _ 
                "tryCode] = @CountryCode, [Trade Date] = @Trade_Date, [Start Date] = @Start_Date,"& _ 
                " [Final Maturity Date] = @Final_Maturity_Date, [Current Interest Coupon Period E"& _ 
                "nd Date] = @Current_Interest_Coupon_Period_End_Date, [Interest Coupon Amount EUR"& _ 
                " Equ] = @Interest_Coupon_Amount_EUR_Equ, [AIARasof] = @AIARasof, [AIARrepdate] ="& _ 
                " @AIARrepdate, [CheckingDate] = @CheckingDate, [Input] = @Input, [IdZ14Z15Meldem"& _ 
                "onat] = @IdZ14Z15Meldemonat, [InternalInfo] = @InternalInfo, [OrigCCY] = @OrigCC"& _ 
                "Y, [Interest Coupon Amount OrigCCY] = @Interest_Coupon_Amount_OrigCCY, [Exchange"& _ 
                "Rate] = @ExchangeRate WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Counterparty_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Counterparty_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Trade_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Trade Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIARasof", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIARasof", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIARrepdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIARrepdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InternalInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InternalInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrigCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrigCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_OrigCCY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount OrigCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Class, Contract, [Counterparty Name], [Counterparty No], Countr"& _ 
                "yCode, [Trade Date], [Start Date], [Final Maturity Date], [Current Interest Coup"& _ 
                "on Period End Date], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Interest Coupon Amount EUR Equ]"& _ 
                ", AIARasof, AIARrepdate, CheckingDate, Input, IdZ14Z15Meldemonat, InternalInfo, "& _ 
                "OrigCCY, [Interest Coupon Amount OrigCCY], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ExchangeRa"& _ 
                "te"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz1415RelevantData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AIARasof, AIARrepdate, CheckingDate, Class, Contract, [Counterparty Name],"& _ 
                " [Counterparty No], CountryCode, [Current Interest Coupon Period End Date], Exch"& _ 
                "angeRate, [Final Maturity Date], ID, IdZ14Z15Meldemonat, Input, [Interest Coupon"& _ 
                " Amount EUR Equ], [Interest Coupon Amount OrigCCY], InternalInfo, OrigCCY, [Star"& _ 
                "t Date], [Trade Date] FROM AWVz1415RelevantData WHERE (IdZ14Z15Meldemonat = @Par"& _ 
                "am1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz1415RelevantDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz1415RelevantDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz1415RelevantDataDataTable = New MeldewesenDataSet.AWVz1415RelevantDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz1415RelevantDataDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz1415RelevantDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz1415RelevantDataDataTable = New MeldewesenDataSet.AWVz1415RelevantDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz1415RelevantDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz1415RelevantData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _Class As String,  _
                    ByVal Contract As String,  _
                    ByVal Counterparty_Name As String,  _
                    ByVal Counterparty_No As String,  _
                    ByVal CountryCode As String,  _
                    ByVal Trade_Date As Global.System.Nullable(Of Date),  _
                    ByVal Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal AIARasof As Global.System.Nullable(Of Date),  _
                    ByVal AIARrepdate As Global.System.Nullable(Of Date),  _
                    ByVal CheckingDate As Global.System.Nullable(Of Date),  _
                    ByVal Input As String,  _
                    ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date),  _
                    ByVal InternalInfo As String,  _
                    ByVal OrigCCY As String,  _
                    ByVal Interest_Coupon_Amount_OrigCCY As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double)) As Integer
            If (_Class Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_Class,String)
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Contract,String)
            End If
            If (Counterparty_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Counterparty_Name,String)
            End If
            If (Counterparty_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Counterparty_No,String)
            End If
            If (CountryCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CountryCode,String)
            End If
            If (Trade_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Trade_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AIARasof.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AIARasof.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (AIARrepdate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(AIARrepdate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CheckingDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CheckingDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Input Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Input,String)
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (InternalInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(InternalInfo,String)
            End If
            If (OrigCCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(OrigCCY,String)
            End If
            If (Interest_Coupon_Amount_OrigCCY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Interest_Coupon_Amount_OrigCCY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal _Class As String,  _
                    ByVal Contract As String,  _
                    ByVal Counterparty_Name As String,  _
                    ByVal Counterparty_No As String,  _
                    ByVal CountryCode As String,  _
                    ByVal Trade_Date As Global.System.Nullable(Of Date),  _
                    ByVal Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal AIARasof As Global.System.Nullable(Of Date),  _
                    ByVal AIARrepdate As Global.System.Nullable(Of Date),  _
                    ByVal CheckingDate As Global.System.Nullable(Of Date),  _
                    ByVal Input As String,  _
                    ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date),  _
                    ByVal InternalInfo As String,  _
                    ByVal OrigCCY As String,  _
                    ByVal Interest_Coupon_Amount_OrigCCY As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer) As Integer
            If (_Class Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(_Class,String)
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Contract,String)
            End If
            If (Counterparty_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Counterparty_Name,String)
            End If
            If (Counterparty_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Counterparty_No,String)
            End If
            If (CountryCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CountryCode,String)
            End If
            If (Trade_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Trade_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AIARasof.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AIARasof.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (AIARrepdate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(AIARrepdate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CheckingDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CheckingDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Input Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Input,String)
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (InternalInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(InternalInfo,String)
            End If
            If (OrigCCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(OrigCCY,String)
            End If
            If (Interest_Coupon_Amount_OrigCCY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Interest_Coupon_Amount_OrigCCY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz14z15TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz14z15"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Z14Z15MeldeMonat", "Z14Z15MeldeMonat")
            tableMapping.ColumnMappings.Add("Z14Z15MeldeMonatName", "Z14Z15MeldeMonatName")
            tableMapping.ColumnMappings.Add("USER", "USER")
            tableMapping.ColumnMappings.Add("IdBank", "IdBank")
            tableMapping.ColumnMappings.Add("ReportLocked", "ReportLocked")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz14z15] WHERE (([ID] = @Original_ID) AND ([Z14Z15MeldeMonat] = @O"& _ 
                "riginal_Z14Z15MeldeMonat) AND ((@IsNull_Z14Z15MeldeMonatName = 1 AND [Z14Z15Meld"& _ 
                "eMonatName] IS NULL) OR ([Z14Z15MeldeMonatName] = @Original_Z14Z15MeldeMonatName"& _ 
                ")) AND ((@IsNull_USER = 1 AND [USER] IS NULL) OR ([USER] = @Original_USER)) AND "& _ 
                "((@IsNull_IdBank = 1 AND [IdBank] IS NULL) OR ([IdBank] = @Original_IdBank)) AND"& _ 
                " ((@IsNull_ReportLocked = 1 AND [ReportLocked] IS NULL) OR ([ReportLocked] = @Or"& _ 
                "iginal_ReportLocked)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z14Z15MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportLocked", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz14z15] ([Z14Z15MeldeMonat], [Z14Z15MeldeMonatName], [USER], [IdB"& _ 
                "ank], [ReportLocked]) VALUES (@Z14Z15MeldeMonat, @Z14Z15MeldeMonatName, @USER, @"& _ 
                "IdBank, @ReportLocked)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z14Z15MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz14z15] SET [Z14Z15MeldeMonat] = @Z14Z15MeldeMonat, [Z14Z15MeldeMonatN"& _ 
                "ame] = @Z14Z15MeldeMonatName, [USER] = @USER, [IdBank] = @IdBank, [ReportLocked]"& _ 
                " = @ReportLocked WHERE (([ID] = @Original_ID) AND ([Z14Z15MeldeMonat] = @Origina"& _ 
                "l_Z14Z15MeldeMonat) AND ((@IsNull_Z14Z15MeldeMonatName = 1 AND [Z14Z15MeldeMonat"& _ 
                "Name] IS NULL) OR ([Z14Z15MeldeMonatName] = @Original_Z14Z15MeldeMonatName)) AND"& _ 
                " ((@IsNull_USER = 1 AND [USER] IS NULL) OR ([USER] = @Original_USER)) AND ((@IsN"& _ 
                "ull_IdBank = 1 AND [IdBank] IS NULL) OR ([IdBank] = @Original_IdBank)) AND ((@Is"& _ 
                "Null_ReportLocked = 1 AND [ReportLocked] IS NULL) OR ([ReportLocked] = @Original"& _ 
                "_ReportLocked)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z14Z15MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z14Z15MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z14Z15MeldeMonatName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonatName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportLocked", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Z14Z15MeldeMonat, Z14Z15MeldeMonatName, [USER], IdBank, ReportL"& _ 
                "ocked"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz14z15"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, IdBank, ReportLocked, [USER], Z14Z15MeldeMonat, Z14Z15MeldeMonatName F"& _ 
                "ROM AWVz14z15 WHERE (Z14Z15MeldeMonat = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Z14Z15MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz14z15DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz14z15DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz14z15DataTable = New MeldewesenDataSet.AWVz14z15DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz14z15DataTable, ByVal Param1 As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Date) As MeldewesenDataSet.AWVz14z15DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,Date)
            Dim dataTable As MeldewesenDataSet.AWVz14z15DataTable = New MeldewesenDataSet.AWVz14z15DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz14z15DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz14z15")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Z14Z15MeldeMonat As Date, ByVal Original_Z14Z15MeldeMonatName As String, ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer), ByVal Original_ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Z14Z15MeldeMonat,Date)
            If (Original_Z14Z15MeldeMonatName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Z14Z15MeldeMonatName,String)
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_USER,String)
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportLocked.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ReportLocked.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Z14Z15MeldeMonat As Date, ByVal Z14Z15MeldeMonatName As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Z14Z15MeldeMonat,Date)
            If (Z14Z15MeldeMonatName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Z14Z15MeldeMonatName,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USER,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ReportLocked.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ReportLocked.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Z14Z15MeldeMonat As Date, ByVal Z14Z15MeldeMonatName As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal ReportLocked As Global.System.Nullable(Of Boolean), ByVal Original_ID As Integer, ByVal Original_Z14Z15MeldeMonat As Date, ByVal Original_Z14Z15MeldeMonatName As String, ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer), ByVal Original_ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Z14Z15MeldeMonat,Date)
            If (Z14Z15MeldeMonatName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Z14Z15MeldeMonatName,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USER,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ReportLocked.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ReportLocked.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Z14Z15MeldeMonat,Date)
            If (Original_Z14Z15MeldeMonatName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Z14Z15MeldeMonatName,String)
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_USER,String)
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportLocked.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ReportLocked.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Z14Z15MeldeMonatName As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal ReportLocked As Global.System.Nullable(Of Boolean), ByVal Original_ID As Integer, ByVal Original_Z14Z15MeldeMonat As Date, ByVal Original_Z14Z15MeldeMonatName As String, ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer), ByVal Original_ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_Z14Z15MeldeMonat, Z14Z15MeldeMonatName, USER, IdBank, ReportLocked, Original_ID, Original_Z14Z15MeldeMonat, Original_Z14Z15MeldeMonatName, Original_USER, Original_IdBank, Original_ReportLocked)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz15TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz15"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CLASS", "CLASS")
            tableMapping.ColumnMappings.Add("COUNTRY CODE", "COUNTRY CODE")
            tableMapping.ColumnMappings.Add("LANDKZ", "LANDKZ")
            tableMapping.ColumnMappings.Add("COUNTRY NAME", "COUNTRY NAME")
            tableMapping.ColumnMappings.Add("COUNTRY NAME DE", "COUNTRY NAME DE")
            tableMapping.ColumnMappings.Add("CountrySumAmount", "CountrySumAmount")
            tableMapping.ColumnMappings.Add("IdZ14Z15Meldemonat", "IdZ14Z15Meldemonat")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz15] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz15] ([CLASS], [COUNTRY CODE], [LANDKZ], [COUNTRY NAME], [COUNTRY"& _ 
                " NAME DE], [CountrySumAmount], [IdZ14Z15Meldemonat], [BETRAG_REF]) VALUES (@CLAS"& _ 
                "S, @COUNTRY_CODE, @LANDKZ, @COUNTRY_NAME, @COUNTRY_NAME_DE, @CountrySumAmount, @"& _ 
                "IdZ14Z15Meldemonat, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountrySumAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountrySumAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz15] SET [CLASS] = @CLASS, [COUNTRY CODE] = @COUNTRY_CODE, [LANDKZ] = "& _ 
                "@LANDKZ, [COUNTRY NAME] = @COUNTRY_NAME, [COUNTRY NAME DE] = @COUNTRY_NAME_DE, ["& _ 
                "CountrySumAmount] = @CountrySumAmount, [IdZ14Z15Meldemonat] = @IdZ14Z15Meldemona"& _ 
                "t, [BETRAG_REF] = @BETRAG_REF WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountrySumAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountrySumAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZ14Z15Meldemonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, CLASS, [COUNTRY CODE], LANDKZ, [COUNTRY NAME], [COUNTRY NAME DE"& _ 
                "], CountrySumAmount, IdZ14Z15Meldemonat, BETRAG_REF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz15"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BETRAG_REF, CLASS, [COUNTRY CODE], [COUNTRY NAME], [COUNTRY NAME DE], Coun"& _ 
                "trySumAmount, ID, IdZ14Z15Meldemonat, LANDKZ FROM AWVz15 WHERE (IdZ14Z15Meldemon"& _ 
                "at = @Param1) AND (CountrySumAmount <> 0) ORDER BY CountrySumAmount DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZ14Z15Meldemonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz15DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz15DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz15DataTable = New MeldewesenDataSet.AWVz15DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz15DataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz15DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz15DataTable = New MeldewesenDataSet.AWVz15DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz15DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz15")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Global.System.Nullable(Of Double), ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_CLASS,String)
            End If
            If (COUNTRY_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COUNTRY_CODE,String)
            End If
            If (LANDKZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LANDKZ,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (CountrySumAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CountrySumAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal _CLASS As String, ByVal COUNTRY_CODE As String, ByVal LANDKZ As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal CountrySumAmount As Global.System.Nullable(Of Double), ByVal IdZ14Z15Meldemonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(_CLASS,String)
            End If
            If (COUNTRY_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COUNTRY_CODE,String)
            End If
            If (LANDKZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LANDKZ,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (CountrySumAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CountrySumAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IdZ14Z15Meldemonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IdZ14Z15Meldemonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz4DIKAPPOSTENTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz4DIKAPPOSTEN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DIKA_BELEGART", "DIKA_BELEGART")
            tableMapping.ColumnMappings.Add("DIKA_KENNZAHL", "DIKA_KENNZAHL")
            tableMapping.ColumnMappings.Add("DIKA_ZAHLUNGSZWECK", "DIKA_ZAHLUNGSZWECK")
            tableMapping.ColumnMappings.Add("DIKA_ISOLAND", "DIKA_ISOLAND")
            tableMapping.ColumnMappings.Add("DIKA_ISOLAND_NAME", "DIKA_ISOLAND_NAME")
            tableMapping.ColumnMappings.Add("DIKA_VERRKZ", "DIKA_VERRKZ")
            tableMapping.ColumnMappings.Add("DIKA_BETRAG", "DIKA_BETRAG")
            tableMapping.ColumnMappings.Add("DIKA_MeldeMonat", "DIKA_MeldeMonat")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz4DIKAPPOSTEN] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz4DIKAPPOSTEN] ([DIKA_BELEGART], [DIKA_KENNZAHL], [DIKA_ZAHLUNGSZ"& _ 
                "WECK], [DIKA_ISOLAND], [DIKA_ISOLAND_NAME], [DIKA_VERRKZ], [DIKA_BETRAG], [DIKA_"& _ 
                "MeldeMonat], [BETRAG_REF]) VALUES (@DIKA_BELEGART, @DIKA_KENNZAHL, @DIKA_ZAHLUNG"& _ 
                "SZWECK, @DIKA_ISOLAND, @DIKA_ISOLAND_NAME, @DIKA_VERRKZ, @DIKA_BETRAG, @DIKA_Mel"& _ 
                "deMonat, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ZAHLUNGSZWECK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ZAHLUNGSZWECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz4DIKAPPOSTEN] SET [DIKA_BELEGART] = @DIKA_BELEGART, [DIKA_KENNZAHL] ="& _ 
                " @DIKA_KENNZAHL, [DIKA_ZAHLUNGSZWECK] = @DIKA_ZAHLUNGSZWECK, [DIKA_ISOLAND] = @D"& _ 
                "IKA_ISOLAND, [DIKA_ISOLAND_NAME] = @DIKA_ISOLAND_NAME, [DIKA_VERRKZ] = @DIKA_VER"& _ 
                "RKZ, [DIKA_BETRAG] = @DIKA_BETRAG, [DIKA_MeldeMonat] = @DIKA_MeldeMonat, [BETRAG"& _ 
                "_REF] = @BETRAG_REF WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ZAHLUNGSZWECK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ZAHLUNGSZWECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIKA_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, DIKA_BELEGART, DIKA_KENNZAHL, DIKA_ZAHLUNGSZWECK, DIKA_ISOLAND,"& _ 
                " DIKA_ISOLAND_NAME, DIKA_VERRKZ, DIKA_BETRAG, DIKA_MeldeMonat, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          BETRAG_REF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AWVz4DIKAPPOSTEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BETRAG_REF, DIKA_BELEGART, DIKA_BETRAG, DIKA_ISOLAND, DIKA_ISOLAND_NAME, D"& _ 
                "IKA_KENNZAHL, DIKA_MeldeMonat, DIKA_VERRKZ, DIKA_ZAHLUNGSZWECK, ID FROM AWVz4DIK"& _ 
                "APPOSTEN WHERE (DIKA_MeldeMonat = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DIKA_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable = New MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable = New MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz4DIKAPPOSTENDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz4DIKAPPOSTEN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DIKA_BELEGART As String, ByVal DIKA_KENNZAHL As String, ByVal DIKA_ZAHLUNGSZWECK As String, ByVal DIKA_ISOLAND As String, ByVal DIKA_ISOLAND_NAME As String, ByVal DIKA_VERRKZ As String, ByVal DIKA_BETRAG As Global.System.Nullable(Of Double), ByVal DIKA_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (DIKA_BELEGART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DIKA_BELEGART,String)
            End If
            If (DIKA_KENNZAHL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DIKA_KENNZAHL,String)
            End If
            If (DIKA_ZAHLUNGSZWECK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DIKA_ZAHLUNGSZWECK,String)
            End If
            If (DIKA_ISOLAND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DIKA_ISOLAND,String)
            End If
            If (DIKA_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DIKA_ISOLAND_NAME,String)
            End If
            If (DIKA_VERRKZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIKA_VERRKZ,String)
            End If
            If (DIKA_BETRAG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DIKA_BETRAG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DIKA_MeldeMonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DIKA_MeldeMonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DIKA_BELEGART As String, ByVal DIKA_KENNZAHL As String, ByVal DIKA_ZAHLUNGSZWECK As String, ByVal DIKA_ISOLAND As String, ByVal DIKA_ISOLAND_NAME As String, ByVal DIKA_VERRKZ As String, ByVal DIKA_BETRAG As Global.System.Nullable(Of Double), ByVal DIKA_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (DIKA_BELEGART Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DIKA_BELEGART,String)
            End If
            If (DIKA_KENNZAHL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DIKA_KENNZAHL,String)
            End If
            If (DIKA_ZAHLUNGSZWECK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DIKA_ZAHLUNGSZWECK,String)
            End If
            If (DIKA_ISOLAND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DIKA_ISOLAND,String)
            End If
            If (DIKA_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DIKA_ISOLAND_NAME,String)
            End If
            If (DIKA_VERRKZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIKA_VERRKZ,String)
            End If
            If (DIKA_BETRAG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DIKA_BETRAG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DIKA_MeldeMonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DIKA_MeldeMonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz4DIRINVPOSTENTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz4DIRINVPOSTEN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DIRINV_BELEGART", "DIRINV_BELEGART")
            tableMapping.ColumnMappings.Add("DIRINV_KENNZAHL", "DIRINV_KENNZAHL")
            tableMapping.ColumnMappings.Add("DIRINV_ISIN", "DIRINV_ISIN")
            tableMapping.ColumnMappings.Add("DIRINV_BEZEICHNUNG", "DIRINV_BEZEICHNUNG")
            tableMapping.ColumnMappings.Add("DIRINV_STUECK", "DIRINV_STUECK")
            tableMapping.ColumnMappings.Add("DIRINV_ISOLAND", "DIRINV_ISOLAND")
            tableMapping.ColumnMappings.Add("DIRINV_ISOLAND_NAME", "DIRINV_ISOLAND_NAME")
            tableMapping.ColumnMappings.Add("DIRINV_VERRKZ", "DIRINV_VERRKZ")
            tableMapping.ColumnMappings.Add("DIRINV_BETRAG", "DIRINV_BETRAG")
            tableMapping.ColumnMappings.Add("DIRINV_MeldeMonat", "DIRINV_MeldeMonat")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz4DIRINVPOSTEN] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz4DIRINVPOSTEN] ([DIRINV_BELEGART], [DIRINV_KENNZAHL], [DIRINV_IS"& _ 
                "IN], [DIRINV_BEZEICHNUNG], [DIRINV_STUECK], [DIRINV_ISOLAND], [DIRINV_ISOLAND_NA"& _ 
                "ME], [DIRINV_VERRKZ], [DIRINV_BETRAG], [DIRINV_MeldeMonat], [BETRAG_REF]) VALUES"& _ 
                " (@DIRINV_BELEGART, @DIRINV_KENNZAHL, @DIRINV_ISIN, @DIRINV_BEZEICHNUNG, @DIRINV"& _ 
                "_STUECK, @DIRINV_ISOLAND, @DIRINV_ISOLAND_NAME, @DIRINV_VERRKZ, @DIRINV_BETRAG, "& _ 
                "@DIRINV_MeldeMonat, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_STUECK", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_STUECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz4DIRINVPOSTEN] SET [DIRINV_BELEGART] = @DIRINV_BELEGART, [DIRINV_KENN"& _ 
                "ZAHL] = @DIRINV_KENNZAHL, [DIRINV_ISIN] = @DIRINV_ISIN, [DIRINV_BEZEICHNUNG] = @"& _ 
                "DIRINV_BEZEICHNUNG, [DIRINV_STUECK] = @DIRINV_STUECK, [DIRINV_ISOLAND] = @DIRINV"& _ 
                "_ISOLAND, [DIRINV_ISOLAND_NAME] = @DIRINV_ISOLAND_NAME, [DIRINV_VERRKZ] = @DIRIN"& _ 
                "V_VERRKZ, [DIRINV_BETRAG] = @DIRINV_BETRAG, [DIRINV_MeldeMonat] = @DIRINV_MeldeM"& _ 
                "onat, [BETRAG_REF] = @BETRAG_REF WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_STUECK", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_STUECK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRINV_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, DIRINV_BELEGART, DIRINV_KENNZAHL, DIRINV_ISIN, DIRINV_BEZEICHNU"& _ 
                "NG, DIRINV_STUECK, DIRINV_ISOLAND, DIRINV_ISOLAND_NAME, DIRINV_VERRKZ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                  DIRINV_BETRAG, DIRINV_MeldeMonat, BETRAG_REF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            "& _ 
                "AWVz4DIRINVPOSTEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BETRAG_REF, DIRINV_BELEGART, DIRINV_BETRAG, DIRINV_BEZEICHNUNG, DIRINV_ISI"& _ 
                "N, DIRINV_ISOLAND, DIRINV_ISOLAND_NAME, DIRINV_KENNZAHL, DIRINV_MeldeMonat, DIRI"& _ 
                "NV_STUECK, DIRINV_VERRKZ, ID FROM AWVz4DIRINVPOSTEN WHERE (DIRINV_MeldeMonat = @"& _ 
                "Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRINV_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable = New MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable = New MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz4DIRINVPOSTENDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz4DIRINVPOSTEN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DIRINV_BELEGART As String, ByVal DIRINV_KENNZAHL As String, ByVal DIRINV_ISIN As String, ByVal DIRINV_BEZEICHNUNG As String, ByVal DIRINV_STUECK As Global.System.Nullable(Of Double), ByVal DIRINV_ISOLAND As String, ByVal DIRINV_ISOLAND_NAME As String, ByVal DIRINV_VERRKZ As String, ByVal DIRINV_BETRAG As Global.System.Nullable(Of Double), ByVal DIRINV_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (DIRINV_BELEGART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DIRINV_BELEGART,String)
            End If
            If (DIRINV_KENNZAHL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DIRINV_KENNZAHL,String)
            End If
            If (DIRINV_ISIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DIRINV_ISIN,String)
            End If
            If (DIRINV_BEZEICHNUNG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DIRINV_BEZEICHNUNG,String)
            End If
            If (DIRINV_STUECK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DIRINV_STUECK.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DIRINV_ISOLAND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIRINV_ISOLAND,String)
            End If
            If (DIRINV_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DIRINV_ISOLAND_NAME,String)
            End If
            If (DIRINV_VERRKZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DIRINV_VERRKZ,String)
            End If
            If (DIRINV_BETRAG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DIRINV_BETRAG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DIRINV_MeldeMonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DIRINV_MeldeMonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DIRINV_BELEGART As String, ByVal DIRINV_KENNZAHL As String, ByVal DIRINV_ISIN As String, ByVal DIRINV_BEZEICHNUNG As String, ByVal DIRINV_STUECK As Global.System.Nullable(Of Double), ByVal DIRINV_ISOLAND As String, ByVal DIRINV_ISOLAND_NAME As String, ByVal DIRINV_VERRKZ As String, ByVal DIRINV_BETRAG As Global.System.Nullable(Of Double), ByVal DIRINV_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (DIRINV_BELEGART Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DIRINV_BELEGART,String)
            End If
            If (DIRINV_KENNZAHL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DIRINV_KENNZAHL,String)
            End If
            If (DIRINV_ISIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DIRINV_ISIN,String)
            End If
            If (DIRINV_BEZEICHNUNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DIRINV_BEZEICHNUNG,String)
            End If
            If (DIRINV_STUECK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DIRINV_STUECK.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DIRINV_ISOLAND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIRINV_ISOLAND,String)
            End If
            If (DIRINV_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DIRINV_ISOLAND_NAME,String)
            End If
            If (DIRINV_VERRKZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DIRINV_VERRKZ,String)
            End If
            If (DIRINV_BETRAG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DIRINV_BETRAG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DIRINV_MeldeMonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DIRINV_MeldeMonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz4TRANSITPOSTENTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz4TRANSITPOSTEN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("TRANSIT_BELEGART", "TRANSIT_BELEGART")
            tableMapping.ColumnMappings.Add("TRANSIT_KENNZAHL", "TRANSIT_KENNZAHL")
            tableMapping.ColumnMappings.Add("TRANSIT_WARENCODE", "TRANSIT_WARENCODE")
            tableMapping.ColumnMappings.Add("TRANSIT_WARENBEZEICHNUNG", "TRANSIT_WARENBEZEICHNUNG")
            tableMapping.ColumnMappings.Add("TRANSIT_ISOLAND", "TRANSIT_ISOLAND")
            tableMapping.ColumnMappings.Add("TRANSIT_ISOLAND_NAME", "TRANSIT_ISOLAND_NAME")
            tableMapping.ColumnMappings.Add("TRANSIT_VERRKZ", "TRANSIT_VERRKZ")
            tableMapping.ColumnMappings.Add("TRANSIT_BETRAG", "TRANSIT_BETRAG")
            tableMapping.ColumnMappings.Add("TRANSIT_MeldeMonat", "TRANSIT_MeldeMonat")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AWVz4TRANSITPOSTEN] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AWVz4TRANSITPOSTEN] ([TRANSIT_BELEGART], [TRANSIT_KENNZAHL], [TRANSI"& _ 
                "T_WARENCODE], [TRANSIT_WARENBEZEICHNUNG], [TRANSIT_ISOLAND], [TRANSIT_ISOLAND_NA"& _ 
                "ME], [TRANSIT_VERRKZ], [TRANSIT_BETRAG], [TRANSIT_MeldeMonat], [BETRAG_REF]) VAL"& _ 
                "UES (@TRANSIT_BELEGART, @TRANSIT_KENNZAHL, @TRANSIT_WARENCODE, @TRANSIT_WARENBEZ"& _ 
                "EICHNUNG, @TRANSIT_ISOLAND, @TRANSIT_ISOLAND_NAME, @TRANSIT_VERRKZ, @TRANSIT_BET"& _ 
                "RAG, @TRANSIT_MeldeMonat, @BETRAG_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_WARENCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_WARENCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_WARENBEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_WARENBEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AWVz4TRANSITPOSTEN] SET [TRANSIT_BELEGART] = @TRANSIT_BELEGART, [TRANSIT_"& _ 
                "KENNZAHL] = @TRANSIT_KENNZAHL, [TRANSIT_WARENCODE] = @TRANSIT_WARENCODE, [TRANSI"& _ 
                "T_WARENBEZEICHNUNG] = @TRANSIT_WARENBEZEICHNUNG, [TRANSIT_ISOLAND] = @TRANSIT_IS"& _ 
                "OLAND, [TRANSIT_ISOLAND_NAME] = @TRANSIT_ISOLAND_NAME, [TRANSIT_VERRKZ] = @TRANS"& _ 
                "IT_VERRKZ, [TRANSIT_BETRAG] = @TRANSIT_BETRAG, [TRANSIT_MeldeMonat] = @TRANSIT_M"& _ 
                "eldeMonat, [BETRAG_REF] = @BETRAG_REF WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_WARENCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_WARENCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_WARENBEZEICHNUNG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_WARENBEZEICHNUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_ISOLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_ISOLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_ISOLAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_ISOLAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_VERRKZ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_VERRKZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSIT_MeldeMonat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, TRANSIT_BELEGART, TRANSIT_KENNZAHL, TRANSIT_WARENCODE, TRANSIT_"& _ 
                "WARENBEZEICHNUNG, TRANSIT_ISOLAND, TRANSIT_ISOLAND_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    TRANSIT_VERRKZ, TRANSIT_BETRAG, TRANSIT_MeldeMonat, BETRAG_REF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    AWVz4TRANSITPOSTEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BETRAG_REF, ID, TRANSIT_BELEGART, TRANSIT_BETRAG, TRANSIT_ISOLAND, TRANSIT"& _ 
                "_ISOLAND_NAME, TRANSIT_KENNZAHL, TRANSIT_MeldeMonat, TRANSIT_VERRKZ, TRANSIT_WAR"& _ 
                "ENBEZEICHNUNG, TRANSIT_WARENCODE FROM AWVz4TRANSITPOSTEN WHERE (TRANSIT_MeldeMon"& _ 
                "at = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSIT_MeldeMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable = New MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable = New MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz4TRANSITPOSTENDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz4TRANSITPOSTEN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRANSIT_BELEGART As String, ByVal TRANSIT_KENNZAHL As String, ByVal TRANSIT_WARENCODE As String, ByVal TRANSIT_WARENBEZEICHNUNG As String, ByVal TRANSIT_ISOLAND As String, ByVal TRANSIT_ISOLAND_NAME As String, ByVal TRANSIT_VERRKZ As String, ByVal TRANSIT_BETRAG As Global.System.Nullable(Of Double), ByVal TRANSIT_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String) As Integer
            If (TRANSIT_BELEGART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRANSIT_BELEGART,String)
            End If
            If (TRANSIT_KENNZAHL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRANSIT_KENNZAHL,String)
            End If
            If (TRANSIT_WARENCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TRANSIT_WARENCODE,String)
            End If
            If (TRANSIT_WARENBEZEICHNUNG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANSIT_WARENBEZEICHNUNG,String)
            End If
            If (TRANSIT_ISOLAND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRANSIT_ISOLAND,String)
            End If
            If (TRANSIT_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRANSIT_ISOLAND_NAME,String)
            End If
            If (TRANSIT_VERRKZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRANSIT_VERRKZ,String)
            End If
            If (TRANSIT_BETRAG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TRANSIT_BETRAG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TRANSIT_MeldeMonat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TRANSIT_MeldeMonat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(BETRAG_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TRANSIT_BELEGART As String, ByVal TRANSIT_KENNZAHL As String, ByVal TRANSIT_WARENCODE As String, ByVal TRANSIT_WARENBEZEICHNUNG As String, ByVal TRANSIT_ISOLAND As String, ByVal TRANSIT_ISOLAND_NAME As String, ByVal TRANSIT_VERRKZ As String, ByVal TRANSIT_BETRAG As Global.System.Nullable(Of Double), ByVal TRANSIT_MeldeMonat As Global.System.Nullable(Of Date), ByVal BETRAG_REF As String, ByVal Original_ID As Integer) As Integer
            If (TRANSIT_BELEGART Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRANSIT_BELEGART,String)
            End If
            If (TRANSIT_KENNZAHL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRANSIT_KENNZAHL,String)
            End If
            If (TRANSIT_WARENCODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TRANSIT_WARENCODE,String)
            End If
            If (TRANSIT_WARENBEZEICHNUNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRANSIT_WARENBEZEICHNUNG,String)
            End If
            If (TRANSIT_ISOLAND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRANSIT_ISOLAND,String)
            End If
            If (TRANSIT_ISOLAND_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRANSIT_ISOLAND_NAME,String)
            End If
            If (TRANSIT_VERRKZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRANSIT_VERRKZ,String)
            End If
            If (TRANSIT_BETRAG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TRANSIT_BETRAG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TRANSIT_MeldeMonat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TRANSIT_MeldeMonat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(BETRAG_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BANKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BANK"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Name Bank", "Name Bank")
            tableMapping.ColumnMappings.Add("Branch Bank", "Branch Bank")
            tableMapping.ColumnMappings.Add("Strasse Bank", "Strasse Bank")
            tableMapping.ColumnMappings.Add("PLZ Bank", "PLZ Bank")
            tableMapping.ColumnMappings.Add("Ort Bank", "Ort Bank")
            tableMapping.ColumnMappings.Add("Land Bank", "Land Bank")
            tableMapping.ColumnMappings.Add("BANK LOGO", "BANK LOGO")
            tableMapping.ColumnMappings.Add("SteuerNr", "SteuerNr")
            tableMapping.ColumnMappings.Add("UstID", "UstID")
            tableMapping.ColumnMappings.Add("E-Mail Bank", "E-Mail Bank")
            tableMapping.ColumnMappings.Add("Website Bank", "Website Bank")
            tableMapping.ColumnMappings.Add("Tel Bank", "Tel Bank")
            tableMapping.ColumnMappings.Add("Fax Bank", "Fax Bank")
            tableMapping.ColumnMappings.Add("BIC Bank", "BIC Bank")
            tableMapping.ColumnMappings.Add("BLZ Bank", "BLZ Bank")
            tableMapping.ColumnMappings.Add("TELEX Bank", "TELEX Bank")
            tableMapping.ColumnMappings.Add("HRB", "HRB")
            tableMapping.ColumnMappings.Add("SEPA Creditor ID", "SEPA Creditor ID")
            tableMapping.ColumnMappings.Add("Formular Rechts DE", "Formular Rechts DE")
            tableMapping.ColumnMappings.Add("Formular Rechts GB", "Formular Rechts GB")
            tableMapping.ColumnMappings.Add("Formular Rechts GR", "Formular Rechts GR")
            tableMapping.ColumnMappings.Add("Formular Links DE", "Formular Links DE")
            tableMapping.ColumnMappings.Add("Formular Links GB", "Formular Links GB")
            tableMapping.ColumnMappings.Add("Formular Links GR", "Formular Links GR")
            tableMapping.ColumnMappings.Add("UNTER BEARBEITUNG VON", "UNTER BEARBEITUNG VON")
            tableMapping.ColumnMappings.Add("USER", "USER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BANK] WHERE (([ID] = @Original_ID) AND ([Name Bank] = @Original_Name"& _ 
                "_Bank) AND ([Branch Bank] = @Original_Branch_Bank) AND ([Strasse Bank] = @Origin"& _ 
                "al_Strasse_Bank) AND ([PLZ Bank] = @Original_PLZ_Bank) AND ([Ort Bank] = @Origin"& _ 
                "al_Ort_Bank) AND ([Land Bank] = @Original_Land_Bank) AND ((@IsNull_SteuerNr = 1 "& _ 
                "AND [SteuerNr] IS NULL) OR ([SteuerNr] = @Original_SteuerNr)) AND ((@IsNull_UstI"& _ 
                "D = 1 AND [UstID] IS NULL) OR ([UstID] = @Original_UstID)) AND ((@p3 = 1 AND [E-"& _ 
                "Mail Bank] IS NULL) OR ([E-Mail Bank] = @p2)) AND ((@IsNull_Website_Bank = 1 AND"& _ 
                " [Website Bank] IS NULL) OR ([Website Bank] = @Original_Website_Bank)) AND ((@Is"& _ 
                "Null_Tel_Bank = 1 AND [Tel Bank] IS NULL) OR ([Tel Bank] = @Original_Tel_Bank)) "& _ 
                "AND ((@IsNull_Fax_Bank = 1 AND [Fax Bank] IS NULL) OR ([Fax Bank] = @Original_Fa"& _ 
                "x_Bank)) AND ([BIC Bank] = @Original_BIC_Bank) AND ((@IsNull_BLZ_Bank = 1 AND [B"& _ 
                "LZ Bank] IS NULL) OR ([BLZ Bank] = @Original_BLZ_Bank)) AND ((@IsNull_TELEX_Bank"& _ 
                " = 1 AND [TELEX Bank] IS NULL) OR ([TELEX Bank] = @Original_TELEX_Bank)) AND ((@"& _ 
                "IsNull_HRB = 1 AND [HRB] IS NULL) OR ([HRB] = @Original_HRB)) AND ((@IsNull_SEPA"& _ 
                "_Creditor_ID = 1 AND [SEPA Creditor ID] IS NULL) OR ([SEPA Creditor ID] = @Origi"& _ 
                "nal_SEPA_Creditor_ID)) AND ((@IsNull_UNTER_BEARBEITUNG_VON = 1 AND [UNTER BEARBE"& _ 
                "ITUNG VON] IS NULL) OR ([UNTER BEARBEITUNG VON] = @Original_UNTER_BEARBEITUNG_VO"& _ 
                "N)) AND ((@IsNull_USER = 1 AND [USER] IS NULL) OR ([USER] = @Original_USER)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Branch_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Branch Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Strasse_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Strasse Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLZ Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ort_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ort Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Land_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Land Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SteuerNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SteuerNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UstID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Website_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Website_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tel_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tel_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fax_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fax_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BIC_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIC Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLZ_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TELEX_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TELEX_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HRB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HRB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEPA_Creditor_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEPA_Creditor_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BANK] ([Name Bank], [Branch Bank], [Strasse Bank], [PLZ Bank], [Ort "& _ 
                "Bank], [Land Bank], [BANK LOGO], [SteuerNr], [UstID], [E-Mail Bank], [Website Ba"& _ 
                "nk], [Tel Bank], [Fax Bank], [BIC Bank], [BLZ Bank], [TELEX Bank], [HRB], [SEPA "& _ 
                "Creditor ID], [Formular Rechts DE], [Formular Rechts GB], [Formular Rechts GR], "& _ 
                "[Formular Links DE], [Formular Links GB], [Formular Links GR], [UNTER BEARBEITUN"& _ 
                "G VON], [USER]) VALUES (@Name_Bank, @Branch_Bank, @Strasse_Bank, @PLZ_Bank, @Ort"& _ 
                "_Bank, @Land_Bank, @BANK_LOGO, @SteuerNr, @UstID, @p1, @Website_Bank, @Tel_Bank,"& _ 
                " @Fax_Bank, @BIC_Bank, @BLZ_Bank, @TELEX_Bank, @HRB, @SEPA_Creditor_ID, @Formula"& _ 
                "r_Rechts_DE, @Formular_Rechts_GB, @Formular_Rechts_GR, @Formular_Links_DE, @Form"& _ 
                "ular_Links_GB, @Formular_Links_GR, @UNTER_BEARBEITUNG_VON, @USER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Branch_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Branch Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Strasse_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Strasse Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLZ Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ort_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ort Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Land_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Land Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_LOGO", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK LOGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SteuerNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UstID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Website_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fax_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BIC_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIC Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEX_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HRB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEPA_Creditor_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_DE", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_GB", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts GB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_GR", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts GR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_DE", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_GB", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links GB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_GR", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links GR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BANK] SET [Name Bank] = @Name_Bank, [Branch Bank] = @Branch_Bank, [Strass"& _ 
                "e Bank] = @Strasse_Bank, [PLZ Bank] = @PLZ_Bank, [Ort Bank] = @Ort_Bank, [Land B"& _ 
                "ank] = @Land_Bank, [BANK LOGO] = @BANK_LOGO, [SteuerNr] = @SteuerNr, [UstID] = @"& _ 
                "UstID, [E-Mail Bank] = @p1, [Website Bank] = @Website_Bank, [Tel Bank] = @Tel_Ba"& _ 
                "nk, [Fax Bank] = @Fax_Bank, [BIC Bank] = @BIC_Bank, [BLZ Bank] = @BLZ_Bank, [TEL"& _ 
                "EX Bank] = @TELEX_Bank, [HRB] = @HRB, [SEPA Creditor ID] = @SEPA_Creditor_ID, [F"& _ 
                "ormular Rechts DE] = @Formular_Rechts_DE, [Formular Rechts GB] = @Formular_Recht"& _ 
                "s_GB, [Formular Rechts GR] = @Formular_Rechts_GR, [Formular Links DE] = @Formula"& _ 
                "r_Links_DE, [Formular Links GB] = @Formular_Links_GB, [Formular Links GR] = @For"& _ 
                "mular_Links_GR, [UNTER BEARBEITUNG VON] = @UNTER_BEARBEITUNG_VON, [USER] = @USER"& _ 
                " WHERE (([ID] = @Original_ID) AND ([Name Bank] = @Original_Name_Bank) AND ([Bran"& _ 
                "ch Bank] = @Original_Branch_Bank) AND ([Strasse Bank] = @Original_Strasse_Bank) "& _ 
                "AND ([PLZ Bank] = @Original_PLZ_Bank) AND ([Ort Bank] = @Original_Ort_Bank) AND "& _ 
                "([Land Bank] = @Original_Land_Bank) AND ((@IsNull_SteuerNr = 1 AND [SteuerNr] IS"& _ 
                " NULL) OR ([SteuerNr] = @Original_SteuerNr)) AND ((@IsNull_UstID = 1 AND [UstID]"& _ 
                " IS NULL) OR ([UstID] = @Original_UstID)) AND ((@p3 = 1 AND [E-Mail Bank] IS NUL"& _ 
                "L) OR ([E-Mail Bank] = @p2)) AND ((@IsNull_Website_Bank = 1 AND [Website Bank] I"& _ 
                "S NULL) OR ([Website Bank] = @Original_Website_Bank)) AND ((@IsNull_Tel_Bank = 1"& _ 
                " AND [Tel Bank] IS NULL) OR ([Tel Bank] = @Original_Tel_Bank)) AND ((@IsNull_Fax"& _ 
                "_Bank = 1 AND [Fax Bank] IS NULL) OR ([Fax Bank] = @Original_Fax_Bank)) AND ([BI"& _ 
                "C Bank] = @Original_BIC_Bank) AND ((@IsNull_BLZ_Bank = 1 AND [BLZ Bank] IS NULL)"& _ 
                " OR ([BLZ Bank] = @Original_BLZ_Bank)) AND ((@IsNull_TELEX_Bank = 1 AND [TELEX B"& _ 
                "ank] IS NULL) OR ([TELEX Bank] = @Original_TELEX_Bank)) AND ((@IsNull_HRB = 1 AN"& _ 
                "D [HRB] IS NULL) OR ([HRB] = @Original_HRB)) AND ((@IsNull_SEPA_Creditor_ID = 1 "& _ 
                "AND [SEPA Creditor ID] IS NULL) OR ([SEPA Creditor ID] = @Original_SEPA_Creditor"& _ 
                "_ID)) AND ((@IsNull_UNTER_BEARBEITUNG_VON = 1 AND [UNTER BEARBEITUNG VON] IS NUL"& _ 
                "L) OR ([UNTER BEARBEITUNG VON] = @Original_UNTER_BEARBEITUNG_VON)) AND ((@IsNull"& _ 
                "_USER = 1 AND [USER] IS NULL) OR ([USER] = @Original_USER)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Branch_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Branch Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Strasse_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Strasse Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLZ Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ort_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ort Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Land_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Land Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_LOGO", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK LOGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SteuerNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UstID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Website_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fax_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BIC_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIC Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEX_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HRB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEPA_Creditor_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_DE", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_GB", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts GB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Rechts_GR", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Rechts GR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_DE", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_GB", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links GB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formular_Links_GR", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formular Links GR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Branch_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Branch Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Strasse_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Strasse Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLZ Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ort_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ort Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Land_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Land Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SteuerNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SteuerNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SteuerNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UstID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UstID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E-Mail Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Website_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Website_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Website Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tel_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tel_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fax_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fax_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BIC_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIC Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLZ_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLZ_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLZ Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TELEX_Bank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TELEX_Bank", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEX Bank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HRB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HRB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEPA_Creditor_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEPA_Creditor_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEPA Creditor ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, [Name Bank], [Branch Bank], [Strasse Bank], [PLZ Bank], [Ort Ba"& _ 
                "nk], [Land Bank], [BANK LOGO], SteuerNr, UstID, [E-Mail Bank], [Website Bank], ["& _ 
                "Tel Bank], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Fax Bank], [BIC Bank], [BLZ Bank], [TELEX"& _ 
                " Bank], HRB, [SEPA Creditor ID], [Formular Rechts DE], [Formular Rechts GB], [Fo"& _ 
                "rmular Rechts GR], [Formular Links DE], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Formular Lin"& _ 
                "ks GB], [Formular Links GR], [UNTER BEARBEITUNG VON], [USER]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            BA"& _ 
                "NK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.BANKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.BANKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.BANKDataTable = New MeldewesenDataSet.BANKDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.BANKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "BANK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Name_Bank As String,  _
                    ByVal Original_Branch_Bank As String,  _
                    ByVal Original_Strasse_Bank As String,  _
                    ByVal Original_PLZ_Bank As String,  _
                    ByVal Original_Ort_Bank As String,  _
                    ByVal Original_Land_Bank As String,  _
                    ByVal Original_SteuerNr As String,  _
                    ByVal Original_UstID As String,  _
                    ByVal p2 As String,  _
                    ByVal Original_Website_Bank As String,  _
                    ByVal Original_Tel_Bank As String,  _
                    ByVal Original_Fax_Bank As String,  _
                    ByVal Original_BIC_Bank As String,  _
                    ByVal Original_BLZ_Bank As String,  _
                    ByVal Original_TELEX_Bank As String,  _
                    ByVal Original_HRB As String,  _
                    ByVal Original_SEPA_Creditor_ID As String,  _
                    ByVal Original_UNTER_BEARBEITUNG_VON As String,  _
                    ByVal Original_USER As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Name_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Name_Bank,String)
            End If
            If (Original_Branch_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Branch_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Branch_Bank,String)
            End If
            If (Original_Strasse_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Strasse_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Strasse_Bank,String)
            End If
            If (Original_PLZ_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLZ_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PLZ_Bank,String)
            End If
            If (Original_Ort_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ort_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Ort_Bank,String)
            End If
            If (Original_Land_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Land_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Land_Bank,String)
            End If
            If (Original_SteuerNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SteuerNr,String)
            End If
            If (Original_UstID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_UstID,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p2,String)
            End If
            If (Original_Website_Bank Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Website_Bank,String)
            End If
            If (Original_Tel_Bank Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Tel_Bank,String)
            End If
            If (Original_Fax_Bank Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Fax_Bank,String)
            End If
            If (Original_BIC_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BIC_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_BIC_Bank,String)
            End If
            If (Original_BLZ_Bank Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_BLZ_Bank,String)
            End If
            If (Original_TELEX_Bank Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_TELEX_Bank,String)
            End If
            If (Original_HRB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_HRB,String)
            End If
            If (Original_SEPA_Creditor_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SEPA_Creditor_ID,String)
            End If
            If (Original_UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_UNTER_BEARBEITUNG_VON,String)
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Name_Bank As String,  _
                    ByVal Branch_Bank As String,  _
                    ByVal Strasse_Bank As String,  _
                    ByVal PLZ_Bank As String,  _
                    ByVal Ort_Bank As String,  _
                    ByVal Land_Bank As String,  _
                    ByVal BANK_LOGO() As Byte,  _
                    ByVal SteuerNr As String,  _
                    ByVal UstID As String,  _
                    ByVal p1 As String,  _
                    ByVal Website_Bank As String,  _
                    ByVal Tel_Bank As String,  _
                    ByVal Fax_Bank As String,  _
                    ByVal BIC_Bank As String,  _
                    ByVal BLZ_Bank As String,  _
                    ByVal TELEX_Bank As String,  _
                    ByVal HRB As String,  _
                    ByVal SEPA_Creditor_ID As String,  _
                    ByVal Formular_Rechts_DE As String,  _
                    ByVal Formular_Rechts_GB As String,  _
                    ByVal Formular_Rechts_GR As String,  _
                    ByVal Formular_Links_DE As String,  _
                    ByVal Formular_Links_GB As String,  _
                    ByVal Formular_Links_GR As String,  _
                    ByVal UNTER_BEARBEITUNG_VON As String,  _
                    ByVal USER As String) As Integer
            If (Name_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name_Bank,String)
            End If
            If (Branch_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Branch_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Branch_Bank,String)
            End If
            If (Strasse_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Strasse_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Strasse_Bank,String)
            End If
            If (PLZ_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLZ_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PLZ_Bank,String)
            End If
            If (Ort_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ort_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ort_Bank,String)
            End If
            If (Land_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Land_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Land_Bank,String)
            End If
            If (BANK_LOGO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BANK_LOGO,Byte())
            End If
            If (SteuerNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SteuerNr,String)
            End If
            If (UstID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(UstID,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p1,String)
            End If
            If (Website_Bank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Website_Bank,String)
            End If
            If (Tel_Bank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Tel_Bank,String)
            End If
            If (Fax_Bank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Fax_Bank,String)
            End If
            If (BIC_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BIC_Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(BIC_Bank,String)
            End If
            If (BLZ_Bank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(BLZ_Bank,String)
            End If
            If (TELEX_Bank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TELEX_Bank,String)
            End If
            If (HRB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(HRB,String)
            End If
            If (SEPA_Creditor_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SEPA_Creditor_ID,String)
            End If
            If (Formular_Rechts_DE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Formular_Rechts_DE,String)
            End If
            If (Formular_Rechts_GB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Formular_Rechts_GB,String)
            End If
            If (Formular_Rechts_GR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Formular_Rechts_GR,String)
            End If
            If (Formular_Links_DE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Formular_Links_DE,String)
            End If
            If (Formular_Links_GB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Formular_Links_GB,String)
            End If
            If (Formular_Links_GR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Formular_Links_GR,String)
            End If
            If (UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(UNTER_BEARBEITUNG_VON,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Name_Bank As String,  _
                    ByVal Branch_Bank As String,  _
                    ByVal Strasse_Bank As String,  _
                    ByVal PLZ_Bank As String,  _
                    ByVal Ort_Bank As String,  _
                    ByVal Land_Bank As String,  _
                    ByVal BANK_LOGO() As Byte,  _
                    ByVal SteuerNr As String,  _
                    ByVal UstID As String,  _
                    ByVal p1 As String,  _
                    ByVal Website_Bank As String,  _
                    ByVal Tel_Bank As String,  _
                    ByVal Fax_Bank As String,  _
                    ByVal BIC_Bank As String,  _
                    ByVal BLZ_Bank As String,  _
                    ByVal TELEX_Bank As String,  _
                    ByVal HRB As String,  _
                    ByVal SEPA_Creditor_ID As String,  _
                    ByVal Formular_Rechts_DE As String,  _
                    ByVal Formular_Rechts_GB As String,  _
                    ByVal Formular_Rechts_GR As String,  _
                    ByVal Formular_Links_DE As String,  _
                    ByVal Formular_Links_GB As String,  _
                    ByVal Formular_Links_GR As String,  _
                    ByVal UNTER_BEARBEITUNG_VON As String,  _
                    ByVal USER As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Name_Bank As String,  _
                    ByVal Original_Branch_Bank As String,  _
                    ByVal Original_Strasse_Bank As String,  _
                    ByVal Original_PLZ_Bank As String,  _
                    ByVal Original_Ort_Bank As String,  _
                    ByVal Original_Land_Bank As String,  _
                    ByVal Original_SteuerNr As String,  _
                    ByVal Original_UstID As String,  _
                    ByVal p2 As String,  _
                    ByVal Original_Website_Bank As String,  _
                    ByVal Original_Tel_Bank As String,  _
                    ByVal Original_Fax_Bank As String,  _
                    ByVal Original_BIC_Bank As String,  _
                    ByVal Original_BLZ_Bank As String,  _
                    ByVal Original_TELEX_Bank As String,  _
                    ByVal Original_HRB As String,  _
                    ByVal Original_SEPA_Creditor_ID As String,  _
                    ByVal Original_UNTER_BEARBEITUNG_VON As String,  _
                    ByVal Original_USER As String) As Integer
            If (Name_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name_Bank,String)
            End If
            If (Branch_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Branch_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Branch_Bank,String)
            End If
            If (Strasse_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Strasse_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Strasse_Bank,String)
            End If
            If (PLZ_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLZ_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PLZ_Bank,String)
            End If
            If (Ort_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ort_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ort_Bank,String)
            End If
            If (Land_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Land_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Land_Bank,String)
            End If
            If (BANK_LOGO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BANK_LOGO,Byte())
            End If
            If (SteuerNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SteuerNr,String)
            End If
            If (UstID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UstID,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p1,String)
            End If
            If (Website_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Website_Bank,String)
            End If
            If (Tel_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Tel_Bank,String)
            End If
            If (Fax_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Fax_Bank,String)
            End If
            If (BIC_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BIC_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(BIC_Bank,String)
            End If
            If (BLZ_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(BLZ_Bank,String)
            End If
            If (TELEX_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TELEX_Bank,String)
            End If
            If (HRB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(HRB,String)
            End If
            If (SEPA_Creditor_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SEPA_Creditor_ID,String)
            End If
            If (Formular_Rechts_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Formular_Rechts_DE,String)
            End If
            If (Formular_Rechts_GB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Formular_Rechts_GB,String)
            End If
            If (Formular_Rechts_GR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Formular_Rechts_GR,String)
            End If
            If (Formular_Links_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Formular_Links_DE,String)
            End If
            If (Formular_Links_GB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Formular_Links_GB,String)
            End If
            If (Formular_Links_GR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Formular_Links_GR,String)
            End If
            If (UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(UNTER_BEARBEITUNG_VON,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ID,Integer)
            If (Original_Name_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Name_Bank,String)
            End If
            If (Original_Branch_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Branch_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Branch_Bank,String)
            End If
            If (Original_Strasse_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Strasse_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Strasse_Bank,String)
            End If
            If (Original_PLZ_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLZ_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PLZ_Bank,String)
            End If
            If (Original_Ort_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ort_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Ort_Bank,String)
            End If
            If (Original_Land_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Land_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Land_Bank,String)
            End If
            If (Original_SteuerNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SteuerNr,String)
            End If
            If (Original_UstID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_UstID,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(p2,String)
            End If
            If (Original_Website_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Website_Bank,String)
            End If
            If (Original_Tel_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Tel_Bank,String)
            End If
            If (Original_Fax_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Fax_Bank,String)
            End If
            If (Original_BIC_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BIC_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_BIC_Bank,String)
            End If
            If (Original_BLZ_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_BLZ_Bank,String)
            End If
            If (Original_TELEX_Bank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_TELEX_Bank,String)
            End If
            If (Original_HRB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_HRB,String)
            End If
            If (Original_SEPA_Creditor_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SEPA_Creditor_ID,String)
            End If
            If (Original_UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_UNTER_BEARBEITUNG_VON,String)
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COUNTRIESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COUNTRIES"
            tableMapping.ColumnMappings.Add("COUNTRY CODE", "COUNTRY CODE")
            tableMapping.ColumnMappings.Add("COUNTRY NAME", "COUNTRY NAME")
            tableMapping.ColumnMappings.Add("COUNTRY NAME DE", "COUNTRY NAME DE")
            tableMapping.ColumnMappings.Add("LANDKZ BUBA", "LANDKZ BUBA")
            tableMapping.ColumnMappings.Add("CURRENCY CODE", "CURRENCY CODE")
            tableMapping.ColumnMappings.Add("CURRENCY NAME", "CURRENCY NAME")
            tableMapping.ColumnMappings.Add("EU EEA", "EU EEA")
            tableMapping.ColumnMappings.Add("IBAN COUNTRY", "IBAN COUNTRY")
            tableMapping.ColumnMappings.Add("IBAN CALC", "IBAN CALC")
            tableMapping.ColumnMappings.Add("IBAN MAX", "IBAN MAX")
            tableMapping.ColumnMappings.Add("VALID", "VALID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [COUNTRIES] WHERE (([COUNTRY CODE] = @Original_COUNTRY_CODE) AND ((@I"& _ 
                "sNull_COUNTRY_NAME = 1 AND [COUNTRY NAME] IS NULL) OR ([COUNTRY NAME] = @Origina"& _ 
                "l_COUNTRY_NAME)) AND ((@IsNull_COUNTRY_NAME_DE = 1 AND [COUNTRY NAME DE] IS NULL"& _ 
                ") OR ([COUNTRY NAME DE] = @Original_COUNTRY_NAME_DE)) AND ((@IsNull_LANDKZ_BUBA "& _ 
                "= 1 AND [LANDKZ BUBA] IS NULL) OR ([LANDKZ BUBA] = @Original_LANDKZ_BUBA)) AND ("& _ 
                "(@IsNull_CURRENCY_CODE = 1 AND [CURRENCY CODE] IS NULL) OR ([CURRENCY CODE] = @O"& _ 
                "riginal_CURRENCY_CODE)) AND ((@IsNull_CURRENCY_NAME = 1 AND [CURRENCY NAME] IS N"& _ 
                "ULL) OR ([CURRENCY NAME] = @Original_CURRENCY_NAME)) AND ((@IsNull_EU_EEA = 1 AN"& _ 
                "D [EU EEA] IS NULL) OR ([EU EEA] = @Original_EU_EEA)) AND ((@IsNull_IBAN_COUNTRY"& _ 
                " = 1 AND [IBAN COUNTRY] IS NULL) OR ([IBAN COUNTRY] = @Original_IBAN_COUNTRY)) A"& _ 
                "ND ((@IsNull_IBAN_CALC = 1 AND [IBAN CALC] IS NULL) OR ([IBAN CALC] = @Original_"& _ 
                "IBAN_CALC)) AND ((@IsNull_IBAN_MAX = 1 AND [IBAN MAX] IS NULL) OR ([IBAN MAX] = "& _ 
                "@Original_IBAN_MAX)) AND ((@IsNull_VALID = 1 AND [VALID] IS NULL) OR ([VALID] = "& _ 
                "@Original_VALID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COUNTRY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COUNTRY_NAME_DE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LANDKZ_BUBA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANDKZ_BUBA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EU_EEA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EU_EEA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_COUNTRY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_CALC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_CALC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_MAX", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [COUNTRIES] ([COUNTRY CODE], [COUNTRY NAME], [COUNTRY NAME DE], [LAND"& _ 
                "KZ BUBA], [CURRENCY CODE], [CURRENCY NAME], [EU EEA], [IBAN COUNTRY], [IBAN CALC"& _ 
                "], [IBAN MAX], [VALID]) VALUES (@COUNTRY_CODE, @COUNTRY_NAME, @COUNTRY_NAME_DE, "& _ 
                "@LANDKZ_BUBA, @CURRENCY_CODE, @CURRENCY_NAME, @EU_EEA, @IBAN_COUNTRY, @IBAN_CALC"& _ 
                ", @IBAN_MAX, @VALID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ_BUBA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EU_EEA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_CALC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_MAX", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [COUNTRIES] SET [COUNTRY CODE] = @COUNTRY_CODE, [COUNTRY NAME] = @COUNTRY_"& _ 
                "NAME, [COUNTRY NAME DE] = @COUNTRY_NAME_DE, [LANDKZ BUBA] = @LANDKZ_BUBA, [CURRE"& _ 
                "NCY CODE] = @CURRENCY_CODE, [CURRENCY NAME] = @CURRENCY_NAME, [EU EEA] = @EU_EEA"& _ 
                ", [IBAN COUNTRY] = @IBAN_COUNTRY, [IBAN CALC] = @IBAN_CALC, [IBAN MAX] = @IBAN_M"& _ 
                "AX, [VALID] = @VALID WHERE (([COUNTRY CODE] = @Original_COUNTRY_CODE) AND ((@IsN"& _ 
                "ull_COUNTRY_NAME = 1 AND [COUNTRY NAME] IS NULL) OR ([COUNTRY NAME] = @Original_"& _ 
                "COUNTRY_NAME)) AND ((@IsNull_COUNTRY_NAME_DE = 1 AND [COUNTRY NAME DE] IS NULL) "& _ 
                "OR ([COUNTRY NAME DE] = @Original_COUNTRY_NAME_DE)) AND ((@IsNull_LANDKZ_BUBA = "& _ 
                "1 AND [LANDKZ BUBA] IS NULL) OR ([LANDKZ BUBA] = @Original_LANDKZ_BUBA)) AND ((@"& _ 
                "IsNull_CURRENCY_CODE = 1 AND [CURRENCY CODE] IS NULL) OR ([CURRENCY CODE] = @Ori"& _ 
                "ginal_CURRENCY_CODE)) AND ((@IsNull_CURRENCY_NAME = 1 AND [CURRENCY NAME] IS NUL"& _ 
                "L) OR ([CURRENCY NAME] = @Original_CURRENCY_NAME)) AND ((@IsNull_EU_EEA = 1 AND "& _ 
                "[EU EEA] IS NULL) OR ([EU EEA] = @Original_EU_EEA)) AND ((@IsNull_IBAN_COUNTRY ="& _ 
                " 1 AND [IBAN COUNTRY] IS NULL) OR ([IBAN COUNTRY] = @Original_IBAN_COUNTRY)) AND"& _ 
                " ((@IsNull_IBAN_CALC = 1 AND [IBAN CALC] IS NULL) OR ([IBAN CALC] = @Original_IB"& _ 
                "AN_CALC)) AND ((@IsNull_IBAN_MAX = 1 AND [IBAN MAX] IS NULL) OR ([IBAN MAX] = @O"& _ 
                "riginal_IBAN_MAX)) AND ((@IsNull_VALID = 1 AND [VALID] IS NULL) OR ([VALID] = @O"& _ 
                "riginal_VALID)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANDKZ_BUBA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EU_EEA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_CALC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IBAN_MAX", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COUNTRY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COUNTRY_NAME_DE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COUNTRY_NAME_DE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COUNTRY NAME DE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LANDKZ_BUBA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANDKZ_BUBA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANDKZ BUBA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EU_EEA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EU_EEA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EU EEA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_COUNTRY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN COUNTRY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_CALC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_CALC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN CALC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IBAN_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IBAN_MAX", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IBAN MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        [COUNTRY CODE], [COUNTRY NAME], [COUNTRY NAME DE], [LANDKZ BUBA], ["& _ 
                "CURRENCY CODE], [CURRENCY NAME], [EU EEA], [IBAN COUNTRY], [IBAN CALC], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   [IBAN MAX], VALID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            COUNTRIES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.COUNTRIESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.COUNTRIESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.COUNTRIESDataTable = New MeldewesenDataSet.COUNTRIESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.COUNTRIESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "COUNTRIES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COUNTRY_CODE As String, ByVal Original_COUNTRY_NAME As String, ByVal Original_COUNTRY_NAME_DE As String, ByVal Original_LANDKZ_BUBA As String, ByVal Original_CURRENCY_CODE As String, ByVal Original_CURRENCY_NAME As String, ByVal Original_EU_EEA As String, ByVal Original_IBAN_COUNTRY As String, ByVal Original_IBAN_CALC As String, ByVal Original_IBAN_MAX As Global.System.Nullable(Of Double), ByVal Original_VALID As String) As Integer
            If (Original_COUNTRY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COUNTRY_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COUNTRY_CODE,String)
            End If
            If (Original_COUNTRY_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COUNTRY_NAME,String)
            End If
            If (Original_COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COUNTRY_NAME_DE,String)
            End If
            If (Original_LANDKZ_BUBA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LANDKZ_BUBA,String)
            End If
            If (Original_CURRENCY_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CURRENCY_CODE,String)
            End If
            If (Original_CURRENCY_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CURRENCY_NAME,String)
            End If
            If (Original_EU_EEA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_EU_EEA,String)
            End If
            If (Original_IBAN_COUNTRY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IBAN_COUNTRY,String)
            End If
            If (Original_IBAN_CALC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_IBAN_CALC,String)
            End If
            If (Original_IBAN_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_IBAN_MAX.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_VALID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COUNTRY_CODE As String, ByVal COUNTRY_NAME As String, ByVal COUNTRY_NAME_DE As String, ByVal LANDKZ_BUBA As String, ByVal CURRENCY_CODE As String, ByVal CURRENCY_NAME As String, ByVal EU_EEA As String, ByVal IBAN_COUNTRY As String, ByVal IBAN_CALC As String, ByVal IBAN_MAX As Global.System.Nullable(Of Double), ByVal VALID As String) As Integer
            If (COUNTRY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COUNTRY_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COUNTRY_CODE,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (LANDKZ_BUBA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LANDKZ_BUBA,String)
            End If
            If (CURRENCY_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CURRENCY_CODE,String)
            End If
            If (CURRENCY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CURRENCY_NAME,String)
            End If
            If (EU_EEA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(EU_EEA,String)
            End If
            If (IBAN_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IBAN_COUNTRY,String)
            End If
            If (IBAN_CALC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IBAN_CALC,String)
            End If
            If (IBAN_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IBAN_MAX.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (VALID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COUNTRY_CODE As String,  _
                    ByVal COUNTRY_NAME As String,  _
                    ByVal COUNTRY_NAME_DE As String,  _
                    ByVal LANDKZ_BUBA As String,  _
                    ByVal CURRENCY_CODE As String,  _
                    ByVal CURRENCY_NAME As String,  _
                    ByVal EU_EEA As String,  _
                    ByVal IBAN_COUNTRY As String,  _
                    ByVal IBAN_CALC As String,  _
                    ByVal IBAN_MAX As Global.System.Nullable(Of Double),  _
                    ByVal VALID As String,  _
                    ByVal Original_COUNTRY_CODE As String,  _
                    ByVal Original_COUNTRY_NAME As String,  _
                    ByVal Original_COUNTRY_NAME_DE As String,  _
                    ByVal Original_LANDKZ_BUBA As String,  _
                    ByVal Original_CURRENCY_CODE As String,  _
                    ByVal Original_CURRENCY_NAME As String,  _
                    ByVal Original_EU_EEA As String,  _
                    ByVal Original_IBAN_COUNTRY As String,  _
                    ByVal Original_IBAN_CALC As String,  _
                    ByVal Original_IBAN_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_VALID As String) As Integer
            If (COUNTRY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COUNTRY_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COUNTRY_CODE,String)
            End If
            If (COUNTRY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COUNTRY_NAME,String)
            End If
            If (COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COUNTRY_NAME_DE,String)
            End If
            If (LANDKZ_BUBA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LANDKZ_BUBA,String)
            End If
            If (CURRENCY_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CURRENCY_CODE,String)
            End If
            If (CURRENCY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CURRENCY_NAME,String)
            End If
            If (EU_EEA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(EU_EEA,String)
            End If
            If (IBAN_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IBAN_COUNTRY,String)
            End If
            If (IBAN_CALC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IBAN_CALC,String)
            End If
            If (IBAN_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IBAN_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (VALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VALID,String)
            End If
            If (Original_COUNTRY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COUNTRY_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_COUNTRY_CODE,String)
            End If
            If (Original_COUNTRY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_COUNTRY_NAME,String)
            End If
            If (Original_COUNTRY_NAME_DE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COUNTRY_NAME_DE,String)
            End If
            If (Original_LANDKZ_BUBA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_LANDKZ_BUBA,String)
            End If
            If (Original_CURRENCY_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_CURRENCY_CODE,String)
            End If
            If (Original_CURRENCY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CURRENCY_NAME,String)
            End If
            If (Original_EU_EEA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_EU_EEA,String)
            End If
            If (Original_IBAN_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_IBAN_COUNTRY,String)
            End If
            If (Original_IBAN_CALC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_IBAN_CALC,String)
            End If
            If (Original_IBAN_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_IBAN_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_VALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COUNTRY_NAME As String,  _
                    ByVal COUNTRY_NAME_DE As String,  _
                    ByVal LANDKZ_BUBA As String,  _
                    ByVal CURRENCY_CODE As String,  _
                    ByVal CURRENCY_NAME As String,  _
                    ByVal EU_EEA As String,  _
                    ByVal IBAN_COUNTRY As String,  _
                    ByVal IBAN_CALC As String,  _
                    ByVal IBAN_MAX As Global.System.Nullable(Of Double),  _
                    ByVal VALID As String,  _
                    ByVal Original_COUNTRY_CODE As String,  _
                    ByVal Original_COUNTRY_NAME As String,  _
                    ByVal Original_COUNTRY_NAME_DE As String,  _
                    ByVal Original_LANDKZ_BUBA As String,  _
                    ByVal Original_CURRENCY_CODE As String,  _
                    ByVal Original_CURRENCY_NAME As String,  _
                    ByVal Original_EU_EEA As String,  _
                    ByVal Original_IBAN_COUNTRY As String,  _
                    ByVal Original_IBAN_CALC As String,  _
                    ByVal Original_IBAN_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_VALID As String) As Integer
            Return Me.Update(Original_COUNTRY_CODE, COUNTRY_NAME, COUNTRY_NAME_DE, LANDKZ_BUBA, CURRENCY_CODE, CURRENCY_NAME, EU_EEA, IBAN_COUNTRY, IBAN_CALC, IBAN_MAX, VALID, Original_COUNTRY_CODE, Original_COUNTRY_NAME, Original_COUNTRY_NAME_DE, Original_LANDKZ_BUBA, Original_CURRENCY_CODE, Original_CURRENCY_NAME, Original_EU_EEA, Original_IBAN_COUNTRY, Original_IBAN_CALC, Original_IBAN_MAX, Original_VALID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_DETAILSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZINSERTRAG KUNDEN DETAILS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ValDateFrom", "ValDateFrom")
            tableMapping.ColumnMappings.Add("ValDate", "ValDate")
            tableMapping.ColumnMappings.Add("Customer", "Customer")
            tableMapping.ColumnMappings.Add("ValYear", "ValYear")
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName")
            tableMapping.ColumnMappings.Add("Account", "Account")
            tableMapping.ColumnMappings.Add("RegistrationCountry", "RegistrationCountry")
            tableMapping.ColumnMappings.Add("Contract", "Contract")
            tableMapping.ColumnMappings.Add("CCY", "CCY")
            tableMapping.ColumnMappings.Add("Product", "Product")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            tableMapping.ColumnMappings.Add("AmountEuro", "AmountEuro")
            tableMapping.ColumnMappings.Add("DB", "DB")
            tableMapping.ColumnMappings.Add("KapertstG", "KapertstG")
            tableMapping.ColumnMappings.Add("Remark", "Remark")
            tableMapping.ColumnMappings.Add("Soli", "Soli")
            tableMapping.ColumnMappings.Add("KAPISTPFLICHTIG", "KAPISTPFLICHTIG")
            tableMapping.ColumnMappings.Add("BUNDESLAND", "BUNDESLAND")
            tableMapping.ColumnMappings.Add("IdValueCustomer", "IdValueCustomer")
            tableMapping.ColumnMappings.Add("IdZinsertragsMonat", "IdZinsertragsMonat")
            tableMapping.ColumnMappings.Add("IdErtragJahr", "IdErtragJahr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZINSERTRAG KUNDEN DETAILS] WHERE (([ID] = @Original_ID) AND ((@IsNul"& _ 
                "l_ValDateFrom = 1 AND [ValDateFrom] IS NULL) OR ([ValDateFrom] = @Original_ValDa"& _ 
                "teFrom)) AND ((@IsNull_ValDate = 1 AND [ValDate] IS NULL) OR ([ValDate] = @Origi"& _ 
                "nal_ValDate)) AND ((@IsNull_Customer = 1 AND [Customer] IS NULL) OR ([Customer] "& _ 
                "= @Original_Customer)) AND ((@IsNull_ValYear = 1 AND [ValYear] IS NULL) OR ([Val"& _ 
                "Year] = @Original_ValYear)) AND ((@IsNull_CustomerName = 1 AND [CustomerName] IS"& _ 
                " NULL) OR ([CustomerName] = @Original_CustomerName)) AND ((@IsNull_Account = 1 A"& _ 
                "ND [Account] IS NULL) OR ([Account] = @Original_Account)) AND ((@IsNull_Registra"& _ 
                "tionCountry = 1 AND [RegistrationCountry] IS NULL) OR ([RegistrationCountry] = @"& _ 
                "Original_RegistrationCountry)) AND ((@IsNull_Contract = 1 AND [Contract] IS NULL"& _ 
                ") OR ([Contract] = @Original_Contract)) AND ((@IsNull_CCY = 1 AND [CCY] IS NULL)"& _ 
                " OR ([CCY] = @Original_CCY)) AND ((@IsNull_Product = 1 AND [Product] IS NULL) OR"& _ 
                " ([Product] = @Original_Product)) AND ((@IsNull_Amount = 1 AND [Amount] IS NULL)"& _ 
                " OR ([Amount] = @Original_Amount)) AND ((@IsNull_ExchangeRate = 1 AND [ExchangeR"& _ 
                "ate] IS NULL) OR ([ExchangeRate] = @Original_ExchangeRate)) AND ((@IsNull_Amount"& _ 
                "Euro = 1 AND [AmountEuro] IS NULL) OR ([AmountEuro] = @Original_AmountEuro)) AND"& _ 
                " ((@IsNull_DB = 1 AND [DB] IS NULL) OR ([DB] = @Original_DB)) AND ((@IsNull_Kape"& _ 
                "rtstG = 1 AND [KapertstG] IS NULL) OR ([KapertstG] = @Original_KapertstG)) AND ("& _ 
                "(@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)) AND "& _ 
                "((@IsNull_Soli = 1 AND [Soli] IS NULL) OR ([Soli] = @Original_Soli)) AND ((@IsNu"& _ 
                "ll_KAPISTPFLICHTIG = 1 AND [KAPISTPFLICHTIG] IS NULL) OR ([KAPISTPFLICHTIG] = @O"& _ 
                "riginal_KAPISTPFLICHTIG)) AND ((@IsNull_BUNDESLAND = 1 AND [BUNDESLAND] IS NULL)"& _ 
                " OR ([BUNDESLAND] = @Original_BUNDESLAND)) AND ((@IsNull_IdValueCustomer = 1 AND"& _ 
                " [IdValueCustomer] IS NULL) OR ([IdValueCustomer] = @Original_IdValueCustomer)) "& _ 
                "AND ((@IsNull_IdZinsertragsMonat = 1 AND [IdZinsertragsMonat] IS NULL) OR ([IdZi"& _ 
                "nsertragsMonat] = @Original_IdZinsertragsMonat)) AND ((@IsNull_IdErtragJahr = 1 "& _ 
                "AND [IdErtragJahr] IS NULL) OR ([IdErtragJahr] = @Original_IdErtragJahr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValDateFrom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValDateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Customer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValYear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomerName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Account", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegistrationCountry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Product", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AmountEuro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KapertstG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KapertstG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Soli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Soli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KAPISTPFLICHTIG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KAPISTPFLICHTIG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BUNDESLAND", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BUNDESLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdValueCustomer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdValueCustomer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZinsertragsMonat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZinsertragsMonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdErtragJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdErtragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZINSERTRAG KUNDEN DETAILS] ([ValDateFrom], [ValDate], [Customer], [V"& _ 
                "alYear], [CustomerName], [Account], [RegistrationCountry], [Contract], [CCY], [P"& _ 
                "roduct], [Amount], [ExchangeRate], [AmountEuro], [DB], [KapertstG], [Remark], [S"& _ 
                "oli], [KAPISTPFLICHTIG], [BUNDESLAND], [IdValueCustomer], [IdZinsertragsMonat], "& _ 
                "[IdErtragJahr]) VALUES (@ValDateFrom, @ValDate, @Customer, @ValYear, @CustomerNa"& _ 
                "me, @Account, @RegistrationCountry, @Contract, @CCY, @Product, @Amount, @Exchang"& _ 
                "eRate, @AmountEuro, @DB, @KapertstG, @Remark, @Soli, @KAPISTPFLICHTIG, @BUNDESLA"& _ 
                "ND, @IdValueCustomer, @IdZinsertragsMonat, @IdErtragJahr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValDateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Customer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValYear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KapertstG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Soli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KAPISTPFLICHTIG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUNDESLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdValueCustomer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZinsertragsMonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdErtragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZINSERTRAG KUNDEN DETAILS] SET [ValDateFrom] = @ValDateFrom, [ValDate] = "& _ 
                "@ValDate, [Customer] = @Customer, [ValYear] = @ValYear, [CustomerName] = @Custom"& _ 
                "erName, [Account] = @Account, [RegistrationCountry] = @RegistrationCountry, [Con"& _ 
                "tract] = @Contract, [CCY] = @CCY, [Product] = @Product, [Amount] = @Amount, [Exc"& _ 
                "hangeRate] = @ExchangeRate, [AmountEuro] = @AmountEuro, [DB] = @DB, [KapertstG] "& _ 
                "= @KapertstG, [Remark] = @Remark, [Soli] = @Soli, [KAPISTPFLICHTIG] = @KAPISTPFL"& _ 
                "ICHTIG, [BUNDESLAND] = @BUNDESLAND, [IdValueCustomer] = @IdValueCustomer, [IdZin"& _ 
                "sertragsMonat] = @IdZinsertragsMonat, [IdErtragJahr] = @IdErtragJahr WHERE (([ID"& _ 
                "] = @Original_ID) AND ((@IsNull_ValDateFrom = 1 AND [ValDateFrom] IS NULL) OR (["& _ 
                "ValDateFrom] = @Original_ValDateFrom)) AND ((@IsNull_ValDate = 1 AND [ValDate] I"& _ 
                "S NULL) OR ([ValDate] = @Original_ValDate)) AND ((@IsNull_Customer = 1 AND [Cust"& _ 
                "omer] IS NULL) OR ([Customer] = @Original_Customer)) AND ((@IsNull_ValYear = 1 A"& _ 
                "ND [ValYear] IS NULL) OR ([ValYear] = @Original_ValYear)) AND ((@IsNull_Customer"& _ 
                "Name = 1 AND [CustomerName] IS NULL) OR ([CustomerName] = @Original_CustomerName"& _ 
                ")) AND ((@IsNull_Account = 1 AND [Account] IS NULL) OR ([Account] = @Original_Ac"& _ 
                "count)) AND ((@IsNull_RegistrationCountry = 1 AND [RegistrationCountry] IS NULL)"& _ 
                " OR ([RegistrationCountry] = @Original_RegistrationCountry)) AND ((@IsNull_Contr"& _ 
                "act = 1 AND [Contract] IS NULL) OR ([Contract] = @Original_Contract)) AND ((@IsN"& _ 
                "ull_CCY = 1 AND [CCY] IS NULL) OR ([CCY] = @Original_CCY)) AND ((@IsNull_Product"& _ 
                " = 1 AND [Product] IS NULL) OR ([Product] = @Original_Product)) AND ((@IsNull_Am"& _ 
                "ount = 1 AND [Amount] IS NULL) OR ([Amount] = @Original_Amount)) AND ((@IsNull_E"& _ 
                "xchangeRate = 1 AND [ExchangeRate] IS NULL) OR ([ExchangeRate] = @Original_Excha"& _ 
                "ngeRate)) AND ((@IsNull_AmountEuro = 1 AND [AmountEuro] IS NULL) OR ([AmountEuro"& _ 
                "] = @Original_AmountEuro)) AND ((@IsNull_DB = 1 AND [DB] IS NULL) OR ([DB] = @Or"& _ 
                "iginal_DB)) AND ((@IsNull_KapertstG = 1 AND [KapertstG] IS NULL) OR ([KapertstG]"& _ 
                " = @Original_KapertstG)) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Rem"& _ 
                "ark] = @Original_Remark)) AND ((@IsNull_Soli = 1 AND [Soli] IS NULL) OR ([Soli] "& _ 
                "= @Original_Soli)) AND ((@IsNull_KAPISTPFLICHTIG = 1 AND [KAPISTPFLICHTIG] IS NU"& _ 
                "LL) OR ([KAPISTPFLICHTIG] = @Original_KAPISTPFLICHTIG)) AND ((@IsNull_BUNDESLAND"& _ 
                " = 1 AND [BUNDESLAND] IS NULL) OR ([BUNDESLAND] = @Original_BUNDESLAND)) AND ((@"& _ 
                "IsNull_IdValueCustomer = 1 AND [IdValueCustomer] IS NULL) OR ([IdValueCustomer] "& _ 
                "= @Original_IdValueCustomer)) AND ((@IsNull_IdZinsertragsMonat = 1 AND [IdZinser"& _ 
                "tragsMonat] IS NULL) OR ([IdZinsertragsMonat] = @Original_IdZinsertragsMonat)) A"& _ 
                "ND ((@IsNull_IdErtragJahr = 1 AND [IdErtragJahr] IS NULL) OR ([IdErtragJahr] = @"& _ 
                "Original_IdErtragJahr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValDateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Customer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValYear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KapertstG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Soli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KAPISTPFLICHTIG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUNDESLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdValueCustomer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZinsertragsMonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdErtragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValDateFrom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValDateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDateFrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Customer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValYear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomerName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Account", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegistrationCountry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationCountry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Product", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AmountEuro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountEuro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KapertstG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KapertstG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KapertstG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Soli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Soli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Soli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KAPISTPFLICHTIG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KAPISTPFLICHTIG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KAPISTPFLICHTIG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BUNDESLAND", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BUNDESLAND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUNDESLAND", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdValueCustomer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdValueCustomer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdValueCustomer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZinsertragsMonat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZinsertragsMonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragsMonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdErtragJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdErtragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdErtragJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ValDateFrom, ValDate, Customer, ValYear, CustomerName, Account,"& _ 
                " RegistrationCountry, Contract, CCY, Product, Amount, ExchangeRate, AmountEuro, "& _ 
                "DB, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         KapertstG, Remark, Soli, KAPISTPFLICHTIG, BUNDESL"& _ 
                "AND, IdValueCustomer, IdZinsertragsMonat, IdErtragJahr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [ZINSERT"& _ 
                "RAG KUNDEN DETAILS]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_DETAILSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZINSERTRAG_KUNDEN_DETAILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_DETAILSDataTable = New MeldewesenDataSet.ZINSERTRAG_KUNDEN_DETAILSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_DETAILSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZINSERTRAG KUNDEN DETAILS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ValDateFrom As Global.System.Nullable(Of Date),  _
                    ByVal Original_ValDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Customer As String,  _
                    ByVal Original_ValYear As Global.System.Nullable(Of Double),  _
                    ByVal Original_CustomerName As String,  _
                    ByVal Original_Account As String,  _
                    ByVal Original_RegistrationCountry As String,  _
                    ByVal Original_Contract As String,  _
                    ByVal Original_CCY As String,  _
                    ByVal Original_Product As String,  _
                    ByVal Original_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_AmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal Original_DB As String,  _
                    ByVal Original_KapertstG As Global.System.Nullable(Of Double),  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_Soli As Global.System.Nullable(Of Double),  _
                    ByVal Original_KAPISTPFLICHTIG As String,  _
                    ByVal Original_BUNDESLAND As String,  _
                    ByVal Original_IdValueCustomer As String,  _
                    ByVal Original_IdZinsertragsMonat As String,  _
                    ByVal Original_IdErtragJahr As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ValDateFrom.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ValDateFrom.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ValDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ValDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Customer Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Customer,String)
            End If
            If (Original_ValYear.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ValYear.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomerName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CustomerName,String)
            End If
            If (Original_Account Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Account,String)
            End If
            If (Original_RegistrationCountry Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_RegistrationCountry,String)
            End If
            If (Original_Contract Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Contract,String)
            End If
            If (Original_CCY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CCY,String)
            End If
            If (Original_Product Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Product,String)
            End If
            If (Original_Amount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Amount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountEuro.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_AmountEuro.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_DB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DB,String)
            End If
            If (Original_KapertstG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_KapertstG.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Remark,String)
            End If
            If (Original_Soli.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Soli.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_KAPISTPFLICHTIG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_KAPISTPFLICHTIG,String)
            End If
            If (Original_BUNDESLAND Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_BUNDESLAND,String)
            End If
            If (Original_IdValueCustomer Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_IdValueCustomer,String)
            End If
            If (Original_IdZinsertragsMonat Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_IdZinsertragsMonat,String)
            End If
            If (Original_IdErtragJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_IdErtragJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ValDateFrom As Global.System.Nullable(Of Date),  _
                    ByVal ValDate As Global.System.Nullable(Of Date),  _
                    ByVal Customer As String,  _
                    ByVal ValYear As Global.System.Nullable(Of Double),  _
                    ByVal CustomerName As String,  _
                    ByVal Account As String,  _
                    ByVal RegistrationCountry As String,  _
                    ByVal Contract As String,  _
                    ByVal CCY As String,  _
                    ByVal Product As String,  _
                    ByVal Amount As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal AmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal DB As String,  _
                    ByVal KapertstG As Global.System.Nullable(Of Double),  _
                    ByVal Remark As String,  _
                    ByVal Soli As Global.System.Nullable(Of Double),  _
                    ByVal KAPISTPFLICHTIG As String,  _
                    ByVal BUNDESLAND As String,  _
                    ByVal IdValueCustomer As String,  _
                    ByVal IdZinsertragsMonat As String,  _
                    ByVal IdErtragJahr As Global.System.Nullable(Of Double)) As Integer
            If (ValDateFrom.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ValDateFrom.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ValDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ValDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Customer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Customer,String)
            End If
            If (ValYear.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ValYear.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CustomerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CustomerName,String)
            End If
            If (Account Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Account,String)
            End If
            If (RegistrationCountry Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RegistrationCountry,String)
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Contract,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CCY,String)
            End If
            If (Product Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Product,String)
            End If
            If (Amount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Amount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AmountEuro.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AmountEuro.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DB,String)
            End If
            If (KapertstG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(KapertstG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Remark,String)
            End If
            If (Soli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Soli.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (KAPISTPFLICHTIG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(KAPISTPFLICHTIG,String)
            End If
            If (BUNDESLAND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BUNDESLAND,String)
            End If
            If (IdValueCustomer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(IdValueCustomer,String)
            End If
            If (IdZinsertragsMonat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(IdZinsertragsMonat,String)
            End If
            If (IdErtragJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(IdErtragJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ValDateFrom As Global.System.Nullable(Of Date),  _
                    ByVal ValDate As Global.System.Nullable(Of Date),  _
                    ByVal Customer As String,  _
                    ByVal ValYear As Global.System.Nullable(Of Double),  _
                    ByVal CustomerName As String,  _
                    ByVal Account As String,  _
                    ByVal RegistrationCountry As String,  _
                    ByVal Contract As String,  _
                    ByVal CCY As String,  _
                    ByVal Product As String,  _
                    ByVal Amount As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal AmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal DB As String,  _
                    ByVal KapertstG As Global.System.Nullable(Of Double),  _
                    ByVal Remark As String,  _
                    ByVal Soli As Global.System.Nullable(Of Double),  _
                    ByVal KAPISTPFLICHTIG As String,  _
                    ByVal BUNDESLAND As String,  _
                    ByVal IdValueCustomer As String,  _
                    ByVal IdZinsertragsMonat As String,  _
                    ByVal IdErtragJahr As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ValDateFrom As Global.System.Nullable(Of Date),  _
                    ByVal Original_ValDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Customer As String,  _
                    ByVal Original_ValYear As Global.System.Nullable(Of Double),  _
                    ByVal Original_CustomerName As String,  _
                    ByVal Original_Account As String,  _
                    ByVal Original_RegistrationCountry As String,  _
                    ByVal Original_Contract As String,  _
                    ByVal Original_CCY As String,  _
                    ByVal Original_Product As String,  _
                    ByVal Original_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_AmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal Original_DB As String,  _
                    ByVal Original_KapertstG As Global.System.Nullable(Of Double),  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_Soli As Global.System.Nullable(Of Double),  _
                    ByVal Original_KAPISTPFLICHTIG As String,  _
                    ByVal Original_BUNDESLAND As String,  _
                    ByVal Original_IdValueCustomer As String,  _
                    ByVal Original_IdZinsertragsMonat As String,  _
                    ByVal Original_IdErtragJahr As Global.System.Nullable(Of Double)) As Integer
            If (ValDateFrom.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ValDateFrom.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ValDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ValDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Customer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Customer,String)
            End If
            If (ValYear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ValYear.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CustomerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CustomerName,String)
            End If
            If (Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Account,String)
            End If
            If (RegistrationCountry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RegistrationCountry,String)
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Contract,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CCY,String)
            End If
            If (Product Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Product,String)
            End If
            If (Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AmountEuro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AmountEuro.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DB,String)
            End If
            If (KapertstG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(KapertstG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Remark,String)
            End If
            If (Soli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Soli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (KAPISTPFLICHTIG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(KAPISTPFLICHTIG,String)
            End If
            If (BUNDESLAND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BUNDESLAND,String)
            End If
            If (IdValueCustomer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(IdValueCustomer,String)
            End If
            If (IdZinsertragsMonat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(IdZinsertragsMonat,String)
            End If
            If (IdErtragJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(IdErtragJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ID,Integer)
            If (Original_ValDateFrom.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ValDateFrom.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ValDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ValDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Customer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Customer,String)
            End If
            If (Original_ValYear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ValYear.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_CustomerName,String)
            End If
            If (Original_Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Account,String)
            End If
            If (Original_RegistrationCountry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_RegistrationCountry,String)
            End If
            If (Original_Contract Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Contract,String)
            End If
            If (Original_CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_CCY,String)
            End If
            If (Original_Product Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Product,String)
            End If
            If (Original_Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountEuro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_AmountEuro.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_DB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_DB,String)
            End If
            If (Original_KapertstG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_KapertstG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Remark,String)
            End If
            If (Original_Soli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Soli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_KAPISTPFLICHTIG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_KAPISTPFLICHTIG,String)
            End If
            If (Original_BUNDESLAND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_BUNDESLAND,String)
            End If
            If (Original_IdValueCustomer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_IdValueCustomer,String)
            End If
            If (Original_IdZinsertragsMonat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_IdZinsertragsMonat,String)
            End If
            If (Original_IdErtragJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_IdErtragJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_JAHRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZINSERTRAG KUNDEN JAHR"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ErtragsJahr", "ErtragsJahr")
            tableMapping.ColumnMappings.Add("SummeKapErSt", "SummeKapErSt")
            tableMapping.ColumnMappings.Add("SummeSoli", "SummeSoli")
            tableMapping.ColumnMappings.Add("IdBank", "IdBank")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZINSERTRAG KUNDEN JAHR] WHERE (([ID] = @Original_ID) AND ([ErtragsJa"& _ 
                "hr] = @Original_ErtragsJahr) AND ((@IsNull_SummeKapErSt = 1 AND [SummeKapErSt] I"& _ 
                "S NULL) OR ([SummeKapErSt] = @Original_SummeKapErSt)) AND ((@IsNull_SummeSoli = "& _ 
                "1 AND [SummeSoli] IS NULL) OR ([SummeSoli] = @Original_SummeSoli)) AND ((@IsNull"& _ 
                "_IdBank = 1 AND [IdBank] IS NULL) OR ([IdBank] = @Original_IdBank)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ErtragsJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ErtragsJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeKapErSt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeSoli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZINSERTRAG KUNDEN JAHR] ([ErtragsJahr], [SummeKapErSt], [SummeSoli],"& _ 
                " [IdBank]) VALUES (@ErtragsJahr, @SummeKapErSt, @SummeSoli, @IdBank)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ErtragsJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ErtragsJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZINSERTRAG KUNDEN JAHR] SET [ErtragsJahr] = @ErtragsJahr, [SummeKapErSt] "& _ 
                "= @SummeKapErSt, [SummeSoli] = @SummeSoli, [IdBank] = @IdBank WHERE (([ID] = @Or"& _ 
                "iginal_ID) AND ([ErtragsJahr] = @Original_ErtragsJahr) AND ((@IsNull_SummeKapErS"& _ 
                "t = 1 AND [SummeKapErSt] IS NULL) OR ([SummeKapErSt] = @Original_SummeKapErSt)) "& _ 
                "AND ((@IsNull_SummeSoli = 1 AND [SummeSoli] IS NULL) OR ([SummeSoli] = @Original"& _ 
                "_SummeSoli)) AND ((@IsNull_IdBank = 1 AND [IdBank] IS NULL) OR ([IdBank] = @Orig"& _ 
                "inal_IdBank)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ErtragsJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ErtragsJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ErtragsJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ErtragsJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeKapErSt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeSoli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ErtragsJahr, SummeKapErSt, SummeSoli, IdBank"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ["& _ 
                "ZINSERTRAG KUNDEN JAHR]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ErtragsJahr DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_JAHRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZINSERTRAG_KUNDEN_JAHRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_JAHRDataTable = New MeldewesenDataSet.ZINSERTRAG_KUNDEN_JAHRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_JAHRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZINSERTRAG KUNDEN JAHR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_ErtragsJahr As Double, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ErtragsJahr,Double)
            If (Original_SummeKapErSt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SummeKapErSt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_SummeSoli.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SummeSoli.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ErtragsJahr As Double, ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ErtragsJahr,Double)
            If (SummeKapErSt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SummeKapErSt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SummeSoli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SummeSoli.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ErtragsJahr As Double, ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal Original_ErtragsJahr As Double, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ErtragsJahr,Double)
            If (SummeKapErSt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SummeKapErSt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SummeSoli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SummeSoli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ErtragsJahr,Double)
            If (Original_SummeKapErSt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SummeKapErSt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_SummeSoli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SummeSoli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal Original_ErtragsJahr As Double, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_ErtragsJahr, SummeKapErSt, SummeSoli, IdBank, Original_ID, Original_ErtragsJahr, Original_SummeKapErSt, Original_SummeSoli, Original_IdBank)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZINSERTRAG_KUNDEN_MONATTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZINSERTRAG KUNDEN MONAT"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Zinsertragsmonat", "Zinsertragsmonat")
            tableMapping.ColumnMappings.Add("SummeKapErSt", "SummeKapErSt")
            tableMapping.ColumnMappings.Add("SummeSoli", "SummeSoli")
            tableMapping.ColumnMappings.Add("IdZinsertragJahr", "IdZinsertragJahr")
            tableMapping.ColumnMappings.Add("ZinsertragsmonatDATE", "ZinsertragsmonatDATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZINSERTRAG KUNDEN MONAT] WHERE (([ID] = @Original_ID) AND ([Zinsertr"& _ 
                "agsmonat] = @Original_Zinsertragsmonat) AND ((@IsNull_SummeKapErSt = 1 AND [Summ"& _ 
                "eKapErSt] IS NULL) OR ([SummeKapErSt] = @Original_SummeKapErSt)) AND ((@IsNull_S"& _ 
                "ummeSoli = 1 AND [SummeSoli] IS NULL) OR ([SummeSoli] = @Original_SummeSoli)) AN"& _ 
                "D ((@IsNull_IdZinsertragJahr = 1 AND [IdZinsertragJahr] IS NULL) OR ([IdZinsertr"& _ 
                "agJahr] = @Original_IdZinsertragJahr)) AND ((@IsNull_ZinsertragsmonatDATE = 1 AN"& _ 
                "D [ZinsertragsmonatDATE] IS NULL) OR ([ZinsertragsmonatDATE] = @Original_Zinsert"& _ 
                "ragsmonatDATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Zinsertragsmonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zinsertragsmonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeKapErSt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeSoli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZinsertragJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZinsertragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ZinsertragsmonatDATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ZinsertragsmonatDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZINSERTRAG KUNDEN MONAT] ([Zinsertragsmonat], [SummeKapErSt], [Summe"& _ 
                "Soli], [IdZinsertragJahr], [ZinsertragsmonatDATE]) VALUES (@Zinsertragsmonat, @S"& _ 
                "ummeKapErSt, @SummeSoli, @IdZinsertragJahr, @ZinsertragsmonatDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zinsertragsmonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zinsertragsmonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZinsertragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZinsertragsmonatDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZINSERTRAG KUNDEN MONAT] SET [Zinsertragsmonat] = @Zinsertragsmonat, [Sum"& _ 
                "meKapErSt] = @SummeKapErSt, [SummeSoli] = @SummeSoli, [IdZinsertragJahr] = @IdZi"& _ 
                "nsertragJahr, [ZinsertragsmonatDATE] = @ZinsertragsmonatDATE WHERE (([ID] = @Ori"& _ 
                "ginal_ID) AND ([Zinsertragsmonat] = @Original_Zinsertragsmonat) AND ((@IsNull_Su"& _ 
                "mmeKapErSt = 1 AND [SummeKapErSt] IS NULL) OR ([SummeKapErSt] = @Original_SummeK"& _ 
                "apErSt)) AND ((@IsNull_SummeSoli = 1 AND [SummeSoli] IS NULL) OR ([SummeSoli] = "& _ 
                "@Original_SummeSoli)) AND ((@IsNull_IdZinsertragJahr = 1 AND [IdZinsertragJahr] "& _ 
                "IS NULL) OR ([IdZinsertragJahr] = @Original_IdZinsertragJahr)) AND ((@IsNull_Zin"& _ 
                "sertragsmonatDATE = 1 AND [ZinsertragsmonatDATE] IS NULL) OR ([ZinsertragsmonatD"& _ 
                "ATE] = @Original_ZinsertragsmonatDATE)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zinsertragsmonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zinsertragsmonat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZinsertragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZinsertragsmonatDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Zinsertragsmonat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zinsertragsmonat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeKapErSt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeKapErSt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeKapErSt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SummeSoli", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SummeSoli", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SummeSoli", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZinsertragJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZinsertragJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZinsertragJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ZinsertragsmonatDATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ZinsertragsmonatDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZinsertragsmonatDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Zinsertragsmonat, SummeKapErSt, SummeSoli, IdZinsertragJahr, Zi"& _ 
                "nsertragsmonatDATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [ZINSERTRAG KUNDEN MONAT]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Zinsertr"& _ 
                "agsmonatDATE DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_MONATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZINSERTRAG_KUNDEN_MONATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_MONATDataTable = New MeldewesenDataSet.ZINSERTRAG_KUNDEN_MONATDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZINSERTRAG_KUNDEN_MONATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZINSERTRAG KUNDEN MONAT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Zinsertragsmonat As String, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal Original_ZinsertragsmonatDATE As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Zinsertragsmonat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Zinsertragsmonat")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Zinsertragsmonat,String)
            End If
            If (Original_SummeKapErSt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SummeKapErSt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_SummeSoli.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SummeSoli.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_IdZinsertragJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IdZinsertragJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ZinsertragsmonatDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ZinsertragsmonatDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Zinsertragsmonat As String, ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal ZinsertragsmonatDATE As Global.System.Nullable(Of Date)) As Integer
            If (Zinsertragsmonat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Zinsertragsmonat")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Zinsertragsmonat,String)
            End If
            If (SummeKapErSt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SummeKapErSt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SummeSoli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SummeSoli.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdZinsertragJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IdZinsertragJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ZinsertragsmonatDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ZinsertragsmonatDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Zinsertragsmonat As String, ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal ZinsertragsmonatDATE As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_Zinsertragsmonat As String, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal Original_ZinsertragsmonatDATE As Global.System.Nullable(Of Date)) As Integer
            If (Zinsertragsmonat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Zinsertragsmonat")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Zinsertragsmonat,String)
            End If
            If (SummeKapErSt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SummeKapErSt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SummeSoli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SummeSoli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdZinsertragJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IdZinsertragJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ZinsertragsmonatDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ZinsertragsmonatDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            If (Original_Zinsertragsmonat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Zinsertragsmonat")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Zinsertragsmonat,String)
            End If
            If (Original_SummeKapErSt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SummeKapErSt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_SummeSoli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SummeSoli.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_IdZinsertragJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_IdZinsertragJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ZinsertragsmonatDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ZinsertragsmonatDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SummeKapErSt As Global.System.Nullable(Of Double), ByVal SummeSoli As Global.System.Nullable(Of Double), ByVal IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal ZinsertragsmonatDATE As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_Zinsertragsmonat As String, ByVal Original_SummeKapErSt As Global.System.Nullable(Of Double), ByVal Original_SummeSoli As Global.System.Nullable(Of Double), ByVal Original_IdZinsertragJahr As Global.System.Nullable(Of Double), ByVal Original_ZinsertragsmonatDATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_Zinsertragsmonat, SummeKapErSt, SummeSoli, IdZinsertragJahr, ZinsertragsmonatDATE, Original_ID, Original_Zinsertragsmonat, Original_SummeKapErSt, Original_SummeSoli, Original_IdZinsertragJahr, Original_ZinsertragsmonatDATE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EMPLOYES_YEAR_AVERAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EMPLOYES YEAR AVERAGE"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("JahrLfd", "JahrLfd")
            tableMapping.ColumnMappings.Add("1VJ", "1VJ")
            tableMapping.ColumnMappings.Add("2VJ", "2VJ")
            tableMapping.ColumnMappings.Add("3VJ", "3VJ")
            tableMapping.ColumnMappings.Add("4VJ", "4VJ")
            tableMapping.ColumnMappings.Add("EmplAverage", "EmplAverage")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EMPLOYES YEAR AVERAGE] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EMPLOYES YEAR AVERAGE] ([JahrLfd], [1VJ], [2VJ], [3VJ], [4VJ], [Empl"& _ 
                "Average]) VALUES (@JahrLfd, @p1, @p4, @p7, @p10, @EmplAverage)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JahrLfd", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JahrLfd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "1VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "2VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "3VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "4VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmplAverage", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplAverage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EMPLOYES YEAR AVERAGE] SET [JahrLfd] = @JahrLfd, [1VJ] = @p1, [2VJ] = @p4"& _ 
                ", [3VJ] = @p7, [4VJ] = @p10, [EmplAverage] = @EmplAverage WHERE (([ID] = @Origin"& _ 
                "al_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JahrLfd", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JahrLfd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "1VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "2VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "3VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "4VJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmplAverage", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplAverage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, JahrLfd, [1VJ], [2VJ], [3VJ], [4VJ], EmplAverage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   [EMPLOYES YEAR AVERAGE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.EMPLOYES_YEAR_AVERAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.EMPLOYES_YEAR_AVERAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.EMPLOYES_YEAR_AVERAGEDataTable = New MeldewesenDataSet.EMPLOYES_YEAR_AVERAGEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.EMPLOYES_YEAR_AVERAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EMPLOYES YEAR AVERAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal JahrLfd As Global.System.Nullable(Of Double), ByVal p1 As Global.System.Nullable(Of Double), ByVal p4 As Global.System.Nullable(Of Double), ByVal p7 As Global.System.Nullable(Of Double), ByVal p10 As Global.System.Nullable(Of Double), ByVal EmplAverage As Global.System.Nullable(Of Double)) As Integer
            If (JahrLfd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(JahrLfd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EmplAverage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(EmplAverage.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal JahrLfd As Global.System.Nullable(Of Double), ByVal p1 As Global.System.Nullable(Of Double), ByVal p4 As Global.System.Nullable(Of Double), ByVal p7 As Global.System.Nullable(Of Double), ByVal p10 As Global.System.Nullable(Of Double), ByVal EmplAverage As Global.System.Nullable(Of Double), ByVal Original_ID As Integer) As Integer
            If (JahrLfd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(JahrLfd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EmplAverage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(EmplAverage.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTA_FormsTill2013TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTA_FormsTill2013"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("FormSchema", "FormSchema")
            tableMapping.ColumnMappings.Add("FormSchemaName", "FormSchemaName")
            tableMapping.ColumnMappings.Add("IdZVSTA_Meldejahr", "IdZVSTA_Meldejahr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTA_FormsTill2013] WHERE (([ID] = @Original_ID) AND ([FormSchema] "& _ 
                "= @Original_FormSchema) AND ((@IsNull_FormSchemaName = 1 AND [FormSchemaName] IS"& _ 
                " NULL) OR ([FormSchemaName] = @Original_FormSchemaName)) AND ((@IsNull_IdZVSTA_M"& _ 
                "eldejahr = 1 AND [IdZVSTA_Meldejahr] IS NULL) OR ([IdZVSTA_Meldejahr] = @Origina"& _ 
                "l_IdZVSTA_Meldejahr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormSchema", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchema", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormSchemaName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormSchemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTA_FormsTill2013] ([FormSchema], [FormSchemaName], [IdZVSTA_Melde"& _ 
                "jahr]) VALUES (@FormSchema, @FormSchemaName, @IdZVSTA_Meldejahr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormSchema", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchema", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormSchemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTA_FormsTill2013] SET [FormSchema] = @FormSchema, [FormSchemaName] = @"& _ 
                "FormSchemaName, [IdZVSTA_Meldejahr] = @IdZVSTA_Meldejahr WHERE (([ID] = @Origina"& _ 
                "l_ID) AND ([FormSchema] = @Original_FormSchema) AND ((@IsNull_FormSchemaName = 1"& _ 
                " AND [FormSchemaName] IS NULL) OR ([FormSchemaName] = @Original_FormSchemaName))"& _ 
                " AND ((@IsNull_IdZVSTA_Meldejahr = 1 AND [IdZVSTA_Meldejahr] IS NULL) OR ([IdZVS"& _ 
                "TA_Meldejahr] = @Original_IdZVSTA_Meldejahr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormSchema", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchema", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormSchemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormSchema", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchema", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormSchemaName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormSchemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormSchemaName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZVSTA_Meldejahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Meldejahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, FormSchema, FormSchemaName, IdZVSTA_Meldejahr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            "& _ 
                "ZVSTA_FormsTill2013"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTA_FormsTill2013DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTA_FormsTill2013DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTA_FormsTill2013DataTable = New MeldewesenDataSet.ZVSTA_FormsTill2013DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTA_FormsTill2013DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTA_FormsTill2013")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_FormSchema As String, ByVal Original_FormSchemaName As String, ByVal Original_IdZVSTA_Meldejahr As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_FormSchema Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FormSchema")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FormSchema,String)
            End If
            If (Original_FormSchemaName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FormSchemaName,String)
            End If
            If (Original_IdZVSTA_Meldejahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_IdZVSTA_Meldejahr.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FormSchema As String, ByVal FormSchemaName As String, ByVal IdZVSTA_Meldejahr As Global.System.Nullable(Of Date)) As Integer
            If (FormSchema Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormSchema")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FormSchema,String)
            End If
            If (FormSchemaName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FormSchemaName,String)
            End If
            If (IdZVSTA_Meldejahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IdZVSTA_Meldejahr.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FormSchema As String, ByVal FormSchemaName As String, ByVal IdZVSTA_Meldejahr As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_FormSchema As String, ByVal Original_FormSchemaName As String, ByVal Original_IdZVSTA_Meldejahr As Global.System.Nullable(Of Date)) As Integer
            If (FormSchema Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormSchema")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FormSchema,String)
            End If
            If (FormSchemaName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FormSchemaName,String)
            End If
            If (IdZVSTA_Meldejahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IdZVSTA_Meldejahr.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID,Integer)
            If (Original_FormSchema Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FormSchema")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FormSchema,String)
            End If
            If (Original_FormSchemaName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FormSchemaName,String)
            End If
            If (Original_IdZVSTA_Meldejahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IdZVSTA_Meldejahr.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FormSchemaName As String, ByVal IdZVSTA_Meldejahr As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_FormSchema As String, ByVal Original_FormSchemaName As String, ByVal Original_IdZVSTA_Meldejahr As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FormSchema, FormSchemaName, IdZVSTA_Meldejahr, Original_ID, Original_FormSchema, Original_FormSchemaName, Original_IdZVSTA_Meldejahr)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTA_ProdTill2013TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTA_ProdTill2013"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Feldname", "Feldname")
            tableMapping.ColumnMappings.Add("Feldposition", "Feldposition")
            tableMapping.ColumnMappings.Add("Feldeinheit", "Feldeinheit")
            tableMapping.ColumnMappings.Add("Felddim", "Felddim")
            tableMapping.ColumnMappings.Add("Feldvalue", "Feldvalue")
            tableMapping.ColumnMappings.Add("FeldSQLcommand", "FeldSQLcommand")
            tableMapping.ColumnMappings.Add("FeldvalueRep", "FeldvalueRep")
            tableMapping.ColumnMappings.Add("FeldSQLcommandSum", "FeldSQLcommandSum")
            tableMapping.ColumnMappings.Add("Feldmemo", "Feldmemo")
            tableMapping.ColumnMappings.Add("IdZVSTA_Forms", "IdZVSTA_Forms")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTA_ProdTill2013] WHERE (([ID] = @Original_ID) AND ((@IsNull_Feldn"& _ 
                "ame = 1 AND [Feldname] IS NULL) OR ([Feldname] = @Original_Feldname)) AND ((@IsN"& _ 
                "ull_Feldposition = 1 AND [Feldposition] IS NULL) OR ([Feldposition] = @Original_"& _ 
                "Feldposition)) AND ((@IsNull_Feldeinheit = 1 AND [Feldeinheit] IS NULL) OR ([Fel"& _ 
                "deinheit] = @Original_Feldeinheit)) AND ((@IsNull_Felddim = 1 AND [Felddim] IS N"& _ 
                "ULL) OR ([Felddim] = @Original_Felddim)) AND ((@IsNull_Feldvalue = 1 AND [Feldva"& _ 
                "lue] IS NULL) OR ([Feldvalue] = @Original_Feldvalue)) AND ((@IsNull_FeldvalueRep"& _ 
                " = 1 AND [FeldvalueRep] IS NULL) OR ([FeldvalueRep] = @Original_FeldvalueRep)) A"& _ 
                "ND ((@IsNull_IdZVSTA_Forms = 1 AND [IdZVSTA_Forms] IS NULL) OR ([IdZVSTA_Forms] "& _ 
                "= @Original_IdZVSTA_Forms)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldname", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldposition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldposition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldeinheit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldeinheit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Felddim", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Felddim", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldvalue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldvalue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FeldvalueRep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FeldvalueRep", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZVSTA_Forms", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZVSTA_Forms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTA_ProdTill2013] ([Feldname], [Feldposition], [Feldeinheit], [Fel"& _ 
                "ddim], [Feldvalue], [FeldSQLcommand], [FeldvalueRep], [FeldSQLcommandSum], [Feld"& _ 
                "memo], [IdZVSTA_Forms]) VALUES (@Feldname, @Feldposition, @Feldeinheit, @Felddim"& _ 
                ", @Feldvalue, @FeldSQLcommand, @FeldvalueRep, @FeldSQLcommandSum, @Feldmemo, @Id"& _ 
                "ZVSTA_Forms)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldposition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldeinheit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Felddim", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldvalue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldSQLcommand", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldvalueRep", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldSQLcommandSum", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldSQLcommandSum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldmemo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZVSTA_Forms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTA_ProdTill2013] SET [Feldname] = @Feldname, [Feldposition] = @Feldpos"& _ 
                "ition, [Feldeinheit] = @Feldeinheit, [Felddim] = @Felddim, [Feldvalue] = @Feldva"& _ 
                "lue, [FeldSQLcommand] = @FeldSQLcommand, [FeldvalueRep] = @FeldvalueRep, [FeldSQ"& _ 
                "LcommandSum] = @FeldSQLcommandSum, [Feldmemo] = @Feldmemo, [IdZVSTA_Forms] = @Id"& _ 
                "ZVSTA_Forms WHERE (([ID] = @Original_ID) AND ((@IsNull_Feldname = 1 AND [Feldnam"& _ 
                "e] IS NULL) OR ([Feldname] = @Original_Feldname)) AND ((@IsNull_Feldposition = 1"& _ 
                " AND [Feldposition] IS NULL) OR ([Feldposition] = @Original_Feldposition)) AND ("& _ 
                "(@IsNull_Feldeinheit = 1 AND [Feldeinheit] IS NULL) OR ([Feldeinheit] = @Origina"& _ 
                "l_Feldeinheit)) AND ((@IsNull_Felddim = 1 AND [Felddim] IS NULL) OR ([Felddim] ="& _ 
                " @Original_Felddim)) AND ((@IsNull_Feldvalue = 1 AND [Feldvalue] IS NULL) OR ([F"& _ 
                "eldvalue] = @Original_Feldvalue)) AND ((@IsNull_FeldvalueRep = 1 AND [FeldvalueR"& _ 
                "ep] IS NULL) OR ([FeldvalueRep] = @Original_FeldvalueRep)) AND ((@IsNull_IdZVSTA"& _ 
                "_Forms = 1 AND [IdZVSTA_Forms] IS NULL) OR ([IdZVSTA_Forms] = @Original_IdZVSTA_"& _ 
                "Forms)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldposition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldeinheit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Felddim", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldvalue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldSQLcommand", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldvalueRep", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeldSQLcommandSum", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldSQLcommandSum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feldmemo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdZVSTA_Forms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldname", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldposition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldposition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldposition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldeinheit", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldeinheit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldeinheit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Felddim", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Felddim", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Felddim", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Feldvalue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Feldvalue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feldvalue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FeldvalueRep", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FeldvalueRep", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeldvalueRep", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdZVSTA_Forms", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdZVSTA_Forms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdZVSTA_Forms", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Feldname, Feldposition, Feldeinheit, Felddim, Feldvalue, FeldSQ"& _ 
                "Lcommand, FeldvalueRep, FeldSQLcommandSum, Feldmemo, IdZVSTA_Forms"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    ZVSTA_ProdTill2013"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTA_ProdTill2013DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTA_ProdTill2013DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTA_ProdTill2013DataTable = New MeldewesenDataSet.ZVSTA_ProdTill2013DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTA_ProdTill2013DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTA_ProdTill2013")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Feldname As String, ByVal Original_Feldposition As String, ByVal Original_Feldeinheit As String, ByVal Original_Felddim As String, ByVal Original_Feldvalue As Global.System.Nullable(Of Double), ByVal Original_FeldvalueRep As Global.System.Nullable(Of Double), ByVal Original_IdZVSTA_Forms As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Feldname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Feldname,String)
            End If
            If (Original_Feldposition Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Feldposition,String)
            End If
            If (Original_Feldeinheit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Feldeinheit,String)
            End If
            If (Original_Felddim Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Felddim,String)
            End If
            If (Original_Feldvalue.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Feldvalue.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_FeldvalueRep.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FeldvalueRep.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_IdZVSTA_Forms Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IdZVSTA_Forms,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Feldname As String, ByVal Feldposition As String, ByVal Feldeinheit As String, ByVal Felddim As String, ByVal Feldvalue As Global.System.Nullable(Of Double), ByVal FeldSQLcommand As String, ByVal FeldvalueRep As Global.System.Nullable(Of Double), ByVal FeldSQLcommandSum As String, ByVal Feldmemo As String, ByVal IdZVSTA_Forms As String) As Integer
            If (Feldname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Feldname,String)
            End If
            If (Feldposition Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Feldposition,String)
            End If
            If (Feldeinheit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Feldeinheit,String)
            End If
            If (Felddim Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Felddim,String)
            End If
            If (Feldvalue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Feldvalue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FeldSQLcommand Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FeldSQLcommand,String)
            End If
            If (FeldvalueRep.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FeldvalueRep.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (FeldSQLcommandSum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FeldSQLcommandSum,String)
            End If
            If (Feldmemo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Feldmemo,String)
            End If
            If (IdZVSTA_Forms Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IdZVSTA_Forms,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Feldname As String,  _
                    ByVal Feldposition As String,  _
                    ByVal Feldeinheit As String,  _
                    ByVal Felddim As String,  _
                    ByVal Feldvalue As Global.System.Nullable(Of Double),  _
                    ByVal FeldSQLcommand As String,  _
                    ByVal FeldvalueRep As Global.System.Nullable(Of Double),  _
                    ByVal FeldSQLcommandSum As String,  _
                    ByVal Feldmemo As String,  _
                    ByVal IdZVSTA_Forms As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Feldname As String,  _
                    ByVal Original_Feldposition As String,  _
                    ByVal Original_Feldeinheit As String,  _
                    ByVal Original_Felddim As String,  _
                    ByVal Original_Feldvalue As Global.System.Nullable(Of Double),  _
                    ByVal Original_FeldvalueRep As Global.System.Nullable(Of Double),  _
                    ByVal Original_IdZVSTA_Forms As String) As Integer
            If (Feldname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Feldname,String)
            End If
            If (Feldposition Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Feldposition,String)
            End If
            If (Feldeinheit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Feldeinheit,String)
            End If
            If (Felddim Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Felddim,String)
            End If
            If (Feldvalue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Feldvalue.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FeldSQLcommand Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FeldSQLcommand,String)
            End If
            If (FeldvalueRep.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FeldvalueRep.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (FeldSQLcommandSum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FeldSQLcommandSum,String)
            End If
            If (Feldmemo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Feldmemo,String)
            End If
            If (IdZVSTA_Forms Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IdZVSTA_Forms,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Integer)
            If (Original_Feldname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Feldname,String)
            End If
            If (Original_Feldposition Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Feldposition,String)
            End If
            If (Original_Feldeinheit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Feldeinheit,String)
            End If
            If (Original_Felddim Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Felddim,String)
            End If
            If (Original_Feldvalue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Feldvalue.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_FeldvalueRep.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_FeldvalueRep.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_IdZVSTA_Forms Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_IdZVSTA_Forms,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTATill2013TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTATill2013"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ZVSTAMeldeJahr", "ZVSTAMeldeJahr")
            tableMapping.ColumnMappings.Add("MeldeJahr", "MeldeJahr")
            tableMapping.ColumnMappings.Add("Bemerkungen", "Bemerkungen")
            tableMapping.ColumnMappings.Add("USER", "USER")
            tableMapping.ColumnMappings.Add("IdBank", "IdBank")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTATill2013] WHERE (([ID] = @Original_ID) AND ([ZVSTAMeldeJahr] = "& _ 
                "@Original_ZVSTAMeldeJahr) AND ((@IsNull_MeldeJahr = 1 AND [MeldeJahr] IS NULL) O"& _ 
                "R ([MeldeJahr] = @Original_MeldeJahr)) AND ((@IsNull_USER = 1 AND [USER] IS NULL"& _ 
                ") OR ([USER] = @Original_USER)) AND ((@IsNull_IdBank = 1 AND [IdBank] IS NULL) O"& _ 
                "R ([IdBank] = @Original_IdBank)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ZVSTAMeldeJahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZVSTAMeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTATill2013] ([ZVSTAMeldeJahr], [MeldeJahr], [Bemerkungen], [USER]"& _ 
                ", [IdBank]) VALUES (@ZVSTAMeldeJahr, @MeldeJahr, @Bemerkungen, @USER, @IdBank)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZVSTAMeldeJahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZVSTAMeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bemerkungen", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bemerkungen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTATill2013] SET [ZVSTAMeldeJahr] = @ZVSTAMeldeJahr, [MeldeJahr] = @Mel"& _ 
                "deJahr, [Bemerkungen] = @Bemerkungen, [USER] = @USER, [IdBank] = @IdBank WHERE ("& _ 
                "([ID] = @Original_ID) AND ([ZVSTAMeldeJahr] = @Original_ZVSTAMeldeJahr) AND ((@I"& _ 
                "sNull_MeldeJahr = 1 AND [MeldeJahr] IS NULL) OR ([MeldeJahr] = @Original_MeldeJa"& _ 
                "hr)) AND ((@IsNull_USER = 1 AND [USER] IS NULL) OR ([USER] = @Original_USER)) AN"& _ 
                "D ((@IsNull_IdBank = 1 AND [IdBank] IS NULL) OR ([IdBank] = @Original_IdBank)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZVSTAMeldeJahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZVSTAMeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bemerkungen", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bemerkungen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ZVSTAMeldeJahr", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZVSTAMeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ZVSTAMeldeJahr, MeldeJahr, Bemerkungen, [USER], IdBank"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         ZVSTATill2013"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTATill2013DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTATill2013DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTATill2013DataTable = New MeldewesenDataSet.ZVSTATill2013DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTATill2013DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTATill2013")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_ZVSTAMeldeJahr As Date, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ZVSTAMeldeJahr,Date)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_USER,String)
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ZVSTAMeldeJahr As Date, ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal Bemerkungen As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ZVSTAMeldeJahr,Date)
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Bemerkungen Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Bemerkungen,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(USER,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ZVSTAMeldeJahr As Date, ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal Bemerkungen As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal Original_ZVSTAMeldeJahr As Date, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ZVSTAMeldeJahr,Date)
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Bemerkungen Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Bemerkungen,String)
            End If
            If (USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(USER,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ZVSTAMeldeJahr,Date)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_USER,String)
            End If
            If (Original_IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal Bemerkungen As String, ByVal USER As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal Original_ZVSTAMeldeJahr As Date, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_USER As String, ByVal Original_IdBank As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_ZVSTAMeldeJahr, MeldeJahr, Bemerkungen, USER, IdBank, Original_ID, Original_ZVSTAMeldeJahr, Original_MeldeJahr, Original_USER, Original_IdBank)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTAT_Parameters_from2014TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTAT_Parameters_from2014"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("FormNr", "FormNr")
            tableMapping.ColumnMappings.Add("FormName", "FormName")
            tableMapping.ColumnMappings.Add("PositionNr", "PositionNr")
            tableMapping.ColumnMappings.Add("PositionName", "PositionName")
            tableMapping.ColumnMappings.Add("Landkontext", "Landkontext")
            tableMapping.ColumnMappings.Add("LandCode", "LandCode")
            tableMapping.ColumnMappings.Add("Anzahl", "Anzahl")
            tableMapping.ColumnMappings.Add("Wert", "Wert")
            tableMapping.ColumnMappings.Add("PositionSQLcommand", "PositionSQLcommand")
            tableMapping.ColumnMappings.Add("LfdNr", "LfdNr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTAT_Parameters_from2014] WHERE (([ID] = @Original_ID) AND ((@IsNu"& _ 
                "ll_FormNr = 1 AND [FormNr] IS NULL) OR ([FormNr] = @Original_FormNr)) AND ((@IsN"& _ 
                "ull_FormName = 1 AND [FormName] IS NULL) OR ([FormName] = @Original_FormName)) A"& _ 
                "ND ((@IsNull_PositionNr = 1 AND [PositionNr] IS NULL) OR ([PositionNr] = @Origin"& _ 
                "al_PositionNr)) AND ((@IsNull_PositionName = 1 AND [PositionName] IS NULL) OR (["& _ 
                "PositionName] = @Original_PositionName)) AND ((@IsNull_Landkontext = 1 AND [Land"& _ 
                "kontext] IS NULL) OR ([Landkontext] = @Original_Landkontext)) AND ((@IsNull_Land"& _ 
                "Code = 1 AND [LandCode] IS NULL) OR ([LandCode] = @Original_LandCode)) AND ((@Is"& _ 
                "Null_Anzahl = 1 AND [Anzahl] IS NULL) OR ([Anzahl] = @Original_Anzahl)) AND ((@I"& _ 
                "sNull_Wert = 1 AND [Wert] IS NULL) OR ([Wert] = @Original_Wert)) AND ((@IsNull_P"& _ 
                "ositionSQLcommand = 1 AND [PositionSQLcommand] IS NULL) OR ([PositionSQLcommand]"& _ 
                " = @Original_PositionSQLcommand)) AND ([LfdNr] = @Original_LfdNr))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Landkontext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LandCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anzahl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anzahl", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wert", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionSQLcommand", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LfdNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LfdNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTAT_Parameters_from2014] ([FormNr], [FormName], [PositionNr], [Po"& _ 
                "sitionName], [Landkontext], [LandCode], [Anzahl], [Wert], [PositionSQLcommand], "& _ 
                "[LfdNr]) VALUES (@FormNr, @FormName, @PositionNr, @PositionName, @Landkontext, @"& _ 
                "LandCode, @Anzahl, @Wert, @PositionSQLcommand, @LfdNr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anzahl", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wert", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LfdNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LfdNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTAT_Parameters_from2014] SET [FormNr] = @FormNr, [FormName] = @FormNam"& _ 
                "e, [PositionNr] = @PositionNr, [PositionName] = @PositionName, [Landkontext] = @"& _ 
                "Landkontext, [LandCode] = @LandCode, [Anzahl] = @Anzahl, [Wert] = @Wert, [Positi"& _ 
                "onSQLcommand] = @PositionSQLcommand, [LfdNr] = @LfdNr WHERE (([ID] = @Original_I"& _ 
                "D) AND ((@IsNull_FormNr = 1 AND [FormNr] IS NULL) OR ([FormNr] = @Original_FormN"& _ 
                "r)) AND ((@IsNull_FormName = 1 AND [FormName] IS NULL) OR ([FormName] = @Origina"& _ 
                "l_FormName)) AND ((@IsNull_PositionNr = 1 AND [PositionNr] IS NULL) OR ([Positio"& _ 
                "nNr] = @Original_PositionNr)) AND ((@IsNull_PositionName = 1 AND [PositionName] "& _ 
                "IS NULL) OR ([PositionName] = @Original_PositionName)) AND ((@IsNull_Landkontext"& _ 
                " = 1 AND [Landkontext] IS NULL) OR ([Landkontext] = @Original_Landkontext)) AND "& _ 
                "((@IsNull_LandCode = 1 AND [LandCode] IS NULL) OR ([LandCode] = @Original_LandCo"& _ 
                "de)) AND ((@IsNull_Anzahl = 1 AND [Anzahl] IS NULL) OR ([Anzahl] = @Original_Anz"& _ 
                "ahl)) AND ((@IsNull_Wert = 1 AND [Wert] IS NULL) OR ([Wert] = @Original_Wert)) A"& _ 
                "ND ((@IsNull_PositionSQLcommand = 1 AND [PositionSQLcommand] IS NULL) OR ([Posit"& _ 
                "ionSQLcommand] = @Original_PositionSQLcommand)) AND ([LfdNr] = @Original_LfdNr))"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anzahl", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wert", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LfdNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LfdNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FormName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Landkontext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LandCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anzahl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anzahl", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wert", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionSQLcommand", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LfdNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LfdNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, FormNr, FormName, PositionNr, PositionName, Landkontext, LandCo"& _ 
                "de, Anzahl, Wert, PositionSQLcommand, LfdNr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ZVSTAT_Parameters_f"& _ 
                "rom2014"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY LfdNr"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Parameters_from2014DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTAT_Parameters_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Parameters_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Parameters_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Parameters_from2014DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTAT_Parameters_from2014")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_FormNr As String, ByVal Original_FormName As String, ByVal Original_PositionNr As String, ByVal Original_PositionName As String, ByVal Original_Landkontext As String, ByVal Original_LandCode As String, ByVal Original_Anzahl As String, ByVal Original_Wert As String, ByVal Original_PositionSQLcommand As String, ByVal Original_LfdNr As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_FormNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FormNr,String)
            End If
            If (Original_FormName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FormName,String)
            End If
            If (Original_PositionNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PositionNr,String)
            End If
            If (Original_PositionName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PositionName,String)
            End If
            If (Original_Landkontext Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Landkontext,String)
            End If
            If (Original_LandCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LandCode,String)
            End If
            If (Original_Anzahl Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Anzahl,String)
            End If
            If (Original_Wert Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Wert,String)
            End If
            If (Original_PositionSQLcommand Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PositionSQLcommand,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_LfdNr,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FormNr As String, ByVal FormName As String, ByVal PositionNr As String, ByVal PositionName As String, ByVal Landkontext As String, ByVal LandCode As String, ByVal Anzahl As String, ByVal Wert As String, ByVal PositionSQLcommand As String, ByVal LfdNr As Double) As Integer
            If (FormNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FormNr,String)
            End If
            If (FormName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FormName,String)
            End If
            If (PositionNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PositionNr,String)
            End If
            If (PositionName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PositionName,String)
            End If
            If (Landkontext Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Landkontext,String)
            End If
            If (LandCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LandCode,String)
            End If
            If (Anzahl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Anzahl,String)
            End If
            If (Wert Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Wert,String)
            End If
            If (PositionSQLcommand Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PositionSQLcommand,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(LfdNr,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FormNr As String,  _
                    ByVal FormName As String,  _
                    ByVal PositionNr As String,  _
                    ByVal PositionName As String,  _
                    ByVal Landkontext As String,  _
                    ByVal LandCode As String,  _
                    ByVal Anzahl As String,  _
                    ByVal Wert As String,  _
                    ByVal PositionSQLcommand As String,  _
                    ByVal LfdNr As Double,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_FormNr As String,  _
                    ByVal Original_FormName As String,  _
                    ByVal Original_PositionNr As String,  _
                    ByVal Original_PositionName As String,  _
                    ByVal Original_Landkontext As String,  _
                    ByVal Original_LandCode As String,  _
                    ByVal Original_Anzahl As String,  _
                    ByVal Original_Wert As String,  _
                    ByVal Original_PositionSQLcommand As String,  _
                    ByVal Original_LfdNr As Double) As Integer
            If (FormNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FormNr,String)
            End If
            If (FormName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FormName,String)
            End If
            If (PositionNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PositionNr,String)
            End If
            If (PositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PositionName,String)
            End If
            If (Landkontext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Landkontext,String)
            End If
            If (LandCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LandCode,String)
            End If
            If (Anzahl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Anzahl,String)
            End If
            If (Wert Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Wert,String)
            End If
            If (PositionSQLcommand Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PositionSQLcommand,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(LfdNr,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Integer)
            If (Original_FormNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FormNr,String)
            End If
            If (Original_FormName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FormName,String)
            End If
            If (Original_PositionNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PositionNr,String)
            End If
            If (Original_PositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PositionName,String)
            End If
            If (Original_Landkontext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Landkontext,String)
            End If
            If (Original_LandCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_LandCode,String)
            End If
            If (Original_Anzahl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Anzahl,String)
            End If
            If (Original_Wert Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Wert,String)
            End If
            If (Original_PositionSQLcommand Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PositionSQLcommand,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_LfdNr,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTAT_Details_from2014TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTAT_Details_from2014"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Reference", "Reference")
            tableMapping.ColumnMappings.Add("ReportYear", "ReportYear")
            tableMapping.ColumnMappings.Add("RegisterDate", "RegisterDate")
            tableMapping.ColumnMappings.Add("ValueDate", "ValueDate")
            tableMapping.ColumnMappings.Add("Orig_Cur", "Orig_Cur")
            tableMapping.ColumnMappings.Add("Orig_Amt", "Orig_Amt")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            tableMapping.ColumnMappings.Add("Amt_EUR", "Amt_EUR")
            tableMapping.ColumnMappings.Add("Paym_Art", "Paym_Art")
            tableMapping.ColumnMappings.Add("IdMeldepositionen", "IdMeldepositionen")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTAT_Details_from2014] WHERE (([ID] = @Original_ID) AND ((@IsNull_"& _ 
                "Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Descrip"& _ 
                "tion)) AND ((@IsNull_Reference = 1 AND [Reference] IS NULL) OR ([Reference] = @O"& _ 
                "riginal_Reference)) AND ((@IsNull_ReportYear = 1 AND [ReportYear] IS NULL) OR (["& _ 
                "ReportYear] = @Original_ReportYear)) AND ((@IsNull_RegisterDate = 1 AND [Registe"& _ 
                "rDate] IS NULL) OR ([RegisterDate] = @Original_RegisterDate)) AND ((@IsNull_Valu"& _ 
                "eDate = 1 AND [ValueDate] IS NULL) OR ([ValueDate] = @Original_ValueDate)) AND ("& _ 
                "(@IsNull_Orig_Cur = 1 AND [Orig_Cur] IS NULL) OR ([Orig_Cur] = @Original_Orig_Cu"& _ 
                "r)) AND ((@IsNull_Orig_Amt = 1 AND [Orig_Amt] IS NULL) OR ([Orig_Amt] = @Origina"& _ 
                "l_Orig_Amt)) AND ((@IsNull_ExchangeRate = 1 AND [ExchangeRate] IS NULL) OR ([Exc"& _ 
                "hangeRate] = @Original_ExchangeRate)) AND ((@IsNull_Amt_EUR = 1 AND [Amt_EUR] IS"& _ 
                " NULL) OR ([Amt_EUR] = @Original_Amt_EUR)) AND ((@IsNull_Paym_Art = 1 AND [Paym_"& _ 
                "Art] IS NULL) OR ([Paym_Art] = @Original_Paym_Art)) AND ((@IsNull_IdMeldepositio"& _ 
                "nen = 1 AND [IdMeldepositionen] IS NULL) OR ([IdMeldepositionen] = @Original_IdM"& _ 
                "eldepositionen)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Reference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Orig_Cur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Orig_Cur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Orig_Amt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Orig_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_EUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Paym_Art", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paym_Art", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTAT_Details_from2014] ([Description], [Reference], [ReportYear], "& _ 
                "[RegisterDate], [ValueDate], [Orig_Cur], [Orig_Amt], [ExchangeRate], [Amt_EUR], "& _ 
                "[Paym_Art], [IdMeldepositionen]) VALUES (@Description, @Reference, @ReportYear, "& _ 
                "@RegisterDate, @ValueDate, @Orig_Cur, @Orig_Amt, @ExchangeRate, @Amt_EUR, @Paym_"& _ 
                "Art, @IdMeldepositionen)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Orig_Cur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Orig_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paym_Art", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTAT_Details_from2014] SET [Description] = @Description, [Reference] = "& _ 
                "@Reference, [ReportYear] = @ReportYear, [RegisterDate] = @RegisterDate, [ValueDa"& _ 
                "te] = @ValueDate, [Orig_Cur] = @Orig_Cur, [Orig_Amt] = @Orig_Amt, [ExchangeRate]"& _ 
                " = @ExchangeRate, [Amt_EUR] = @Amt_EUR, [Paym_Art] = @Paym_Art, [IdMeldeposition"& _ 
                "en] = @IdMeldepositionen WHERE (([ID] = @Original_ID) AND ((@IsNull_Description "& _ 
                "= 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ("& _ 
                "(@IsNull_Reference = 1 AND [Reference] IS NULL) OR ([Reference] = @Original_Refe"& _ 
                "rence)) AND ((@IsNull_ReportYear = 1 AND [ReportYear] IS NULL) OR ([ReportYear] "& _ 
                "= @Original_ReportYear)) AND ((@IsNull_RegisterDate = 1 AND [RegisterDate] IS NU"& _ 
                "LL) OR ([RegisterDate] = @Original_RegisterDate)) AND ((@IsNull_ValueDate = 1 AN"& _ 
                "D [ValueDate] IS NULL) OR ([ValueDate] = @Original_ValueDate)) AND ((@IsNull_Ori"& _ 
                "g_Cur = 1 AND [Orig_Cur] IS NULL) OR ([Orig_Cur] = @Original_Orig_Cur)) AND ((@I"& _ 
                "sNull_Orig_Amt = 1 AND [Orig_Amt] IS NULL) OR ([Orig_Amt] = @Original_Orig_Amt))"& _ 
                " AND ((@IsNull_ExchangeRate = 1 AND [ExchangeRate] IS NULL) OR ([ExchangeRate] ="& _ 
                " @Original_ExchangeRate)) AND ((@IsNull_Amt_EUR = 1 AND [Amt_EUR] IS NULL) OR (["& _ 
                "Amt_EUR] = @Original_Amt_EUR)) AND ((@IsNull_Paym_Art = 1 AND [Paym_Art] IS NULL"& _ 
                ") OR ([Paym_Art] = @Original_Paym_Art)) AND ((@IsNull_IdMeldepositionen = 1 AND "& _ 
                "[IdMeldepositionen] IS NULL) OR ([IdMeldepositionen] = @Original_IdMeldeposition"& _ 
                "en)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Orig_Cur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Orig_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Paym_Art", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Reference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Orig_Cur", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Orig_Cur", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Cur", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Orig_Amt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Orig_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Orig_Amt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_EUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_EUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Paym_Art", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Paym_Art", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Paym_Art", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldepositionen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldepositionen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Description, Reference, ReportYear, RegisterDate, ValueDate, Or"& _ 
                "ig_Cur, Orig_Amt, ExchangeRate, Amt_EUR, Paym_Art, IdMeldepositionen"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "      ZVSTAT_Details_from2014"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Amt_EUR, Description, ExchangeRate, ID, IdMeldepositionen, Orig_Amt, Orig_"& _ 
                "Cur, Paym_Art, Reference, RegisterDate, ReportYear, ValueDate FROM ZVSTAT_Detail"& _ 
                "s_from2014 WHERE (ReportYear = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Details_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportYear(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable, ByVal Param1 As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportYear(ByVal Param1 As Global.System.Nullable(Of Integer)) As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Details_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Details_from2014DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTAT_Details_from2014")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Description As String, ByVal Original_Reference As String, ByVal Original_ReportYear As Global.System.Nullable(Of Integer), ByVal Original_RegisterDate As Global.System.Nullable(Of Date), ByVal Original_ValueDate As Global.System.Nullable(Of Date), ByVal Original_Orig_Cur As String, ByVal Original_Orig_Amt As Global.System.Nullable(Of Double), ByVal Original_ExchangeRate As Global.System.Nullable(Of Double), ByVal Original_Amt_EUR As Global.System.Nullable(Of Double), ByVal Original_Paym_Art As String, ByVal Original_IdMeldepositionen As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Description,String)
            End If
            If (Original_Reference Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Reference,String)
            End If
            If (Original_ReportYear.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ReportYear.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_RegisterDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_RegisterDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ValueDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Orig_Cur Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Orig_Cur,String)
            End If
            If (Original_Orig_Amt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Orig_Amt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_EUR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Amt_EUR.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Paym_Art Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Paym_Art,String)
            End If
            If (Original_IdMeldepositionen.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_IdMeldepositionen.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Description As String, ByVal Reference As String, ByVal ReportYear As Global.System.Nullable(Of Integer), ByVal RegisterDate As Global.System.Nullable(Of Date), ByVal ValueDate As Global.System.Nullable(Of Date), ByVal Orig_Cur As String, ByVal Orig_Amt As Global.System.Nullable(Of Double), ByVal ExchangeRate As Global.System.Nullable(Of Double), ByVal Amt_EUR As Global.System.Nullable(Of Double), ByVal Paym_Art As String, ByVal IdMeldepositionen As Global.System.Nullable(Of Integer)) As Integer
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Description,String)
            End If
            If (Reference Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Reference,String)
            End If
            If (ReportYear.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ReportYear.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RegisterDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RegisterDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Orig_Cur Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Orig_Cur,String)
            End If
            If (Orig_Amt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Orig_Amt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Amt_EUR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Amt_EUR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Paym_Art Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Paym_Art,String)
            End If
            If (IdMeldepositionen.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IdMeldepositionen.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Description As String,  _
                    ByVal Reference As String,  _
                    ByVal ReportYear As Global.System.Nullable(Of Integer),  _
                    ByVal RegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal Orig_Cur As String,  _
                    ByVal Orig_Amt As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Amt_EUR As Global.System.Nullable(Of Double),  _
                    ByVal Paym_Art As String,  _
                    ByVal IdMeldepositionen As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Description As String,  _
                    ByVal Original_Reference As String,  _
                    ByVal Original_ReportYear As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Orig_Cur As String,  _
                    ByVal Original_Orig_Amt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_EUR As Global.System.Nullable(Of Double),  _
                    ByVal Original_Paym_Art As String,  _
                    ByVal Original_IdMeldepositionen As Global.System.Nullable(Of Integer)) As Integer
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Description,String)
            End If
            If (Reference Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Reference,String)
            End If
            If (ReportYear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ReportYear.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Orig_Cur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Orig_Cur,String)
            End If
            If (Orig_Amt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Orig_Amt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Amt_EUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Amt_EUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Paym_Art Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Paym_Art,String)
            End If
            If (IdMeldepositionen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IdMeldepositionen.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Integer)
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Description,String)
            End If
            If (Original_Reference Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Reference,String)
            End If
            If (Original_ReportYear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ReportYear.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_RegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_RegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ValueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Orig_Cur Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Orig_Cur,String)
            End If
            If (Original_Orig_Amt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Orig_Amt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_EUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Amt_EUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_Paym_Art Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Paym_Art,String)
            End If
            If (Original_IdMeldepositionen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_IdMeldepositionen.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTAT_MeldeJahr_from2014TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTAT_MeldeJahr_from2014"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("MeldeJahr", "MeldeJahr")
            tableMapping.ColumnMappings.Add("ReportLocked", "ReportLocked")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTAT_MeldeJahr_from2014] WHERE (([ID] = @Original_ID) AND ((@IsNul"& _ 
                "l_MeldeJahr = 1 AND [MeldeJahr] IS NULL) OR ([MeldeJahr] = @Original_MeldeJahr))"& _ 
                " AND ((@IsNull_ReportLocked = 1 AND [ReportLocked] IS NULL) OR ([ReportLocked] ="& _ 
                " @Original_ReportLocked)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportLocked", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTAT_MeldeJahr_from2014] ([MeldeJahr], [ReportLocked]) VALUES (@Me"& _ 
                "ldeJahr, @ReportLocked)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTAT_MeldeJahr_from2014] SET [MeldeJahr] = @MeldeJahr, [ReportLocked] ="& _ 
                " @ReportLocked WHERE (([ID] = @Original_ID) AND ((@IsNull_MeldeJahr = 1 AND [Mel"& _ 
                "deJahr] IS NULL) OR ([MeldeJahr] = @Original_MeldeJahr)) AND ((@IsNull_ReportLoc"& _ 
                "ked = 1 AND [ReportLocked] IS NULL) OR ([ReportLocked] = @Original_ReportLocked)"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportLocked", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportLocked", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportLocked", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, MeldeJahr, ReportLocked"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ZVSTAT_MeldeJahr_from2"& _ 
                "014"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY MeldeJahr DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, MeldeJahr, ReportLocked FROM ZVSTAT_MeldeJahr_from2014 WHERE (MeldeJah"& _ 
                "r = @Param1) ORDER BY MeldeJahr DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable = New MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMeldeJahr(ByVal dataTable As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable, ByVal Param1 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMeldeJahr(ByVal Param1 As Global.System.Nullable(Of Double)) As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable = New MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTAT_MeldeJahr_from2014DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTAT_MeldeJahr_from2014")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportLocked.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ReportLocked.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ReportLocked.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ReportLocked.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal ReportLocked As Global.System.Nullable(Of Boolean), ByVal Original_ID As Integer, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_ReportLocked As Global.System.Nullable(Of Boolean)) As Integer
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ReportLocked.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ReportLocked.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID,Integer)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportLocked.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ReportLocked.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTAT_Meldepositionen_from2014TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTAT_Meldepositionen_from2014"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("MeldeJahr", "MeldeJahr")
            tableMapping.ColumnMappings.Add("PositionNr", "PositionNr")
            tableMapping.ColumnMappings.Add("PositionName", "PositionName")
            tableMapping.ColumnMappings.Add("Landkontext", "Landkontext")
            tableMapping.ColumnMappings.Add("LandCode", "LandCode")
            tableMapping.ColumnMappings.Add("AnzahlKz", "AnzahlKz")
            tableMapping.ColumnMappings.Add("Anzahl", "Anzahl")
            tableMapping.ColumnMappings.Add("WertKz", "WertKz")
            tableMapping.ColumnMappings.Add("Wert", "Wert")
            tableMapping.ColumnMappings.Add("PositionSQLcommand", "PositionSQLcommand")
            tableMapping.ColumnMappings.Add("IdMeldeschemas", "IdMeldeschemas")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTAT_Meldepositionen_from2014] WHERE (([ID] = @Original_ID) AND (("& _ 
                "@IsNull_MeldeJahr = 1 AND [MeldeJahr] IS NULL) OR ([MeldeJahr] = @Original_Melde"& _ 
                "Jahr)) AND ((@IsNull_PositionNr = 1 AND [PositionNr] IS NULL) OR ([PositionNr] ="& _ 
                " @Original_PositionNr)) AND ((@IsNull_PositionName = 1 AND [PositionName] IS NUL"& _ 
                "L) OR ([PositionName] = @Original_PositionName)) AND ((@IsNull_Landkontext = 1 A"& _ 
                "ND [Landkontext] IS NULL) OR ([Landkontext] = @Original_Landkontext)) AND ((@IsN"& _ 
                "ull_LandCode = 1 AND [LandCode] IS NULL) OR ([LandCode] = @Original_LandCode)) A"& _ 
                "ND ((@IsNull_AnzahlKz = 1 AND [AnzahlKz] IS NULL) OR ([AnzahlKz] = @Original_Anz"& _ 
                "ahlKz)) AND ((@IsNull_Anzahl = 1 AND [Anzahl] IS NULL) OR ([Anzahl] = @Original_"& _ 
                "Anzahl)) AND ((@IsNull_WertKz = 1 AND [WertKz] IS NULL) OR ([WertKz] = @Original"& _ 
                "_WertKz)) AND ((@IsNull_Wert = 1 AND [Wert] IS NULL) OR ([Wert] = @Original_Wert"& _ 
                ")) AND ((@IsNull_PositionSQLcommand = 1 AND [PositionSQLcommand] IS NULL) OR ([P"& _ 
                "ositionSQLcommand] = @Original_PositionSQLcommand)) AND ((@IsNull_IdMeldeschemas"& _ 
                " = 1 AND [IdMeldeschemas] IS NULL) OR ([IdMeldeschemas] = @Original_IdMeldeschem"& _ 
                "as)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Landkontext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LandCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AnzahlKz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AnzahlKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anzahl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anzahl", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WertKz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WertKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionSQLcommand", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTAT_Meldepositionen_from2014] ([MeldeJahr], [PositionNr], [Positi"& _ 
                "onName], [Landkontext], [LandCode], [AnzahlKz], [Anzahl], [WertKz], [Wert], [Pos"& _ 
                "itionSQLcommand], [IdMeldeschemas]) VALUES (@MeldeJahr, @PositionNr, @PositionNa"& _ 
                "me, @Landkontext, @LandCode, @AnzahlKz, @Anzahl, @WertKz, @Wert, @PositionSQLcom"& _ 
                "mand, @IdMeldeschemas)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnzahlKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anzahl", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WertKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTAT_Meldepositionen_from2014] SET [MeldeJahr] = @MeldeJahr, [PositionN"& _ 
                "r] = @PositionNr, [PositionName] = @PositionName, [Landkontext] = @Landkontext, "& _ 
                "[LandCode] = @LandCode, [AnzahlKz] = @AnzahlKz, [Anzahl] = @Anzahl, [WertKz] = @"& _ 
                "WertKz, [Wert] = @Wert, [PositionSQLcommand] = @PositionSQLcommand, [IdMeldesche"& _ 
                "mas] = @IdMeldeschemas WHERE (([ID] = @Original_ID) AND ((@IsNull_MeldeJahr = 1 "& _ 
                "AND [MeldeJahr] IS NULL) OR ([MeldeJahr] = @Original_MeldeJahr)) AND ((@IsNull_P"& _ 
                "ositionNr = 1 AND [PositionNr] IS NULL) OR ([PositionNr] = @Original_PositionNr)"& _ 
                ") AND ((@IsNull_PositionName = 1 AND [PositionName] IS NULL) OR ([PositionName] "& _ 
                "= @Original_PositionName)) AND ((@IsNull_Landkontext = 1 AND [Landkontext] IS NU"& _ 
                "LL) OR ([Landkontext] = @Original_Landkontext)) AND ((@IsNull_LandCode = 1 AND ["& _ 
                "LandCode] IS NULL) OR ([LandCode] = @Original_LandCode)) AND ((@IsNull_AnzahlKz "& _ 
                "= 1 AND [AnzahlKz] IS NULL) OR ([AnzahlKz] = @Original_AnzahlKz)) AND ((@IsNull_"& _ 
                "Anzahl = 1 AND [Anzahl] IS NULL) OR ([Anzahl] = @Original_Anzahl)) AND ((@IsNull"& _ 
                "_WertKz = 1 AND [WertKz] IS NULL) OR ([WertKz] = @Original_WertKz)) AND ((@IsNul"& _ 
                "l_Wert = 1 AND [Wert] IS NULL) OR ([Wert] = @Original_Wert)) AND ((@IsNull_Posit"& _ 
                "ionSQLcommand = 1 AND [PositionSQLcommand] IS NULL) OR ([PositionSQLcommand] = @"& _ 
                "Original_PositionSQLcommand)) AND ((@IsNull_IdMeldeschemas = 1 AND [IdMeldeschem"& _ 
                "as] IS NULL) OR ([IdMeldeschemas] = @Original_IdMeldeschemas)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnzahlKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anzahl", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WertKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Landkontext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Landkontext", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Landkontext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LandCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LandCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LandCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AnzahlKz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AnzahlKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnzahlKz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anzahl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anzahl", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anzahl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WertKz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WertKz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WertKz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PositionSQLcommand", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PositionSQLcommand", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionSQLcommand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldeschemas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeschemas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, MeldeJahr, PositionNr, PositionName, Landkontext, LandCode, Anz"& _ 
                "ahlKz, Anzahl, WertKz, Wert, PositionSQLcommand, IdMeldeschemas"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " ZVSTAT_Meldepositionen_from2014"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Anzahl, AnzahlKz, ID, IdMeldeschemas, LandCode, Landkontext, MeldeJahr, Po"& _ 
                "sitionName, PositionNr, PositionSQLcommand, Wert, WertKz FROM ZVSTAT_Meldepositi"& _ 
                "onen_from2014 WHERE (MeldeJahr = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMeldeJahr(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable, ByVal Param1 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMeldeJahr(ByVal Param1 As Global.System.Nullable(Of Double)) As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldepositionen_from2014DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTAT_Meldepositionen_from2014")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_PositionNr As String, ByVal Original_PositionName As String, ByVal Original_Landkontext As String, ByVal Original_LandCode As String, ByVal Original_AnzahlKz As String, ByVal Original_Anzahl As Global.System.Nullable(Of Double), ByVal Original_WertKz As String, ByVal Original_Wert As Global.System.Nullable(Of Double), ByVal Original_PositionSQLcommand As String, ByVal Original_IdMeldeschemas As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PositionNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PositionNr,String)
            End If
            If (Original_PositionName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PositionName,String)
            End If
            If (Original_Landkontext Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Landkontext,String)
            End If
            If (Original_LandCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_LandCode,String)
            End If
            If (Original_AnzahlKz Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_AnzahlKz,String)
            End If
            If (Original_Anzahl.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Anzahl.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_WertKz Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_WertKz,String)
            End If
            If (Original_Wert.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Wert.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PositionSQLcommand Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PositionSQLcommand,String)
            End If
            If (Original_IdMeldeschemas.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_IdMeldeschemas.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal PositionNr As String, ByVal PositionName As String, ByVal Landkontext As String, ByVal LandCode As String, ByVal AnzahlKz As String, ByVal Anzahl As Global.System.Nullable(Of Double), ByVal WertKz As String, ByVal Wert As Global.System.Nullable(Of Double), ByVal PositionSQLcommand As String, ByVal IdMeldeschemas As Global.System.Nullable(Of Integer)) As Integer
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PositionNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PositionNr,String)
            End If
            If (PositionName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PositionName,String)
            End If
            If (Landkontext Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Landkontext,String)
            End If
            If (LandCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LandCode,String)
            End If
            If (AnzahlKz Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(AnzahlKz,String)
            End If
            If (Anzahl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Anzahl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (WertKz Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(WertKz,String)
            End If
            If (Wert.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Wert.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PositionSQLcommand Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PositionSQLcommand,String)
            End If
            If (IdMeldeschemas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IdMeldeschemas.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MeldeJahr As Global.System.Nullable(Of Double),  _
                    ByVal PositionNr As String,  _
                    ByVal PositionName As String,  _
                    ByVal Landkontext As String,  _
                    ByVal LandCode As String,  _
                    ByVal AnzahlKz As String,  _
                    ByVal Anzahl As Global.System.Nullable(Of Double),  _
                    ByVal WertKz As String,  _
                    ByVal Wert As Global.System.Nullable(Of Double),  _
                    ByVal PositionSQLcommand As String,  _
                    ByVal IdMeldeschemas As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_MeldeJahr As Global.System.Nullable(Of Double),  _
                    ByVal Original_PositionNr As String,  _
                    ByVal Original_PositionName As String,  _
                    ByVal Original_Landkontext As String,  _
                    ByVal Original_LandCode As String,  _
                    ByVal Original_AnzahlKz As String,  _
                    ByVal Original_Anzahl As Global.System.Nullable(Of Double),  _
                    ByVal Original_WertKz As String,  _
                    ByVal Original_Wert As Global.System.Nullable(Of Double),  _
                    ByVal Original_PositionSQLcommand As String,  _
                    ByVal Original_IdMeldeschemas As Global.System.Nullable(Of Integer)) As Integer
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PositionNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PositionNr,String)
            End If
            If (PositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PositionName,String)
            End If
            If (Landkontext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Landkontext,String)
            End If
            If (LandCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LandCode,String)
            End If
            If (AnzahlKz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(AnzahlKz,String)
            End If
            If (Anzahl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Anzahl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (WertKz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(WertKz,String)
            End If
            If (Wert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Wert.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PositionSQLcommand Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PositionSQLcommand,String)
            End If
            If (IdMeldeschemas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IdMeldeschemas.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Integer)
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_PositionNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PositionNr,String)
            End If
            If (Original_PositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PositionName,String)
            End If
            If (Original_Landkontext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Landkontext,String)
            End If
            If (Original_LandCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_LandCode,String)
            End If
            If (Original_AnzahlKz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_AnzahlKz,String)
            End If
            If (Original_Anzahl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Anzahl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_WertKz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_WertKz,String)
            End If
            If (Original_Wert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Wert.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_PositionSQLcommand Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PositionSQLcommand,String)
            End If
            If (Original_IdMeldeschemas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_IdMeldeschemas.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZVSTAT_Meldeschemas_from2014TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZVSTAT_Meldeschemas_from2014"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("MeldeschemaNr", "MeldeschemaNr")
            tableMapping.ColumnMappings.Add("MeldeschemaName", "MeldeschemaName")
            tableMapping.ColumnMappings.Add("MeldeJahr", "MeldeJahr")
            tableMapping.ColumnMappings.Add("IdMeldeJahr", "IdMeldeJahr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ZVSTAT_Meldeschemas_from2014] WHERE (([ID] = @Original_ID) AND ((@Is"& _ 
                "Null_MeldeschemaNr = 1 AND [MeldeschemaNr] IS NULL) OR ([MeldeschemaNr] = @Origi"& _ 
                "nal_MeldeschemaNr)) AND ((@IsNull_MeldeschemaName = 1 AND [MeldeschemaName] IS N"& _ 
                "ULL) OR ([MeldeschemaName] = @Original_MeldeschemaName)) AND ((@IsNull_MeldeJahr"& _ 
                " = 1 AND [MeldeJahr] IS NULL) OR ([MeldeJahr] = @Original_MeldeJahr)) AND ((@IsN"& _ 
                "ull_IdMeldeJahr = 1 AND [IdMeldeJahr] IS NULL) OR ([IdMeldeJahr] = @Original_IdM"& _ 
                "eldeJahr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeschemaNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeschemaNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeschemaName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeschemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ZVSTAT_Meldeschemas_from2014] ([MeldeschemaNr], [MeldeschemaName], ["& _ 
                "MeldeJahr], [IdMeldeJahr]) VALUES (@MeldeschemaNr, @MeldeschemaName, @MeldeJahr,"& _ 
                " @IdMeldeJahr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeschemaNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeschemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ZVSTAT_Meldeschemas_from2014] SET [MeldeschemaNr] = @MeldeschemaNr, [Meld"& _ 
                "eschemaName] = @MeldeschemaName, [MeldeJahr] = @MeldeJahr, [IdMeldeJahr] = @IdMe"& _ 
                "ldeJahr WHERE (([ID] = @Original_ID) AND ((@IsNull_MeldeschemaNr = 1 AND [Meldes"& _ 
                "chemaNr] IS NULL) OR ([MeldeschemaNr] = @Original_MeldeschemaNr)) AND ((@IsNull_"& _ 
                "MeldeschemaName = 1 AND [MeldeschemaName] IS NULL) OR ([MeldeschemaName] = @Orig"& _ 
                "inal_MeldeschemaName)) AND ((@IsNull_MeldeJahr = 1 AND [MeldeJahr] IS NULL) OR ("& _ 
                "[MeldeJahr] = @Original_MeldeJahr)) AND ((@IsNull_IdMeldeJahr = 1 AND [IdMeldeJa"& _ 
                "hr] IS NULL) OR ([IdMeldeJahr] = @Original_IdMeldeJahr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeschemaNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeschemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeschemaNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeschemaNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeschemaName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeschemaName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeschemaName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeldeJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdMeldeJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdMeldeJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, MeldeschemaNr, MeldeschemaName, MeldeJahr, IdMeldeJahr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         ZVSTAT_Meldeschemas_from2014"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, IdMeldeJahr, MeldeJahr, MeldeschemaName, MeldeschemaNr FROM ZVSTAT_Mel"& _ 
                "deschemas_from2014 WHERE (MeldeJahr = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "MeldeJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMeldeJahr(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable, ByVal Param1 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMeldeJahr(ByVal Param1 As Global.System.Nullable(Of Double)) As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Double)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable = New MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.ZVSTAT_Meldeschemas_from2014DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ZVSTAT_Meldeschemas_from2014")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_MeldeschemaNr As String, ByVal Original_MeldeschemaName As String, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_IdMeldeJahr As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_MeldeschemaNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MeldeschemaNr,String)
            End If
            If (Original_MeldeschemaName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MeldeschemaName,String)
            End If
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IdMeldeJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IdMeldeJahr.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MeldeschemaNr As String, ByVal MeldeschemaName As String, ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal IdMeldeJahr As Global.System.Nullable(Of Integer)) As Integer
            If (MeldeschemaNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MeldeschemaNr,String)
            End If
            If (MeldeschemaName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MeldeschemaName,String)
            End If
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdMeldeJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IdMeldeJahr.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MeldeschemaNr As String, ByVal MeldeschemaName As String, ByVal MeldeJahr As Global.System.Nullable(Of Double), ByVal IdMeldeJahr As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal Original_MeldeschemaNr As String, ByVal Original_MeldeschemaName As String, ByVal Original_MeldeJahr As Global.System.Nullable(Of Double), ByVal Original_IdMeldeJahr As Global.System.Nullable(Of Integer)) As Integer
            If (MeldeschemaNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MeldeschemaNr,String)
            End If
            If (MeldeschemaName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MeldeschemaName,String)
            End If
            If (MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IdMeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IdMeldeJahr.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Integer)
            If (Original_MeldeschemaNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MeldeschemaNr,String)
            End If
            If (Original_MeldeschemaName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MeldeschemaName,String)
            End If
            If (Original_MeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MeldeJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_IdMeldeJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_IdMeldeJahr.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AWVz11POSTENTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AWVz11POSTEN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("BELEGART", "BELEGART")
            tableMapping.ColumnMappings.Add("KENNZAHL", "KENNZAHL")
            tableMapping.ColumnMappings.Add("LAND_ISOCODE", "LAND_ISOCODE")
            tableMapping.ColumnMappings.Add("LAND_NAME", "LAND_NAME")
            tableMapping.ColumnMappings.Add("BETRAG", "BETRAG")
            tableMapping.ColumnMappings.Add("BETRAG_REF", "BETRAG_REF")
            tableMapping.ColumnMappings.Add("IdAWVz14z15", "IdAWVz14z15")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AWVz11POSTEN] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AWVz11POSTEN] ([BELEGART], [KENNZAHL], [LAND_ISOCODE], [LAND_N"& _ 
                "AME], [BETRAG], [BETRAG_REF], [IdAWVz14z15]) VALUES (@BELEGART, @KENNZAHL, @LAND"& _ 
                "_ISOCODE, @LAND_NAME, @BETRAG, @BETRAG_REF, @IdAWVz14z15);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, BELEGART,"& _ 
                " KENNZAHL, LAND_ISOCODE, LAND_NAME, BETRAG, BETRAG_REF, IdAWVz14z15 FROM AWVz11P"& _ 
                "OSTEN WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAND_ISOCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAND_ISOCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdAWVz14z15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AWVz11POSTEN] SET [BELEGART] = @BELEGART, [KENNZAHL] = @KENNZAHL, ["& _ 
                "LAND_ISOCODE] = @LAND_ISOCODE, [LAND_NAME] = @LAND_NAME, [BETRAG] = @BETRAG, [BE"& _ 
                "TRAG_REF] = @BETRAG_REF, [IdAWVz14z15] = @IdAWVz14z15 WHERE (([ID] = @Original_I"& _ 
                "D));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, BELEGART, KENNZAHL, LAND_ISOCODE, LAND_NAME, BETRAG, BETRAG_REF"& _ 
                ", IdAWVz14z15 FROM AWVz11POSTEN WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BELEGART", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BELEGART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KENNZAHL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KENNZAHL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAND_ISOCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAND_ISOCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAND_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAND_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BETRAG_REF", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BETRAG_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdAWVz14z15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, BELEGART, KENNZAHL, LAND_ISOCODE, LAND_NAME, BETRAG, BETRAG_REF, IdAWV"& _ 
                "z14z15 FROM dbo.AWVz11POSTEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BELEGART, BETRAG, BETRAG_REF, ID, IdAWVz14z15, KENNZAHL, LAND_ISOCODE, LAN"& _ 
                "D_NAME FROM AWVz11POSTEN WHERE (IdAWVz14z15 = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "IdAWVz14z15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MeldewesenDataSet.AWVz11POSTENDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MeldewesenDataSet.AWVz11POSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MeldewesenDataSet.AWVz11POSTENDataTable = New MeldewesenDataSet.AWVz11POSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReportMonth(ByVal dataTable As MeldewesenDataSet.AWVz11POSTENDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReportMonth(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.AWVz11POSTENDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.AWVz11POSTENDataTable = New MeldewesenDataSet.AWVz11POSTENDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.AWVz11POSTENDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AWVz11POSTEN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal LAND_ISOCODE As String, ByVal LAND_NAME As String, ByVal BETRAG As Global.System.Nullable(Of Double), ByVal BETRAG_REF As String, ByVal IdAWVz14z15 As Global.System.Nullable(Of Date)) As Integer
            If (BELEGART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(BELEGART,String)
            End If
            If (KENNZAHL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(KENNZAHL,String)
            End If
            If (LAND_ISOCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LAND_ISOCODE,String)
            End If
            If (LAND_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LAND_NAME,String)
            End If
            If (BETRAG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BETRAG.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BETRAG_REF,String)
            End If
            If (IdAWVz14z15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IdAWVz14z15.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal LAND_ISOCODE As String, ByVal LAND_NAME As String, ByVal BETRAG As Global.System.Nullable(Of Double), ByVal BETRAG_REF As String, ByVal IdAWVz14z15 As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (BELEGART Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BELEGART,String)
            End If
            If (KENNZAHL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(KENNZAHL,String)
            End If
            If (LAND_ISOCODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LAND_ISOCODE,String)
            End If
            If (LAND_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LAND_NAME,String)
            End If
            If (BETRAG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BETRAG.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BETRAG_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BETRAG_REF,String)
            End If
            If (IdAWVz14z15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IdAWVz14z15.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BELEGART As String, ByVal KENNZAHL As String, ByVal LAND_ISOCODE As String, ByVal LAND_NAME As String, ByVal BETRAG As Global.System.Nullable(Of Double), ByVal BETRAG_REF As String, ByVal IdAWVz14z15 As Global.System.Nullable(Of Date), ByVal Original_ID As Integer) As Integer
            Return Me.Update(BELEGART, KENNZAHL, LAND_ISOCODE, LAND_NAME, BETRAG, BETRAG_REF, IdAWVz14z15, Original_ID, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MIFIRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MIFIR"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ReportStatus", "ReportStatus")
            tableMapping.ColumnMappings.Add("TradeDate", "TradeDate")
            tableMapping.ColumnMappings.Add("ValueDate", "ValueDate")
            tableMapping.ColumnMappings.Add("FixingDate", "FixingDate")
            tableMapping.ColumnMappings.Add("ClientOrderID", "ClientOrderID")
            tableMapping.ColumnMappings.Add("FxAllID", "FxAllID")
            tableMapping.ColumnMappings.Add("TradingVenueTransactionIdentificationCode", "TradingVenueTransactionIdentificationCode")
            tableMapping.ColumnMappings.Add("CustomerUSI", "CustomerUSI")
            tableMapping.ColumnMappings.Add("ProviderUSI", "ProviderUSI")
            tableMapping.ColumnMappings.Add("Product", "Product")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("FixingTime", "FixingTime")
            tableMapping.ColumnMappings.Add("FixingSeries", "FixingSeries")
            tableMapping.ColumnMappings.Add("CustBS", "CustBS")
            tableMapping.ColumnMappings.Add("CustTradeSide", "CustTradeSide")
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName")
            tableMapping.ColumnMappings.Add("CustTrader", "CustTrader")
            tableMapping.ColumnMappings.Add("Account", "Account")
            tableMapping.ColumnMappings.Add("AccountLongName", "AccountLongName")
            tableMapping.ColumnMappings.Add("CCYPair", "CCYPair")
            tableMapping.ColumnMappings.Add("NotionalCCY", "NotionalCCY")
            tableMapping.ColumnMappings.Add("Notional", "Notional")
            tableMapping.ColumnMappings.Add("ContraCCY", "ContraCCY")
            tableMapping.ColumnMappings.Add("ContraAmount", "ContraAmount")
            tableMapping.ColumnMappings.Add("PriceTreasury", "PriceTreasury")
            tableMapping.ColumnMappings.Add("FwdPts", "FwdPts")
            tableMapping.ColumnMappings.Add("AllIn", "AllIn")
            tableMapping.ColumnMappings.Add("ComplexTradeID", "ComplexTradeID")
            tableMapping.ColumnMappings.Add("CARStatus", "CARStatus")
            tableMapping.ColumnMappings.Add("CARSubmitID", "CARSubmitID")
            tableMapping.ColumnMappings.Add("CARTime", "CARTime")
            tableMapping.ColumnMappings.Add("ExecutionWithinTheFirm", "ExecutionWithinTheFirm")
            tableMapping.ColumnMappings.Add("ISIN", "ISIN")
            tableMapping.ColumnMappings.Add("CFICodeForTheInstrument", "CFICodeForTheInstrument")
            tableMapping.ColumnMappings.Add("WaiverIndicator", "WaiverIndicator")
            tableMapping.ColumnMappings.Add("MTFExecutionTime", "MTFExecutionTime")
            tableMapping.ColumnMappings.Add("LiqVenue", "LiqVenue")
            tableMapping.ColumnMappings.Add("Capacity", "Capacity")
            tableMapping.ColumnMappings.Add("NPFT", "NPFT")
            tableMapping.ColumnMappings.Add("SEC_FIN", "SEC_FIN")
            tableMapping.ColumnMappings.Add("CustomerLEI", "CustomerLEI")
            tableMapping.ColumnMappings.Add("AccountLEI", "AccountLEI")
            tableMapping.ColumnMappings.Add("ProviderLEI", "ProviderLEI")
            tableMapping.ColumnMappings.Add("DateTimeOfferToDeal", "DateTimeOfferToDeal")
            tableMapping.ColumnMappings.Add("TransmissionOfOrderIndicator", "TransmissionOfOrderIndicator")
            tableMapping.ColumnMappings.Add("LiquidityProvisionActivity", "LiquidityProvisionActivity")
            tableMapping.ColumnMappings.Add("DateTimeOrderSubmission", "DateTimeOrderSubmission")
            tableMapping.ColumnMappings.Add("VenueTreasury", "VenueTreasury")
            tableMapping.ColumnMappings.Add("DateReceiptOrder", "DateReceiptOrder")
            tableMapping.ColumnMappings.Add("TRADE_DATE", "TRADE_DATE")
            tableMapping.ColumnMappings.Add("CUSTOMER_TRANSACTION_ID", "CUSTOMER_TRANSACTION_ID")
            tableMapping.ColumnMappings.Add("ACTION_TYPE", "ACTION_TYPE")
            tableMapping.ColumnMappings.Add("BUSINESS_UNIT", "BUSINESS_UNIT")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("MIFIR_REPORTING", "MIFIR_REPORTING")
            tableMapping.ColumnMappings.Add("COMMENT", "COMMENT")
            tableMapping.ColumnMappings.Add("TRADE_REPORT_ID", "TRADE_REPORT_ID")
            tableMapping.ColumnMappings.Add("SOURCE_SYSTEM", "SOURCE_SYSTEM")
            tableMapping.ColumnMappings.Add("RECORD_MODE", "RECORD_MODE")
            tableMapping.ColumnMappings.Add("USER_FIELD1", "USER_FIELD1")
            tableMapping.ColumnMappings.Add("USER_FIELD2", "USER_FIELD2")
            tableMapping.ColumnMappings.Add("USER_FIELD3", "USER_FIELD3")
            tableMapping.ColumnMappings.Add("USER_FIELD4", "USER_FIELD4")
            tableMapping.ColumnMappings.Add("USER_FIELD5", "USER_FIELD5")
            tableMapping.ColumnMappings.Add("USER_FIELD6", "USER_FIELD6")
            tableMapping.ColumnMappings.Add("USER_FIELD7", "USER_FIELD7")
            tableMapping.ColumnMappings.Add("USER_FIELD8", "USER_FIELD8")
            tableMapping.ColumnMappings.Add("USER_FIELD9", "USER_FIELD9")
            tableMapping.ColumnMappings.Add("PARTIAL_ASSISTANCE_FLAG", "PARTIAL_ASSISTANCE_FLAG")
            tableMapping.ColumnMappings.Add("PARTIAL_ASSISTANCE_SUBMITTER_ID", "PARTIAL_ASSISTANCE_SUBMITTER_ID")
            tableMapping.ColumnMappings.Add("PAIRING_ID", "PAIRING_ID")
            tableMapping.ColumnMappings.Add("EXECUTING_ENTITY_ID_TYPE", "EXECUTING_ENTITY_ID_TYPE")
            tableMapping.ColumnMappings.Add("EXECUTING_ENTITY_ID", "EXECUTING_ENTITY_ID")
            tableMapping.ColumnMappings.Add("MIFID_INVESTMENT_FIRM", "MIFID_INVESTMENT_FIRM")
            tableMapping.ColumnMappings.Add("BRANCH_MEMBERSHIP_COUNTRY", "BRANCH_MEMBERSHIP_COUNTRY")
            tableMapping.ColumnMappings.Add("BUYER_ID_TYPE", "BUYER_ID_TYPE")
            tableMapping.ColumnMappings.Add("BUYER_ID", "BUYER_ID")
            tableMapping.ColumnMappings.Add("BUYER_BRANCH_COUNTRY", "BUYER_BRANCH_COUNTRY")
            tableMapping.ColumnMappings.Add("BUYER_FIRSTNAME", "BUYER_FIRSTNAME")
            tableMapping.ColumnMappings.Add("BUYER_SURNAME", "BUYER_SURNAME")
            tableMapping.ColumnMappings.Add("BUYER_BIRTHDATE", "BUYER_BIRTHDATE")
            tableMapping.ColumnMappings.Add("BUYER_DECISION_MAKER_ID_TYPE", "BUYER_DECISION_MAKER_ID_TYPE")
            tableMapping.ColumnMappings.Add("BUYER_DECISION_MAKER_ID", "BUYER_DECISION_MAKER_ID")
            tableMapping.ColumnMappings.Add("BUYER_DECISION_FIRSTNAME", "BUYER_DECISION_FIRSTNAME")
            tableMapping.ColumnMappings.Add("BUYER_DECISION_SURNAME", "BUYER_DECISION_SURNAME")
            tableMapping.ColumnMappings.Add("BUYER_DECISION_BIRTHDATE", "BUYER_DECISION_BIRTHDATE")
            tableMapping.ColumnMappings.Add("SELLER_ID_TYPE", "SELLER_ID_TYPE")
            tableMapping.ColumnMappings.Add("SELLER_ID", "SELLER_ID")
            tableMapping.ColumnMappings.Add("SELLER_BRANCH_COUNTRY", "SELLER_BRANCH_COUNTRY")
            tableMapping.ColumnMappings.Add("SELLER_FIRSTNAME", "SELLER_FIRSTNAME")
            tableMapping.ColumnMappings.Add("SELLER_SURNAME", "SELLER_SURNAME")
            tableMapping.ColumnMappings.Add("SELLER_BIRTHDATE", "SELLER_BIRTHDATE")
            tableMapping.ColumnMappings.Add("SELLER_DECISION_MAKER_ID_TYPE", "SELLER_DECISION_MAKER_ID_TYPE")
            tableMapping.ColumnMappings.Add("SELLER_DECISION_MAKER_ID", "SELLER_DECISION_MAKER_ID")
            tableMapping.ColumnMappings.Add("SELLER_DECISION_FIRST_NAME", "SELLER_DECISION_FIRST_NAME")
            tableMapping.ColumnMappings.Add("SELLER_DECISION_SURNAME", "SELLER_DECISION_SURNAME")
            tableMapping.ColumnMappings.Add("SELLER_DECISION_BIRTHDATE", "SELLER_DECISION_BIRTHDATE")
            tableMapping.ColumnMappings.Add("TRANSMISSION_IND", "TRANSMISSION_IND")
            tableMapping.ColumnMappings.Add("TRANSMITTING_ENTITY_BUYER_ID_TYPE", "TRANSMITTING_ENTITY_BUYER_ID_TYPE")
            tableMapping.ColumnMappings.Add("TRANSMITTING_ENTITY_BUYER_ID", "TRANSMITTING_ENTITY_BUYER_ID")
            tableMapping.ColumnMappings.Add("TRANSMITTING_ENTITY_SELLER_ID_TYPE", "TRANSMITTING_ENTITY_SELLER_ID_TYPE")
            tableMapping.ColumnMappings.Add("TRANSMITTING_ENTITY_SELLER_ID", "TRANSMITTING_ENTITY_SELLER_ID")
            tableMapping.ColumnMappings.Add("TRN_REF_NUMBER", "TRN_REF_NUMBER")
            tableMapping.ColumnMappings.Add("TRADING_VENUE_TRN_ID_CODE", "TRADING_VENUE_TRN_ID_CODE")
            tableMapping.ColumnMappings.Add("VENUE", "VENUE")
            tableMapping.ColumnMappings.Add("TRADE_TIME", "TRADE_TIME")
            tableMapping.ColumnMappings.Add("MIFIR_TRADING_CAPACITY", "MIFIR_TRADING_CAPACITY")
            tableMapping.ColumnMappings.Add("QUANTITY_NOTATION", "QUANTITY_NOTATION")
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY")
            tableMapping.ColumnMappings.Add("QUANTITY_CURRENCY", "QUANTITY_CURRENCY")
            tableMapping.ColumnMappings.Add("NOTIONAL_INCREASE_DECREASE", "NOTIONAL_INCREASE_DECREASE")
            tableMapping.ColumnMappings.Add("PRICE_NOTATION", "PRICE_NOTATION")
            tableMapping.ColumnMappings.Add("PRICE", "PRICE")
            tableMapping.ColumnMappings.Add("PRICE_CURRENCY", "PRICE_CURRENCY")
            tableMapping.ColumnMappings.Add("NET_AMOUNT", "NET_AMOUNT")
            tableMapping.ColumnMappings.Add("UPFRONT_PAYMENT", "UPFRONT_PAYMENT")
            tableMapping.ColumnMappings.Add("UPFRONT_PAYMENT_CURRENCY", "UPFRONT_PAYMENT_CURRENCY")
            tableMapping.ColumnMappings.Add("COMPLEX_TRADE_COMPONENT_ID", "COMPLEX_TRADE_COMPONENT_ID")
            tableMapping.ColumnMappings.Add("INSTRUMENT_ID_TYPE", "INSTRUMENT_ID_TYPE")
            tableMapping.ColumnMappings.Add("INSTRUMENT_NAME", "INSTRUMENT_NAME")
            tableMapping.ColumnMappings.Add("INSTRUMENT_ID", "INSTRUMENT_ID")
            tableMapping.ColumnMappings.Add("INSTRUMENT_CLASS", "INSTRUMENT_CLASS")
            tableMapping.ColumnMappings.Add("NOTIONAL_CURRENCY_1", "NOTIONAL_CURRENCY_1")
            tableMapping.ColumnMappings.Add("NOTIONAL_CURRENCY_2", "NOTIONAL_CURRENCY_2")
            tableMapping.ColumnMappings.Add("PRICE_MULTIPLIER", "PRICE_MULTIPLIER")
            tableMapping.ColumnMappings.Add("UNDERLYING_INSTRUMENT_DIRECTION", "UNDERLYING_INSTRUMENT_DIRECTION")
            tableMapping.ColumnMappings.Add("UNDERLYING_INSTRUMENT_CODE", "UNDERLYING_INSTRUMENT_CODE")
            tableMapping.ColumnMappings.Add("UNDERLYING_INDEX_CODE", "UNDERLYING_INDEX_CODE")
            tableMapping.ColumnMappings.Add("UNDERLYING_INDEX_NAME", "UNDERLYING_INDEX_NAME")
            tableMapping.ColumnMappings.Add("UNDERLYING_INDEX_TERM", "UNDERLYING_INDEX_TERM")
            tableMapping.ColumnMappings.Add("UNDERLYING_INDEX_TERM_UNIT", "UNDERLYING_INDEX_TERM_UNIT")
            tableMapping.ColumnMappings.Add("STRIKE_PRICE_NOTATION", "STRIKE_PRICE_NOTATION")
            tableMapping.ColumnMappings.Add("STRIKE_PRICE", "STRIKE_PRICE")
            tableMapping.ColumnMappings.Add("STRIKE_PRICE_CURRENCY", "STRIKE_PRICE_CURRENCY")
            tableMapping.ColumnMappings.Add("OPTION_EXERCISE_STYLE", "OPTION_EXERCISE_STYLE")
            tableMapping.ColumnMappings.Add("MATURITY_DATE_INSTRUMENT", "MATURITY_DATE_INSTRUMENT")
            tableMapping.ColumnMappings.Add("EXPIRY_DATE", "EXPIRY_DATE")
            tableMapping.ColumnMappings.Add("DELIVERY_TYPE", "DELIVERY_TYPE")
            tableMapping.ColumnMappings.Add("INVESTMENT_DECISION_ID_TYPE", "INVESTMENT_DECISION_ID_TYPE")
            tableMapping.ColumnMappings.Add("INVESTMENT_DECISION_ID", "INVESTMENT_DECISION_ID")
            tableMapping.ColumnMappings.Add("INVESTMENT_DECISION_BRANCH_COUNTRY", "INVESTMENT_DECISION_BRANCH_COUNTRY")
            tableMapping.ColumnMappings.Add("EXECUTION_ID_TYPE", "EXECUTION_ID_TYPE")
            tableMapping.ColumnMappings.Add("EXECUTION_ID", "EXECUTION_ID")
            tableMapping.ColumnMappings.Add("SUPERVISING_BRANCH_COUNTRY", "SUPERVISING_BRANCH_COUNTRY")
            tableMapping.ColumnMappings.Add("WAIVER_INDICATOR", "WAIVER_INDICATOR")
            tableMapping.ColumnMappings.Add("SHORT_SELLING_INDICATOR", "SHORT_SELLING_INDICATOR")
            tableMapping.ColumnMappings.Add("COMMODITY_DERIVATIVE_INDICATOR", "COMMODITY_DERIVATIVE_INDICATOR")
            tableMapping.ColumnMappings.Add("SFTR_INDICATOR", "SFTR_INDICATOR")
            tableMapping.ColumnMappings.Add("DIRECTED_ORDER_FLAG", "DIRECTED_ORDER_FLAG")
            tableMapping.ColumnMappings.Add("ORDER_GROUP_ID", "ORDER_GROUP_ID")
            tableMapping.ColumnMappings.Add("TOAX_FLAG", "TOAX_FLAG")
            tableMapping.ColumnMappings.Add("LIQP_FLAG", "LIQP_FLAG")
            tableMapping.ColumnMappings.Add("ORDER_TYPE", "ORDER_TYPE")
            tableMapping.ColumnMappings.Add("CLIENT_TYPE", "CLIENT_TYPE")
            tableMapping.ColumnMappings.Add("OTC_POST_TRADE_INDICATOR", "OTC_POST_TRADE_INDICATOR")
            tableMapping.ColumnMappings.Add("OPTION_TYPE", "OPTION_TYPE")
            tableMapping.ColumnMappings.Add("UNDERLYING_INDEX_DIRECTION", "UNDERLYING_INDEX_DIRECTION")
            tableMapping.ColumnMappings.Add("OrderType", "OrderType")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("CountryOfResidence", "CountryOfResidence")
            tableMapping.ColumnMappings.Add("Buyer", "Buyer")
            tableMapping.ColumnMappings.Add("Seller", "Seller")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MIFIR] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MIFIR] ([ReportStatus], [TradeDate], [ValueDate], [FixingDate], [Cli"& _ 
                "entOrderID], [FxAllID], [TradingVenueTransactionIdentificationCode], [CustomerUS"& _ 
                "I], [ProviderUSI], [Product], [Status], [FixingTime], [FixingSeries], [CustBS], "& _ 
                "[CustTradeSide], [CustomerName], [CustTrader], [Account], [AccountLongName], [CC"& _ 
                "YPair], [NotionalCCY], [Notional], [ContraCCY], [ContraAmount], [PriceTreasury],"& _ 
                " [FwdPts], [AllIn], [ComplexTradeID], [CARStatus], [CARSubmitID], [CARTime], [Ex"& _ 
                "ecutionWithinTheFirm], [ISIN], [CFICodeForTheInstrument], [WaiverIndicator], [MT"& _ 
                "FExecutionTime], [LiqVenue], [Capacity], [NPFT], [SEC_FIN], [CustomerLEI], [Acco"& _ 
                "untLEI], [ProviderLEI], [DateTimeOfferToDeal], [TransmissionOfOrderIndicator], ["& _ 
                "LiquidityProvisionActivity], [DateTimeOrderSubmission], [VenueTreasury], [DateRe"& _ 
                "ceiptOrder], [TRADE_DATE], [CUSTOMER_TRANSACTION_ID], [ACTION_TYPE], [BUSINESS_U"& _ 
                "NIT], [USER_ID], [MIFIR_REPORTING], [COMMENT], [TRADE_REPORT_ID], [SOURCE_SYSTEM"& _ 
                "], [RECORD_MODE], [USER_FIELD1], [USER_FIELD2], [USER_FIELD3], [USER_FIELD4], [U"& _ 
                "SER_FIELD5], [USER_FIELD6], [USER_FIELD7], [USER_FIELD8], [USER_FIELD9], [PARTIA"& _ 
                "L_ASSISTANCE_FLAG], [PARTIAL_ASSISTANCE_SUBMITTER_ID], [PAIRING_ID], [EXECUTING_"& _ 
                "ENTITY_ID_TYPE], [EXECUTING_ENTITY_ID], [MIFID_INVESTMENT_FIRM], [BRANCH_MEMBERS"& _ 
                "HIP_COUNTRY], [BUYER_ID_TYPE], [BUYER_ID], [BUYER_BRANCH_COUNTRY], [BUYER_FIRSTN"& _ 
                "AME], [BUYER_SURNAME], [BUYER_BIRTHDATE], [BUYER_DECISION_MAKER_ID_TYPE], [BUYER"& _ 
                "_DECISION_MAKER_ID], [BUYER_DECISION_FIRSTNAME], [BUYER_DECISION_SURNAME], [BUYE"& _ 
                "R_DECISION_BIRTHDATE], [SELLER_ID_TYPE], [SELLER_ID], [SELLER_BRANCH_COUNTRY], ["& _ 
                "SELLER_FIRSTNAME], [SELLER_SURNAME], [SELLER_BIRTHDATE], [SELLER_DECISION_MAKER_"& _ 
                "ID_TYPE], [SELLER_DECISION_MAKER_ID], [SELLER_DECISION_FIRST_NAME], [SELLER_DECI"& _ 
                "SION_SURNAME], [SELLER_DECISION_BIRTHDATE], [TRANSMISSION_IND], [TRANSMITTING_EN"& _ 
                "TITY_BUYER_ID_TYPE], [TRANSMITTING_ENTITY_BUYER_ID], [TRANSMITTING_ENTITY_SELLER"& _ 
                "_ID_TYPE], [TRANSMITTING_ENTITY_SELLER_ID], [TRN_REF_NUMBER], [TRADING_VENUE_TRN"& _ 
                "_ID_CODE], [VENUE], [TRADE_TIME], [MIFIR_TRADING_CAPACITY], [QUANTITY_NOTATION],"& _ 
                " [QUANTITY], [QUANTITY_CURRENCY], [NOTIONAL_INCREASE_DECREASE], [PRICE_NOTATION]"& _ 
                ", [PRICE], [PRICE_CURRENCY], [NET_AMOUNT], [UPFRONT_PAYMENT], [UPFRONT_PAYMENT_C"& _ 
                "URRENCY], [COMPLEX_TRADE_COMPONENT_ID], [INSTRUMENT_ID_TYPE], [INSTRUMENT_NAME],"& _ 
                " [INSTRUMENT_ID], [INSTRUMENT_CLASS], [NOTIONAL_CURRENCY_1], [NOTIONAL_CURRENCY_"& _ 
                "2], [PRICE_MULTIPLIER], [UNDERLYING_INSTRUMENT_DIRECTION], [UNDERLYING_INSTRUMEN"& _ 
                "T_CODE], [UNDERLYING_INDEX_CODE], [UNDERLYING_INDEX_NAME], [UNDERLYING_INDEX_TER"& _ 
                "M], [UNDERLYING_INDEX_TERM_UNIT], [STRIKE_PRICE_NOTATION], [STRIKE_PRICE], [STRI"& _ 
                "KE_PRICE_CURRENCY], [OPTION_EXERCISE_STYLE], [MATURITY_DATE_INSTRUMENT], [EXPIRY"& _ 
                "_DATE], [DELIVERY_TYPE], [INVESTMENT_DECISION_ID_TYPE], [INVESTMENT_DECISION_ID]"& _ 
                ", [INVESTMENT_DECISION_BRANCH_COUNTRY], [EXECUTION_ID_TYPE], [EXECUTION_ID], [SU"& _ 
                "PERVISING_BRANCH_COUNTRY], [WAIVER_INDICATOR], [SHORT_SELLING_INDICATOR], [COMMO"& _ 
                "DITY_DERIVATIVE_INDICATOR], [SFTR_INDICATOR], [DIRECTED_ORDER_FLAG], [ORDER_GROU"& _ 
                "P_ID], [TOAX_FLAG], [LIQP_FLAG], [ORDER_TYPE], [CLIENT_TYPE], [OTC_POST_TRADE_IN"& _ 
                "DICATOR], [OPTION_TYPE], [UNDERLYING_INDEX_DIRECTION], [OrderType], [ClientNr], "& _ 
                "[ClientName], [CountryOfResidence], [Buyer], [Seller]) VALUES (@ReportStatus, @T"& _ 
                "radeDate, @ValueDate, @FixingDate, @ClientOrderID, @FxAllID, @TradingVenueTransa"& _ 
                "ctionIdentificationCode, @CustomerUSI, @ProviderUSI, @Product, @Status, @FixingT"& _ 
                "ime, @FixingSeries, @CustBS, @CustTradeSide, @CustomerName, @CustTrader, @Accoun"& _ 
                "t, @AccountLongName, @CCYPair, @NotionalCCY, @Notional, @ContraCCY, @ContraAmoun"& _ 
                "t, @PriceTreasury, @FwdPts, @AllIn, @ComplexTradeID, @CARStatus, @CARSubmitID, @"& _ 
                "CARTime, @ExecutionWithinTheFirm, @ISIN, @CFICodeForTheInstrument, @WaiverIndica"& _ 
                "tor, @MTFExecutionTime, @LiqVenue, @Capacity, @NPFT, @SEC_FIN, @CustomerLEI, @Ac"& _ 
                "countLEI, @ProviderLEI, @DateTimeOfferToDeal, @TransmissionOfOrderIndicator, @Li"& _ 
                "quidityProvisionActivity, @DateTimeOrderSubmission, @VenueTreasury, @DateReceipt"& _ 
                "Order, @TRADE_DATE, @CUSTOMER_TRANSACTION_ID, @ACTION_TYPE, @BUSINESS_UNIT, @USE"& _ 
                "R_ID, @MIFIR_REPORTING, @COMMENT, @TRADE_REPORT_ID, @SOURCE_SYSTEM, @RECORD_MODE"& _ 
                ", @USER_FIELD1, @USER_FIELD2, @USER_FIELD3, @USER_FIELD4, @USER_FIELD5, @USER_FI"& _ 
                "ELD6, @USER_FIELD7, @USER_FIELD8, @USER_FIELD9, @PARTIAL_ASSISTANCE_FLAG, @PARTI"& _ 
                "AL_ASSISTANCE_SUBMITTER_ID, @PAIRING_ID, @EXECUTING_ENTITY_ID_TYPE, @EXECUTING_E"& _ 
                "NTITY_ID, @MIFID_INVESTMENT_FIRM, @BRANCH_MEMBERSHIP_COUNTRY, @BUYER_ID_TYPE, @B"& _ 
                "UYER_ID, @BUYER_BRANCH_COUNTRY, @BUYER_FIRSTNAME, @BUYER_SURNAME, @BUYER_BIRTHDA"& _ 
                "TE, @BUYER_DECISION_MAKER_ID_TYPE, @BUYER_DECISION_MAKER_ID, @BUYER_DECISION_FIR"& _ 
                "STNAME, @BUYER_DECISION_SURNAME, @BUYER_DECISION_BIRTHDATE, @SELLER_ID_TYPE, @SE"& _ 
                "LLER_ID, @SELLER_BRANCH_COUNTRY, @SELLER_FIRSTNAME, @SELLER_SURNAME, @SELLER_BIR"& _ 
                "THDATE, @SELLER_DECISION_MAKER_ID_TYPE, @SELLER_DECISION_MAKER_ID, @SELLER_DECIS"& _ 
                "ION_FIRST_NAME, @SELLER_DECISION_SURNAME, @SELLER_DECISION_BIRTHDATE, @TRANSMISS"& _ 
                "ION_IND, @TRANSMITTING_ENTITY_BUYER_ID_TYPE, @TRANSMITTING_ENTITY_BUYER_ID, @TRA"& _ 
                "NSMITTING_ENTITY_SELLER_ID_TYPE, @TRANSMITTING_ENTITY_SELLER_ID, @TRN_REF_NUMBER"& _ 
                ", @TRADING_VENUE_TRN_ID_CODE, @VENUE, @TRADE_TIME, @MIFIR_TRADING_CAPACITY, @QUA"& _ 
                "NTITY_NOTATION, @QUANTITY, @QUANTITY_CURRENCY, @NOTIONAL_INCREASE_DECREASE, @PRI"& _ 
                "CE_NOTATION, @PRICE, @PRICE_CURRENCY, @NET_AMOUNT, @UPFRONT_PAYMENT, @UPFRONT_PA"& _ 
                "YMENT_CURRENCY, @COMPLEX_TRADE_COMPONENT_ID, @INSTRUMENT_ID_TYPE, @INSTRUMENT_NA"& _ 
                "ME, @INSTRUMENT_ID, @INSTRUMENT_CLASS, @NOTIONAL_CURRENCY_1, @NOTIONAL_CURRENCY_"& _ 
                "2, @PRICE_MULTIPLIER, @UNDERLYING_INSTRUMENT_DIRECTION, @UNDERLYING_INSTRUMENT_C"& _ 
                "ODE, @UNDERLYING_INDEX_CODE, @UNDERLYING_INDEX_NAME, @UNDERLYING_INDEX_TERM, @UN"& _ 
                "DERLYING_INDEX_TERM_UNIT, @STRIKE_PRICE_NOTATION, @STRIKE_PRICE, @STRIKE_PRICE_C"& _ 
                "URRENCY, @OPTION_EXERCISE_STYLE, @MATURITY_DATE_INSTRUMENT, @EXPIRY_DATE, @DELIV"& _ 
                "ERY_TYPE, @INVESTMENT_DECISION_ID_TYPE, @INVESTMENT_DECISION_ID, @INVESTMENT_DEC"& _ 
                "ISION_BRANCH_COUNTRY, @EXECUTION_ID_TYPE, @EXECUTION_ID, @SUPERVISING_BRANCH_COU"& _ 
                "NTRY, @WAIVER_INDICATOR, @SHORT_SELLING_INDICATOR, @COMMODITY_DERIVATIVE_INDICAT"& _ 
                "OR, @SFTR_INDICATOR, @DIRECTED_ORDER_FLAG, @ORDER_GROUP_ID, @TOAX_FLAG, @LIQP_FL"& _ 
                "AG, @ORDER_TYPE, @CLIENT_TYPE, @OTC_POST_TRADE_INDICATOR, @OPTION_TYPE, @UNDERLY"& _ 
                "ING_INDEX_DIRECTION, @OrderType, @ClientNr, @ClientName, @CountryOfResidence, @B"& _ 
                "uyer, @Seller)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientOrderID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientOrderID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FxAllID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FxAllID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradingVenueTransactionIdentificationCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradingVenueTransactionIdentificationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerUSI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerUSI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProviderUSI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProviderUSI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingSeries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingSeries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustBS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustTradeSide", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustTradeSide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustTrader", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustTrader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountLongName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountLongName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCYPair", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCYPair", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NotionalCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NotionalCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notional", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContraCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContraCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContraAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContraAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PriceTreasury", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PriceTreasury", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FwdPts", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FwdPts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllIn", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComplexTradeID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComplexTradeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARSubmitID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARSubmitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExecutionWithinTheFirm", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExecutionWithinTheFirm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CFICodeForTheInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CFICodeForTheInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaiverIndicator", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaiverIndicator", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTFExecutionTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTFExecutionTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiqVenue", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiqVenue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Capacity", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Capacity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NPFT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NPFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEC_FIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEC_FIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProviderLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProviderLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeOfferToDeal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeOfferToDeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TransmissionOfOrderIndicator", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransmissionOfOrderIndicator", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityProvisionActivity", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityProvisionActivity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeOrderSubmission", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeOrderSubmission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VenueTreasury", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VenueTreasury", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateReceiptOrder", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateReceiptOrder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_TRANSACTION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_TRANSACTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUSINESS_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUSINESS_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFIR_REPORTING", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFIR_REPORTING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_REPORT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_REPORT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE_SYSTEM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE_SYSTEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECORD_MODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECORD_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD9", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARTIAL_ASSISTANCE_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_ASSISTANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARTIAL_ASSISTANCE_SUBMITTER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_ASSISTANCE_SUBMITTER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAIRING_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAIRING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTING_ENTITY_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTING_ENTITY_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTING_ENTITY_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTING_ENTITY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFID_INVESTMENT_FIRM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFID_INVESTMENT_FIRM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BRANCH_MEMBERSHIP_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BRANCH_MEMBERSHIP_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_MAKER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_MAKER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_MAKER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_MAKER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_MAKER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_MAKER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_MAKER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_MAKER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_FIRST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_FIRST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMISSION_IND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMISSION_IND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_BUYER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_BUYER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_BUYER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_BUYER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_SELLER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_SELLER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_SELLER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_SELLER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRN_REF_NUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRN_REF_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADING_VENUE_TRN_ID_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADING_VENUE_TRN_ID_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFIR_TRADING_CAPACITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFIR_TRADING_CAPACITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_INCREASE_DECREASE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_INCREASE_DECREASE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NET_AMOUNT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NET_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPFRONT_PAYMENT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPFRONT_PAYMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPFRONT_PAYMENT_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPFRONT_PAYMENT_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLEX_TRADE_COMPONENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLEX_TRADE_COMPONENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_CURRENCY_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_CURRENCY_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_CURRENCY_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_CURRENCY_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_MULTIPLIER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INSTRUMENT_DIRECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INSTRUMENT_DIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INSTRUMENT_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INSTRUMENT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_TERM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_TERM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_TERM_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_TERM_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_EXERCISE_STYLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_EXERCISE_STYLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATURITY_DATE_INSTRUMENT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATURITY_DATE_INSTRUMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXPIRY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXPIRY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DELIVERY_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DELIVERY_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTION_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTION_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPERVISING_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPERVISING_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAIVER_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAIVER_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHORT_SELLING_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHORT_SELLING_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMODITY_DERIVATIVE_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMODITY_DERIVATIVE_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SFTR_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SFTR_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECTED_ORDER_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECTED_ORDER_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_GROUP_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOAX_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOAX_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQP_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIQP_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OTC_POST_TRADE_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OTC_POST_TRADE_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_DIRECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_DIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryOfResidence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryOfResidence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Buyer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seller", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Seller", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MIFIR] SET [ReportStatus] = @ReportStatus, [TradeDate] = @TradeDate, [Val"& _ 
                "ueDate] = @ValueDate, [FixingDate] = @FixingDate, [ClientOrderID] = @ClientOrder"& _ 
                "ID, [FxAllID] = @FxAllID, [TradingVenueTransactionIdentificationCode] = @Trading"& _ 
                "VenueTransactionIdentificationCode, [CustomerUSI] = @CustomerUSI, [ProviderUSI] "& _ 
                "= @ProviderUSI, [Product] = @Product, [Status] = @Status, [FixingTime] = @Fixing"& _ 
                "Time, [FixingSeries] = @FixingSeries, [CustBS] = @CustBS, [CustTradeSide] = @Cus"& _ 
                "tTradeSide, [CustomerName] = @CustomerName, [CustTrader] = @CustTrader, [Account"& _ 
                "] = @Account, [AccountLongName] = @AccountLongName, [CCYPair] = @CCYPair, [Notio"& _ 
                "nalCCY] = @NotionalCCY, [Notional] = @Notional, [ContraCCY] = @ContraCCY, [Contr"& _ 
                "aAmount] = @ContraAmount, [PriceTreasury] = @PriceTreasury, [FwdPts] = @FwdPts, "& _ 
                "[AllIn] = @AllIn, [ComplexTradeID] = @ComplexTradeID, [CARStatus] = @CARStatus, "& _ 
                "[CARSubmitID] = @CARSubmitID, [CARTime] = @CARTime, [ExecutionWithinTheFirm] = @"& _ 
                "ExecutionWithinTheFirm, [ISIN] = @ISIN, [CFICodeForTheInstrument] = @CFICodeForT"& _ 
                "heInstrument, [WaiverIndicator] = @WaiverIndicator, [MTFExecutionTime] = @MTFExe"& _ 
                "cutionTime, [LiqVenue] = @LiqVenue, [Capacity] = @Capacity, [NPFT] = @NPFT, [SEC"& _ 
                "_FIN] = @SEC_FIN, [CustomerLEI] = @CustomerLEI, [AccountLEI] = @AccountLEI, [Pro"& _ 
                "viderLEI] = @ProviderLEI, [DateTimeOfferToDeal] = @DateTimeOfferToDeal, [Transmi"& _ 
                "ssionOfOrderIndicator] = @TransmissionOfOrderIndicator, [LiquidityProvisionActiv"& _ 
                "ity] = @LiquidityProvisionActivity, [DateTimeOrderSubmission] = @DateTimeOrderSu"& _ 
                "bmission, [VenueTreasury] = @VenueTreasury, [DateReceiptOrder] = @DateReceiptOrd"& _ 
                "er, [TRADE_DATE] = @TRADE_DATE, [CUSTOMER_TRANSACTION_ID] = @CUSTOMER_TRANSACTIO"& _ 
                "N_ID, [ACTION_TYPE] = @ACTION_TYPE, [BUSINESS_UNIT] = @BUSINESS_UNIT, [USER_ID] "& _ 
                "= @USER_ID, [MIFIR_REPORTING] = @MIFIR_REPORTING, [COMMENT] = @COMMENT, [TRADE_R"& _ 
                "EPORT_ID] = @TRADE_REPORT_ID, [SOURCE_SYSTEM] = @SOURCE_SYSTEM, [RECORD_MODE] = "& _ 
                "@RECORD_MODE, [USER_FIELD1] = @USER_FIELD1, [USER_FIELD2] = @USER_FIELD2, [USER_"& _ 
                "FIELD3] = @USER_FIELD3, [USER_FIELD4] = @USER_FIELD4, [USER_FIELD5] = @USER_FIEL"& _ 
                "D5, [USER_FIELD6] = @USER_FIELD6, [USER_FIELD7] = @USER_FIELD7, [USER_FIELD8] = "& _ 
                "@USER_FIELD8, [USER_FIELD9] = @USER_FIELD9, [PARTIAL_ASSISTANCE_FLAG] = @PARTIAL"& _ 
                "_ASSISTANCE_FLAG, [PARTIAL_ASSISTANCE_SUBMITTER_ID] = @PARTIAL_ASSISTANCE_SUBMIT"& _ 
                "TER_ID, [PAIRING_ID] = @PAIRING_ID, [EXECUTING_ENTITY_ID_TYPE] = @EXECUTING_ENTI"& _ 
                "TY_ID_TYPE, [EXECUTING_ENTITY_ID] = @EXECUTING_ENTITY_ID, [MIFID_INVESTMENT_FIRM"& _ 
                "] = @MIFID_INVESTMENT_FIRM, [BRANCH_MEMBERSHIP_COUNTRY] = @BRANCH_MEMBERSHIP_COU"& _ 
                "NTRY, [BUYER_ID_TYPE] = @BUYER_ID_TYPE, [BUYER_ID] = @BUYER_ID, [BUYER_BRANCH_CO"& _ 
                "UNTRY] = @BUYER_BRANCH_COUNTRY, [BUYER_FIRSTNAME] = @BUYER_FIRSTNAME, [BUYER_SUR"& _ 
                "NAME] = @BUYER_SURNAME, [BUYER_BIRTHDATE] = @BUYER_BIRTHDATE, [BUYER_DECISION_MA"& _ 
                "KER_ID_TYPE] = @BUYER_DECISION_MAKER_ID_TYPE, [BUYER_DECISION_MAKER_ID] = @BUYER"& _ 
                "_DECISION_MAKER_ID, [BUYER_DECISION_FIRSTNAME] = @BUYER_DECISION_FIRSTNAME, [BUY"& _ 
                "ER_DECISION_SURNAME] = @BUYER_DECISION_SURNAME, [BUYER_DECISION_BIRTHDATE] = @BU"& _ 
                "YER_DECISION_BIRTHDATE, [SELLER_ID_TYPE] = @SELLER_ID_TYPE, [SELLER_ID] = @SELLE"& _ 
                "R_ID, [SELLER_BRANCH_COUNTRY] = @SELLER_BRANCH_COUNTRY, [SELLER_FIRSTNAME] = @SE"& _ 
                "LLER_FIRSTNAME, [SELLER_SURNAME] = @SELLER_SURNAME, [SELLER_BIRTHDATE] = @SELLER"& _ 
                "_BIRTHDATE, [SELLER_DECISION_MAKER_ID_TYPE] = @SELLER_DECISION_MAKER_ID_TYPE, [S"& _ 
                "ELLER_DECISION_MAKER_ID] = @SELLER_DECISION_MAKER_ID, [SELLER_DECISION_FIRST_NAM"& _ 
                "E] = @SELLER_DECISION_FIRST_NAME, [SELLER_DECISION_SURNAME] = @SELLER_DECISION_S"& _ 
                "URNAME, [SELLER_DECISION_BIRTHDATE] = @SELLER_DECISION_BIRTHDATE, [TRANSMISSION_"& _ 
                "IND] = @TRANSMISSION_IND, [TRANSMITTING_ENTITY_BUYER_ID_TYPE] = @TRANSMITTING_EN"& _ 
                "TITY_BUYER_ID_TYPE, [TRANSMITTING_ENTITY_BUYER_ID] = @TRANSMITTING_ENTITY_BUYER_"& _ 
                "ID, [TRANSMITTING_ENTITY_SELLER_ID_TYPE] = @TRANSMITTING_ENTITY_SELLER_ID_TYPE, "& _ 
                "[TRANSMITTING_ENTITY_SELLER_ID] = @TRANSMITTING_ENTITY_SELLER_ID, [TRN_REF_NUMBE"& _ 
                "R] = @TRN_REF_NUMBER, [TRADING_VENUE_TRN_ID_CODE] = @TRADING_VENUE_TRN_ID_CODE, "& _ 
                "[VENUE] = @VENUE, [TRADE_TIME] = @TRADE_TIME, [MIFIR_TRADING_CAPACITY] = @MIFIR_"& _ 
                "TRADING_CAPACITY, [QUANTITY_NOTATION] = @QUANTITY_NOTATION, [QUANTITY] = @QUANTI"& _ 
                "TY, [QUANTITY_CURRENCY] = @QUANTITY_CURRENCY, [NOTIONAL_INCREASE_DECREASE] = @NO"& _ 
                "TIONAL_INCREASE_DECREASE, [PRICE_NOTATION] = @PRICE_NOTATION, [PRICE] = @PRICE, "& _ 
                "[PRICE_CURRENCY] = @PRICE_CURRENCY, [NET_AMOUNT] = @NET_AMOUNT, [UPFRONT_PAYMENT"& _ 
                "] = @UPFRONT_PAYMENT, [UPFRONT_PAYMENT_CURRENCY] = @UPFRONT_PAYMENT_CURRENCY, [C"& _ 
                "OMPLEX_TRADE_COMPONENT_ID] = @COMPLEX_TRADE_COMPONENT_ID, [INSTRUMENT_ID_TYPE] ="& _ 
                " @INSTRUMENT_ID_TYPE, [INSTRUMENT_NAME] = @INSTRUMENT_NAME, [INSTRUMENT_ID] = @I"& _ 
                "NSTRUMENT_ID, [INSTRUMENT_CLASS] = @INSTRUMENT_CLASS, [NOTIONAL_CURRENCY_1] = @N"& _ 
                "OTIONAL_CURRENCY_1, [NOTIONAL_CURRENCY_2] = @NOTIONAL_CURRENCY_2, [PRICE_MULTIPL"& _ 
                "IER] = @PRICE_MULTIPLIER, [UNDERLYING_INSTRUMENT_DIRECTION] = @UNDERLYING_INSTRU"& _ 
                "MENT_DIRECTION, [UNDERLYING_INSTRUMENT_CODE] = @UNDERLYING_INSTRUMENT_CODE, [UND"& _ 
                "ERLYING_INDEX_CODE] = @UNDERLYING_INDEX_CODE, [UNDERLYING_INDEX_NAME] = @UNDERLY"& _ 
                "ING_INDEX_NAME, [UNDERLYING_INDEX_TERM] = @UNDERLYING_INDEX_TERM, [UNDERLYING_IN"& _ 
                "DEX_TERM_UNIT] = @UNDERLYING_INDEX_TERM_UNIT, [STRIKE_PRICE_NOTATION] = @STRIKE_"& _ 
                "PRICE_NOTATION, [STRIKE_PRICE] = @STRIKE_PRICE, [STRIKE_PRICE_CURRENCY] = @STRIK"& _ 
                "E_PRICE_CURRENCY, [OPTION_EXERCISE_STYLE] = @OPTION_EXERCISE_STYLE, [MATURITY_DA"& _ 
                "TE_INSTRUMENT] = @MATURITY_DATE_INSTRUMENT, [EXPIRY_DATE] = @EXPIRY_DATE, [DELIV"& _ 
                "ERY_TYPE] = @DELIVERY_TYPE, [INVESTMENT_DECISION_ID_TYPE] = @INVESTMENT_DECISION"& _ 
                "_ID_TYPE, [INVESTMENT_DECISION_ID] = @INVESTMENT_DECISION_ID, [INVESTMENT_DECISI"& _ 
                "ON_BRANCH_COUNTRY] = @INVESTMENT_DECISION_BRANCH_COUNTRY, [EXECUTION_ID_TYPE] = "& _ 
                "@EXECUTION_ID_TYPE, [EXECUTION_ID] = @EXECUTION_ID, [SUPERVISING_BRANCH_COUNTRY]"& _ 
                " = @SUPERVISING_BRANCH_COUNTRY, [WAIVER_INDICATOR] = @WAIVER_INDICATOR, [SHORT_S"& _ 
                "ELLING_INDICATOR] = @SHORT_SELLING_INDICATOR, [COMMODITY_DERIVATIVE_INDICATOR] ="& _ 
                " @COMMODITY_DERIVATIVE_INDICATOR, [SFTR_INDICATOR] = @SFTR_INDICATOR, [DIRECTED_"& _ 
                "ORDER_FLAG] = @DIRECTED_ORDER_FLAG, [ORDER_GROUP_ID] = @ORDER_GROUP_ID, [TOAX_FL"& _ 
                "AG] = @TOAX_FLAG, [LIQP_FLAG] = @LIQP_FLAG, [ORDER_TYPE] = @ORDER_TYPE, [CLIENT_"& _ 
                "TYPE] = @CLIENT_TYPE, [OTC_POST_TRADE_INDICATOR] = @OTC_POST_TRADE_INDICATOR, [O"& _ 
                "PTION_TYPE] = @OPTION_TYPE, [UNDERLYING_INDEX_DIRECTION] = @UNDERLYING_INDEX_DIR"& _ 
                "ECTION, [OrderType] = @OrderType, [ClientNr] = @ClientNr, [ClientName] = @Client"& _ 
                "Name, [CountryOfResidence] = @CountryOfResidence, [Buyer] = @Buyer, [Seller] = @"& _ 
                "Seller WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientOrderID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientOrderID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FxAllID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FxAllID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradingVenueTransactionIdentificationCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradingVenueTransactionIdentificationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerUSI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerUSI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProviderUSI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProviderUSI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FixingSeries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FixingSeries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustBS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustTradeSide", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustTradeSide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustTrader", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustTrader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountLongName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountLongName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCYPair", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCYPair", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NotionalCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NotionalCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notional", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContraCCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContraCCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContraAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContraAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PriceTreasury", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PriceTreasury", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FwdPts", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FwdPts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllIn", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComplexTradeID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComplexTradeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARSubmitID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARSubmitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExecutionWithinTheFirm", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExecutionWithinTheFirm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CFICodeForTheInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CFICodeForTheInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaiverIndicator", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaiverIndicator", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTFExecutionTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTFExecutionTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiqVenue", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiqVenue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Capacity", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Capacity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NPFT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NPFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEC_FIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEC_FIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProviderLEI", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProviderLEI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeOfferToDeal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeOfferToDeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TransmissionOfOrderIndicator", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransmissionOfOrderIndicator", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityProvisionActivity", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityProvisionActivity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeOrderSubmission", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeOrderSubmission", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VenueTreasury", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VenueTreasury", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateReceiptOrder", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateReceiptOrder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_TRANSACTION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_TRANSACTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUSINESS_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUSINESS_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFIR_REPORTING", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFIR_REPORTING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_REPORT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_REPORT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE_SYSTEM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE_SYSTEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECORD_MODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECORD_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_FIELD9", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_FIELD9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARTIAL_ASSISTANCE_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_ASSISTANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARTIAL_ASSISTANCE_SUBMITTER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_ASSISTANCE_SUBMITTER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAIRING_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAIRING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTING_ENTITY_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTING_ENTITY_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTING_ENTITY_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTING_ENTITY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFID_INVESTMENT_FIRM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFID_INVESTMENT_FIRM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BRANCH_MEMBERSHIP_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BRANCH_MEMBERSHIP_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_MAKER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_MAKER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_MAKER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_MAKER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BUYER_DECISION_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BUYER_DECISION_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_FIRSTNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_FIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_MAKER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_MAKER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_MAKER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_MAKER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_FIRST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_FIRST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_SURNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELLER_DECISION_BIRTHDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELLER_DECISION_BIRTHDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMISSION_IND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMISSION_IND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_BUYER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_BUYER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_BUYER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_BUYER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_SELLER_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_SELLER_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSMITTING_ENTITY_SELLER_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSMITTING_ENTITY_SELLER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRN_REF_NUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRN_REF_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADING_VENUE_TRN_ID_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADING_VENUE_TRN_ID_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRADE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRADE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MIFIR_TRADING_CAPACITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MIFIR_TRADING_CAPACITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_INCREASE_DECREASE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_INCREASE_DECREASE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NET_AMOUNT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NET_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPFRONT_PAYMENT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPFRONT_PAYMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPFRONT_PAYMENT_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPFRONT_PAYMENT_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLEX_TRADE_COMPONENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLEX_TRADE_COMPONENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUMENT_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUMENT_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_CURRENCY_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_CURRENCY_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTIONAL_CURRENCY_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTIONAL_CURRENCY_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_MULTIPLIER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INSTRUMENT_DIRECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INSTRUMENT_DIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INSTRUMENT_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INSTRUMENT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_TERM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_TERM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_TERM_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_TERM_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE_NOTATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE_NOTATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRIKE_PRICE_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRIKE_PRICE_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_EXERCISE_STYLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_EXERCISE_STYLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATURITY_DATE_INSTRUMENT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATURITY_DATE_INSTRUMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXPIRY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXPIRY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DELIVERY_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DELIVERY_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVESTMENT_DECISION_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVESTMENT_DECISION_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTION_ID_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTION_ID_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTION_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPERVISING_BRANCH_COUNTRY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPERVISING_BRANCH_COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAIVER_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAIVER_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHORT_SELLING_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHORT_SELLING_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMODITY_DERIVATIVE_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMODITY_DERIVATIVE_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SFTR_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SFTR_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECTED_ORDER_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECTED_ORDER_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_GROUP_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOAX_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOAX_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQP_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIQP_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OTC_POST_TRADE_INDICATOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OTC_POST_TRADE_INDICATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNDERLYING_INDEX_DIRECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNDERLYING_INDEX_DIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryOfResidence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryOfResidence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Buyer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seller", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Seller", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ReportStatus, TradeDate, ValueDate, FixingDate, ClientOrderID, "& _ 
                "FxAllID, TradingVenueTransactionIdentificationCode, CustomerUSI, ProviderUSI, Pr"& _ 
                "oduct, Status, FixingTime, FixingSeries, CustBS, CustTradeSide, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           CustomerName, CustTrader, Account, AccountLongName, CCYPair, Notional"& _ 
                "CCY, Notional, ContraCCY, ContraAmount, PriceTreasury, FwdPts, AllIn, ComplexTra"& _ 
                "deID, CARStatus, CARSubmitID, CARTime, ExecutionWithinTheFirm, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          ISIN, CFICodeForTheInstrument, WaiverIndicator, MTFExecutionTime, LiqV"& _ 
                "enue, Capacity, NPFT, SEC_FIN, CustomerLEI, AccountLEI, ProviderLEI, DateTimeOff"& _ 
                "erToDeal, TransmissionOfOrderIndicator, LiquidityProvisionActivity, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               DateTimeOrderSubmission, VenueTreasury, DateReceiptOrder, TRADE_D"& _ 
                "ATE, CUSTOMER_TRANSACTION_ID, ACTION_TYPE, BUSINESS_UNIT, USER_ID, MIFIR_REPORTI"& _ 
                "NG, COMMENT, TRADE_REPORT_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SOURCE_SYSTEM, RECORD_M"& _ 
                "ODE, USER_FIELD1, USER_FIELD2, USER_FIELD3, USER_FIELD4, USER_FIELD5, USER_FIELD"& _ 
                "6, USER_FIELD7, USER_FIELD8, USER_FIELD9, PARTIAL_ASSISTANCE_FLAG, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "              PARTIAL_ASSISTANCE_SUBMITTER_ID, PAIRING_ID, EXECUTING_ENTITY_ID_T"& _ 
                "YPE, EXECUTING_ENTITY_ID, MIFID_INVESTMENT_FIRM, BRANCH_MEMBERSHIP_COUNTRY, BUYE"& _ 
                "R_ID_TYPE, BUYER_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BUYER_BRANCH_COUNTRY, BUYER_FIRS"& _ 
                "TNAME, BUYER_SURNAME, BUYER_BIRTHDATE, BUYER_DECISION_MAKER_ID_TYPE, BUYER_DECIS"& _ 
                "ION_MAKER_ID, BUYER_DECISION_FIRSTNAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BUYER_DECISIO"& _ 
                "N_SURNAME, BUYER_DECISION_BIRTHDATE, SELLER_ID_TYPE, SELLER_ID, SELLER_BRANCH_CO"& _ 
                "UNTRY, SELLER_FIRSTNAME, SELLER_SURNAME, SELLER_BIRTHDATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      SELLER_DECISION_MAKER_ID_TYPE, SELLER_DECISION_MAKER_ID, SELLER_DECISION_F"& _ 
                "IRST_NAME, SELLER_DECISION_SURNAME, SELLER_DECISION_BIRTHDATE, TRANSMISSION_IND,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSMITTING_ENTITY_BUYER_ID_TYPE, TRANSMITTING_ENTI"& _ 
                "TY_BUYER_ID, TRANSMITTING_ENTITY_SELLER_ID_TYPE, TRANSMITTING_ENTITY_SELLER_ID, "& _ 
                "TRN_REF_NUMBER, TRADING_VENUE_TRN_ID_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         VENUE, TRA"& _ 
                "DE_TIME, MIFIR_TRADING_CAPACITY, QUANTITY_NOTATION, QUANTITY, QUANTITY_CURRENCY,"& _ 
                " NOTIONAL_INCREASE_DECREASE, PRICE_NOTATION, PRICE, PRICE_CURRENCY, NET_AMOUNT, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         UPFRONT_PAYMENT, UPFRONT_PAYMENT_CURRENCY, COMPLEX_TR"& _ 
                "ADE_COMPONENT_ID, INSTRUMENT_ID_TYPE, INSTRUMENT_NAME, INSTRUMENT_ID, INSTRUMENT"& _ 
                "_CLASS, NOTIONAL_CURRENCY_1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         NOTIONAL_CURRENCY_2, PRI"& _ 
                "CE_MULTIPLIER, UNDERLYING_INSTRUMENT_DIRECTION, UNDERLYING_INSTRUMENT_CODE, UNDE"& _ 
                "RLYING_INDEX_CODE, UNDERLYING_INDEX_NAME, UNDERLYING_INDEX_TERM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            UNDERLYING_INDEX_TERM_UNIT, STRIKE_PRICE_NOTATION, STRIKE_PRICE, STR"& _ 
                "IKE_PRICE_CURRENCY, OPTION_EXERCISE_STYLE, MATURITY_DATE_INSTRUMENT, EXPIRY_DATE"& _ 
                ", DELIVERY_TYPE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         INVESTMENT_DECISION_ID_TYPE, INVESTM"& _ 
                "ENT_DECISION_ID, INVESTMENT_DECISION_BRANCH_COUNTRY, EXECUTION_ID_TYPE, EXECUTIO"& _ 
                "N_ID, SUPERVISING_BRANCH_COUNTRY, WAIVER_INDICATOR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         S"& _ 
                "HORT_SELLING_INDICATOR, COMMODITY_DERIVATIVE_INDICATOR, SFTR_INDICATOR, DIRECTED"& _ 
                "_ORDER_FLAG, ORDER_GROUP_ID, TOAX_FLAG, LIQP_FLAG, ORDER_TYPE, CLIENT_TYPE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       OTC_POST_TRADE_INDICATOR, OPTION_TYPE, UNDERLYING_INDEX_D"& _ 
                "IRECTION, OrderType, ClientNr, ClientName, CountryOfResidence, Buyer, Seller"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            MIFIR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (TradeDate = @Param1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY FxAllID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByTradeDate(ByVal dataTable As MeldewesenDataSet.MIFIRDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByTradeDate(ByVal Param1 As Global.System.Nullable(Of Date)) As MeldewesenDataSet.MIFIRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MeldewesenDataSet.MIFIRDataTable = New MeldewesenDataSet.MIFIRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MeldewesenDataSet.MIFIRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MeldewesenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MIFIR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ReportStatus As String,  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal FixingDate As Global.System.Nullable(Of Date),  _
                    ByVal ClientOrderID As String,  _
                    ByVal FxAllID As String,  _
                    ByVal TradingVenueTransactionIdentificationCode As String,  _
                    ByVal CustomerUSI As String,  _
                    ByVal ProviderUSI As String,  _
                    ByVal Product As String,  _
                    ByVal Status As String,  _
                    ByVal FixingTime As Global.System.Nullable(Of Date),  _
                    ByVal FixingSeries As String,  _
                    ByVal CustBS As String,  _
                    ByVal CustTradeSide As String,  _
                    ByVal CustomerName As String,  _
                    ByVal CustTrader As String,  _
                    ByVal Account As String,  _
                    ByVal AccountLongName As String,  _
                    ByVal CCYPair As String,  _
                    ByVal NotionalCCY As String,  _
                    ByVal Notional As Global.System.Nullable(Of Double),  _
                    ByVal ContraCCY As String,  _
                    ByVal ContraAmount As Global.System.Nullable(Of Double),  _
                    ByVal PriceTreasury As Global.System.Nullable(Of Double),  _
                    ByVal FwdPts As Global.System.Nullable(Of Double),  _
                    ByVal AllIn As Global.System.Nullable(Of Double),  _
                    ByVal ComplexTradeID As String,  _
                    ByVal CARStatus As String,  _
                    ByVal CARSubmitID As String,  _
                    ByVal CARTime As Global.System.Nullable(Of Date),  _
                    ByVal ExecutionWithinTheFirm As String,  _
                    ByVal ISIN As String,  _
                    ByVal CFICodeForTheInstrument As String,  _
                    ByVal WaiverIndicator As String,  _
                    ByVal MTFExecutionTime As Global.System.Nullable(Of Date),  _
                    ByVal LiqVenue As String,  _
                    ByVal Capacity As String,  _
                    ByVal NPFT As String,  _
                    ByVal SEC_FIN As String,  _
                    ByVal CustomerLEI As String,  _
                    ByVal AccountLEI As String,  _
                    ByVal ProviderLEI As String,  _
                    ByVal DateTimeOfferToDeal As Global.System.Nullable(Of Date),  _
                    ByVal TransmissionOfOrderIndicator As String,  _
                    ByVal LiquidityProvisionActivity As String,  _
                    ByVal DateTimeOrderSubmission As Global.System.Nullable(Of Date),  _
                    ByVal VenueTreasury As String,  _
                    ByVal DateReceiptOrder As Global.System.Nullable(Of Date),  _
                    ByVal TRADE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal CUSTOMER_TRANSACTION_ID As String,  _
                    ByVal ACTION_TYPE As String,  _
                    ByVal BUSINESS_UNIT As String,  _
                    ByVal USER_ID As String,  _
                    ByVal MIFIR_REPORTING As String,  _
                    ByVal COMMENT As String,  _
                    ByVal TRADE_REPORT_ID As String,  _
                    ByVal SOURCE_SYSTEM As String,  _
                    ByVal RECORD_MODE As String,  _
                    ByVal USER_FIELD1 As String,  _
                    ByVal USER_FIELD2 As String,  _
                    ByVal USER_FIELD3 As String,  _
                    ByVal USER_FIELD4 As String,  _
                    ByVal USER_FIELD5 As String,  _
                    ByVal USER_FIELD6 As String,  _
                    ByVal USER_FIELD7 As String,  _
                    ByVal USER_FIELD8 As String,  _
                    ByVal USER_FIELD9 As String,  _
                    ByVal PARTIAL_ASSISTANCE_FLAG As String,  _
                    ByVal PARTIAL_ASSISTANCE_SUBMITTER_ID As String,  _
                    ByVal PAIRING_ID As String,  _
                    ByVal EXECUTING_ENTITY_ID_TYPE As String,  _
                    ByVal EXECUTING_ENTITY_ID As String,  _
                    ByVal MIFID_INVESTMENT_FIRM As String,  _
                    ByVal BRANCH_MEMBERSHIP_COUNTRY As String,  _
                    ByVal BUYER_ID_TYPE As String,  _
                    ByVal BUYER_ID As String,  _
                    ByVal BUYER_BRANCH_COUNTRY As String,  _
                    ByVal BUYER_FIRSTNAME As String,  _
                    ByVal BUYER_SURNAME As String,  _
                    ByVal BUYER_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal BUYER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal BUYER_DECISION_MAKER_ID As String,  _
                    ByVal BUYER_DECISION_FIRSTNAME As String,  _
                    ByVal BUYER_DECISION_SURNAME As String,  _
                    ByVal BUYER_DECISION_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal SELLER_ID_TYPE As String,  _
                    ByVal SELLER_ID As String,  _
                    ByVal SELLER_BRANCH_COUNTRY As String,  _
                    ByVal SELLER_FIRSTNAME As String,  _
                    ByVal SELLER_SURNAME As String,  _
                    ByVal SELLER_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal SELLER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal SELLER_DECISION_MAKER_ID As String,  _
                    ByVal SELLER_DECISION_FIRST_NAME As String,  _
                    ByVal SELLER_DECISION_SURNAME As String,  _
                    ByVal SELLER_DECISION_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal TRANSMISSION_IND As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID As String,  _
                    ByVal TRN_REF_NUMBER As String,  _
                    ByVal TRADING_VENUE_TRN_ID_CODE As String,  _
                    ByVal VENUE As String,  _
                    ByVal TRADE_TIME As Global.System.Nullable(Of Date),  _
                    ByVal MIFIR_TRADING_CAPACITY As String,  _
                    ByVal QUANTITY_NOTATION As String,  _
                    ByVal QUANTITY As Global.System.Nullable(Of Double),  _
                    ByVal QUANTITY_CURRENCY As String,  _
                    ByVal NOTIONAL_INCREASE_DECREASE As String,  _
                    ByVal PRICE_NOTATION As String,  _
                    ByVal PRICE As Global.System.Nullable(Of Double),  _
                    ByVal PRICE_CURRENCY As String,  _
                    ByVal NET_AMOUNT As Global.System.Nullable(Of Double),  _
                    ByVal UPFRONT_PAYMENT As Global.System.Nullable(Of Double),  _
                    ByVal UPFRONT_PAYMENT_CURRENCY As String,  _
                    ByVal COMPLEX_TRADE_COMPONENT_ID As String,  _
                    ByVal INSTRUMENT_ID_TYPE As String,  _
                    ByVal INSTRUMENT_NAME As String,  _
                    ByVal INSTRUMENT_ID As String,  _
                    ByVal INSTRUMENT_CLASS As String,  _
                    ByVal NOTIONAL_CURRENCY_1 As String,  _
                    ByVal NOTIONAL_CURRENCY_2 As String,  _
                    ByVal PRICE_MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal UNDERLYING_INSTRUMENT_DIRECTION As String,  _
                    ByVal UNDERLYING_INSTRUMENT_CODE As String,  _
                    ByVal UNDERLYING_INDEX_CODE As String,  _
                    ByVal UNDERLYING_INDEX_NAME As String,  _
                    ByVal UNDERLYING_INDEX_TERM As String,  _
                    ByVal UNDERLYING_INDEX_TERM_UNIT As String,  _
                    ByVal STRIKE_PRICE_NOTATION As String,  _
                    ByVal STRIKE_PRICE As Global.System.Nullable(Of Double),  _
                    ByVal STRIKE_PRICE_CURRENCY As String,  _
                    ByVal OPTION_EXERCISE_STYLE As String,  _
                    ByVal MATURITY_DATE_INSTRUMENT As Global.System.Nullable(Of Date),  _
                    ByVal EXPIRY_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DELIVERY_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID As String,  _
                    ByVal INVESTMENT_DECISION_BRANCH_COUNTRY As String,  _
                    ByVal EXECUTION_ID_TYPE As String,  _
                    ByVal EXECUTION_ID As String,  _
                    ByVal SUPERVISING_BRANCH_COUNTRY As String,  _
                    ByVal WAIVER_INDICATOR As String,  _
                    ByVal SHORT_SELLING_INDICATOR As String,  _
                    ByVal COMMODITY_DERIVATIVE_INDICATOR As String,  _
                    ByVal SFTR_INDICATOR As String,  _
                    ByVal DIRECTED_ORDER_FLAG As String,  _
                    ByVal ORDER_GROUP_ID As String,  _
                    ByVal TOAX_FLAG As String,  _
                    ByVal LIQP_FLAG As String,  _
                    ByVal ORDER_TYPE As String,  _
                    ByVal CLIENT_TYPE As String,  _
                    ByVal OTC_POST_TRADE_INDICATOR As String,  _
                    ByVal OPTION_TYPE As String,  _
                    ByVal UNDERLYING_INDEX_DIRECTION As String,  _
                    ByVal OrderType As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal CountryOfResidence As String,  _
                    ByVal Buyer As String,  _
                    ByVal Seller As String) As Integer
            If (ReportStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ReportStatus,String)
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FixingDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FixingDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ClientOrderID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ClientOrderID,String)
            End If
            If (FxAllID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FxAllID,String)
            End If
            If (TradingVenueTransactionIdentificationCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TradingVenueTransactionIdentificationCode,String)
            End If
            If (CustomerUSI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CustomerUSI,String)
            End If
            If (ProviderUSI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ProviderUSI,String)
            End If
            If (Product Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Product,String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Status,String)
            End If
            If (FixingTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FixingTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FixingSeries Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FixingSeries,String)
            End If
            If (CustBS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CustBS,String)
            End If
            If (CustTradeSide Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CustTradeSide,String)
            End If
            If (CustomerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CustomerName,String)
            End If
            If (CustTrader Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CustTrader,String)
            End If
            If (Account Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Account,String)
            End If
            If (AccountLongName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AccountLongName,String)
            End If
            If (CCYPair Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CCYPair,String)
            End If
            If (NotionalCCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(NotionalCCY,String)
            End If
            If (Notional.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Notional.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ContraCCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ContraCCY,String)
            End If
            If (ContraAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ContraAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PriceTreasury.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PriceTreasury.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (FwdPts.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(FwdPts.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (AllIn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(AllIn.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ComplexTradeID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(ComplexTradeID,String)
            End If
            If (CARStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(CARStatus,String)
            End If
            If (CARSubmitID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(CARSubmitID,String)
            End If
            If (CARTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(CARTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ExecutionWithinTheFirm Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ExecutionWithinTheFirm,String)
            End If
            If (ISIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(ISIN,String)
            End If
            If (CFICodeForTheInstrument Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(CFICodeForTheInstrument,String)
            End If
            If (WaiverIndicator Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(WaiverIndicator,String)
            End If
            If (MTFExecutionTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(MTFExecutionTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (LiqVenue Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(LiqVenue,String)
            End If
            If (Capacity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Capacity,String)
            End If
            If (NPFT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(NPFT,String)
            End If
            If (SEC_FIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(SEC_FIN,String)
            End If
            If (CustomerLEI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(CustomerLEI,String)
            End If
            If (AccountLEI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(AccountLEI,String)
            End If
            If (ProviderLEI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(ProviderLEI,String)
            End If
            If (DateTimeOfferToDeal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(DateTimeOfferToDeal.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TransmissionOfOrderIndicator Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(TransmissionOfOrderIndicator,String)
            End If
            If (LiquidityProvisionActivity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(LiquidityProvisionActivity,String)
            End If
            If (DateTimeOrderSubmission.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(DateTimeOrderSubmission.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (VenueTreasury Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(VenueTreasury,String)
            End If
            If (DateReceiptOrder.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(DateReceiptOrder.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (TRADE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(TRADE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (CUSTOMER_TRANSACTION_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(CUSTOMER_TRANSACTION_ID,String)
            End If
            If (ACTION_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(ACTION_TYPE,String)
            End If
            If (BUSINESS_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(BUSINESS_UNIT,String)
            End If
            If (USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(USER_ID,String)
            End If
            If (MIFIR_REPORTING Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(MIFIR_REPORTING,String)
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(COMMENT,String)
            End If
            If (TRADE_REPORT_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(TRADE_REPORT_ID,String)
            End If
            If (SOURCE_SYSTEM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(SOURCE_SYSTEM,String)
            End If
            If (RECORD_MODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(RECORD_MODE,String)
            End If
            If (USER_FIELD1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(USER_FIELD1,String)
            End If
            If (USER_FIELD2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(USER_FIELD2,String)
            End If
            If (USER_FIELD3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(USER_FIELD3,String)
            End If
            If (USER_FIELD4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(USER_FIELD4,String)
            End If
            If (USER_FIELD5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(USER_FIELD5,String)
            End If
            If (USER_FIELD6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(USER_FIELD6,String)
            End If
            If (USER_FIELD7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(USER_FIELD7,String)
            End If
            If (USER_FIELD8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(USER_FIELD8,String)
            End If
            If (USER_FIELD9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(USER_FIELD9,String)
            End If
            If (PARTIAL_ASSISTANCE_FLAG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(PARTIAL_ASSISTANCE_FLAG,String)
            End If
            If (PARTIAL_ASSISTANCE_SUBMITTER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(PARTIAL_ASSISTANCE_SUBMITTER_ID,String)
            End If
            If (PAIRING_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(PAIRING_ID,String)
            End If
            If (EXECUTING_ENTITY_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(EXECUTING_ENTITY_ID_TYPE,String)
            End If
            If (EXECUTING_ENTITY_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(EXECUTING_ENTITY_ID,String)
            End If
            If (MIFID_INVESTMENT_FIRM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(MIFID_INVESTMENT_FIRM,String)
            End If
            If (BRANCH_MEMBERSHIP_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(BRANCH_MEMBERSHIP_COUNTRY,String)
            End If
            If (BUYER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(BUYER_ID_TYPE,String)
            End If
            If (BUYER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(BUYER_ID,String)
            End If
            If (BUYER_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(BUYER_BRANCH_COUNTRY,String)
            End If
            If (BUYER_FIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(BUYER_FIRSTNAME,String)
            End If
            If (BUYER_SURNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(BUYER_SURNAME,String)
            End If
            If (BUYER_BIRTHDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(BUYER_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (BUYER_DECISION_MAKER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(BUYER_DECISION_MAKER_ID_TYPE,String)
            End If
            If (BUYER_DECISION_MAKER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(BUYER_DECISION_MAKER_ID,String)
            End If
            If (BUYER_DECISION_FIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(BUYER_DECISION_FIRSTNAME,String)
            End If
            If (BUYER_DECISION_SURNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(BUYER_DECISION_SURNAME,String)
            End If
            If (BUYER_DECISION_BIRTHDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(BUYER_DECISION_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (SELLER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(86).Value = CType(SELLER_ID_TYPE,String)
            End If
            If (SELLER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(87).Value = CType(SELLER_ID,String)
            End If
            If (SELLER_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(88).Value = CType(SELLER_BRANCH_COUNTRY,String)
            End If
            If (SELLER_FIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(89).Value = CType(SELLER_FIRSTNAME,String)
            End If
            If (SELLER_SURNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(90).Value = CType(SELLER_SURNAME,String)
            End If
            If (SELLER_BIRTHDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(91).Value = CType(SELLER_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (SELLER_DECISION_MAKER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(92).Value = CType(SELLER_DECISION_MAKER_ID_TYPE,String)
            End If
            If (SELLER_DECISION_MAKER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(93).Value = CType(SELLER_DECISION_MAKER_ID,String)
            End If
            If (SELLER_DECISION_FIRST_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(94).Value = CType(SELLER_DECISION_FIRST_NAME,String)
            End If
            If (SELLER_DECISION_SURNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(95).Value = CType(SELLER_DECISION_SURNAME,String)
            End If
            If (SELLER_DECISION_BIRTHDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(96).Value = CType(SELLER_DECISION_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (TRANSMISSION_IND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(97).Value = CType(TRANSMISSION_IND,String)
            End If
            If (TRANSMITTING_ENTITY_BUYER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(98).Value = CType(TRANSMITTING_ENTITY_BUYER_ID_TYPE,String)
            End If
            If (TRANSMITTING_ENTITY_BUYER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(99).Value = CType(TRANSMITTING_ENTITY_BUYER_ID,String)
            End If
            If (TRANSMITTING_ENTITY_SELLER_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(100).Value = CType(TRANSMITTING_ENTITY_SELLER_ID_TYPE,String)
            End If
            If (TRANSMITTING_ENTITY_SELLER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(101).Value = CType(TRANSMITTING_ENTITY_SELLER_ID,String)
            End If
            If (TRN_REF_NUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(102).Value = CType(TRN_REF_NUMBER,String)
            End If
            If (TRADING_VENUE_TRN_ID_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(103).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(103).Value = CType(TRADING_VENUE_TRN_ID_CODE,String)
            End If
            If (VENUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(104).Value = CType(VENUE,String)
            End If
            If (TRADE_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(105).Value = CType(TRADE_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (MIFIR_TRADING_CAPACITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(106).Value = CType(MIFIR_TRADING_CAPACITY,String)
            End If
            If (QUANTITY_NOTATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(107).Value = CType(QUANTITY_NOTATION,String)
            End If
            If (QUANTITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(108).Value = CType(QUANTITY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (QUANTITY_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(109).Value = CType(QUANTITY_CURRENCY,String)
            End If
            If (NOTIONAL_INCREASE_DECREASE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(110).Value = CType(NOTIONAL_INCREASE_DECREASE,String)
            End If
            If (PRICE_NOTATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(111).Value = CType(PRICE_NOTATION,String)
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(112).Value = CType(PRICE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (PRICE_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(113).Value = CType(PRICE_CURRENCY,String)
            End If
            If (NET_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(114).Value = CType(NET_AMOUNT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (UPFRONT_PAYMENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(115).Value = CType(UPFRONT_PAYMENT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (UPFRONT_PAYMENT_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(116).Value = CType(UPFRONT_PAYMENT_CURRENCY,String)
            End If
            If (COMPLEX_TRADE_COMPONENT_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(117).Value = CType(COMPLEX_TRADE_COMPONENT_ID,String)
            End If
            If (INSTRUMENT_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(118).Value = CType(INSTRUMENT_ID_TYPE,String)
            End If
            If (INSTRUMENT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(119).Value = CType(INSTRUMENT_NAME,String)
            End If
            If (INSTRUMENT_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(120).Value = CType(INSTRUMENT_ID,String)
            End If
            If (INSTRUMENT_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(121).Value = CType(INSTRUMENT_CLASS,String)
            End If
            If (NOTIONAL_CURRENCY_1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(122).Value = CType(NOTIONAL_CURRENCY_1,String)
            End If
            If (NOTIONAL_CURRENCY_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(123).Value = CType(NOTIONAL_CURRENCY_2,String)
            End If
            If (PRICE_MULTIPLIER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(124).Value = CType(PRICE_MULTIPLIER.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (UNDERLYING_INSTRUMENT_DIRECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(125).Value = CType(UNDERLYING_INSTRUMENT_DIRECTION,String)
            End If
            If (UNDERLYING_INSTRUMENT_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(126).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(126).Value = CType(UNDERLYING_INSTRUMENT_CODE,String)
            End If
            If (UNDERLYING_INDEX_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(127).Value = CType(UNDERLYING_INDEX_CODE,String)
            End If
            If (UNDERLYING_INDEX_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(128).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(128).Value = CType(UNDERLYING_INDEX_NAME,String)
            End If
            If (UNDERLYING_INDEX_TERM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(129).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(129).Value = CType(UNDERLYING_INDEX_TERM,String)
            End If
            If (UNDERLYING_INDEX_TERM_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(130).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(130).Value = CType(UNDERLYING_INDEX_TERM_UNIT,String)
            End If
            If (STRIKE_PRICE_NOTATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(131).Value = CType(STRIKE_PRICE_NOTATION,String)
            End If
            If (STRIKE_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(132).Value = CType(STRIKE_PRICE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (STRIKE_PRICE_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(133).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(133).Value = CType(STRIKE_PRICE_CURRENCY,String)
            End If
            If (OPTION_EXERCISE_STYLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(134).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(134).Value = CType(OPTION_EXERCISE_STYLE,String)
            End If
            If (MATURITY_DATE_INSTRUMENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(135).Value = CType(MATURITY_DATE_INSTRUMENT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (EXPIRY_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(136).Value = CType(EXPIRY_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (DELIVERY_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(137).Value = CType(DELIVERY_TYPE,String)
            End If
            If (INVESTMENT_DECISION_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(138).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(138).Value = CType(INVESTMENT_DECISION_ID_TYPE,String)
            End If
            If (INVESTMENT_DECISION_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(139).Value = CType(INVESTMENT_DECISION_ID,String)
            End If
            If (INVESTMENT_DECISION_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(140).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(140).Value = CType(INVESTMENT_DECISION_BRANCH_COUNTRY,String)
            End If
            If (EXECUTION_ID_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(141).Value = CType(EXECUTION_ID_TYPE,String)
            End If
            If (EXECUTION_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(142).Value = CType(EXECUTION_ID,String)
            End If
            If (SUPERVISING_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(143).Value = CType(SUPERVISING_BRANCH_COUNTRY,String)
            End If
            If (WAIVER_INDICATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(144).Value = CType(WAIVER_INDICATOR,String)
            End If
            If (SHORT_SELLING_INDICATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(145).Value = CType(SHORT_SELLING_INDICATOR,String)
            End If
            If (COMMODITY_DERIVATIVE_INDICATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(146).Value = CType(COMMODITY_DERIVATIVE_INDICATOR,String)
            End If
            If (SFTR_INDICATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(147).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(147).Value = CType(SFTR_INDICATOR,String)
            End If
            If (DIRECTED_ORDER_FLAG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(148).Value = CType(DIRECTED_ORDER_FLAG,String)
            End If
            If (ORDER_GROUP_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(149).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(149).Value = CType(ORDER_GROUP_ID,String)
            End If
            If (TOAX_FLAG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(150).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(150).Value = CType(TOAX_FLAG,String)
            End If
            If (LIQP_FLAG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(151).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(151).Value = CType(LIQP_FLAG,String)
            End If
            If (ORDER_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(152).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(152).Value = CType(ORDER_TYPE,String)
            End If
            If (CLIENT_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(153).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(153).Value = CType(CLIENT_TYPE,String)
            End If
            If (OTC_POST_TRADE_INDICATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(154).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(154).Value = CType(OTC_POST_TRADE_INDICATOR,String)
            End If
            If (OPTION_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(155).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(155).Value = CType(OPTION_TYPE,String)
            End If
            If (UNDERLYING_INDEX_DIRECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(156).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(156).Value = CType(UNDERLYING_INDEX_DIRECTION,String)
            End If
            If (OrderType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(157).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(157).Value = CType(OrderType,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(158).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(158).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(159).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(159).Value = CType(ClientName,String)
            End If
            If (CountryOfResidence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(160).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(160).Value = CType(CountryOfResidence,String)
            End If
            If (Buyer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(161).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(161).Value = CType(Buyer,String)
            End If
            If (Seller Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(162).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(162).Value = CType(Seller,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ReportStatus As String,  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal FixingDate As Global.System.Nullable(Of Date),  _
                    ByVal ClientOrderID As String,  _
                    ByVal FxAllID As String,  _
                    ByVal TradingVenueTransactionIdentificationCode As String,  _
                    ByVal CustomerUSI As String,  _
                    ByVal ProviderUSI As String,  _
                    ByVal Product As String,  _
                    ByVal Status As String,  _
                    ByVal FixingTime As Global.System.Nullable(Of Date),  _
                    ByVal FixingSeries As String,  _
                    ByVal CustBS As String,  _
                    ByVal CustTradeSide As String,  _
                    ByVal CustomerName As String,  _
                    ByVal CustTrader As String,  _
                    ByVal Account As String,  _
                    ByVal AccountLongName As String,  _
                    ByVal CCYPair As String,  _
                    ByVal NotionalCCY As String,  _
                    ByVal Notional As Global.System.Nullable(Of Double),  _
                    ByVal ContraCCY As String,  _
                    ByVal ContraAmount As Global.System.Nullable(Of Double),  _
                    ByVal PriceTreasury As Global.System.Nullable(Of Double),  _
                    ByVal FwdPts As Global.System.Nullable(Of Double),  _
                    ByVal AllIn As Global.System.Nullable(Of Double),  _
                    ByVal ComplexTradeID As String,  _
                    ByVal CARStatus As String,  _
                    ByVal CARSubmitID As String,  _
                    ByVal CARTime As Global.System.Nullable(Of Date),  _
                    ByVal ExecutionWithinTheFirm As String,  _
                    ByVal ISIN As String,  _
                    ByVal CFICodeForTheInstrument As String,  _
                    ByVal WaiverIndicator As String,  _
                    ByVal MTFExecutionTime As Global.System.Nullable(Of Date),  _
                    ByVal LiqVenue As String,  _
                    ByVal Capacity As String,  _
                    ByVal NPFT As String,  _
                    ByVal SEC_FIN As String,  _
                    ByVal CustomerLEI As String,  _
                    ByVal AccountLEI As String,  _
                    ByVal ProviderLEI As String,  _
                    ByVal DateTimeOfferToDeal As Global.System.Nullable(Of Date),  _
                    ByVal TransmissionOfOrderIndicator As String,  _
                    ByVal LiquidityProvisionActivity As String,  _
                    ByVal DateTimeOrderSubmission As Global.System.Nullable(Of Date),  _
                    ByVal VenueTreasury As String,  _
                    ByVal DateReceiptOrder As Global.System.Nullable(Of Date),  _
                    ByVal TRADE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal CUSTOMER_TRANSACTION_ID As String,  _
                    ByVal ACTION_TYPE As String,  _
                    ByVal BUSINESS_UNIT As String,  _
                    ByVal USER_ID As String,  _
                    ByVal MIFIR_REPORTING As String,  _
                    ByVal COMMENT As String,  _
                    ByVal TRADE_REPORT_ID As String,  _
                    ByVal SOURCE_SYSTEM As String,  _
                    ByVal RECORD_MODE As String,  _
                    ByVal USER_FIELD1 As String,  _
                    ByVal USER_FIELD2 As String,  _
                    ByVal USER_FIELD3 As String,  _
                    ByVal USER_FIELD4 As String,  _
                    ByVal USER_FIELD5 As String,  _
                    ByVal USER_FIELD6 As String,  _
                    ByVal USER_FIELD7 As String,  _
                    ByVal USER_FIELD8 As String,  _
                    ByVal USER_FIELD9 As String,  _
                    ByVal PARTIAL_ASSISTANCE_FLAG As String,  _
                    ByVal PARTIAL_ASSISTANCE_SUBMITTER_ID As String,  _
                    ByVal PAIRING_ID As String,  _
                    ByVal EXECUTING_ENTITY_ID_TYPE As String,  _
                    ByVal EXECUTING_ENTITY_ID As String,  _
                    ByVal MIFID_INVESTMENT_FIRM As String,  _
                    ByVal BRANCH_MEMBERSHIP_COUNTRY As String,  _
                    ByVal BUYER_ID_TYPE As String,  _
                    ByVal BUYER_ID As String,  _
                    ByVal BUYER_BRANCH_COUNTRY As String,  _
                    ByVal BUYER_FIRSTNAME As String,  _
                    ByVal BUYER_SURNAME As String,  _
                    ByVal BUYER_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal BUYER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal BUYER_DECISION_MAKER_ID As String,  _
                    ByVal BUYER_DECISION_FIRSTNAME As String,  _
                    ByVal BUYER_DECISION_SURNAME As String,  _
                    ByVal BUYER_DECISION_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal SELLER_ID_TYPE As String,  _
                    ByVal SELLER_ID As String,  _
                    ByVal SELLER_BRANCH_COUNTRY As String,  _
                    ByVal SELLER_FIRSTNAME As String,  _
                    ByVal SELLER_SURNAME As String,  _
                    ByVal SELLER_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal SELLER_DECISION_MAKER_ID_TYPE As String,  _
                    ByVal SELLER_DECISION_MAKER_ID As String,  _
                    ByVal SELLER_DECISION_FIRST_NAME As String,  _
                    ByVal SELLER_DECISION_SURNAME As String,  _
                    ByVal SELLER_DECISION_BIRTHDATE As Global.System.Nullable(Of Date),  _
                    ByVal TRANSMISSION_IND As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_BUYER_ID As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID_TYPE As String,  _
                    ByVal TRANSMITTING_ENTITY_SELLER_ID As String,  _
                    ByVal TRN_REF_NUMBER As String,  _
                    ByVal TRADING_VENUE_TRN_ID_CODE As String,  _
                    ByVal VENUE As String,  _
                    ByVal TRADE_TIME As Global.System.Nullable(Of Date),  _
                    ByVal MIFIR_TRADING_CAPACITY As String,  _
                    ByVal QUANTITY_NOTATION As String,  _
                    ByVal QUANTITY As Global.System.Nullable(Of Double),  _
                    ByVal QUANTITY_CURRENCY As String,  _
                    ByVal NOTIONAL_INCREASE_DECREASE As String,  _
                    ByVal PRICE_NOTATION As String,  _
                    ByVal PRICE As Global.System.Nullable(Of Double),  _
                    ByVal PRICE_CURRENCY As String,  _
                    ByVal NET_AMOUNT As Global.System.Nullable(Of Double),  _
                    ByVal UPFRONT_PAYMENT As Global.System.Nullable(Of Double),  _
                    ByVal UPFRONT_PAYMENT_CURRENCY As String,  _
                    ByVal COMPLEX_TRADE_COMPONENT_ID As String,  _
                    ByVal INSTRUMENT_ID_TYPE As String,  _
                    ByVal INSTRUMENT_NAME As String,  _
                    ByVal INSTRUMENT_ID As String,  _
                    ByVal INSTRUMENT_CLASS As String,  _
                    ByVal NOTIONAL_CURRENCY_1 As String,  _
                    ByVal NOTIONAL_CURRENCY_2 As String,  _
                    ByVal PRICE_MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal UNDERLYING_INSTRUMENT_DIRECTION As String,  _
                    ByVal UNDERLYING_INSTRUMENT_CODE As String,  _
                    ByVal UNDERLYING_INDEX_CODE As String,  _
                    ByVal UNDERLYING_INDEX_NAME As String,  _
                    ByVal UNDERLYING_INDEX_TERM As String,  _
                    ByVal UNDERLYING_INDEX_TERM_UNIT As String,  _
                    ByVal STRIKE_PRICE_NOTATION As String,  _
                    ByVal STRIKE_PRICE As Global.System.Nullable(Of Double),  _
                    ByVal STRIKE_PRICE_CURRENCY As String,  _
                    ByVal OPTION_EXERCISE_STYLE As String,  _
                    ByVal MATURITY_DATE_INSTRUMENT As Global.System.Nullable(Of Date),  _
                    ByVal EXPIRY_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DELIVERY_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID_TYPE As String,  _
                    ByVal INVESTMENT_DECISION_ID As String,  _
                    ByVal INVESTMENT_DECISION_BRANCH_COUNTRY As String,  _
                    ByVal EXECUTION_ID_TYPE As String,  _
                    ByVal EXECUTION_ID As String,  _
                    ByVal SUPERVISING_BRANCH_COUNTRY As String,  _
                    ByVal WAIVER_INDICATOR As String,  _
                    ByVal SHORT_SELLING_INDICATOR As String,  _
                    ByVal COMMODITY_DERIVATIVE_INDICATOR As String,  _
                    ByVal SFTR_INDICATOR As String,  _
                    ByVal DIRECTED_ORDER_FLAG As String,  _
                    ByVal ORDER_GROUP_ID As String,  _
                    ByVal TOAX_FLAG As String,  _
                    ByVal LIQP_FLAG As String,  _
                    ByVal ORDER_TYPE As String,  _
                    ByVal CLIENT_TYPE As String,  _
                    ByVal OTC_POST_TRADE_INDICATOR As String,  _
                    ByVal OPTION_TYPE As String,  _
                    ByVal UNDERLYING_INDEX_DIRECTION As String,  _
                    ByVal OrderType As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal CountryOfResidence As String,  _
                    ByVal Buyer As String,  _
                    ByVal Seller As String,  _
                    ByVal Original_ID As Integer) As Integer
            If (ReportStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ReportStatus,String)
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FixingDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FixingDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ClientOrderID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ClientOrderID,String)
            End If
            If (FxAllID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FxAllID,String)
            End If
            If (TradingVenueTransactionIdentificationCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TradingVenueTransactionIdentificationCode,String)
            End If
            If (CustomerUSI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CustomerUSI,String)
            End If
            If (ProviderUSI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ProviderUSI,String)
            End If
            If (Product Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Product,String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Status,String)
            End If
            If (FixingTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FixingTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FixingSeries Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(FixingSeries,String)
            End If
            If (CustBS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CustBS,String)
            End If
            If (CustTradeSide Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CustTradeSide,String)
            End If
            If (CustomerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CustomerName,String)
            End If
            If (CustTrader Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CustTrader,String)
            End If
            If (Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Account,String)
            End If
            If (AccountLongName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AccountLongName,String)
            End If
            If (CCYPair Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CCYPair,String)
            End If
            If (NotionalCCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(NotionalCCY,String)
            End If
            If (Notional.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Notional.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ContraCCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(ContraCCY,String)
            End If
            If (ContraAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ContraAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PriceTreasury.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(PriceTreasury.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (FwdPts.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(FwdPts.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (AllIn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(AllIn.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ComplexTradeID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(ComplexTradeID,String)
            End If
            If (CARStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(CARStatus,String)
            End If
            If (CARSubmitID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(CARSubmitID,String)
            End If
            If (CARTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(CARTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ExecutionWithinTheFirm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ExecutionWithinTheFirm,String)
            End If
            If (ISIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(ISIN,String)
            End If
            If (CFICodeForTheInstrument Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(CFICodeForTheInstrument,String)
            End If
            If (WaiverIndicator Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(WaiverIndicator,String)
            End If
            If (MTFExecutionTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(MTFExecutionTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (LiqVenue Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(LiqVenue,String)
            End If
            If (Capacity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Capacity,String)
            End If
            If (NPFT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NPFT,String)
            End If
            If (SEC_FIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(SEC_FIN,String)
            End If
            If (CustomerLEI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(CustomerLEI,String)
            End If
            If (AccountLEI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(AccountLEI,String)
            End If
            If (ProviderLEI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(ProviderLEI,String)
            End If
            If (DateTimeOfferToDeal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(DateTimeOfferToDeal.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TransmissionOfOrderIndicator Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(TransmissionOfOrderIndicator,String)
            End If
            If (LiquidityProvisionActivity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(LiquidityProvisionActivity,String)
            End If
            If (DateTimeOrderSubmission.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(DateTimeOrderSubmission.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (VenueTreasury Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(VenueTreasury,String)
            End If
            If (DateReceiptOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(DateReceiptOrder.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (TRADE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(TRADE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (CUSTOMER_TRANSACTION_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(CUSTOMER_TRANSACTION_ID,String)
            End If
            If (ACTION_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(ACTION_TYPE,String)
            End If
            If (BUSINESS_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(BUSINESS_UNIT,String)
            End If
            If (USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(USER_ID,String)
            End If
            If (MIFIR_REPORTING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(MIFIR_REPORTING,String)
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(COMMENT,String)
            End If
            If (TRADE_REPORT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(TRADE_REPORT_ID,String)
            End If
            If (SOURCE_SYSTEM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(SOURCE_SYSTEM,String)
            End If
            If (RECORD_MODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(RECORD_MODE,String)
            End If
            If (USER_FIELD1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(USER_FIELD1,String)
            End If
            If (USER_FIELD2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(USER_FIELD2,String)
            End If
            If (USER_FIELD3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(USER_FIELD3,String)
            End If
            If (USER_FIELD4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(USER_FIELD4,String)
            End If
            If (USER_FIELD5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(USER_FIELD5,String)
            End If
            If (USER_FIELD6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(USER_FIELD6,String)
            End If
            If (USER_FIELD7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(USER_FIELD7,String)
            End If
            If (USER_FIELD8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(USER_FIELD8,String)
            End If
            If (USER_FIELD9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(USER_FIELD9,String)
            End If
            If (PARTIAL_ASSISTANCE_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(PARTIAL_ASSISTANCE_FLAG,String)
            End If
            If (PARTIAL_ASSISTANCE_SUBMITTER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(PARTIAL_ASSISTANCE_SUBMITTER_ID,String)
            End If
            If (PAIRING_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(PAIRING_ID,String)
            End If
            If (EXECUTING_ENTITY_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(EXECUTING_ENTITY_ID_TYPE,String)
            End If
            If (EXECUTING_ENTITY_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(EXECUTING_ENTITY_ID,String)
            End If
            If (MIFID_INVESTMENT_FIRM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(MIFID_INVESTMENT_FIRM,String)
            End If
            If (BRANCH_MEMBERSHIP_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(BRANCH_MEMBERSHIP_COUNTRY,String)
            End If
            If (BUYER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(BUYER_ID_TYPE,String)
            End If
            If (BUYER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(BUYER_ID,String)
            End If
            If (BUYER_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(BUYER_BRANCH_COUNTRY,String)
            End If
            If (BUYER_FIRSTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(BUYER_FIRSTNAME,String)
            End If
            If (BUYER_SURNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(BUYER_SURNAME,String)
            End If
            If (BUYER_BIRTHDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(BUYER_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (BUYER_DECISION_MAKER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(BUYER_DECISION_MAKER_ID_TYPE,String)
            End If
            If (BUYER_DECISION_MAKER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(BUYER_DECISION_MAKER_ID,String)
            End If
            If (BUYER_DECISION_FIRSTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(BUYER_DECISION_FIRSTNAME,String)
            End If
            If (BUYER_DECISION_SURNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(BUYER_DECISION_SURNAME,String)
            End If
            If (BUYER_DECISION_BIRTHDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(BUYER_DECISION_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (SELLER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(SELLER_ID_TYPE,String)
            End If
            If (SELLER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(SELLER_ID,String)
            End If
            If (SELLER_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(SELLER_BRANCH_COUNTRY,String)
            End If
            If (SELLER_FIRSTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(SELLER_FIRSTNAME,String)
            End If
            If (SELLER_SURNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(SELLER_SURNAME,String)
            End If
            If (SELLER_BIRTHDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(SELLER_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (SELLER_DECISION_MAKER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(SELLER_DECISION_MAKER_ID_TYPE,String)
            End If
            If (SELLER_DECISION_MAKER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(SELLER_DECISION_MAKER_ID,String)
            End If
            If (SELLER_DECISION_FIRST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(SELLER_DECISION_FIRST_NAME,String)
            End If
            If (SELLER_DECISION_SURNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(SELLER_DECISION_SURNAME,String)
            End If
            If (SELLER_DECISION_BIRTHDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(SELLER_DECISION_BIRTHDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (TRANSMISSION_IND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(TRANSMISSION_IND,String)
            End If
            If (TRANSMITTING_ENTITY_BUYER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(TRANSMITTING_ENTITY_BUYER_ID_TYPE,String)
            End If
            If (TRANSMITTING_ENTITY_BUYER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(TRANSMITTING_ENTITY_BUYER_ID,String)
            End If
            If (TRANSMITTING_ENTITY_SELLER_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(TRANSMITTING_ENTITY_SELLER_ID_TYPE,String)
            End If
            If (TRANSMITTING_ENTITY_SELLER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(TRANSMITTING_ENTITY_SELLER_ID,String)
            End If
            If (TRN_REF_NUMBER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(TRN_REF_NUMBER,String)
            End If
            If (TRADING_VENUE_TRN_ID_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(TRADING_VENUE_TRN_ID_CODE,String)
            End If
            If (VENUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(VENUE,String)
            End If
            If (TRADE_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(TRADE_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (MIFIR_TRADING_CAPACITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(MIFIR_TRADING_CAPACITY,String)
            End If
            If (QUANTITY_NOTATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(QUANTITY_NOTATION,String)
            End If
            If (QUANTITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(QUANTITY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (QUANTITY_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(QUANTITY_CURRENCY,String)
            End If
            If (NOTIONAL_INCREASE_DECREASE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(NOTIONAL_INCREASE_DECREASE,String)
            End If
            If (PRICE_NOTATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(PRICE_NOTATION,String)
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(PRICE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (PRICE_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(PRICE_CURRENCY,String)
            End If
            If (NET_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(NET_AMOUNT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (UPFRONT_PAYMENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(UPFRONT_PAYMENT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (UPFRONT_PAYMENT_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(UPFRONT_PAYMENT_CURRENCY,String)
            End If
            If (COMPLEX_TRADE_COMPONENT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(COMPLEX_TRADE_COMPONENT_ID,String)
            End If
            If (INSTRUMENT_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(INSTRUMENT_ID_TYPE,String)
            End If
            If (INSTRUMENT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(INSTRUMENT_NAME,String)
            End If
            If (INSTRUMENT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(INSTRUMENT_ID,String)
            End If
            If (INSTRUMENT_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(INSTRUMENT_CLASS,String)
            End If
            If (NOTIONAL_CURRENCY_1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(NOTIONAL_CURRENCY_1,String)
            End If
            If (NOTIONAL_CURRENCY_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(NOTIONAL_CURRENCY_2,String)
            End If
            If (PRICE_MULTIPLIER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(PRICE_MULTIPLIER.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (UNDERLYING_INSTRUMENT_DIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(UNDERLYING_INSTRUMENT_DIRECTION,String)
            End If
            If (UNDERLYING_INSTRUMENT_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(UNDERLYING_INSTRUMENT_CODE,String)
            End If
            If (UNDERLYING_INDEX_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(UNDERLYING_INDEX_CODE,String)
            End If
            If (UNDERLYING_INDEX_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(UNDERLYING_INDEX_NAME,String)
            End If
            If (UNDERLYING_INDEX_TERM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(UNDERLYING_INDEX_TERM,String)
            End If
            If (UNDERLYING_INDEX_TERM_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(UNDERLYING_INDEX_TERM_UNIT,String)
            End If
            If (STRIKE_PRICE_NOTATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(STRIKE_PRICE_NOTATION,String)
            End If
            If (STRIKE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(STRIKE_PRICE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (STRIKE_PRICE_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(STRIKE_PRICE_CURRENCY,String)
            End If
            If (OPTION_EXERCISE_STYLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(OPTION_EXERCISE_STYLE,String)
            End If
            If (MATURITY_DATE_INSTRUMENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(MATURITY_DATE_INSTRUMENT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (EXPIRY_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(EXPIRY_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (DELIVERY_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(DELIVERY_TYPE,String)
            End If
            If (INVESTMENT_DECISION_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(INVESTMENT_DECISION_ID_TYPE,String)
            End If
            If (INVESTMENT_DECISION_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(INVESTMENT_DECISION_ID,String)
            End If
            If (INVESTMENT_DECISION_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(INVESTMENT_DECISION_BRANCH_COUNTRY,String)
            End If
            If (EXECUTION_ID_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(EXECUTION_ID_TYPE,String)
            End If
            If (EXECUTION_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(EXECUTION_ID,String)
            End If
            If (SUPERVISING_BRANCH_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(SUPERVISING_BRANCH_COUNTRY,String)
            End If
            If (WAIVER_INDICATOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(WAIVER_INDICATOR,String)
            End If
            If (SHORT_SELLING_INDICATOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(SHORT_SELLING_INDICATOR,String)
            End If
            If (COMMODITY_DERIVATIVE_INDICATOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(COMMODITY_DERIVATIVE_INDICATOR,String)
            End If
            If (SFTR_INDICATOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(SFTR_INDICATOR,String)
            End If
            If (DIRECTED_ORDER_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(DIRECTED_ORDER_FLAG,String)
            End If
            If (ORDER_GROUP_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(ORDER_GROUP_ID,String)
            End If
            If (TOAX_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(TOAX_FLAG,String)
            End If
            If (LIQP_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(LIQP_FLAG,String)
            End If
            If (ORDER_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(152).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(ORDER_TYPE,String)
            End If
            If (CLIENT_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(153).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(CLIENT_TYPE,String)
            End If
            If (OTC_POST_TRADE_INDICATOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(OTC_POST_TRADE_INDICATOR,String)
            End If
            If (OPTION_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(OPTION_TYPE,String)
            End If
            If (UNDERLYING_INDEX_DIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(UNDERLYING_INDEX_DIRECTION,String)
            End If
            If (OrderType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(OrderType,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(ClientName,String)
            End If
            If (CountryOfResidence Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(CountryOfResidence,String)
            End If
            If (Buyer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Buyer,String)
            End If
            If (Seller Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(Seller,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aWVz10POSTENTableAdapter As AWVz10POSTENTableAdapter
        
        Private _aWVz14TableAdapter As AWVz14TableAdapter
        
        Private _aWVz1415RelevantDataTableAdapter As AWVz1415RelevantDataTableAdapter
        
        Private _aWVz14z15TableAdapter As AWVz14z15TableAdapter
        
        Private _aWVz15TableAdapter As AWVz15TableAdapter
        
        Private _aWVz4DIKAPPOSTENTableAdapter As AWVz4DIKAPPOSTENTableAdapter
        
        Private _aWVz4DIRINVPOSTENTableAdapter As AWVz4DIRINVPOSTENTableAdapter
        
        Private _aWVz4TRANSITPOSTENTableAdapter As AWVz4TRANSITPOSTENTableAdapter
        
        Private _bANKTableAdapter As BANKTableAdapter
        
        Private _cOUNTRIESTableAdapter As COUNTRIESTableAdapter
        
        Private _zINSERTRAG_KUNDEN_DETAILSTableAdapter As ZINSERTRAG_KUNDEN_DETAILSTableAdapter
        
        Private _zINSERTRAG_KUNDEN_JAHRTableAdapter As ZINSERTRAG_KUNDEN_JAHRTableAdapter
        
        Private _zINSERTRAG_KUNDEN_MONATTableAdapter As ZINSERTRAG_KUNDEN_MONATTableAdapter
        
        Private _eMPLOYES_YEAR_AVERAGETableAdapter As EMPLOYES_YEAR_AVERAGETableAdapter
        
        Private _zVSTA_FormsTill2013TableAdapter As ZVSTA_FormsTill2013TableAdapter
        
        Private _zVSTA_ProdTill2013TableAdapter As ZVSTA_ProdTill2013TableAdapter
        
        Private _zVSTATill2013TableAdapter As ZVSTATill2013TableAdapter
        
        Private _zVSTAT_Parameters_from2014TableAdapter As ZVSTAT_Parameters_from2014TableAdapter
        
        Private _zVSTAT_Details_from2014TableAdapter As ZVSTAT_Details_from2014TableAdapter
        
        Private _zVSTAT_MeldeJahr_from2014TableAdapter As ZVSTAT_MeldeJahr_from2014TableAdapter
        
        Private _zVSTAT_Meldepositionen_from2014TableAdapter As ZVSTAT_Meldepositionen_from2014TableAdapter
        
        Private _zVSTAT_Meldeschemas_from2014TableAdapter As ZVSTAT_Meldeschemas_from2014TableAdapter
        
        Private _aWVz11POSTENTableAdapter As AWVz11POSTENTableAdapter
        
        Private _mIFIRTableAdapter As MIFIRTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz10POSTENTableAdapter() As AWVz10POSTENTableAdapter
            Get
                Return Me._aWVz10POSTENTableAdapter
            End Get
            Set
                Me._aWVz10POSTENTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz14TableAdapter() As AWVz14TableAdapter
            Get
                Return Me._aWVz14TableAdapter
            End Get
            Set
                Me._aWVz14TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz1415RelevantDataTableAdapter() As AWVz1415RelevantDataTableAdapter
            Get
                Return Me._aWVz1415RelevantDataTableAdapter
            End Get
            Set
                Me._aWVz1415RelevantDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz14z15TableAdapter() As AWVz14z15TableAdapter
            Get
                Return Me._aWVz14z15TableAdapter
            End Get
            Set
                Me._aWVz14z15TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz15TableAdapter() As AWVz15TableAdapter
            Get
                Return Me._aWVz15TableAdapter
            End Get
            Set
                Me._aWVz15TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz4DIKAPPOSTENTableAdapter() As AWVz4DIKAPPOSTENTableAdapter
            Get
                Return Me._aWVz4DIKAPPOSTENTableAdapter
            End Get
            Set
                Me._aWVz4DIKAPPOSTENTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz4DIRINVPOSTENTableAdapter() As AWVz4DIRINVPOSTENTableAdapter
            Get
                Return Me._aWVz4DIRINVPOSTENTableAdapter
            End Get
            Set
                Me._aWVz4DIRINVPOSTENTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz4TRANSITPOSTENTableAdapter() As AWVz4TRANSITPOSTENTableAdapter
            Get
                Return Me._aWVz4TRANSITPOSTENTableAdapter
            End Get
            Set
                Me._aWVz4TRANSITPOSTENTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BANKTableAdapter() As BANKTableAdapter
            Get
                Return Me._bANKTableAdapter
            End Get
            Set
                Me._bANKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property COUNTRIESTableAdapter() As COUNTRIESTableAdapter
            Get
                Return Me._cOUNTRIESTableAdapter
            End Get
            Set
                Me._cOUNTRIESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZINSERTRAG_KUNDEN_DETAILSTableAdapter() As ZINSERTRAG_KUNDEN_DETAILSTableAdapter
            Get
                Return Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter
            End Get
            Set
                Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZINSERTRAG_KUNDEN_JAHRTableAdapter() As ZINSERTRAG_KUNDEN_JAHRTableAdapter
            Get
                Return Me._zINSERTRAG_KUNDEN_JAHRTableAdapter
            End Get
            Set
                Me._zINSERTRAG_KUNDEN_JAHRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZINSERTRAG_KUNDEN_MONATTableAdapter() As ZINSERTRAG_KUNDEN_MONATTableAdapter
            Get
                Return Me._zINSERTRAG_KUNDEN_MONATTableAdapter
            End Get
            Set
                Me._zINSERTRAG_KUNDEN_MONATTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EMPLOYES_YEAR_AVERAGETableAdapter() As EMPLOYES_YEAR_AVERAGETableAdapter
            Get
                Return Me._eMPLOYES_YEAR_AVERAGETableAdapter
            End Get
            Set
                Me._eMPLOYES_YEAR_AVERAGETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTA_FormsTill2013TableAdapter() As ZVSTA_FormsTill2013TableAdapter
            Get
                Return Me._zVSTA_FormsTill2013TableAdapter
            End Get
            Set
                Me._zVSTA_FormsTill2013TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTA_ProdTill2013TableAdapter() As ZVSTA_ProdTill2013TableAdapter
            Get
                Return Me._zVSTA_ProdTill2013TableAdapter
            End Get
            Set
                Me._zVSTA_ProdTill2013TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTATill2013TableAdapter() As ZVSTATill2013TableAdapter
            Get
                Return Me._zVSTATill2013TableAdapter
            End Get
            Set
                Me._zVSTATill2013TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTAT_Parameters_from2014TableAdapter() As ZVSTAT_Parameters_from2014TableAdapter
            Get
                Return Me._zVSTAT_Parameters_from2014TableAdapter
            End Get
            Set
                Me._zVSTAT_Parameters_from2014TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTAT_Details_from2014TableAdapter() As ZVSTAT_Details_from2014TableAdapter
            Get
                Return Me._zVSTAT_Details_from2014TableAdapter
            End Get
            Set
                Me._zVSTAT_Details_from2014TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTAT_MeldeJahr_from2014TableAdapter() As ZVSTAT_MeldeJahr_from2014TableAdapter
            Get
                Return Me._zVSTAT_MeldeJahr_from2014TableAdapter
            End Get
            Set
                Me._zVSTAT_MeldeJahr_from2014TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTAT_Meldepositionen_from2014TableAdapter() As ZVSTAT_Meldepositionen_from2014TableAdapter
            Get
                Return Me._zVSTAT_Meldepositionen_from2014TableAdapter
            End Get
            Set
                Me._zVSTAT_Meldepositionen_from2014TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZVSTAT_Meldeschemas_from2014TableAdapter() As ZVSTAT_Meldeschemas_from2014TableAdapter
            Get
                Return Me._zVSTAT_Meldeschemas_from2014TableAdapter
            End Get
            Set
                Me._zVSTAT_Meldeschemas_from2014TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AWVz11POSTENTableAdapter() As AWVz11POSTENTableAdapter
            Get
                Return Me._aWVz11POSTENTableAdapter
            End Get
            Set
                Me._aWVz11POSTENTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MIFIRTableAdapter() As MIFIRTableAdapter
            Get
                Return Me._mIFIRTableAdapter
            End Get
            Set
                Me._mIFIRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aWVz10POSTENTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz10POSTENTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz10POSTENTableAdapter.Connection
                End If
                If ((Not (Me._aWVz14TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz14TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz14TableAdapter.Connection
                End If
                If ((Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz1415RelevantDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz1415RelevantDataTableAdapter.Connection
                End If
                If ((Not (Me._aWVz14z15TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz14z15TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz14z15TableAdapter.Connection
                End If
                If ((Not (Me._aWVz15TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz15TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz15TableAdapter.Connection
                End If
                If ((Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz4DIKAPPOSTENTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz4DIKAPPOSTENTableAdapter.Connection
                End If
                If ((Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz4DIRINVPOSTENTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz4DIRINVPOSTENTableAdapter.Connection
                End If
                If ((Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz4TRANSITPOSTENTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz4TRANSITPOSTENTableAdapter.Connection
                End If
                If ((Not (Me._bANKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bANKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bANKTableAdapter.Connection
                End If
                If ((Not (Me._cOUNTRIESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cOUNTRIESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cOUNTRIESTableAdapter.Connection
                End If
                If ((Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection
                End If
                If ((Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection
                End If
                If ((Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection
                End If
                If ((Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection) Is Nothing)) Then
                    Return Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection
                End If
                If ((Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTA_FormsTill2013TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTA_FormsTill2013TableAdapter.Connection
                End If
                If ((Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTA_ProdTill2013TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTA_ProdTill2013TableAdapter.Connection
                End If
                If ((Not (Me._zVSTATill2013TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTATill2013TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTATill2013TableAdapter.Connection
                End If
                If ((Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTAT_Parameters_from2014TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTAT_Parameters_from2014TableAdapter.Connection
                End If
                If ((Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTAT_Details_from2014TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTAT_Details_from2014TableAdapter.Connection
                End If
                If ((Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection
                End If
                If ((Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection
                End If
                If ((Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection) Is Nothing)) Then
                    Return Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection
                End If
                If ((Not (Me._aWVz11POSTENTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aWVz11POSTENTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aWVz11POSTENTableAdapter.Connection
                End If
                If ((Not (Me._mIFIRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mIFIRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mIFIRTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._bANKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As MeldewesenDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_MeldeJahr_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTAT_MeldeJahr_from2014TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_JAHR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldeschemas_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldeschemas_from2014TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTATill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTATill2013TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldepositionen_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldepositionen_from2014TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz14z15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz14z15TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_FormsTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTA_FormsTill2013TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_MONAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Details_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTAT_Details_from2014TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Parameters_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTAT_Parameters_from2014TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_ProdTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zVSTA_ProdTill2013TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EMPLOYES_YEAR_AVERAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eMPLOYES_YEAR_AVERAGETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz10POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz10POSTENTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.COUNTRIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cOUNTRIESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bANKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BANK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bANKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz4TRANSITPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz4TRANSITPOSTENTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIRINVPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz4DIRINVPOSTENTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIKAPPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz4DIKAPPOSTENTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz15TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz1415RelevantData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz1415RelevantDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz14.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz14TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AWVz11POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aWVz11POSTENTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MIFIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mIFIRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As MeldewesenDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_MeldeJahr_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTAT_MeldeJahr_from2014TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_JAHR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldeschemas_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldeschemas_from2014TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTATill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTATill2013TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldepositionen_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldepositionen_from2014TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz14z15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz14z15TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_FormsTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTA_FormsTill2013TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_MONAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Details_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTAT_Details_from2014TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Parameters_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTAT_Parameters_from2014TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_ProdTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zVSTA_ProdTill2013TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EMPLOYES_YEAR_AVERAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eMPLOYES_YEAR_AVERAGETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz10POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz10POSTENTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.COUNTRIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cOUNTRIESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bANKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BANK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bANKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz4TRANSITPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz4TRANSITPOSTENTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIRINVPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz4DIRINVPOSTENTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIKAPPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz4DIKAPPOSTENTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz15TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz1415RelevantData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz1415RelevantDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz14.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz14TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AWVz11POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aWVz11POSTENTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MIFIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mIFIRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As MeldewesenDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MIFIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mIFIRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz11POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz11POSTENTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz14.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz14TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz1415RelevantData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz1415RelevantDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz15TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIKAPPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz4DIKAPPOSTENTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz4DIRINVPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz4DIRINVPOSTENTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz4TRANSITPOSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz4TRANSITPOSTENTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bANKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BANK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bANKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.COUNTRIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cOUNTRIESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz10POSTEN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz10POSTENTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EMPLOYES_YEAR_AVERAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eMPLOYES_YEAR_AVERAGETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_ProdTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTA_ProdTill2013TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Parameters_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTAT_Parameters_from2014TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Details_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTAT_Details_from2014TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_MONAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTA_FormsTill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTA_FormsTill2013TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AWVz14z15.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aWVz14z15TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldepositionen_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldepositionen_from2014TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTATill2013.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTATill2013TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_Meldeschemas_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTAT_Meldeschemas_from2014TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZINSERTRAG_KUNDEN_JAHR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZVSTAT_MeldeJahr_from2014.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zVSTAT_MeldeJahr_from2014TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As MeldewesenDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aWVz10POSTENTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz10POSTENTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz14TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz14TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz1415RelevantDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz14z15TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz14z15TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz15TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz15TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz4DIKAPPOSTENTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz4DIRINVPOSTENTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz4TRANSITPOSTENTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._bANKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bANKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cOUNTRIESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cOUNTRIESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTA_FormsTill2013TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTA_ProdTill2013TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTATill2013TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTATill2013TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTAT_Parameters_from2014TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTAT_Details_from2014TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aWVz11POSTENTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aWVz11POSTENTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mIFIRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mIFIRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz10POSTENTableAdapter, Me._aWVz10POSTENTableAdapter.Connection)
                    Me._aWVz10POSTENTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz10POSTENTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz10POSTENTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz10POSTENTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz10POSTENTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz14TableAdapter, Me._aWVz14TableAdapter.Connection)
                    Me._aWVz14TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz14TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz14TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz14TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz14TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz1415RelevantDataTableAdapter, Me._aWVz1415RelevantDataTableAdapter.Connection)
                    Me._aWVz1415RelevantDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz1415RelevantDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz1415RelevantDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz1415RelevantDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz1415RelevantDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz14z15TableAdapter, Me._aWVz14z15TableAdapter.Connection)
                    Me._aWVz14z15TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz14z15TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz14z15TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz14z15TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz14z15TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz15TableAdapter, Me._aWVz15TableAdapter.Connection)
                    Me._aWVz15TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz15TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz15TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz15TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz15TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz4DIKAPPOSTENTableAdapter, Me._aWVz4DIKAPPOSTENTableAdapter.Connection)
                    Me._aWVz4DIKAPPOSTENTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4DIKAPPOSTENTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz4DIKAPPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz4DIKAPPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz4DIKAPPOSTENTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz4DIRINVPOSTENTableAdapter, Me._aWVz4DIRINVPOSTENTableAdapter.Connection)
                    Me._aWVz4DIRINVPOSTENTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4DIRINVPOSTENTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz4DIRINVPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz4DIRINVPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz4DIRINVPOSTENTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz4TRANSITPOSTENTableAdapter, Me._aWVz4TRANSITPOSTENTableAdapter.Connection)
                    Me._aWVz4TRANSITPOSTENTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4TRANSITPOSTENTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz4TRANSITPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz4TRANSITPOSTENTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz4TRANSITPOSTENTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._bANKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bANKTableAdapter, Me._bANKTableAdapter.Connection)
                    Me._bANKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._bANKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._bANKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bANKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bANKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cOUNTRIESTableAdapter, Me._cOUNTRIESTableAdapter.Connection)
                    Me._cOUNTRIESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cOUNTRIESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cOUNTRIESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cOUNTRIESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cOUNTRIESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter, Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection)
                    Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zINSERTRAG_KUNDEN_JAHRTableAdapter, Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection)
                    Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zINSERTRAG_KUNDEN_MONATTableAdapter, Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection)
                    Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eMPLOYES_YEAR_AVERAGETableAdapter, Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection)
                    Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPLOYES_YEAR_AVERAGETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eMPLOYES_YEAR_AVERAGETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eMPLOYES_YEAR_AVERAGETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eMPLOYES_YEAR_AVERAGETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTA_FormsTill2013TableAdapter, Me._zVSTA_FormsTill2013TableAdapter.Connection)
                    Me._zVSTA_FormsTill2013TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTA_FormsTill2013TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTA_FormsTill2013TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTA_FormsTill2013TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTA_FormsTill2013TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTA_ProdTill2013TableAdapter, Me._zVSTA_ProdTill2013TableAdapter.Connection)
                    Me._zVSTA_ProdTill2013TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTA_ProdTill2013TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTA_ProdTill2013TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTA_ProdTill2013TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTA_ProdTill2013TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTATill2013TableAdapter, Me._zVSTATill2013TableAdapter.Connection)
                    Me._zVSTATill2013TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTATill2013TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTATill2013TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTATill2013TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTATill2013TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTAT_Parameters_from2014TableAdapter, Me._zVSTAT_Parameters_from2014TableAdapter.Connection)
                    Me._zVSTAT_Parameters_from2014TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Parameters_from2014TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTAT_Parameters_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTAT_Parameters_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTAT_Parameters_from2014TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTAT_Details_from2014TableAdapter, Me._zVSTAT_Details_from2014TableAdapter.Connection)
                    Me._zVSTAT_Details_from2014TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Details_from2014TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTAT_Details_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTAT_Details_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTAT_Details_from2014TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTAT_MeldeJahr_from2014TableAdapter, Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection)
                    Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_MeldeJahr_from2014TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTAT_MeldeJahr_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTAT_MeldeJahr_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTAT_MeldeJahr_from2014TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTAT_Meldepositionen_from2014TableAdapter, Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection)
                    Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Meldepositionen_from2014TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTAT_Meldepositionen_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTAT_Meldepositionen_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTAT_Meldepositionen_from2014TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zVSTAT_Meldeschemas_from2014TableAdapter, Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection)
                    Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Meldeschemas_from2014TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._zVSTAT_Meldeschemas_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zVSTAT_Meldeschemas_from2014TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zVSTAT_Meldeschemas_from2014TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aWVz11POSTENTableAdapter, Me._aWVz11POSTENTableAdapter.Connection)
                    Me._aWVz11POSTENTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz11POSTENTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aWVz11POSTENTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aWVz11POSTENTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aWVz11POSTENTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mIFIRTableAdapter, Me._mIFIRTableAdapter.Connection)
                    Me._mIFIRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mIFIRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mIFIRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mIFIRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mIFIRTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aWVz10POSTENTableAdapter) Is Nothing) Then
                    Me._aWVz10POSTENTableAdapter.Connection = CType(revertConnections(Me._aWVz10POSTENTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz10POSTENTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz14TableAdapter) Is Nothing) Then
                    Me._aWVz14TableAdapter.Connection = CType(revertConnections(Me._aWVz14TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz14TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz1415RelevantDataTableAdapter) Is Nothing) Then
                    Me._aWVz1415RelevantDataTableAdapter.Connection = CType(revertConnections(Me._aWVz1415RelevantDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz1415RelevantDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz14z15TableAdapter) Is Nothing) Then
                    Me._aWVz14z15TableAdapter.Connection = CType(revertConnections(Me._aWVz14z15TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz14z15TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz15TableAdapter) Is Nothing) Then
                    Me._aWVz15TableAdapter.Connection = CType(revertConnections(Me._aWVz15TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz15TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz4DIKAPPOSTENTableAdapter) Is Nothing) Then
                    Me._aWVz4DIKAPPOSTENTableAdapter.Connection = CType(revertConnections(Me._aWVz4DIKAPPOSTENTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4DIKAPPOSTENTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz4DIRINVPOSTENTableAdapter) Is Nothing) Then
                    Me._aWVz4DIRINVPOSTENTableAdapter.Connection = CType(revertConnections(Me._aWVz4DIRINVPOSTENTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4DIRINVPOSTENTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz4TRANSITPOSTENTableAdapter) Is Nothing) Then
                    Me._aWVz4TRANSITPOSTENTableAdapter.Connection = CType(revertConnections(Me._aWVz4TRANSITPOSTENTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz4TRANSITPOSTENTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._bANKTableAdapter) Is Nothing) Then
                    Me._bANKTableAdapter.Connection = CType(revertConnections(Me._bANKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._bANKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cOUNTRIESTableAdapter) Is Nothing) Then
                    Me._cOUNTRIESTableAdapter.Connection = CType(revertConnections(Me._cOUNTRIESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cOUNTRIESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter) Is Nothing) Then
                    Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Connection = CType(revertConnections(Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_DETAILSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_JAHRTableAdapter) Is Nothing) Then
                    Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Connection = CType(revertConnections(Me._zINSERTRAG_KUNDEN_JAHRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_JAHRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zINSERTRAG_KUNDEN_MONATTableAdapter) Is Nothing) Then
                    Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Connection = CType(revertConnections(Me._zINSERTRAG_KUNDEN_MONATTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zINSERTRAG_KUNDEN_MONATTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eMPLOYES_YEAR_AVERAGETableAdapter) Is Nothing) Then
                    Me._eMPLOYES_YEAR_AVERAGETableAdapter.Connection = CType(revertConnections(Me._eMPLOYES_YEAR_AVERAGETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPLOYES_YEAR_AVERAGETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTA_FormsTill2013TableAdapter) Is Nothing) Then
                    Me._zVSTA_FormsTill2013TableAdapter.Connection = CType(revertConnections(Me._zVSTA_FormsTill2013TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTA_FormsTill2013TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTA_ProdTill2013TableAdapter) Is Nothing) Then
                    Me._zVSTA_ProdTill2013TableAdapter.Connection = CType(revertConnections(Me._zVSTA_ProdTill2013TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTA_ProdTill2013TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTATill2013TableAdapter) Is Nothing) Then
                    Me._zVSTATill2013TableAdapter.Connection = CType(revertConnections(Me._zVSTATill2013TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTATill2013TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTAT_Parameters_from2014TableAdapter) Is Nothing) Then
                    Me._zVSTAT_Parameters_from2014TableAdapter.Connection = CType(revertConnections(Me._zVSTAT_Parameters_from2014TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Parameters_from2014TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTAT_Details_from2014TableAdapter) Is Nothing) Then
                    Me._zVSTAT_Details_from2014TableAdapter.Connection = CType(revertConnections(Me._zVSTAT_Details_from2014TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Details_from2014TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTAT_MeldeJahr_from2014TableAdapter) Is Nothing) Then
                    Me._zVSTAT_MeldeJahr_from2014TableAdapter.Connection = CType(revertConnections(Me._zVSTAT_MeldeJahr_from2014TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_MeldeJahr_from2014TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTAT_Meldepositionen_from2014TableAdapter) Is Nothing) Then
                    Me._zVSTAT_Meldepositionen_from2014TableAdapter.Connection = CType(revertConnections(Me._zVSTAT_Meldepositionen_from2014TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Meldepositionen_from2014TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zVSTAT_Meldeschemas_from2014TableAdapter) Is Nothing) Then
                    Me._zVSTAT_Meldeschemas_from2014TableAdapter.Connection = CType(revertConnections(Me._zVSTAT_Meldeschemas_from2014TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._zVSTAT_Meldeschemas_from2014TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aWVz11POSTENTableAdapter) Is Nothing) Then
                    Me._aWVz11POSTENTableAdapter.Connection = CType(revertConnections(Me._aWVz11POSTENTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aWVz11POSTENTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mIFIRTableAdapter) Is Nothing) Then
                    Me._mIFIRTableAdapter.Connection = CType(revertConnections(Me._mIFIRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mIFIRTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
