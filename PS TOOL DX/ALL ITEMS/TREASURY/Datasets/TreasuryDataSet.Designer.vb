'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TreasuryDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TreasuryDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCUSTOMER_RATING As CUSTOMER_RATINGDataTable
    
    Private tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
    
    Private tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME As FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
    
    Private tableOWN_CURRENCIES As OWN_CURRENCIESDataTable
    
    Private tableFX_ALL As FX_ALLDataTable
    
    Private tableFX_Pairs As FX_PairsDataTable
    
    Private relationFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CUSTOMER_RATING")) Is Nothing) Then
                MyBase.Tables.Add(New CUSTOMER_RATINGDataTable(ds.Tables("CUSTOMER_RATING")))
            End If
            If (Not (ds.Tables("FX CREDIT EQUIVALENT Basic REAL TIME")) Is Nothing) Then
                MyBase.Tables.Add(New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable(ds.Tables("FX CREDIT EQUIVALENT Basic REAL TIME")))
            End If
            If (Not (ds.Tables("FX CREDIT EQUIVALENT Details REAL TIME")) Is Nothing) Then
                MyBase.Tables.Add(New FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable(ds.Tables("FX CREDIT EQUIVALENT Details REAL TIME")))
            End If
            If (Not (ds.Tables("OWN_CURRENCIES")) Is Nothing) Then
                MyBase.Tables.Add(New OWN_CURRENCIESDataTable(ds.Tables("OWN_CURRENCIES")))
            End If
            If (Not (ds.Tables("FX ALL")) Is Nothing) Then
                MyBase.Tables.Add(New FX_ALLDataTable(ds.Tables("FX ALL")))
            End If
            If (Not (ds.Tables("FX_Pairs")) Is Nothing) Then
                MyBase.Tables.Add(New FX_PairsDataTable(ds.Tables("FX_Pairs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CUSTOMER_RATING() As CUSTOMER_RATINGDataTable
        Get
            Return Me.tableCUSTOMER_RATING
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FX_CREDIT_EQUIVALENT_Basic_REAL_TIME() As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
        Get
            Return Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FX_CREDIT_EQUIVALENT_Details_REAL_TIME() As FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
        Get
            Return Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OWN_CURRENCIES() As OWN_CURRENCIESDataTable
        Get
            Return Me.tableOWN_CURRENCIES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FX_ALL() As FX_ALLDataTable
        Get
            Return Me.tableFX_ALL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FX_Pairs() As FX_PairsDataTable
        Get
            Return Me.tableFX_Pairs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TreasuryDataSet = CType(MyBase.Clone,TreasuryDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("CUSTOMER_RATING")) Is Nothing) Then
                MyBase.Tables.Add(New CUSTOMER_RATINGDataTable(ds.Tables("CUSTOMER_RATING")))
            End If
            If (Not (ds.Tables("FX CREDIT EQUIVALENT Basic REAL TIME")) Is Nothing) Then
                MyBase.Tables.Add(New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable(ds.Tables("FX CREDIT EQUIVALENT Basic REAL TIME")))
            End If
            If (Not (ds.Tables("FX CREDIT EQUIVALENT Details REAL TIME")) Is Nothing) Then
                MyBase.Tables.Add(New FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable(ds.Tables("FX CREDIT EQUIVALENT Details REAL TIME")))
            End If
            If (Not (ds.Tables("OWN_CURRENCIES")) Is Nothing) Then
                MyBase.Tables.Add(New OWN_CURRENCIESDataTable(ds.Tables("OWN_CURRENCIES")))
            End If
            If (Not (ds.Tables("FX ALL")) Is Nothing) Then
                MyBase.Tables.Add(New FX_ALLDataTable(ds.Tables("FX ALL")))
            End If
            If (Not (ds.Tables("FX_Pairs")) Is Nothing) Then
                MyBase.Tables.Add(New FX_PairsDataTable(ds.Tables("FX_Pairs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCUSTOMER_RATING = CType(MyBase.Tables("CUSTOMER_RATING"),CUSTOMER_RATINGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCUSTOMER_RATING) Is Nothing) Then
                Me.tableCUSTOMER_RATING.InitVars
            End If
        End If
        Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME = CType(MyBase.Tables("FX CREDIT EQUIVALENT Basic REAL TIME"),FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME) Is Nothing) Then
                Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.InitVars
            End If
        End If
        Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME = CType(MyBase.Tables("FX CREDIT EQUIVALENT Details REAL TIME"),FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME) Is Nothing) Then
                Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.InitVars
            End If
        End If
        Me.tableOWN_CURRENCIES = CType(MyBase.Tables("OWN_CURRENCIES"),OWN_CURRENCIESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOWN_CURRENCIES) Is Nothing) Then
                Me.tableOWN_CURRENCIES.InitVars
            End If
        End If
        Me.tableFX_ALL = CType(MyBase.Tables("FX ALL"),FX_ALLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFX_ALL) Is Nothing) Then
                Me.tableFX_ALL.InitVars
            End If
        End If
        Me.tableFX_Pairs = CType(MyBase.Tables("FX_Pairs"),FX_PairsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFX_Pairs) Is Nothing) Then
                Me.tableFX_Pairs.InitVars
            End If
        End If
        Me.relationFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME = Me.Relations("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "TreasuryDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TreasuryDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCUSTOMER_RATING = New CUSTOMER_RATINGDataTable()
        MyBase.Tables.Add(Me.tableCUSTOMER_RATING)
        Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME = New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable()
        MyBase.Tables.Add(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME)
        Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME = New FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable()
        MyBase.Tables.Add(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME)
        Me.tableOWN_CURRENCIES = New OWN_CURRENCIESDataTable()
        MyBase.Tables.Add(Me.tableOWN_CURRENCIES)
        Me.tableFX_ALL = New FX_ALLDataTable()
        MyBase.Tables.Add(Me.tableFX_ALL)
        Me.tableFX_Pairs = New FX_PairsDataTable()
        MyBase.Tables.Add(Me.tableFX_Pairs)
        Me.relationFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME = New Global.System.Data.DataRelation("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME", New Global.System.Data.DataColumn() {Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IdFX_CRED_EQU_BASICColumn}, false)
        Me.Relations.Add(Me.relationFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeCUSTOMER_RATING() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeFX_CREDIT_EQUIVALENT_Basic_REAL_TIME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeFX_CREDIT_EQUIVALENT_Details_REAL_TIME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeOWN_CURRENCIES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeFX_ALL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeFX_Pairs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TreasuryDataSet = New TreasuryDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub CUSTOMER_RATINGRowChangeEventHandler(ByVal sender As Object, ByVal e As CUSTOMER_RATINGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEventHandler(ByVal sender As Object, ByVal e As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEventHandler(ByVal sender As Object, ByVal e As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub OWN_CURRENCIESRowChangeEventHandler(ByVal sender As Object, ByVal e As OWN_CURRENCIESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub FX_ALLRowChangeEventHandler(ByVal sender As Object, ByVal e As FX_ALLRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub FX_PairsRowChangeEventHandler(ByVal sender As Object, ByVal e As FX_PairsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CUSTOMER_RATINGDataTable
        Inherits Global.System.Data.TypedTableBase(Of CUSTOMER_RATINGRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClientNo As Global.System.Data.DataColumn
        
        Private columnClientGroup As Global.System.Data.DataColumn
        
        Private columnClientGroupName As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnRating As Global.System.Data.DataColumn
        
        Private columnCoreDefinition As Global.System.Data.DataColumn
        
        Private columnStandardPoorsRating As Global.System.Data.DataColumn
        
        Private columnMoodysRating As Global.System.Data.DataColumn
        
        Private columnFitchRating As Global.System.Data.DataColumn
        
        Private columnMainlandBranchRating As Global.System.Data.DataColumn
        
        Private columnPD As Global.System.Data.DataColumn
        
        Private columnER_25 As Global.System.Data.DataColumn
        
        Private columnER_45 As Global.System.Data.DataColumn
        
        Private columnActiveRatingCalculation As Global.System.Data.DataColumn
        
        Private columnRatingExceptions As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CUSTOMER_RATING"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CoreDefinitionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoreDefinition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StandardPoorsRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStandardPoorsRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MoodysRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoodysRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FitchRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFitchRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MainlandBranchRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainlandBranchRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ER_25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnER_25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ER_45Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnER_45
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ActiveRatingCalculationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActiveRatingCalculation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RatingExceptionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRatingExceptions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CUSTOMER_RATINGRow
            Get
                Return CType(Me.Rows(index),CUSTOMER_RATINGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CUSTOMER_RATINGRowChanging As CUSTOMER_RATINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CUSTOMER_RATINGRowChanged As CUSTOMER_RATINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CUSTOMER_RATINGRowDeleting As CUSTOMER_RATINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event CUSTOMER_RATINGRowDeleted As CUSTOMER_RATINGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddCUSTOMER_RATINGRow(ByVal row As CUSTOMER_RATINGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddCUSTOMER_RATINGRow(ByVal ClientNo As String, ByVal ClientGroup As String, ByVal ClientGroupName As String, ByVal ClientName As String, ByVal Rating As String, ByVal CoreDefinition As String, ByVal StandardPoorsRating As String, ByVal MoodysRating As String, ByVal FitchRating As String, ByVal MainlandBranchRating As String, ByVal PD As Double, ByVal ER_25 As Double, ByVal ER_45 As Double, ByVal ActiveRatingCalculation As Boolean, ByVal RatingExceptions As String) As CUSTOMER_RATINGRow
            Dim rowCUSTOMER_RATINGRow As CUSTOMER_RATINGRow = CType(Me.NewRow,CUSTOMER_RATINGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ClientNo, ClientGroup, ClientGroupName, ClientName, Rating, CoreDefinition, StandardPoorsRating, MoodysRating, FitchRating, MainlandBranchRating, PD, ER_25, ER_45, ActiveRatingCalculation, RatingExceptions}
            rowCUSTOMER_RATINGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCUSTOMER_RATINGRow)
            Return rowCUSTOMER_RATINGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CUSTOMER_RATINGRow
            Return CType(Me.Rows.Find(New Object() {ID}),CUSTOMER_RATINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CUSTOMER_RATINGDataTable = CType(MyBase.Clone,CUSTOMER_RATINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CUSTOMER_RATINGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClientNo = MyBase.Columns("ClientNo")
            Me.columnClientGroup = MyBase.Columns("ClientGroup")
            Me.columnClientGroupName = MyBase.Columns("ClientGroupName")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnRating = MyBase.Columns("Rating")
            Me.columnCoreDefinition = MyBase.Columns("CoreDefinition")
            Me.columnStandardPoorsRating = MyBase.Columns("StandardPoorsRating")
            Me.columnMoodysRating = MyBase.Columns("MoodysRating")
            Me.columnFitchRating = MyBase.Columns("FitchRating")
            Me.columnMainlandBranchRating = MyBase.Columns("MainlandBranchRating")
            Me.columnPD = MyBase.Columns("PD")
            Me.columnER_25 = MyBase.Columns("ER_25")
            Me.columnER_45 = MyBase.Columns("ER_45")
            Me.columnActiveRatingCalculation = MyBase.Columns("ActiveRatingCalculation")
            Me.columnRatingExceptions = MyBase.Columns("RatingExceptions")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClientNo = New Global.System.Data.DataColumn("ClientNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNo)
            Me.columnClientGroup = New Global.System.Data.DataColumn("ClientGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroup)
            Me.columnClientGroupName = New Global.System.Data.DataColumn("ClientGroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroupName)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnRating = New Global.System.Data.DataColumn("Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRating)
            Me.columnCoreDefinition = New Global.System.Data.DataColumn("CoreDefinition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoreDefinition)
            Me.columnStandardPoorsRating = New Global.System.Data.DataColumn("StandardPoorsRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStandardPoorsRating)
            Me.columnMoodysRating = New Global.System.Data.DataColumn("MoodysRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoodysRating)
            Me.columnFitchRating = New Global.System.Data.DataColumn("FitchRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFitchRating)
            Me.columnMainlandBranchRating = New Global.System.Data.DataColumn("MainlandBranchRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainlandBranchRating)
            Me.columnPD = New Global.System.Data.DataColumn("PD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPD)
            Me.columnER_25 = New Global.System.Data.DataColumn("ER_25", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnER_25)
            Me.columnER_45 = New Global.System.Data.DataColumn("ER_45", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnER_45)
            Me.columnActiveRatingCalculation = New Global.System.Data.DataColumn("ActiveRatingCalculation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActiveRatingCalculation)
            Me.columnRatingExceptions = New Global.System.Data.DataColumn("RatingExceptions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRatingExceptions)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnClientNo.MaxLength = 255
            Me.columnClientGroup.MaxLength = 50
            Me.columnClientGroupName.MaxLength = 255
            Me.columnClientName.MaxLength = 255
            Me.columnRating.MaxLength = 255
            Me.columnCoreDefinition.MaxLength = 255
            Me.columnStandardPoorsRating.MaxLength = 255
            Me.columnMoodysRating.MaxLength = 255
            Me.columnFitchRating.MaxLength = 255
            Me.columnMainlandBranchRating.MaxLength = 255
            Me.columnRatingExceptions.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewCUSTOMER_RATINGRow() As CUSTOMER_RATINGRow
            Return CType(Me.NewRow,CUSTOMER_RATINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CUSTOMER_RATINGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CUSTOMER_RATINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CUSTOMER_RATINGRowChangedEvent) Is Nothing) Then
                RaiseEvent CUSTOMER_RATINGRowChanged(Me, New CUSTOMER_RATINGRowChangeEvent(CType(e.Row,CUSTOMER_RATINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CUSTOMER_RATINGRowChangingEvent) Is Nothing) Then
                RaiseEvent CUSTOMER_RATINGRowChanging(Me, New CUSTOMER_RATINGRowChangeEvent(CType(e.Row,CUSTOMER_RATINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CUSTOMER_RATINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent CUSTOMER_RATINGRowDeleted(Me, New CUSTOMER_RATINGRowChangeEvent(CType(e.Row,CUSTOMER_RATINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CUSTOMER_RATINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent CUSTOMER_RATINGRowDeleting(Me, New CUSTOMER_RATINGRowChangeEvent(CType(e.Row,CUSTOMER_RATINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveCUSTOMER_RATINGRow(ByVal row As CUSTOMER_RATINGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CUSTOMER_RATINGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        Private columnClientGroup As Global.System.Data.DataColumn
        
        Private columnClientGroupName As Global.System.Data.DataColumn
        
        Private columnSumEURequ As Global.System.Data.DataColumn
        
        Private columnCreditEquivelantAmount As Global.System.Data.DataColumn
        
        Private columnCreditEquivelantAmountTill1Jear As Global.System.Data.DataColumn
        
        Private columnCreditEquivelantAmountOver1Till2Years As Global.System.Data.DataColumn
        
        Private columnCreditEquivelantAmountOver2Years As Global.System.Data.DataColumn
        
        Private columnCreditRiskAmountSUM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FX CREDIT EQUIVALENT Basic REAL TIME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SumEURequColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumEURequ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CreditEquivelantAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditEquivelantAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CreditEquivelantAmountTill1JearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditEquivelantAmountTill1Jear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CreditEquivelantAmountOver1Till2YearsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditEquivelantAmountOver1Till2Years
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CreditEquivelantAmountOver2YearsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditEquivelantAmountOver2Years
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CreditRiskAmountSUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditRiskAmountSUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Get
                Return CType(Me.Rows(index),FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChanging As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChanged As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeleting As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeleted As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow(ByVal row As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow(ByVal RiskDate As Date, ByVal ClientGroup As Integer, ByVal ClientGroupName As String, ByVal SumEURequ As Double, ByVal CreditEquivelantAmount As Double, ByVal CreditEquivelantAmountTill1Jear As Double, ByVal CreditEquivelantAmountOver1Till2Years As Double, ByVal CreditEquivelantAmountOver2Years As Double, ByVal CreditRiskAmountSUM As Double) As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Dim rowFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow = CType(Me.NewRow,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RiskDate, ClientGroup, ClientGroupName, SumEURequ, CreditEquivelantAmount, CreditEquivelantAmountTill1Jear, CreditEquivelantAmountOver1Till2Years, CreditEquivelantAmountOver2Years, CreditRiskAmountSUM}
            rowFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            Return rowFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Return CType(Me.Rows.Find(New Object() {ID}),FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable = CType(MyBase.Clone,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
            Me.columnClientGroup = MyBase.Columns("ClientGroup")
            Me.columnClientGroupName = MyBase.Columns("ClientGroupName")
            Me.columnSumEURequ = MyBase.Columns("SumEURequ")
            Me.columnCreditEquivelantAmount = MyBase.Columns("CreditEquivelantAmount")
            Me.columnCreditEquivelantAmountTill1Jear = MyBase.Columns("CreditEquivelantAmountTill1Jear")
            Me.columnCreditEquivelantAmountOver1Till2Years = MyBase.Columns("CreditEquivelantAmountOver1Till2Years")
            Me.columnCreditEquivelantAmountOver2Years = MyBase.Columns("CreditEquivelantAmountOver2Years")
            Me.columnCreditRiskAmountSUM = MyBase.Columns("CreditRiskAmountSUM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.columnClientGroup = New Global.System.Data.DataColumn("ClientGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroup)
            Me.columnClientGroupName = New Global.System.Data.DataColumn("ClientGroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroupName)
            Me.columnSumEURequ = New Global.System.Data.DataColumn("SumEURequ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumEURequ)
            Me.columnCreditEquivelantAmount = New Global.System.Data.DataColumn("CreditEquivelantAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditEquivelantAmount)
            Me.columnCreditEquivelantAmountTill1Jear = New Global.System.Data.DataColumn("CreditEquivelantAmountTill1Jear", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditEquivelantAmountTill1Jear)
            Me.columnCreditEquivelantAmountOver1Till2Years = New Global.System.Data.DataColumn("CreditEquivelantAmountOver1Till2Years", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditEquivelantAmountOver1Till2Years)
            Me.columnCreditEquivelantAmountOver2Years = New Global.System.Data.DataColumn("CreditEquivelantAmountOver2Years", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditEquivelantAmountOver2Years)
            Me.columnCreditRiskAmountSUM = New Global.System.Data.DataColumn("CreditRiskAmountSUM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditRiskAmountSUM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnClientGroupName.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow() As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Return CType(Me.NewRow,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangedEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChanged(Me, New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangingEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChanging(Me, New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeletedEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeleted(Me, New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeletingEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowDeleting(Me, New FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow(ByVal row As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClientGroup As Global.System.Data.DataColumn
        
        Private columnClientGroupName As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnFinal_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnMonthToEvent As Global.System.Data.DataColumn
        
        Private columnYearToEvent As Global.System.Data.DataColumn
        
        Private columnOrgCcy As Global.System.Data.DataColumn
        
        Private columnOrgCcyAmount As Global.System.Data.DataColumn
        
        Private columnEURequ As Global.System.Data.DataColumn
        
        Private columnPercentCalculation As Global.System.Data.DataColumn
        
        Private columnEURequCalculated As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        Private columnIdFX_CRED_EQU_BASIC As Global.System.Data.DataColumn
        
        Private columnClient_No As Global.System.Data.DataColumn
        
        Private columnClient_Name As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        Private columnInputType As Global.System.Data.DataColumn
        
        Private columnTradeDate As Global.System.Data.DataColumn
        
        Private columnContract As Global.System.Data.DataColumn
        
        Private columnContractType As Global.System.Data.DataColumn
        
        Private columnModified_Final_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnMonthToEventStartDate As Global.System.Data.DataColumn
        
        Private columnAmountType As Global.System.Data.DataColumn
        
        Private columnModifiedStartDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FX CREDIT EQUIVALENT Details REAL TIME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientGroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MonthToEventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthToEvent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearToEventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearToEvent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OrgCcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrgCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OrgCcyAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrgCcyAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EURequColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEURequ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PercentCalculationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercentCalculation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EURequCalculatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEURequCalculated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IdFX_CRED_EQU_BASICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdFX_CRED_EQU_BASIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Client_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Client_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InputTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TradeDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Modified_Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModified_Final_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MonthToEventStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthToEventStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AmountTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ModifiedStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
            Get
                Return CType(Me.Rows(index),FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChanging As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChanged As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeleting As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeleted As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow(ByVal row As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow( _
                    ByVal ClientGroup As Integer,  _
                    ByVal ClientGroupName As String,  _
                    ByVal StartDate As Date,  _
                    ByVal Final_Maturity_Date As Date,  _
                    ByVal MonthToEvent As Double,  _
                    ByVal YearToEvent As Double,  _
                    ByVal OrgCcy As String,  _
                    ByVal OrgCcyAmount As Double,  _
                    ByVal EURequ As Double,  _
                    ByVal PercentCalculation As Double,  _
                    ByVal EURequCalculated As Double,  _
                    ByVal RiskDate As Date,  _
                    ByVal parentFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowByFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow,  _
                    ByVal Client_No As String,  _
                    ByVal Client_Name As String,  _
                    ByVal ExchangeRate As Double,  _
                    ByVal InputType As String,  _
                    ByVal TradeDate As Date,  _
                    ByVal Contract As String,  _
                    ByVal ContractType As String,  _
                    ByVal Modified_Final_Maturity_Date As Date,  _
                    ByVal MonthToEventStartDate As Double,  _
                    ByVal AmountType As String,  _
                    ByVal ModifiedStartDate As Date) As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
            Dim rowFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow = CType(Me.NewRow,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ClientGroup, ClientGroupName, StartDate, Final_Maturity_Date, MonthToEvent, YearToEvent, OrgCcy, OrgCcyAmount, EURequ, PercentCalculation, EURequCalculated, RiskDate, Nothing, Client_No, Client_Name, ExchangeRate, InputType, TradeDate, Contract, ContractType, Modified_Final_Maturity_Date, MonthToEventStartDate, AmountType, ModifiedStartDate}
            If (Not (parentFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowByFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME) Is Nothing) Then
                columnValuesArray(13) = parentFX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowByFK_FX_CREDIT_EQUIVALENT_Details_REAL_TIME_FX_CREDIT_EQUIVALENT_Basic_REAL_TIME(0)
            End If
            rowFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
            Return rowFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
            Return CType(Me.Rows.Find(New Object() {ID}),FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable = CType(MyBase.Clone,FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClientGroup = MyBase.Columns("ClientGroup")
            Me.columnClientGroupName = MyBase.Columns("ClientGroupName")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnFinal_Maturity_Date = MyBase.Columns("Final_Maturity_Date")
            Me.columnMonthToEvent = MyBase.Columns("MonthToEvent")
            Me.columnYearToEvent = MyBase.Columns("YearToEvent")
            Me.columnOrgCcy = MyBase.Columns("OrgCcy")
            Me.columnOrgCcyAmount = MyBase.Columns("OrgCcyAmount")
            Me.columnEURequ = MyBase.Columns("EURequ")
            Me.columnPercentCalculation = MyBase.Columns("PercentCalculation")
            Me.columnEURequCalculated = MyBase.Columns("EURequCalculated")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
            Me.columnIdFX_CRED_EQU_BASIC = MyBase.Columns("IdFX_CRED_EQU_BASIC")
            Me.columnClient_No = MyBase.Columns("Client_No")
            Me.columnClient_Name = MyBase.Columns("Client_Name")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
            Me.columnInputType = MyBase.Columns("InputType")
            Me.columnTradeDate = MyBase.Columns("TradeDate")
            Me.columnContract = MyBase.Columns("Contract")
            Me.columnContractType = MyBase.Columns("ContractType")
            Me.columnModified_Final_Maturity_Date = MyBase.Columns("Modified_Final_Maturity_Date")
            Me.columnMonthToEventStartDate = MyBase.Columns("MonthToEventStartDate")
            Me.columnAmountType = MyBase.Columns("AmountType")
            Me.columnModifiedStartDate = MyBase.Columns("ModifiedStartDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClientGroup = New Global.System.Data.DataColumn("ClientGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroup)
            Me.columnClientGroupName = New Global.System.Data.DataColumn("ClientGroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientGroupName)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnFinal_Maturity_Date = New Global.System.Data.DataColumn("Final_Maturity_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Maturity_Date)
            Me.columnMonthToEvent = New Global.System.Data.DataColumn("MonthToEvent", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthToEvent)
            Me.columnYearToEvent = New Global.System.Data.DataColumn("YearToEvent", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearToEvent)
            Me.columnOrgCcy = New Global.System.Data.DataColumn("OrgCcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrgCcy)
            Me.columnOrgCcyAmount = New Global.System.Data.DataColumn("OrgCcyAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrgCcyAmount)
            Me.columnEURequ = New Global.System.Data.DataColumn("EURequ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEURequ)
            Me.columnPercentCalculation = New Global.System.Data.DataColumn("PercentCalculation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercentCalculation)
            Me.columnEURequCalculated = New Global.System.Data.DataColumn("EURequCalculated", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEURequCalculated)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.columnIdFX_CRED_EQU_BASIC = New Global.System.Data.DataColumn("IdFX_CRED_EQU_BASIC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdFX_CRED_EQU_BASIC)
            Me.columnClient_No = New Global.System.Data.DataColumn("Client_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient_No)
            Me.columnClient_Name = New Global.System.Data.DataColumn("Client_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient_Name)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.columnInputType = New Global.System.Data.DataColumn("InputType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputType)
            Me.columnTradeDate = New Global.System.Data.DataColumn("TradeDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeDate)
            Me.columnContract = New Global.System.Data.DataColumn("Contract", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract)
            Me.columnContractType = New Global.System.Data.DataColumn("ContractType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractType)
            Me.columnModified_Final_Maturity_Date = New Global.System.Data.DataColumn("Modified_Final_Maturity_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModified_Final_Maturity_Date)
            Me.columnMonthToEventStartDate = New Global.System.Data.DataColumn("MonthToEventStartDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthToEventStartDate)
            Me.columnAmountType = New Global.System.Data.DataColumn("AmountType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountType)
            Me.columnModifiedStartDate = New Global.System.Data.DataColumn("ModifiedStartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedStartDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnClientGroupName.MaxLength = 255
            Me.columnOrgCcy.MaxLength = 3
            Me.columnClient_No.MaxLength = 50
            Me.columnClient_Name.MaxLength = 255
            Me.columnInputType.MaxLength = 1
            Me.columnContract.MaxLength = 255
            Me.columnContractType.MaxLength = 255
            Me.columnAmountType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow() As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
            Return CType(Me.NewRow,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangedEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChanged(Me, New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangingEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChanging(Me, New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeletedEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeleted(Me, New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeletingEvent) Is Nothing) Then
                RaiseEvent FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowDeleting(Me, New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent(CType(e.Row,FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveFX_CREDIT_EQUIVALENT_Details_REAL_TIMERow(ByVal row As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OWN_CURRENCIESDataTable
        Inherits Global.System.Data.TypedTableBase(Of OWN_CURRENCIESRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnCURRENCY_NAME As Global.System.Data.DataColumn
        
        Private columnOWN_CURRENCY As Global.System.Data.DataColumn
        
        Private columnACCEPTS_DECIMALS As Global.System.Data.DataColumn
        
        Private columnSPREAD As Global.System.Data.DataColumn
        
        Private columnVALID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OWN_CURRENCIES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CURRENCY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OWN_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOWN_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ACCEPTS_DECIMALSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCEPTS_DECIMALS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SPREADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPREAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OWN_CURRENCIESRow
            Get
                Return CType(Me.Rows(index),OWN_CURRENCIESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event OWN_CURRENCIESRowChanging As OWN_CURRENCIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event OWN_CURRENCIESRowChanged As OWN_CURRENCIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event OWN_CURRENCIESRowDeleting As OWN_CURRENCIESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event OWN_CURRENCIESRowDeleted As OWN_CURRENCIESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddOWN_CURRENCIESRow(ByVal row As OWN_CURRENCIESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddOWN_CURRENCIESRow(ByVal CURRENCY_CODE As String, ByVal CURRENCY_NAME As String, ByVal OWN_CURRENCY As String, ByVal ACCEPTS_DECIMALS As String, ByVal SPREAD As Double, ByVal VALID As String) As OWN_CURRENCIESRow
            Dim rowOWN_CURRENCIESRow As OWN_CURRENCIESRow = CType(Me.NewRow,OWN_CURRENCIESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CURRENCY_CODE, CURRENCY_NAME, OWN_CURRENCY, ACCEPTS_DECIMALS, SPREAD, VALID}
            rowOWN_CURRENCIESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOWN_CURRENCIESRow)
            Return rowOWN_CURRENCIESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByCURRENCY_CODE(ByVal CURRENCY_CODE As String) As OWN_CURRENCIESRow
            Return CType(Me.Rows.Find(New Object() {CURRENCY_CODE}),OWN_CURRENCIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OWN_CURRENCIESDataTable = CType(MyBase.Clone,OWN_CURRENCIESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OWN_CURRENCIESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCURRENCY_CODE = MyBase.Columns("CURRENCY CODE")
            Me.columnCURRENCY_NAME = MyBase.Columns("CURRENCY NAME")
            Me.columnOWN_CURRENCY = MyBase.Columns("OWN CURRENCY")
            Me.columnACCEPTS_DECIMALS = MyBase.Columns("ACCEPTS DECIMALS")
            Me.columnSPREAD = MyBase.Columns("SPREAD")
            Me.columnVALID = MyBase.Columns("VALID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCURRENCY_CODE = New Global.System.Data.DataColumn("CURRENCY CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY_CODE)
            Me.columnCURRENCY_NAME = New Global.System.Data.DataColumn("CURRENCY NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY_NAME)
            Me.columnOWN_CURRENCY = New Global.System.Data.DataColumn("OWN CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOWN_CURRENCY)
            Me.columnACCEPTS_DECIMALS = New Global.System.Data.DataColumn("ACCEPTS DECIMALS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCEPTS_DECIMALS)
            Me.columnSPREAD = New Global.System.Data.DataColumn("SPREAD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPREAD)
            Me.columnVALID = New Global.System.Data.DataColumn("VALID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCURRENCY_CODE}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnCURRENCY_CODE.AllowDBNull = false
            Me.columnCURRENCY_CODE.Unique = true
            Me.columnCURRENCY_CODE.MaxLength = 255
            Me.columnCURRENCY_NAME.MaxLength = 255
            Me.columnOWN_CURRENCY.MaxLength = 255
            Me.columnACCEPTS_DECIMALS.MaxLength = 255
            Me.columnVALID.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewOWN_CURRENCIESRow() As OWN_CURRENCIESRow
            Return CType(Me.NewRow,OWN_CURRENCIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OWN_CURRENCIESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OWN_CURRENCIESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OWN_CURRENCIESRowChangedEvent) Is Nothing) Then
                RaiseEvent OWN_CURRENCIESRowChanged(Me, New OWN_CURRENCIESRowChangeEvent(CType(e.Row,OWN_CURRENCIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OWN_CURRENCIESRowChangingEvent) Is Nothing) Then
                RaiseEvent OWN_CURRENCIESRowChanging(Me, New OWN_CURRENCIESRowChangeEvent(CType(e.Row,OWN_CURRENCIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OWN_CURRENCIESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OWN_CURRENCIESRowDeleted(Me, New OWN_CURRENCIESRowChangeEvent(CType(e.Row,OWN_CURRENCIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OWN_CURRENCIESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OWN_CURRENCIESRowDeleting(Me, New OWN_CURRENCIESRowChangeEvent(CType(e.Row,OWN_CURRENCIESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveOWN_CURRENCIESRow(ByVal row As OWN_CURRENCIESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OWN_CURRENCIESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FX_ALLDataTable
        Inherits Global.System.Data.TypedTableBase(Of FX_ALLRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnOCBS_CI_NO As Global.System.Data.DataColumn
        
        Private columnClientName_ As Global.System.Data.DataColumn
        
        Private columnClient_Type As Global.System.Data.DataColumn
        
        Private columnBank_Ind As Global.System.Data.DataColumn
        
        Private columnContractNo As Global.System.Data.DataColumn
        
        Private columnContract_Type As Global.System.Data.DataColumn
        
        Private columnSPOT_FWD_SW_FLG As Global.System.Data.DataColumn
        
        Private columnAccountingCenter As Global.System.Data.DataColumn
        
        Private _columnB_S As Global.System.Data.DataColumn
        
        Private columnInput_Date As Global.System.Data.DataColumn
        
        Private columnStart_Date As Global.System.Data.DataColumn
        
        Private columnEnd_Date As Global.System.Data.DataColumn
        
        Private columnFAR_START_DATE As Global.System.Data.DataColumn
        
        Private columnFAR_END_DATE As Global.System.Data.DataColumn
        
        Private columnDeal_Currency As Global.System.Data.DataColumn
        
        Private columnDeal_Amount As Global.System.Data.DataColumn
        
        Private columnCCY_B As Global.System.Data.DataColumn
        
        Private columnAMT_B As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnCCY_S As Global.System.Data.DataColumn
        
        Private columnAMT_S As Global.System.Data.DataColumn
        
        Private columnAMT_B_Far As Global.System.Data.DataColumn
        
        Private columnAMT_S_Far As Global.System.Data.DataColumn
        
        Private _columnNet_Receive_NDF_ As Global.System.Data.DataColumn
        
        Private _columnNet_Pay_NDF_ As Global.System.Data.DataColumn
        
        Private columnExchange_Rate As Global.System.Data.DataColumn
        
        Private _columnExchange_Rate_Far_ As Global.System.Data.DataColumn
        
        Private columnBroker As Global.System.Data.DataColumn
        
        Private columnBroker_Name As Global.System.Data.DataColumn
        
        Private columnBrokerage_CCY As Global.System.Data.DataColumn
        
        Private columnBrokerage_Amount As Global.System.Data.DataColumn
        
        Private columnProdcut_Type As Global.System.Data.DataColumn
        
        Private columnGL_Master As Global.System.Data.DataColumn
        
        Private columnRisk_Country As Global.System.Data.DataColumn
        
        Private columnResident_Country As Global.System.Data.DataColumn
        
        Private columnInstitutional_Sector As Global.System.Data.DataColumn
        
        Private columnMaker As Global.System.Data.DataColumn
        
        Private _columnFixing_Date_NDF_ As Global.System.Data.DataColumn
        
        Private _columnFixing_Rate_NDF_ As Global.System.Data.DataColumn
        
        Private columnPortfolio As Global.System.Data.DataColumn
        
        Private columnSWAPNEAR As Global.System.Data.DataColumn
        
        Private columnSWAPFAR As Global.System.Data.DataColumn
        
        Private columnREVAL_FX_RATE_S As Global.System.Data.DataColumn
        
        Private columnREVAL_FX_RATE_S2 As Global.System.Data.DataColumn
        
        Private columnREVAL_FX_RATE_B As Global.System.Data.DataColumn
        
        Private columnREVAL_FX_RATE_B2 As Global.System.Data.DataColumn
        
        Private columnINDUSTRY_LC As Global.System.Data.DataColumn
        
        Private columnContractNrFar As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnOwnDeal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FX ALL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OCBS_CI_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_CI_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientName_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Client_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bank_IndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBank_Ind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Contract_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SPOT_FWD_SW_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPOT_FWD_SW_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AccountingCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountingCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _B_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Input_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInput_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Start_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property End_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAR_START_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAR_START_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAR_END_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAR_END_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Deal_CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeal_Currency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Deal_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeal_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CCY_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AMT_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CCY_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AMT_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AMT_B_FarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT_B_Far
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AMT_S_FarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT_S_Far
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _Net_Receive_NDF_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnNet_Receive_NDF_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _Net_Pay_NDF_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnNet_Pay_NDF_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Exchange_RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchange_Rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _Exchange_Rate_Far_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnExchange_Rate_Far_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BrokerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBroker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Broker_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBroker_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Brokerage_CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrokerage_CCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Brokerage_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrokerage_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Prodcut_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProdcut_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GL_MasterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_Master
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Risk_CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRisk_Country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Resident_CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResident_Country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Institutional_SectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstitutional_Sector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MakerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _Fixing_Date_NDF_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFixing_Date_NDF_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _Fixing_Rate_NDF_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFixing_Rate_NDF_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PortfolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPortfolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SWAPNEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWAPNEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SWAPFARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWAPFAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REVAL_FX_RATE_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVAL_FX_RATE_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REVAL_FX_RATE_S2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVAL_FX_RATE_S2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REVAL_FX_RATE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVAL_FX_RATE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property REVAL_FX_RATE_B2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVAL_FX_RATE_B2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property INDUSTRY_LCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDUSTRY_LC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractNrFarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNrFar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OwnDealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOwnDeal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FX_ALLRow
            Get
                Return CType(Me.Rows(index),FX_ALLRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_ALLRowChanging As FX_ALLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_ALLRowChanged As FX_ALLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_ALLRowDeleting As FX_ALLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_ALLRowDeleted As FX_ALLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddFX_ALLRow(ByVal row As FX_ALLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddFX_ALLRow( _
                    ByVal OCBS_CI_NO As String,  _
                    ByVal ClientName_ As String,  _
                    ByVal Client_Type As String,  _
                    ByVal Bank_Ind As String,  _
                    ByVal ContractNo As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal SPOT_FWD_SW_FLG As String,  _
                    ByVal AccountingCenter As String,  _
                    ByVal _B_S As String,  _
                    ByVal Input_Date As Date,  _
                    ByVal Start_Date As Date,  _
                    ByVal End_Date As Date,  _
                    ByVal FAR_START_DATE As Date,  _
                    ByVal FAR_END_DATE As Date,  _
                    ByVal Deal_Currency As String,  _
                    ByVal Deal_Amount As Double,  _
                    ByVal CCY_B As String,  _
                    ByVal AMT_B As Double,  _
                    ByVal Status As String,  _
                    ByVal CCY_S As String,  _
                    ByVal AMT_S As Double,  _
                    ByVal AMT_B_Far As Double,  _
                    ByVal AMT_S_Far As Double,  _
                    ByVal _Net_Receive_NDF_ As Double,  _
                    ByVal _Net_Pay_NDF_ As Double,  _
                    ByVal Exchange_Rate As Double,  _
                    ByVal _Exchange_Rate_Far_ As Double,  _
                    ByVal Broker As String,  _
                    ByVal Broker_Name As String,  _
                    ByVal Brokerage_CCY As String,  _
                    ByVal Brokerage_Amount As Double,  _
                    ByVal Prodcut_Type As String,  _
                    ByVal GL_Master As String,  _
                    ByVal Risk_Country As String,  _
                    ByVal Resident_Country As String,  _
                    ByVal Institutional_Sector As String,  _
                    ByVal Maker As String,  _
                    ByVal _Fixing_Date_NDF_ As Date,  _
                    ByVal _Fixing_Rate_NDF_ As Double,  _
                    ByVal Portfolio As String,  _
                    ByVal SWAPNEAR As String,  _
                    ByVal SWAPFAR As String,  _
                    ByVal REVAL_FX_RATE_S As Double,  _
                    ByVal REVAL_FX_RATE_S2 As Double,  _
                    ByVal REVAL_FX_RATE_B As Double,  _
                    ByVal REVAL_FX_RATE_B2 As Double,  _
                    ByVal INDUSTRY_LC As String,  _
                    ByVal ContractNrFar As String,  _
                    ByVal Remarks As String,  _
                    ByVal OwnDeal As String) As FX_ALLRow
            Dim rowFX_ALLRow As FX_ALLRow = CType(Me.NewRow,FX_ALLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, OCBS_CI_NO, ClientName_, Client_Type, Bank_Ind, ContractNo, Contract_Type, SPOT_FWD_SW_FLG, AccountingCenter, _B_S, Input_Date, Start_Date, End_Date, FAR_START_DATE, FAR_END_DATE, Deal_Currency, Deal_Amount, CCY_B, AMT_B, Status, CCY_S, AMT_S, AMT_B_Far, AMT_S_Far, _Net_Receive_NDF_, _Net_Pay_NDF_, Exchange_Rate, _Exchange_Rate_Far_, Broker, Broker_Name, Brokerage_CCY, Brokerage_Amount, Prodcut_Type, GL_Master, Risk_Country, Resident_Country, Institutional_Sector, Maker, _Fixing_Date_NDF_, _Fixing_Rate_NDF_, Portfolio, SWAPNEAR, SWAPFAR, REVAL_FX_RATE_S, REVAL_FX_RATE_S2, REVAL_FX_RATE_B, REVAL_FX_RATE_B2, INDUSTRY_LC, ContractNrFar, Remarks, OwnDeal}
            rowFX_ALLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFX_ALLRow)
            Return rowFX_ALLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As FX_ALLRow
            Return CType(Me.Rows.Find(New Object() {ID}),FX_ALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FX_ALLDataTable = CType(MyBase.Clone,FX_ALLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FX_ALLDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnOCBS_CI_NO = MyBase.Columns("OCBS_CI_NO")
            Me.columnClientName_ = MyBase.Columns("ClientName ")
            Me.columnClient_Type = MyBase.Columns("Client Type")
            Me.columnBank_Ind = MyBase.Columns("Bank Ind")
            Me.columnContractNo = MyBase.Columns("ContractNo")
            Me.columnContract_Type = MyBase.Columns("Contract Type")
            Me.columnSPOT_FWD_SW_FLG = MyBase.Columns("SPOT_FWD_SW_FLG")
            Me.columnAccountingCenter = MyBase.Columns("AccountingCenter")
            Me._columnB_S = MyBase.Columns("B/S")
            Me.columnInput_Date = MyBase.Columns("Input Date")
            Me.columnStart_Date = MyBase.Columns("Start Date")
            Me.columnEnd_Date = MyBase.Columns("End Date")
            Me.columnFAR_START_DATE = MyBase.Columns("FAR_START_DATE")
            Me.columnFAR_END_DATE = MyBase.Columns("FAR_END_DATE")
            Me.columnDeal_Currency = MyBase.Columns("Deal Currency")
            Me.columnDeal_Amount = MyBase.Columns("Deal Amount")
            Me.columnCCY_B = MyBase.Columns("CCY_B")
            Me.columnAMT_B = MyBase.Columns("AMT_B")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnCCY_S = MyBase.Columns("CCY_S")
            Me.columnAMT_S = MyBase.Columns("AMT_S")
            Me.columnAMT_B_Far = MyBase.Columns("AMT_B_Far")
            Me.columnAMT_S_Far = MyBase.Columns("AMT_S_Far")
            Me._columnNet_Receive_NDF_ = MyBase.Columns("Net Receive(NDF)")
            Me._columnNet_Pay_NDF_ = MyBase.Columns("Net Pay(NDF)")
            Me.columnExchange_Rate = MyBase.Columns("Exchange Rate")
            Me._columnExchange_Rate_Far_ = MyBase.Columns("Exchange Rate(Far)")
            Me.columnBroker = MyBase.Columns("Broker")
            Me.columnBroker_Name = MyBase.Columns("Broker Name")
            Me.columnBrokerage_CCY = MyBase.Columns("Brokerage CCY")
            Me.columnBrokerage_Amount = MyBase.Columns("Brokerage Amount")
            Me.columnProdcut_Type = MyBase.Columns("Prodcut Type")
            Me.columnGL_Master = MyBase.Columns("GL Master")
            Me.columnRisk_Country = MyBase.Columns("Risk Country")
            Me.columnResident_Country = MyBase.Columns("Resident Country")
            Me.columnInstitutional_Sector = MyBase.Columns("Institutional Sector")
            Me.columnMaker = MyBase.Columns("Maker")
            Me._columnFixing_Date_NDF_ = MyBase.Columns("Fixing Date(NDF)")
            Me._columnFixing_Rate_NDF_ = MyBase.Columns("Fixing Rate(NDF)")
            Me.columnPortfolio = MyBase.Columns("Portfolio")
            Me.columnSWAPNEAR = MyBase.Columns("SWAPNEAR")
            Me.columnSWAPFAR = MyBase.Columns("SWAPFAR")
            Me.columnREVAL_FX_RATE_S = MyBase.Columns("REVAL_FX_RATE_S")
            Me.columnREVAL_FX_RATE_S2 = MyBase.Columns("REVAL_FX_RATE_S2")
            Me.columnREVAL_FX_RATE_B = MyBase.Columns("REVAL_FX_RATE_B")
            Me.columnREVAL_FX_RATE_B2 = MyBase.Columns("REVAL_FX_RATE_B2")
            Me.columnINDUSTRY_LC = MyBase.Columns("INDUSTRY_LC")
            Me.columnContractNrFar = MyBase.Columns("ContractNrFar")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnOwnDeal = MyBase.Columns("OwnDeal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnOCBS_CI_NO = New Global.System.Data.DataColumn("OCBS_CI_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_CI_NO)
            Me.columnClientName_ = New Global.System.Data.DataColumn("ClientName ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName_)
            Me.columnClient_Type = New Global.System.Data.DataColumn("Client Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient_Type)
            Me.columnBank_Ind = New Global.System.Data.DataColumn("Bank Ind", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBank_Ind)
            Me.columnContractNo = New Global.System.Data.DataColumn("ContractNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNo)
            Me.columnContract_Type = New Global.System.Data.DataColumn("Contract Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Type)
            Me.columnSPOT_FWD_SW_FLG = New Global.System.Data.DataColumn("SPOT_FWD_SW_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPOT_FWD_SW_FLG)
            Me.columnAccountingCenter = New Global.System.Data.DataColumn("AccountingCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountingCenter)
            Me._columnB_S = New Global.System.Data.DataColumn("B/S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_S.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_S")
            Me._columnB_S.ExtendedProperties.Add("Generator_UserColumnName", "B/S")
            MyBase.Columns.Add(Me._columnB_S)
            Me.columnInput_Date = New Global.System.Data.DataColumn("Input Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInput_Date)
            Me.columnStart_Date = New Global.System.Data.DataColumn("Start Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New Global.System.Data.DataColumn("End Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnd_Date)
            Me.columnFAR_START_DATE = New Global.System.Data.DataColumn("FAR_START_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAR_START_DATE)
            Me.columnFAR_END_DATE = New Global.System.Data.DataColumn("FAR_END_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAR_END_DATE)
            Me.columnDeal_Currency = New Global.System.Data.DataColumn("Deal Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeal_Currency)
            Me.columnDeal_Amount = New Global.System.Data.DataColumn("Deal Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeal_Amount)
            Me.columnCCY_B = New Global.System.Data.DataColumn("CCY_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY_B)
            Me.columnAMT_B = New Global.System.Data.DataColumn("AMT_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT_B)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnCCY_S = New Global.System.Data.DataColumn("CCY_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY_S)
            Me.columnAMT_S = New Global.System.Data.DataColumn("AMT_S", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT_S)
            Me.columnAMT_B_Far = New Global.System.Data.DataColumn("AMT_B_Far", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT_B_Far)
            Me.columnAMT_S_Far = New Global.System.Data.DataColumn("AMT_S_Far", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT_S_Far)
            Me._columnNet_Receive_NDF_ = New Global.System.Data.DataColumn("Net Receive(NDF)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnNet_Receive_NDF_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnNet_Receive_NDF_")
            Me._columnNet_Receive_NDF_.ExtendedProperties.Add("Generator_UserColumnName", "Net Receive(NDF)")
            MyBase.Columns.Add(Me._columnNet_Receive_NDF_)
            Me._columnNet_Pay_NDF_ = New Global.System.Data.DataColumn("Net Pay(NDF)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnNet_Pay_NDF_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnNet_Pay_NDF_")
            Me._columnNet_Pay_NDF_.ExtendedProperties.Add("Generator_UserColumnName", "Net Pay(NDF)")
            MyBase.Columns.Add(Me._columnNet_Pay_NDF_)
            Me.columnExchange_Rate = New Global.System.Data.DataColumn("Exchange Rate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchange_Rate)
            Me._columnExchange_Rate_Far_ = New Global.System.Data.DataColumn("Exchange Rate(Far)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnExchange_Rate_Far_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnExchange_Rate_Far_")
            Me._columnExchange_Rate_Far_.ExtendedProperties.Add("Generator_UserColumnName", "Exchange Rate(Far)")
            MyBase.Columns.Add(Me._columnExchange_Rate_Far_)
            Me.columnBroker = New Global.System.Data.DataColumn("Broker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBroker)
            Me.columnBroker_Name = New Global.System.Data.DataColumn("Broker Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBroker_Name)
            Me.columnBrokerage_CCY = New Global.System.Data.DataColumn("Brokerage CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrokerage_CCY)
            Me.columnBrokerage_Amount = New Global.System.Data.DataColumn("Brokerage Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrokerage_Amount)
            Me.columnProdcut_Type = New Global.System.Data.DataColumn("Prodcut Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProdcut_Type)
            Me.columnGL_Master = New Global.System.Data.DataColumn("GL Master", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_Master)
            Me.columnRisk_Country = New Global.System.Data.DataColumn("Risk Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRisk_Country)
            Me.columnResident_Country = New Global.System.Data.DataColumn("Resident Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResident_Country)
            Me.columnInstitutional_Sector = New Global.System.Data.DataColumn("Institutional Sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstitutional_Sector)
            Me.columnMaker = New Global.System.Data.DataColumn("Maker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaker)
            Me._columnFixing_Date_NDF_ = New Global.System.Data.DataColumn("Fixing Date(NDF)", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFixing_Date_NDF_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFixing_Date_NDF_")
            Me._columnFixing_Date_NDF_.ExtendedProperties.Add("Generator_UserColumnName", "Fixing Date(NDF)")
            MyBase.Columns.Add(Me._columnFixing_Date_NDF_)
            Me._columnFixing_Rate_NDF_ = New Global.System.Data.DataColumn("Fixing Rate(NDF)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFixing_Rate_NDF_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFixing_Rate_NDF_")
            Me._columnFixing_Rate_NDF_.ExtendedProperties.Add("Generator_UserColumnName", "Fixing Rate(NDF)")
            MyBase.Columns.Add(Me._columnFixing_Rate_NDF_)
            Me.columnPortfolio = New Global.System.Data.DataColumn("Portfolio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPortfolio)
            Me.columnSWAPNEAR = New Global.System.Data.DataColumn("SWAPNEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWAPNEAR)
            Me.columnSWAPFAR = New Global.System.Data.DataColumn("SWAPFAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWAPFAR)
            Me.columnREVAL_FX_RATE_S = New Global.System.Data.DataColumn("REVAL_FX_RATE_S", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVAL_FX_RATE_S)
            Me.columnREVAL_FX_RATE_S2 = New Global.System.Data.DataColumn("REVAL_FX_RATE_S2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVAL_FX_RATE_S2)
            Me.columnREVAL_FX_RATE_B = New Global.System.Data.DataColumn("REVAL_FX_RATE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVAL_FX_RATE_B)
            Me.columnREVAL_FX_RATE_B2 = New Global.System.Data.DataColumn("REVAL_FX_RATE_B2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVAL_FX_RATE_B2)
            Me.columnINDUSTRY_LC = New Global.System.Data.DataColumn("INDUSTRY_LC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDUSTRY_LC)
            Me.columnContractNrFar = New Global.System.Data.DataColumn("ContractNrFar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNrFar)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnOwnDeal = New Global.System.Data.DataColumn("OwnDeal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOwnDeal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnOCBS_CI_NO.MaxLength = 255
            Me.columnClientName_.MaxLength = 255
            Me.columnClient_Type.MaxLength = 255
            Me.columnBank_Ind.MaxLength = 255
            Me.columnContractNo.MaxLength = 255
            Me.columnContract_Type.MaxLength = 255
            Me.columnSPOT_FWD_SW_FLG.MaxLength = 255
            Me.columnAccountingCenter.MaxLength = 255
            Me._columnB_S.MaxLength = 255
            Me.columnDeal_Currency.MaxLength = 255
            Me.columnCCY_B.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnCCY_S.MaxLength = 255
            Me.columnBroker.MaxLength = 255
            Me.columnBroker_Name.MaxLength = 255
            Me.columnBrokerage_CCY.MaxLength = 255
            Me.columnProdcut_Type.MaxLength = 255
            Me.columnGL_Master.MaxLength = 255
            Me.columnRisk_Country.MaxLength = 255
            Me.columnResident_Country.MaxLength = 255
            Me.columnInstitutional_Sector.MaxLength = 255
            Me.columnMaker.MaxLength = 255
            Me.columnPortfolio.MaxLength = 255
            Me.columnSWAPNEAR.MaxLength = 255
            Me.columnSWAPFAR.MaxLength = 255
            Me.columnINDUSTRY_LC.MaxLength = 255
            Me.columnContractNrFar.MaxLength = 50
            Me.columnRemarks.MaxLength = 255
            Me.columnOwnDeal.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewFX_ALLRow() As FX_ALLRow
            Return CType(Me.NewRow,FX_ALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FX_ALLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FX_ALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FX_ALLRowChangedEvent) Is Nothing) Then
                RaiseEvent FX_ALLRowChanged(Me, New FX_ALLRowChangeEvent(CType(e.Row,FX_ALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FX_ALLRowChangingEvent) Is Nothing) Then
                RaiseEvent FX_ALLRowChanging(Me, New FX_ALLRowChangeEvent(CType(e.Row,FX_ALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FX_ALLRowDeletedEvent) Is Nothing) Then
                RaiseEvent FX_ALLRowDeleted(Me, New FX_ALLRowChangeEvent(CType(e.Row,FX_ALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FX_ALLRowDeletingEvent) Is Nothing) Then
                RaiseEvent FX_ALLRowDeleting(Me, New FX_ALLRowChangeEvent(CType(e.Row,FX_ALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveFX_ALLRow(ByVal row As FX_ALLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FX_ALLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FX_PairsDataTable
        Inherits Global.System.Data.TypedTableBase(Of FX_PairsRow)
        
        Private columnContractNr As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnContractType As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnInput_Date As Global.System.Data.DataColumn
        
        Private columnValueDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private _columnB_S As Global.System.Data.DataColumn
        
        Private columnBuy_CCY As Global.System.Data.DataColumn
        
        Private columnBuy_Amount As Global.System.Data.DataColumn
        
        Private columnSell_CCY As Global.System.Data.DataColumn
        
        Private columnSell_Amount As Global.System.Data.DataColumn
        
        Private columnExchange_Rate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FX_Pairs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContractTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Input_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInput_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property _B_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Buy_CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuy_CCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Buy_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuy_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sell_CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell_CCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sell_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Exchange_RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchange_Rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FX_PairsRow
            Get
                Return CType(Me.Rows(index),FX_PairsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_PairsRowChanging As FX_PairsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_PairsRowChanged As FX_PairsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_PairsRowDeleting As FX_PairsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event FX_PairsRowDeleted As FX_PairsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddFX_PairsRow(ByVal row As FX_PairsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddFX_PairsRow(ByVal ContractNr As String, ByVal Type As String, ByVal ClientNr As String, ByVal ClientName As String, ByVal ContractType As String, ByVal ProductType As String, ByVal Input_Date As Date, ByVal ValueDate As Date, ByVal MaturityDate As Date, ByVal _B_S As String, ByVal Buy_CCY As String, ByVal Buy_Amount As Double, ByVal Sell_CCY As String, ByVal Sell_Amount As Double, ByVal Exchange_Rate As Double) As FX_PairsRow
            Dim rowFX_PairsRow As FX_PairsRow = CType(Me.NewRow,FX_PairsRow)
            Dim columnValuesArray() As Object = New Object() {ContractNr, Type, ClientNr, ClientName, ContractType, ProductType, Input_Date, ValueDate, MaturityDate, _B_S, Buy_CCY, Buy_Amount, Sell_CCY, Sell_Amount, Exchange_Rate}
            rowFX_PairsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFX_PairsRow)
            Return rowFX_PairsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FX_PairsDataTable = CType(MyBase.Clone,FX_PairsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FX_PairsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnContractNr = MyBase.Columns("ContractNr")
            Me.columnType = MyBase.Columns("Type")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnContractType = MyBase.Columns("ContractType")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnInput_Date = MyBase.Columns("Input Date")
            Me.columnValueDate = MyBase.Columns("ValueDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me._columnB_S = MyBase.Columns("B/S")
            Me.columnBuy_CCY = MyBase.Columns("Buy CCY")
            Me.columnBuy_Amount = MyBase.Columns("Buy Amount")
            Me.columnSell_CCY = MyBase.Columns("Sell CCY")
            Me.columnSell_Amount = MyBase.Columns("Sell Amount")
            Me.columnExchange_Rate = MyBase.Columns("Exchange Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnContractNr = New Global.System.Data.DataColumn("ContractNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNr)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnContractType = New Global.System.Data.DataColumn("ContractType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractType)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnInput_Date = New Global.System.Data.DataColumn("Input Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInput_Date)
            Me.columnValueDate = New Global.System.Data.DataColumn("ValueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me._columnB_S = New Global.System.Data.DataColumn("B/S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_S.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_S")
            Me._columnB_S.ExtendedProperties.Add("Generator_UserColumnName", "B/S")
            MyBase.Columns.Add(Me._columnB_S)
            Me.columnBuy_CCY = New Global.System.Data.DataColumn("Buy CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuy_CCY)
            Me.columnBuy_Amount = New Global.System.Data.DataColumn("Buy Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuy_Amount)
            Me.columnSell_CCY = New Global.System.Data.DataColumn("Sell CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell_CCY)
            Me.columnSell_Amount = New Global.System.Data.DataColumn("Sell Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell_Amount)
            Me.columnExchange_Rate = New Global.System.Data.DataColumn("Exchange Rate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchange_Rate)
            Me.columnContractNr.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnClientNr.MaxLength = 255
            Me.columnClientName.MaxLength = 255
            Me.columnContractType.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me._columnB_S.MaxLength = 255
            Me.columnBuy_CCY.MaxLength = 255
            Me.columnSell_CCY.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewFX_PairsRow() As FX_PairsRow
            Return CType(Me.NewRow,FX_PairsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FX_PairsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FX_PairsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FX_PairsRowChangedEvent) Is Nothing) Then
                RaiseEvent FX_PairsRowChanged(Me, New FX_PairsRowChangeEvent(CType(e.Row,FX_PairsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FX_PairsRowChangingEvent) Is Nothing) Then
                RaiseEvent FX_PairsRowChanging(Me, New FX_PairsRowChangeEvent(CType(e.Row,FX_PairsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FX_PairsRowDeletedEvent) Is Nothing) Then
                RaiseEvent FX_PairsRowDeleted(Me, New FX_PairsRowChangeEvent(CType(e.Row,FX_PairsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FX_PairsRowDeletingEvent) Is Nothing) Then
                RaiseEvent FX_PairsRowDeleting(Me, New FX_PairsRowChangeEvent(CType(e.Row,FX_PairsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveFX_PairsRow(ByVal row As FX_PairsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TreasuryDataSet = New TreasuryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FX_PairsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CUSTOMER_RATINGRow
        Inherits Global.System.Data.DataRow
        
        Private tableCUSTOMER_RATING As CUSTOMER_RATINGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCUSTOMER_RATING = CType(Me.Table,CUSTOMER_RATINGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCUSTOMER_RATING.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ClientNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNo' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ClientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ClientGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroup' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ClientGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ClientGroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroupName' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ClientGroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rating' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CoreDefinition() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.CoreDefinitionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CoreDefinition' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.CoreDefinitionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StandardPoorsRating() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.StandardPoorsRatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StandardPoorsRating' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.StandardPoorsRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MoodysRating() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.MoodysRatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MoodysRating' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.MoodysRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FitchRating() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.FitchRatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FitchRating' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.FitchRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MainlandBranchRating() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.MainlandBranchRatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainlandBranchRating' in table 'CUSTOMER_RATING' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.MainlandBranchRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.PDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PD' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.PDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ER_25() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ER_25Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ER_25' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ER_25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ER_45() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ER_45Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ER_45' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ER_45Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ActiveRatingCalculation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.ActiveRatingCalculationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActiveRatingCalculation' in table 'CUSTOMER_RATING' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.ActiveRatingCalculationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RatingExceptions() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUSTOMER_RATING.RatingExceptionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RatingExceptions' in table 'CUSTOMER_RATING' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUSTOMER_RATING.RatingExceptionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNoNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ClientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNoNull()
            Me(Me.tableCUSTOMER_RATING.ClientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ClientGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNull()
            Me(Me.tableCUSTOMER_RATING.ClientGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ClientGroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNameNull()
            Me(Me.tableCUSTOMER_RATING.ClientGroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableCUSTOMER_RATING.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRatingNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRatingNull()
            Me(Me.tableCUSTOMER_RATING.RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCoreDefinitionNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.CoreDefinitionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCoreDefinitionNull()
            Me(Me.tableCUSTOMER_RATING.CoreDefinitionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStandardPoorsRatingNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.StandardPoorsRatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStandardPoorsRatingNull()
            Me(Me.tableCUSTOMER_RATING.StandardPoorsRatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMoodysRatingNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.MoodysRatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMoodysRatingNull()
            Me(Me.tableCUSTOMER_RATING.MoodysRatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFitchRatingNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.FitchRatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFitchRatingNull()
            Me(Me.tableCUSTOMER_RATING.FitchRatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMainlandBranchRatingNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.MainlandBranchRatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMainlandBranchRatingNull()
            Me(Me.tableCUSTOMER_RATING.MainlandBranchRatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPDNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.PDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPDNull()
            Me(Me.tableCUSTOMER_RATING.PDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsER_25Null() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ER_25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetER_25Null()
            Me(Me.tableCUSTOMER_RATING.ER_25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsER_45Null() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ER_45Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetER_45Null()
            Me(Me.tableCUSTOMER_RATING.ER_45Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsActiveRatingCalculationNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.ActiveRatingCalculationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetActiveRatingCalculationNull()
            Me(Me.tableCUSTOMER_RATING.ActiveRatingCalculationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRatingExceptionsNull() As Boolean
            Return Me.IsNull(Me.tableCUSTOMER_RATING.RatingExceptionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRatingExceptionsNull()
            Me(Me.tableCUSTOMER_RATING.RatingExceptionsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
        Inherits Global.System.Data.DataRow
        
        Private tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME = CType(Me.Table,FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'FX CREDIT EQUIVALENT Basic REAL TIME' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroup' in table 'FX CREDIT EQUIVALENT Basic REAL TIME"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroupName' in table 'FX CREDIT EQUIVALENT Basic REAL "& _ 
                            "TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SumEURequ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.SumEURequColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumEURequ' in table 'FX CREDIT EQUIVALENT Basic REAL TIME' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.SumEURequColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CreditEquivelantAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditEquivelantAmount' in table 'FX CREDIT EQUIVALENT Basi"& _ 
                            "c REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CreditEquivelantAmountTill1Jear() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountTill1JearColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditEquivelantAmountTill1Jear' in table 'FX CREDIT EQUIVA"& _ 
                            "LENT Basic REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountTill1JearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CreditEquivelantAmountOver1Till2Years() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver1Till2YearsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditEquivelantAmountOver1Till2Years' in table 'FX CREDIT "& _ 
                            "EQUIVALENT Basic REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver1Till2YearsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CreditEquivelantAmountOver2Years() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver2YearsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditEquivelantAmountOver2Years' in table 'FX CREDIT EQUIV"& _ 
                            "ALENT Basic REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver2YearsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CreditRiskAmountSUM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditRiskAmountSUMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditRiskAmountSUM' in table 'FX CREDIT EQUIVALENT Basic R"& _ 
                            "EAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditRiskAmountSUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNameNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.ClientGroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSumEURequNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.SumEURequColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSumEURequNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.SumEURequColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCreditEquivelantAmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCreditEquivelantAmountNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCreditEquivelantAmountTill1JearNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountTill1JearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCreditEquivelantAmountTill1JearNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountTill1JearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCreditEquivelantAmountOver1Till2YearsNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver1Till2YearsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCreditEquivelantAmountOver1Till2YearsNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver1Till2YearsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCreditEquivelantAmountOver2YearsNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver2YearsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCreditEquivelantAmountOver2YearsNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditEquivelantAmountOver2YearsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCreditRiskAmountSUMNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditRiskAmountSUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCreditRiskAmountSUMNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Basic_REAL_TIME.CreditRiskAmountSUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function GetFX_CREDIT_EQUIVALENT_Details_REAL_TIMERows() As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow()
            If (Me.Table.ChildRelations("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME") Is Nothing) Then
                Return New FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME")),FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
        Inherits Global.System.Data.DataRow
        
        Private tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME As FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME = CType(Me.Table,FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroup' in table 'FX CREDIT EQUIVALENT Details REAL TI"& _ 
                            "ME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientGroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientGroupName' in table 'FX CREDIT EQUIVALENT Details REA"& _ 
                            "L TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'FX CREDIT EQUIVALENT Details REAL TIME"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final_Maturity_Date' in table 'FX CREDIT EQUIVALENT Details"& _ 
                            " REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MonthToEvent() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonthToEvent' in table 'FX CREDIT EQUIVALENT Details REAL T"& _ 
                            "IME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property YearToEvent() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.YearToEventColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearToEvent' in table 'FX CREDIT EQUIVALENT Details REAL TI"& _ 
                            "ME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.YearToEventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OrgCcy() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrgCcy' in table 'FX CREDIT EQUIVALENT Details REAL TIME' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OrgCcyAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrgCcyAmount' in table 'FX CREDIT EQUIVALENT Details REAL T"& _ 
                            "IME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EURequ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EURequ' in table 'FX CREDIT EQUIVALENT Details REAL TIME' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PercentCalculation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.PercentCalculationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PercentCalculation' in table 'FX CREDIT EQUIVALENT Details "& _ 
                            "REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.PercentCalculationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EURequCalculated() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequCalculatedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EURequCalculated' in table 'FX CREDIT EQUIVALENT Details RE"& _ 
                            "AL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequCalculatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'FX CREDIT EQUIVALENT Details REAL TIME'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property IdFX_CRED_EQU_BASIC() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IdFX_CRED_EQU_BASICColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdFX_CRED_EQU_BASIC' in table 'FX CREDIT EQUIVALENT Details"& _ 
                            " REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IdFX_CRED_EQU_BASICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Client_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client_No' in table 'FX CREDIT EQUIVALENT Details REAL TIME"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Client_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client_Name' in table 'FX CREDIT EQUIVALENT Details REAL TI"& _ 
                            "ME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ExchangeRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'FX CREDIT EQUIVALENT Details REAL T"& _ 
                            "IME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InputType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.InputTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputType' in table 'FX CREDIT EQUIVALENT Details REAL TIME"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.InputTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TradeDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.TradeDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeDate' in table 'FX CREDIT EQUIVALENT Details REAL TIME"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.TradeDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Contract() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract' in table 'FX CREDIT EQUIVALENT Details REAL TIME'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContractType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractType' in table 'FX CREDIT EQUIVALENT Details REAL T"& _ 
                            "IME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Modified_Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Modified_Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modified_Final_Maturity_Date' in table 'FX CREDIT EQUIVALEN"& _ 
                            "T Details REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Modified_Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MonthToEventStartDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventStartDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonthToEventStartDate' in table 'FX CREDIT EQUIVALENT Detai"& _ 
                            "ls REAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AmountType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.AmountTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountType' in table 'FX CREDIT EQUIVALENT Details REAL TIM"& _ 
                            "E' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.AmountTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ModifiedStartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ModifiedStartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedStartDate' in table 'FX CREDIT EQUIVALENT Details R"& _ 
                            "EAL TIME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ModifiedStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow() As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME")),FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FX CREDIT EQUIVALENT Details REAL TIME_FX CREDIT EQUIVALENT Basic REAL TIME"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientGroupNameNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ClientGroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinal_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinal_Maturity_DateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMonthToEventNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMonthToEventNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearToEventNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.YearToEventColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearToEventNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.YearToEventColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrgCcyNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrgCcyNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrgCcyAmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrgCcyAmountNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.OrgCcyAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEURequNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEURequNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPercentCalculationNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.PercentCalculationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPercentCalculationNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.PercentCalculationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEURequCalculatedNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequCalculatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEURequCalculatedNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.EURequCalculatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsIdFX_CRED_EQU_BASICNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IdFX_CRED_EQU_BASICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetIdFX_CRED_EQU_BASICNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.IdFX_CRED_EQU_BASICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClient_NoNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClient_NoNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClient_NameNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClient_NameNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Client_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInputTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.InputTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInputTypeNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.InputTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTradeDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.TradeDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTradeDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.TradeDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractTypeNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ContractTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsModified_Final_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Modified_Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetModified_Final_Maturity_DateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.Modified_Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMonthToEventStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMonthToEventStartDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.MonthToEventStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAmountTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.AmountTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAmountTypeNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.AmountTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsModifiedStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ModifiedStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetModifiedStartDateNull()
            Me(Me.tableFX_CREDIT_EQUIVALENT_Details_REAL_TIME.ModifiedStartDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OWN_CURRENCIESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOWN_CURRENCIES As OWN_CURRENCIESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOWN_CURRENCIES = CType(Me.Table,OWN_CURRENCIESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableOWN_CURRENCIES.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CURRENCY_CODE() As String
            Get
                Return CType(Me(Me.tableOWN_CURRENCIES.CURRENCY_CODEColumn),String)
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CURRENCY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableOWN_CURRENCIES.CURRENCY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY NAME' in table 'OWN_CURRENCIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.CURRENCY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OWN_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOWN_CURRENCIES.OWN_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OWN CURRENCY' in table 'OWN_CURRENCIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.OWN_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ACCEPTS_DECIMALS() As String
            Get
                Try 
                    Return CType(Me(Me.tableOWN_CURRENCIES.ACCEPTS_DECIMALSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCEPTS DECIMALS' in table 'OWN_CURRENCIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.ACCEPTS_DECIMALSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SPREAD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableOWN_CURRENCIES.SPREADColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPREAD' in table 'OWN_CURRENCIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.SPREADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VALID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOWN_CURRENCIES.VALIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALID' in table 'OWN_CURRENCIES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOWN_CURRENCIES.VALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCURRENCY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableOWN_CURRENCIES.CURRENCY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCURRENCY_NAMENull()
            Me(Me.tableOWN_CURRENCIES.CURRENCY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOWN_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableOWN_CURRENCIES.OWN_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOWN_CURRENCYNull()
            Me(Me.tableOWN_CURRENCIES.OWN_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsACCEPTS_DECIMALSNull() As Boolean
            Return Me.IsNull(Me.tableOWN_CURRENCIES.ACCEPTS_DECIMALSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetACCEPTS_DECIMALSNull()
            Me(Me.tableOWN_CURRENCIES.ACCEPTS_DECIMALSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSPREADNull() As Boolean
            Return Me.IsNull(Me.tableOWN_CURRENCIES.SPREADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSPREADNull()
            Me(Me.tableOWN_CURRENCIES.SPREADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVALIDNull() As Boolean
            Return Me.IsNull(Me.tableOWN_CURRENCIES.VALIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVALIDNull()
            Me(Me.tableOWN_CURRENCIES.VALIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FX_ALLRow
        Inherits Global.System.Data.DataRow
        
        Private tableFX_ALL As FX_ALLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFX_ALL = CType(Me.Table,FX_ALLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFX_ALL.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFX_ALL.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OCBS_CI_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.OCBS_CI_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_CI_NO' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.OCBS_CI_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientName_() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.ClientName_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName ' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.ClientName_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Client_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Client_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Client Type' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Client_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bank_Ind() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Bank_IndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bank Ind' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Bank_IndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContractNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.ContractNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNo' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.ContractNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Contract_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Contract_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract Type' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Contract_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SPOT_FWD_SW_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.SPOT_FWD_SW_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPOT_FWD_SW_FLG' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.SPOT_FWD_SW_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AccountingCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.AccountingCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountingCenter' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.AccountingCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _B_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._B_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B/S' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._B_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Input_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Input_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Input Date' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Input_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Start_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Start_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Start Date' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Start_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property End_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.End_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'End Date' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.End_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAR_START_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.FAR_START_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAR_START_DATE' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.FAR_START_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAR_END_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.FAR_END_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAR_END_DATE' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.FAR_END_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Deal_Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Deal_CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deal Currency' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Deal_CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Deal_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Deal_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deal Amount' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Deal_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CCY_B() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.CCY_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY_B' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.CCY_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AMT_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.AMT_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT_B' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.AMT_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CCY_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.CCY_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY_S' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.CCY_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AMT_S() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.AMT_SColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT_S' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.AMT_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AMT_B_Far() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.AMT_B_FarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT_B_Far' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.AMT_B_FarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AMT_S_Far() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.AMT_S_FarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT_S_Far' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.AMT_S_FarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Net_Receive_NDF_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._Net_Receive_NDF_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Net Receive(NDF)' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._Net_Receive_NDF_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Net_Pay_NDF_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._Net_Pay_NDF_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Net Pay(NDF)' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._Net_Pay_NDF_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Exchange_Rate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Exchange_RateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Exchange Rate' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Exchange_RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Exchange_Rate_Far_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._Exchange_Rate_Far_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Exchange Rate(Far)' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._Exchange_Rate_Far_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Broker() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.BrokerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Broker' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.BrokerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Broker_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Broker_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Broker Name' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Broker_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Brokerage_CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Brokerage_CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Brokerage CCY' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Brokerage_CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Brokerage_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Brokerage_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Brokerage Amount' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Brokerage_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Prodcut_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Prodcut_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prodcut Type' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Prodcut_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GL_Master() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.GL_MasterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL Master' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.GL_MasterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Risk_Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Risk_CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Risk Country' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Risk_CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Resident_Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Resident_CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resident Country' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Resident_CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Institutional_Sector() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.Institutional_SectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Institutional Sector' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.Institutional_SectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Maker() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.MakerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Maker' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.MakerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Fixing_Date_NDF_() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._Fixing_Date_NDF_Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fixing Date(NDF)' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._Fixing_Date_NDF_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Fixing_Rate_NDF_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL._Fixing_Rate_NDF_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fixing Rate(NDF)' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL._Fixing_Rate_NDF_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Portfolio() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.PortfolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Portfolio' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.PortfolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SWAPNEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.SWAPNEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWAPNEAR' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.SWAPNEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SWAPFAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.SWAPFARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWAPFAR' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.SWAPFARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REVAL_FX_RATE_S() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.REVAL_FX_RATE_SColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVAL_FX_RATE_S' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.REVAL_FX_RATE_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REVAL_FX_RATE_S2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.REVAL_FX_RATE_S2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVAL_FX_RATE_S2' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.REVAL_FX_RATE_S2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REVAL_FX_RATE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.REVAL_FX_RATE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVAL_FX_RATE_B' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.REVAL_FX_RATE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property REVAL_FX_RATE_B2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.REVAL_FX_RATE_B2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVAL_FX_RATE_B2' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.REVAL_FX_RATE_B2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property INDUSTRY_LC() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.INDUSTRY_LCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INDUSTRY_LC' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.INDUSTRY_LCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContractNrFar() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.ContractNrFarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNrFar' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.ContractNrFarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OwnDeal() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_ALL.OwnDealColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OwnDeal' in table 'FX ALL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_ALL.OwnDealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOCBS_CI_NONull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.OCBS_CI_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOCBS_CI_NONull()
            Me(Me.tableFX_ALL.OCBS_CI_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientName_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.ClientName_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientName_Null()
            Me(Me.tableFX_ALL.ClientName_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClient_TypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Client_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClient_TypeNull()
            Me(Me.tableFX_ALL.Client_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBank_IndNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Bank_IndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBank_IndNull()
            Me(Me.tableFX_ALL.Bank_IndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNoNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.ContractNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNoNull()
            Me(Me.tableFX_ALL.ContractNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContract_TypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Contract_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContract_TypeNull()
            Me(Me.tableFX_ALL.Contract_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSPOT_FWD_SW_FLGNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.SPOT_FWD_SW_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSPOT_FWD_SW_FLGNull()
            Me(Me.tableFX_ALL.SPOT_FWD_SW_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAccountingCenterNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.AccountingCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAccountingCenterNull()
            Me(Me.tableFX_ALL.AccountingCenterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_B_SNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._B_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_B_SNull()
            Me(Me.tableFX_ALL._B_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInput_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Input_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInput_DateNull()
            Me(Me.tableFX_ALL.Input_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Start_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStart_DateNull()
            Me(Me.tableFX_ALL.Start_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.End_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEnd_DateNull()
            Me(Me.tableFX_ALL.End_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAR_START_DATENull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.FAR_START_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAR_START_DATENull()
            Me(Me.tableFX_ALL.FAR_START_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAR_END_DATENull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.FAR_END_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAR_END_DATENull()
            Me(Me.tableFX_ALL.FAR_END_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDeal_CurrencyNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Deal_CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDeal_CurrencyNull()
            Me(Me.tableFX_ALL.Deal_CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDeal_AmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Deal_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDeal_AmountNull()
            Me(Me.tableFX_ALL.Deal_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCCY_BNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.CCY_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCCY_BNull()
            Me(Me.tableFX_ALL.CCY_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAMT_BNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.AMT_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAMT_BNull()
            Me(Me.tableFX_ALL.AMT_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatusNull()
            Me(Me.tableFX_ALL.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCCY_SNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.CCY_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCCY_SNull()
            Me(Me.tableFX_ALL.CCY_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAMT_SNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.AMT_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAMT_SNull()
            Me(Me.tableFX_ALL.AMT_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAMT_B_FarNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.AMT_B_FarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAMT_B_FarNull()
            Me(Me.tableFX_ALL.AMT_B_FarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAMT_S_FarNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.AMT_S_FarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAMT_S_FarNull()
            Me(Me.tableFX_ALL.AMT_S_FarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_Net_Receive_NDF_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._Net_Receive_NDF_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_Net_Receive_NDF_Null()
            Me(Me.tableFX_ALL._Net_Receive_NDF_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_Net_Pay_NDF_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._Net_Pay_NDF_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_Net_Pay_NDF_Null()
            Me(Me.tableFX_ALL._Net_Pay_NDF_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchange_RateNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Exchange_RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchange_RateNull()
            Me(Me.tableFX_ALL.Exchange_RateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_Exchange_Rate_Far_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._Exchange_Rate_Far_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_Exchange_Rate_Far_Null()
            Me(Me.tableFX_ALL._Exchange_Rate_Far_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBrokerNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.BrokerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBrokerNull()
            Me(Me.tableFX_ALL.BrokerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBroker_NameNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Broker_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBroker_NameNull()
            Me(Me.tableFX_ALL.Broker_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBrokerage_CCYNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Brokerage_CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBrokerage_CCYNull()
            Me(Me.tableFX_ALL.Brokerage_CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBrokerage_AmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Brokerage_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBrokerage_AmountNull()
            Me(Me.tableFX_ALL.Brokerage_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProdcut_TypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Prodcut_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProdcut_TypeNull()
            Me(Me.tableFX_ALL.Prodcut_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGL_MasterNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.GL_MasterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGL_MasterNull()
            Me(Me.tableFX_ALL.GL_MasterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRisk_CountryNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Risk_CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRisk_CountryNull()
            Me(Me.tableFX_ALL.Risk_CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsResident_CountryNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Resident_CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetResident_CountryNull()
            Me(Me.tableFX_ALL.Resident_CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInstitutional_SectorNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.Institutional_SectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInstitutional_SectorNull()
            Me(Me.tableFX_ALL.Institutional_SectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMakerNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.MakerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMakerNull()
            Me(Me.tableFX_ALL.MakerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_Fixing_Date_NDF_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._Fixing_Date_NDF_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_Fixing_Date_NDF_Null()
            Me(Me.tableFX_ALL._Fixing_Date_NDF_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_Fixing_Rate_NDF_Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL._Fixing_Rate_NDF_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_Fixing_Rate_NDF_Null()
            Me(Me.tableFX_ALL._Fixing_Rate_NDF_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPortfolioNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.PortfolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPortfolioNull()
            Me(Me.tableFX_ALL.PortfolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSWAPNEARNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.SWAPNEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSWAPNEARNull()
            Me(Me.tableFX_ALL.SWAPNEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSWAPFARNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.SWAPFARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSWAPFARNull()
            Me(Me.tableFX_ALL.SWAPFARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsREVAL_FX_RATE_SNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.REVAL_FX_RATE_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetREVAL_FX_RATE_SNull()
            Me(Me.tableFX_ALL.REVAL_FX_RATE_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsREVAL_FX_RATE_S2Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.REVAL_FX_RATE_S2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetREVAL_FX_RATE_S2Null()
            Me(Me.tableFX_ALL.REVAL_FX_RATE_S2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsREVAL_FX_RATE_BNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.REVAL_FX_RATE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetREVAL_FX_RATE_BNull()
            Me(Me.tableFX_ALL.REVAL_FX_RATE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsREVAL_FX_RATE_B2Null() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.REVAL_FX_RATE_B2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetREVAL_FX_RATE_B2Null()
            Me(Me.tableFX_ALL.REVAL_FX_RATE_B2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsINDUSTRY_LCNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.INDUSTRY_LCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetINDUSTRY_LCNull()
            Me(Me.tableFX_ALL.INDUSTRY_LCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNrFarNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.ContractNrFarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNrFarNull()
            Me(Me.tableFX_ALL.ContractNrFarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRemarksNull()
            Me(Me.tableFX_ALL.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOwnDealNull() As Boolean
            Return Me.IsNull(Me.tableFX_ALL.OwnDealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOwnDealNull()
            Me(Me.tableFX_ALL.OwnDealColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FX_PairsRow
        Inherits Global.System.Data.DataRow
        
        Private tableFX_Pairs As FX_PairsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFX_Pairs = CType(Me.Table,FX_PairsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContractNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ContractNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNr' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ContractNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContractType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ContractTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractType' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ContractTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Input_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Input_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Input Date' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Input_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.ValueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueDate' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.ValueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _B_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs._B_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B/S' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs._B_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Buy_CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Buy_CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Buy CCY' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Buy_CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Buy_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Buy_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Buy Amount' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Buy_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sell_CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Sell_CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sell CCY' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Sell_CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sell_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Sell_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sell Amount' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Sell_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Exchange_Rate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFX_Pairs.Exchange_RateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Exchange Rate' in table 'FX_Pairs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFX_Pairs.Exchange_RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractNrNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ContractNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractNrNull()
            Me(Me.tableFX_Pairs.ContractNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableFX_Pairs.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableFX_Pairs.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableFX_Pairs.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContractTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ContractTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContractTypeNull()
            Me(Me.tableFX_Pairs.ContractTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableFX_Pairs.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInput_DateNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Input_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInput_DateNull()
            Me(Me.tableFX_Pairs.Input_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.ValueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueDateNull()
            Me(Me.tableFX_Pairs.ValueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableFX_Pairs.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_B_SNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs._B_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_B_SNull()
            Me(Me.tableFX_Pairs._B_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBuy_CCYNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Buy_CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBuy_CCYNull()
            Me(Me.tableFX_Pairs.Buy_CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBuy_AmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Buy_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBuy_AmountNull()
            Me(Me.tableFX_Pairs.Buy_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSell_CCYNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Sell_CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSell_CCYNull()
            Me(Me.tableFX_Pairs.Sell_CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSell_AmountNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Sell_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSell_AmountNull()
            Me(Me.tableFX_Pairs.Sell_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsExchange_RateNull() As Boolean
            Return Me.IsNull(Me.tableFX_Pairs.Exchange_RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetExchange_RateNull()
            Me(Me.tableFX_Pairs.Exchange_RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class CUSTOMER_RATINGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CUSTOMER_RATINGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As CUSTOMER_RATINGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As CUSTOMER_RATINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class FX_CREDIT_EQUIVALENT_Details_REAL_TIMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As FX_CREDIT_EQUIVALENT_Details_REAL_TIMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class OWN_CURRENCIESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OWN_CURRENCIESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As OWN_CURRENCIESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As OWN_CURRENCIESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class FX_ALLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FX_ALLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As FX_ALLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As FX_ALLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class FX_PairsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FX_PairsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As FX_PairsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As FX_PairsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TreasuryDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CUSTOMER_RATINGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CUSTOMER_RATING"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ClientNo", "ClientNo")
            tableMapping.ColumnMappings.Add("ClientGroup", "ClientGroup")
            tableMapping.ColumnMappings.Add("ClientGroupName", "ClientGroupName")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("Rating", "Rating")
            tableMapping.ColumnMappings.Add("CoreDefinition", "CoreDefinition")
            tableMapping.ColumnMappings.Add("StandardPoorsRating", "StandardPoorsRating")
            tableMapping.ColumnMappings.Add("MoodysRating", "MoodysRating")
            tableMapping.ColumnMappings.Add("FitchRating", "FitchRating")
            tableMapping.ColumnMappings.Add("MainlandBranchRating", "MainlandBranchRating")
            tableMapping.ColumnMappings.Add("PD", "PD")
            tableMapping.ColumnMappings.Add("ER_25", "ER_25")
            tableMapping.ColumnMappings.Add("ER_45", "ER_45")
            tableMapping.ColumnMappings.Add("ActiveRatingCalculation", "ActiveRatingCalculation")
            tableMapping.ColumnMappings.Add("RatingExceptions", "RatingExceptions")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CUSTOMER_RATING] WHERE (([ID] = @Original_ID) AND ((@IsNull_ClientNo"& _ 
                " = 1 AND [ClientNo] IS NULL) OR ([ClientNo] = @Original_ClientNo)) AND ((@IsNull"& _ 
                "_ClientGroup = 1 AND [ClientGroup] IS NULL) OR ([ClientGroup] = @Original_Client"& _ 
                "Group)) AND ((@IsNull_ClientGroupName = 1 AND [ClientGroupName] IS NULL) OR ([Cl"& _ 
                "ientGroupName] = @Original_ClientGroupName)) AND ((@IsNull_ClientName = 1 AND [C"& _ 
                "lientName] IS NULL) OR ([ClientName] = @Original_ClientName)) AND ((@IsNull_Rati"& _ 
                "ng = 1 AND [Rating] IS NULL) OR ([Rating] = @Original_Rating)) AND ((@IsNull_Cor"& _ 
                "eDefinition = 1 AND [CoreDefinition] IS NULL) OR ([CoreDefinition] = @Original_C"& _ 
                "oreDefinition)) AND ((@IsNull_StandardPoorsRating = 1 AND [StandardPoorsRating] "& _ 
                "IS NULL) OR ([StandardPoorsRating] = @Original_StandardPoorsRating)) AND ((@IsNu"& _ 
                "ll_MoodysRating = 1 AND [MoodysRating] IS NULL) OR ([MoodysRating] = @Original_M"& _ 
                "oodysRating)) AND ((@IsNull_FitchRating = 1 AND [FitchRating] IS NULL) OR ([Fitc"& _ 
                "hRating] = @Original_FitchRating)) AND ((@IsNull_MainlandBranchRating = 1 AND [M"& _ 
                "ainlandBranchRating] IS NULL) OR ([MainlandBranchRating] = @Original_MainlandBra"& _ 
                "nchRating)) AND ((@IsNull_PD = 1 AND [PD] IS NULL) OR ([PD] = @Original_PD)) AND"& _ 
                " ((@IsNull_ER_25 = 1 AND [ER_25] IS NULL) OR ([ER_25] = @Original_ER_25)) AND (("& _ 
                "@IsNull_ER_45 = 1 AND [ER_45] IS NULL) OR ([ER_45] = @Original_ER_45)) AND ((@Is"& _ 
                "Null_ActiveRatingCalculation = 1 AND [ActiveRatingCalculation] IS NULL) OR ([Act"& _ 
                "iveRatingCalculation] = @Original_ActiveRatingCalculation)) AND ((@IsNull_Rating"& _ 
                "Exceptions = 1 AND [RatingExceptions] IS NULL) OR ([RatingExceptions] = @Origina"& _ 
                "l_RatingExceptions)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Rating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoreDefinition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoreDefinition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StandardPoorsRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StandardPoorsRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MoodysRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MoodysRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FitchRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FitchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MainlandBranchRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MainlandBranchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ER_25", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ER_25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ER_45", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ER_45", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ActiveRatingCalculation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ActiveRatingCalculation", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RatingExceptions", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RatingExceptions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CUSTOMER_RATING] ([ClientNo], [ClientGroup], [ClientGroupName], [Cli"& _ 
                "entName], [Rating], [CoreDefinition], [StandardPoorsRating], [MoodysRating], [Fi"& _ 
                "tchRating], [MainlandBranchRating], [PD], [ER_25], [ER_45], [ActiveRatingCalcula"& _ 
                "tion], [RatingExceptions]) VALUES (@ClientNo, @ClientGroup, @ClientGroupName, @C"& _ 
                "lientName, @Rating, @CoreDefinition, @StandardPoorsRating, @MoodysRating, @Fitch"& _ 
                "Rating, @MainlandBranchRating, @PD, @ER_25, @ER_45, @ActiveRatingCalculation, @R"& _ 
                "atingExceptions)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoreDefinition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StandardPoorsRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoodysRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FitchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MainlandBranchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ER_25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ER_45", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ActiveRatingCalculation", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RatingExceptions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CUSTOMER_RATING] SET [ClientNo] = @ClientNo, [ClientGroup] = @ClientGroup"& _ 
                ", [ClientGroupName] = @ClientGroupName, [ClientName] = @ClientName, [Rating] = @"& _ 
                "Rating, [CoreDefinition] = @CoreDefinition, [StandardPoorsRating] = @StandardPoo"& _ 
                "rsRating, [MoodysRating] = @MoodysRating, [FitchRating] = @FitchRating, [Mainlan"& _ 
                "dBranchRating] = @MainlandBranchRating, [PD] = @PD, [ER_25] = @ER_25, [ER_45] = "& _ 
                "@ER_45, [ActiveRatingCalculation] = @ActiveRatingCalculation, [RatingExceptions]"& _ 
                " = @RatingExceptions WHERE (([ID] = @Original_ID) AND ((@IsNull_ClientNo = 1 AND"& _ 
                " [ClientNo] IS NULL) OR ([ClientNo] = @Original_ClientNo)) AND ((@IsNull_ClientG"& _ 
                "roup = 1 AND [ClientGroup] IS NULL) OR ([ClientGroup] = @Original_ClientGroup)) "& _ 
                "AND ((@IsNull_ClientGroupName = 1 AND [ClientGroupName] IS NULL) OR ([ClientGrou"& _ 
                "pName] = @Original_ClientGroupName)) AND ((@IsNull_ClientName = 1 AND [ClientNam"& _ 
                "e] IS NULL) OR ([ClientName] = @Original_ClientName)) AND ((@IsNull_Rating = 1 A"& _ 
                "ND [Rating] IS NULL) OR ([Rating] = @Original_Rating)) AND ((@IsNull_CoreDefinit"& _ 
                "ion = 1 AND [CoreDefinition] IS NULL) OR ([CoreDefinition] = @Original_CoreDefin"& _ 
                "ition)) AND ((@IsNull_StandardPoorsRating = 1 AND [StandardPoorsRating] IS NULL)"& _ 
                " OR ([StandardPoorsRating] = @Original_StandardPoorsRating)) AND ((@IsNull_Moody"& _ 
                "sRating = 1 AND [MoodysRating] IS NULL) OR ([MoodysRating] = @Original_MoodysRat"& _ 
                "ing)) AND ((@IsNull_FitchRating = 1 AND [FitchRating] IS NULL) OR ([FitchRating]"& _ 
                " = @Original_FitchRating)) AND ((@IsNull_MainlandBranchRating = 1 AND [MainlandB"& _ 
                "ranchRating] IS NULL) OR ([MainlandBranchRating] = @Original_MainlandBranchRatin"& _ 
                "g)) AND ((@IsNull_PD = 1 AND [PD] IS NULL) OR ([PD] = @Original_PD)) AND ((@IsNu"& _ 
                "ll_ER_25 = 1 AND [ER_25] IS NULL) OR ([ER_25] = @Original_ER_25)) AND ((@IsNull_"& _ 
                "ER_45 = 1 AND [ER_45] IS NULL) OR ([ER_45] = @Original_ER_45)) AND ((@IsNull_Act"& _ 
                "iveRatingCalculation = 1 AND [ActiveRatingCalculation] IS NULL) OR ([ActiveRatin"& _ 
                "gCalculation] = @Original_ActiveRatingCalculation)) AND ((@IsNull_RatingExceptio"& _ 
                "ns = 1 AND [RatingExceptions] IS NULL) OR ([RatingExceptions] = @Original_Rating"& _ 
                "Exceptions)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoreDefinition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StandardPoorsRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoodysRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FitchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MainlandBranchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ER_25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ER_45", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ActiveRatingCalculation", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RatingExceptions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Rating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CoreDefinition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CoreDefinition", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CoreDefinition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StandardPoorsRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StandardPoorsRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StandardPoorsRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MoodysRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MoodysRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoodysRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FitchRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FitchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FitchRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MainlandBranchRating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MainlandBranchRating", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MainlandBranchRating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ER_25", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ER_25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_25", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ER_45", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ER_45", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ER_45", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ActiveRatingCalculation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ActiveRatingCalculation", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActiveRatingCalculation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RatingExceptions", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RatingExceptions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RatingExceptions", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ClientNo, ClientGroup, ClientGroupName, ClientName, Rating, Cor"& _ 
                "eDefinition, StandardPoorsRating, MoodysRating, FitchRating, MainlandBranchRatin"& _ 
                "g, PD, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ER_25, ER_45, ActiveRatingCalculation, RatingE"& _ 
                "xceptions"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CUSTOMER_RATING"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TreasuryDataSet.CUSTOMER_RATINGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TreasuryDataSet.CUSTOMER_RATINGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.CUSTOMER_RATINGDataTable = New TreasuryDataSet.CUSTOMER_RATINGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TreasuryDataSet.CUSTOMER_RATINGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TreasuryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CUSTOMER_RATING")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ClientNo As String,  _
                    ByVal Original_ClientGroup As String,  _
                    ByVal Original_ClientGroupName As String,  _
                    ByVal Original_ClientName As String,  _
                    ByVal Original_Rating As String,  _
                    ByVal Original_CoreDefinition As String,  _
                    ByVal Original_StandardPoorsRating As String,  _
                    ByVal Original_MoodysRating As String,  _
                    ByVal Original_FitchRating As String,  _
                    ByVal Original_MainlandBranchRating As String,  _
                    ByVal Original_PD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ER_25 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ER_45 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ActiveRatingCalculation As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RatingExceptions As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ClientNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ClientNo,String)
            End If
            If (Original_ClientGroup Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ClientGroup,String)
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_ClientName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ClientName,String)
            End If
            If (Original_Rating Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Rating,String)
            End If
            If (Original_CoreDefinition Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CoreDefinition,String)
            End If
            If (Original_StandardPoorsRating Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_StandardPoorsRating,String)
            End If
            If (Original_MoodysRating Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MoodysRating,String)
            End If
            If (Original_FitchRating Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_FitchRating,String)
            End If
            If (Original_MainlandBranchRating Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MainlandBranchRating,String)
            End If
            If (Original_PD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PD.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ER_25.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_ER_25.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ER_45.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ER_45.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ActiveRatingCalculation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_ActiveRatingCalculation.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_RatingExceptions Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_RatingExceptions,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClientNo As String, ByVal ClientGroup As String, ByVal ClientGroupName As String, ByVal ClientName As String, ByVal Rating As String, ByVal CoreDefinition As String, ByVal StandardPoorsRating As String, ByVal MoodysRating As String, ByVal FitchRating As String, ByVal MainlandBranchRating As String, ByVal PD As Global.System.Nullable(Of Double), ByVal ER_25 As Global.System.Nullable(Of Double), ByVal ER_45 As Global.System.Nullable(Of Double), ByVal ActiveRatingCalculation As Global.System.Nullable(Of Boolean), ByVal RatingExceptions As String) As Integer
            If (ClientNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClientNo,String)
            End If
            If (ClientGroup Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientGroup,String)
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientGroupName,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ClientName,String)
            End If
            If (Rating Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Rating,String)
            End If
            If (CoreDefinition Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CoreDefinition,String)
            End If
            If (StandardPoorsRating Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(StandardPoorsRating,String)
            End If
            If (MoodysRating Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MoodysRating,String)
            End If
            If (FitchRating Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FitchRating,String)
            End If
            If (MainlandBranchRating Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MainlandBranchRating,String)
            End If
            If (PD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PD.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ER_25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ER_25.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ER_45.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ER_45.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ActiveRatingCalculation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ActiveRatingCalculation.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RatingExceptions Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RatingExceptions,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ClientNo As String,  _
                    ByVal ClientGroup As String,  _
                    ByVal ClientGroupName As String,  _
                    ByVal ClientName As String,  _
                    ByVal Rating As String,  _
                    ByVal CoreDefinition As String,  _
                    ByVal StandardPoorsRating As String,  _
                    ByVal MoodysRating As String,  _
                    ByVal FitchRating As String,  _
                    ByVal MainlandBranchRating As String,  _
                    ByVal PD As Global.System.Nullable(Of Double),  _
                    ByVal ER_25 As Global.System.Nullable(Of Double),  _
                    ByVal ER_45 As Global.System.Nullable(Of Double),  _
                    ByVal ActiveRatingCalculation As Global.System.Nullable(Of Boolean),  _
                    ByVal RatingExceptions As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ClientNo As String,  _
                    ByVal Original_ClientGroup As String,  _
                    ByVal Original_ClientGroupName As String,  _
                    ByVal Original_ClientName As String,  _
                    ByVal Original_Rating As String,  _
                    ByVal Original_CoreDefinition As String,  _
                    ByVal Original_StandardPoorsRating As String,  _
                    ByVal Original_MoodysRating As String,  _
                    ByVal Original_FitchRating As String,  _
                    ByVal Original_MainlandBranchRating As String,  _
                    ByVal Original_PD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ER_25 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ER_45 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ActiveRatingCalculation As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RatingExceptions As String) As Integer
            If (ClientNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClientNo,String)
            End If
            If (ClientGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientGroup,String)
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientGroupName,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ClientName,String)
            End If
            If (Rating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Rating,String)
            End If
            If (CoreDefinition Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CoreDefinition,String)
            End If
            If (StandardPoorsRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(StandardPoorsRating,String)
            End If
            If (MoodysRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MoodysRating,String)
            End If
            If (FitchRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FitchRating,String)
            End If
            If (MainlandBranchRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MainlandBranchRating,String)
            End If
            If (PD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ER_25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ER_25.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ER_45.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ER_45.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ActiveRatingCalculation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ActiveRatingCalculation.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RatingExceptions Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RatingExceptions,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID,Integer)
            If (Original_ClientNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ClientNo,String)
            End If
            If (Original_ClientGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ClientGroup,String)
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ClientName,String)
            End If
            If (Original_Rating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Rating,String)
            End If
            If (Original_CoreDefinition Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_CoreDefinition,String)
            End If
            If (Original_StandardPoorsRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_StandardPoorsRating,String)
            End If
            If (Original_MoodysRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_MoodysRating,String)
            End If
            If (Original_FitchRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_FitchRating,String)
            End If
            If (Original_MainlandBranchRating Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_MainlandBranchRating,String)
            End If
            If (Original_PD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_ER_25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ER_25.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_ER_45.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_ER_45.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_ActiveRatingCalculation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_ActiveRatingCalculation.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_RatingExceptions Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_RatingExceptions,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FX CREDIT EQUIVALENT Basic REAL TIME"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            tableMapping.ColumnMappings.Add("ClientGroup", "ClientGroup")
            tableMapping.ColumnMappings.Add("ClientGroupName", "ClientGroupName")
            tableMapping.ColumnMappings.Add("SumEURequ", "SumEURequ")
            tableMapping.ColumnMappings.Add("CreditEquivelantAmount", "CreditEquivelantAmount")
            tableMapping.ColumnMappings.Add("CreditEquivelantAmountTill1Jear", "CreditEquivelantAmountTill1Jear")
            tableMapping.ColumnMappings.Add("CreditEquivelantAmountOver1Till2Years", "CreditEquivelantAmountOver1Till2Years")
            tableMapping.ColumnMappings.Add("CreditEquivelantAmountOver2Years", "CreditEquivelantAmountOver2Years")
            tableMapping.ColumnMappings.Add("CreditRiskAmountSUM", "CreditRiskAmountSUM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FX CREDIT EQUIVALENT Basic REAL TIME] WHERE (([ID] = @Original_ID) A"& _ 
                "ND ((@IsNull_RiskDate = 1 AND [RiskDate] IS NULL) OR ([RiskDate] = @Original_Ris"& _ 
                "kDate)) AND ((@IsNull_ClientGroup = 1 AND [ClientGroup] IS NULL) OR ([ClientGrou"& _ 
                "p] = @Original_ClientGroup)) AND ((@IsNull_ClientGroupName = 1 AND [ClientGroupN"& _ 
                "ame] IS NULL) OR ([ClientGroupName] = @Original_ClientGroupName)) AND ((@IsNull_"& _ 
                "SumEURequ = 1 AND [SumEURequ] IS NULL) OR ([SumEURequ] = @Original_SumEURequ)) A"& _ 
                "ND ((@IsNull_CreditEquivelantAmount = 1 AND [CreditEquivelantAmount] IS NULL) OR"& _ 
                " ([CreditEquivelantAmount] = @Original_CreditEquivelantAmount)) AND ((@IsNull_Cr"& _ 
                "editEquivelantAmountTill1Jear = 1 AND [CreditEquivelantAmountTill1Jear] IS NULL)"& _ 
                " OR ([CreditEquivelantAmountTill1Jear] = @Original_CreditEquivelantAmountTill1Je"& _ 
                "ar)) AND ((@IsNull_CreditEquivelantAmountOver1Till2Years = 1 AND [CreditEquivela"& _ 
                "ntAmountOver1Till2Years] IS NULL) OR ([CreditEquivelantAmountOver1Till2Years] = "& _ 
                "@Original_CreditEquivelantAmountOver1Till2Years)) AND ((@IsNull_CreditEquivelant"& _ 
                "AmountOver2Years = 1 AND [CreditEquivelantAmountOver2Years] IS NULL) OR ([Credit"& _ 
                "EquivelantAmountOver2Years] = @Original_CreditEquivelantAmountOver2Years)) AND ("& _ 
                "(@IsNull_CreditRiskAmountSUM = 1 AND [CreditRiskAmountSUM] IS NULL) OR ([CreditR"& _ 
                "iskAmountSUM] = @Original_CreditRiskAmountSUM)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SumEURequ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SumEURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditRiskAmountSUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditRiskAmountSUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FX CREDIT EQUIVALENT Basic REAL TIME] ([RiskDate], [ClientGroup], [C"& _ 
                "lientGroupName], [SumEURequ], [CreditEquivelantAmount], [CreditEquivelantAmountT"& _ 
                "ill1Jear], [CreditEquivelantAmountOver1Till2Years], [CreditEquivelantAmountOver2"& _ 
                "Years], [CreditRiskAmountSUM]) VALUES (@RiskDate, @ClientGroup, @ClientGroupName"& _ 
                ", @SumEURequ, @CreditEquivelantAmount, @CreditEquivelantAmountTill1Jear, @Credit"& _ 
                "EquivelantAmountOver1Till2Years, @CreditEquivelantAmountOver2Years, @CreditRiskA"& _ 
                "mountSUM)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumEURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditRiskAmountSUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FX CREDIT EQUIVALENT Basic REAL TIME] SET [RiskDate] = @RiskDate, [Client"& _ 
                "Group] = @ClientGroup, [ClientGroupName] = @ClientGroupName, [SumEURequ] = @SumE"& _ 
                "URequ, [CreditEquivelantAmount] = @CreditEquivelantAmount, [CreditEquivelantAmou"& _ 
                "ntTill1Jear] = @CreditEquivelantAmountTill1Jear, [CreditEquivelantAmountOver1Til"& _ 
                "l2Years] = @CreditEquivelantAmountOver1Till2Years, [CreditEquivelantAmountOver2Y"& _ 
                "ears] = @CreditEquivelantAmountOver2Years, [CreditRiskAmountSUM] = @CreditRiskAm"& _ 
                "ountSUM WHERE (([ID] = @Original_ID) AND ((@IsNull_RiskDate = 1 AND [RiskDate] I"& _ 
                "S NULL) OR ([RiskDate] = @Original_RiskDate)) AND ((@IsNull_ClientGroup = 1 AND "& _ 
                "[ClientGroup] IS NULL) OR ([ClientGroup] = @Original_ClientGroup)) AND ((@IsNull"& _ 
                "_ClientGroupName = 1 AND [ClientGroupName] IS NULL) OR ([ClientGroupName] = @Ori"& _ 
                "ginal_ClientGroupName)) AND ((@IsNull_SumEURequ = 1 AND [SumEURequ] IS NULL) OR "& _ 
                "([SumEURequ] = @Original_SumEURequ)) AND ((@IsNull_CreditEquivelantAmount = 1 AN"& _ 
                "D [CreditEquivelantAmount] IS NULL) OR ([CreditEquivelantAmount] = @Original_Cre"& _ 
                "ditEquivelantAmount)) AND ((@IsNull_CreditEquivelantAmountTill1Jear = 1 AND [Cre"& _ 
                "ditEquivelantAmountTill1Jear] IS NULL) OR ([CreditEquivelantAmountTill1Jear] = @"& _ 
                "Original_CreditEquivelantAmountTill1Jear)) AND ((@IsNull_CreditEquivelantAmountO"& _ 
                "ver1Till2Years = 1 AND [CreditEquivelantAmountOver1Till2Years] IS NULL) OR ([Cre"& _ 
                "ditEquivelantAmountOver1Till2Years] = @Original_CreditEquivelantAmountOver1Till2"& _ 
                "Years)) AND ((@IsNull_CreditEquivelantAmountOver2Years = 1 AND [CreditEquivelant"& _ 
                "AmountOver2Years] IS NULL) OR ([CreditEquivelantAmountOver2Years] = @Original_Cr"& _ 
                "editEquivelantAmountOver2Years)) AND ((@IsNull_CreditRiskAmountSUM = 1 AND [Cred"& _ 
                "itRiskAmountSUM] IS NULL) OR ([CreditRiskAmountSUM] = @Original_CreditRiskAmount"& _ 
                "SUM)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumEURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditRiskAmountSUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SumEURequ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SumEURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumEURequ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountTill1Jear", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountTill1Jear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountOver1Till2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver1Till2Years", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditEquivelantAmountOver2Years", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditEquivelantAmountOver2Years", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditRiskAmountSUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditRiskAmountSUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditRiskAmountSUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, RiskDate, ClientGroup, ClientGroupName, SumEURequ, CreditEquive"& _ 
                "lantAmount, CreditEquivelantAmountTill1Jear, CreditEquivelantAmountOver1Till2Yea"& _ 
                "rs, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CreditEquivelantAmountOver2Years, CreditRiskAmoun"& _ 
                "tSUM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [FX CREDIT EQUIVALENT Basic REAL TIME]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ClientGroup, ClientGroupName, CreditEquivelantAmount, CreditEquivelantAmou"& _ 
                "ntOver1Till2Years, CreditEquivelantAmountOver2Years, CreditEquivelantAmountTill1"& _ 
                "Jear, CreditRiskAmountSUM, ID, RiskDate, SumEURequ FROM [FX CREDIT EQUIVALENT Ba"& _ 
                "sic REAL TIME] WHERE (RiskDate = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable = New TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable = New TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TreasuryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FX CREDIT EQUIVALENT Basic REAL TIME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_RiskDate As Global.System.Nullable(Of Date), ByVal Original_ClientGroup As Global.System.Nullable(Of Integer), ByVal Original_ClientGroupName As String, ByVal Original_SumEURequ As Global.System.Nullable(Of Double), ByVal Original_CreditEquivelantAmount As Global.System.Nullable(Of Double), ByVal Original_CreditEquivelantAmountTill1Jear As Global.System.Nullable(Of Double), ByVal Original_CreditEquivelantAmountOver1Till2Years As Global.System.Nullable(Of Double), ByVal Original_CreditEquivelantAmountOver2Years As Global.System.Nullable(Of Double), ByVal Original_CreditRiskAmountSUM As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ClientGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_SumEURequ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SumEURequ.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CreditEquivelantAmount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountTill1Jear.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CreditEquivelantAmountTill1Jear.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountOver1Till2Years.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CreditEquivelantAmountOver1Till2Years.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountOver2Years.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CreditEquivelantAmountOver2Years.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditRiskAmountSUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CreditRiskAmountSUM.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RiskDate As Global.System.Nullable(Of Date), ByVal ClientGroup As Global.System.Nullable(Of Integer), ByVal ClientGroupName As String, ByVal SumEURequ As Global.System.Nullable(Of Double), ByVal CreditEquivelantAmount As Global.System.Nullable(Of Double), ByVal CreditEquivelantAmountTill1Jear As Global.System.Nullable(Of Double), ByVal CreditEquivelantAmountOver1Till2Years As Global.System.Nullable(Of Double), ByVal CreditEquivelantAmountOver2Years As Global.System.Nullable(Of Double), ByVal CreditRiskAmountSUM As Global.System.Nullable(Of Double)) As Integer
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ClientGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientGroupName,String)
            End If
            If (SumEURequ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SumEURequ.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CreditEquivelantAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountTill1Jear.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CreditEquivelantAmountTill1Jear.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountOver1Till2Years.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CreditEquivelantAmountOver1Till2Years.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountOver2Years.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CreditEquivelantAmountOver2Years.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CreditRiskAmountSUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CreditRiskAmountSUM.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal ClientGroupName As String,  _
                    ByVal SumEURequ As Global.System.Nullable(Of Double),  _
                    ByVal CreditEquivelantAmount As Global.System.Nullable(Of Double),  _
                    ByVal CreditEquivelantAmountTill1Jear As Global.System.Nullable(Of Double),  _
                    ByVal CreditEquivelantAmountOver1Till2Years As Global.System.Nullable(Of Double),  _
                    ByVal CreditEquivelantAmountOver2Years As Global.System.Nullable(Of Double),  _
                    ByVal CreditRiskAmountSUM As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ClientGroupName As String,  _
                    ByVal Original_SumEURequ As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditEquivelantAmount As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditEquivelantAmountTill1Jear As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditEquivelantAmountOver1Till2Years As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditEquivelantAmountOver2Years As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditRiskAmountSUM As Global.System.Nullable(Of Double)) As Integer
            If (RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ClientGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientGroupName,String)
            End If
            If (SumEURequ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SumEURequ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CreditEquivelantAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountTill1Jear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CreditEquivelantAmountTill1Jear.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountOver1Till2Years.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CreditEquivelantAmountOver1Till2Years.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CreditEquivelantAmountOver2Years.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CreditEquivelantAmountOver2Years.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CreditRiskAmountSUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CreditRiskAmountSUM.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ID,Integer)
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ClientGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_SumEURequ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SumEURequ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_CreditEquivelantAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountTill1Jear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CreditEquivelantAmountTill1Jear.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountOver1Till2Years.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_CreditEquivelantAmountOver1Till2Years.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditEquivelantAmountOver2Years.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_CreditEquivelantAmountOver2Years.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditRiskAmountSUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_CreditRiskAmountSUM.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FX CREDIT EQUIVALENT Details REAL TIME"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ClientGroup", "ClientGroup")
            tableMapping.ColumnMappings.Add("ClientGroupName", "ClientGroupName")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("Final_Maturity_Date", "Final_Maturity_Date")
            tableMapping.ColumnMappings.Add("MonthToEvent", "MonthToEvent")
            tableMapping.ColumnMappings.Add("YearToEvent", "YearToEvent")
            tableMapping.ColumnMappings.Add("OrgCcy", "OrgCcy")
            tableMapping.ColumnMappings.Add("OrgCcyAmount", "OrgCcyAmount")
            tableMapping.ColumnMappings.Add("EURequ", "EURequ")
            tableMapping.ColumnMappings.Add("PercentCalculation", "PercentCalculation")
            tableMapping.ColumnMappings.Add("EURequCalculated", "EURequCalculated")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            tableMapping.ColumnMappings.Add("IdFX_CRED_EQU_BASIC", "IdFX_CRED_EQU_BASIC")
            tableMapping.ColumnMappings.Add("Client_No", "Client_No")
            tableMapping.ColumnMappings.Add("Client_Name", "Client_Name")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            tableMapping.ColumnMappings.Add("InputType", "InputType")
            tableMapping.ColumnMappings.Add("TradeDate", "TradeDate")
            tableMapping.ColumnMappings.Add("Contract", "Contract")
            tableMapping.ColumnMappings.Add("ContractType", "ContractType")
            tableMapping.ColumnMappings.Add("Modified_Final_Maturity_Date", "Modified_Final_Maturity_Date")
            tableMapping.ColumnMappings.Add("MonthToEventStartDate", "MonthToEventStartDate")
            tableMapping.ColumnMappings.Add("AmountType", "AmountType")
            tableMapping.ColumnMappings.Add("ModifiedStartDate", "ModifiedStartDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FX CREDIT EQUIVALENT Details REAL TIME] WHERE (([ID] = @Original_ID)"& _ 
                " AND ((@IsNull_ClientGroup = 1 AND [ClientGroup] IS NULL) OR ([ClientGroup] = @O"& _ 
                "riginal_ClientGroup)) AND ((@IsNull_ClientGroupName = 1 AND [ClientGroupName] IS"& _ 
                " NULL) OR ([ClientGroupName] = @Original_ClientGroupName)) AND ((@IsNull_StartDa"& _ 
                "te = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@I"& _ 
                "sNull_Final_Maturity_Date = 1 AND [Final_Maturity_Date] IS NULL) OR ([Final_Matu"& _ 
                "rity_Date] = @Original_Final_Maturity_Date)) AND ((@IsNull_MonthToEvent = 1 AND "& _ 
                "[MonthToEvent] IS NULL) OR ([MonthToEvent] = @Original_MonthToEvent)) AND ((@IsN"& _ 
                "ull_YearToEvent = 1 AND [YearToEvent] IS NULL) OR ([YearToEvent] = @Original_Yea"& _ 
                "rToEvent)) AND ((@IsNull_OrgCcy = 1 AND [OrgCcy] IS NULL) OR ([OrgCcy] = @Origin"& _ 
                "al_OrgCcy)) AND ((@IsNull_OrgCcyAmount = 1 AND [OrgCcyAmount] IS NULL) OR ([OrgC"& _ 
                "cyAmount] = @Original_OrgCcyAmount)) AND ((@IsNull_EURequ = 1 AND [EURequ] IS NU"& _ 
                "LL) OR ([EURequ] = @Original_EURequ)) AND ((@IsNull_PercentCalculation = 1 AND ["& _ 
                "PercentCalculation] IS NULL) OR ([PercentCalculation] = @Original_PercentCalcula"& _ 
                "tion)) AND ((@IsNull_EURequCalculated = 1 AND [EURequCalculated] IS NULL) OR ([E"& _ 
                "URequCalculated] = @Original_EURequCalculated)) AND ((@IsNull_RiskDate = 1 AND ["& _ 
                "RiskDate] IS NULL) OR ([RiskDate] = @Original_RiskDate)) AND ((@IsNull_IdFX_CRED"& _ 
                "_EQU_BASIC = 1 AND [IdFX_CRED_EQU_BASIC] IS NULL) OR ([IdFX_CRED_EQU_BASIC] = @O"& _ 
                "riginal_IdFX_CRED_EQU_BASIC)) AND ((@IsNull_Client_Name = 1 AND [Client_Name] IS"& _ 
                " NULL) OR ([Client_Name] = @Original_Client_Name)) AND ((@IsNull_Client_No = 1 A"& _ 
                "ND [Client_No] IS NULL) OR ([Client_No] = @Original_Client_No)) AND ((@IsNull_Ex"& _ 
                "changeRate = 1 AND [ExchangeRate] IS NULL) OR ([ExchangeRate] = @Original_Exchan"& _ 
                "geRate)) AND ((@IsNull_InputType = 1 AND [InputType] IS NULL) OR ([InputType] = "& _ 
                "@Original_InputType)) AND ((@IsNull_TradeDate = 1 AND [TradeDate] IS NULL) OR (["& _ 
                "TradeDate] = @Original_TradeDate)) AND ((@IsNull_Contract = 1 AND [Contract] IS "& _ 
                "NULL) OR ([Contract] = @Original_Contract)) AND ((@IsNull_ContractType = 1 AND ["& _ 
                "ContractType] IS NULL) OR ([ContractType] = @Original_ContractType)) AND ((@IsNu"& _ 
                "ll_Modified_Final_Maturity_Date = 1 AND [Modified_Final_Maturity_Date] IS NULL) "& _ 
                "OR ([Modified_Final_Maturity_Date] = @Original_Modified_Final_Maturity_Date)) AN"& _ 
                "D ((@IsNull_MonthToEventStartDate = 1 AND [MonthToEventStartDate] IS NULL) OR (["& _ 
                "MonthToEventStartDate] = @Original_MonthToEventStartDate)) AND ((@IsNull_AmountT"& _ 
                "ype = 1 AND [AmountType] IS NULL) OR ([AmountType] = @Original_AmountType)) AND "& _ 
                "((@IsNull_ModifiedStartDate = 1 AND [ModifiedStartDate] IS NULL) OR ([ModifiedSt"& _ 
                "artDate] = @Original_ModifiedStartDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Final_Maturity_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MonthToEvent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MonthToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearToEvent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrgCcy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrgCcy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrgCcyAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrgCcyAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EURequ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PercentCalculation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PercentCalculation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EURequCalculated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EURequCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TradeDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MonthToEventStartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MonthToEventStartDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AmountType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AmountType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModifiedStartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModifiedStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FX CREDIT EQUIVALENT Details REAL TIME] ([ClientGroup], [ClientGroup"& _ 
                "Name], [StartDate], [Final_Maturity_Date], [MonthToEvent], [YearToEvent], [OrgCc"& _ 
                "y], [OrgCcyAmount], [EURequ], [PercentCalculation], [EURequCalculated], [RiskDat"& _ 
                "e], [IdFX_CRED_EQU_BASIC], [Client_Name], [Client_No], [ExchangeRate], [InputTyp"& _ 
                "e], [TradeDate], [Contract], [ContractType], [Modified_Final_Maturity_Date], [Mo"& _ 
                "nthToEventStartDate], [AmountType], [ModifiedStartDate]) VALUES (@ClientGroup, @"& _ 
                "ClientGroupName, @StartDate, @Final_Maturity_Date, @MonthToEvent, @YearToEvent, "& _ 
                "@OrgCcy, @OrgCcyAmount, @EURequ, @PercentCalculation, @EURequCalculated, @RiskDa"& _ 
                "te, @IdFX_CRED_EQU_BASIC, @Client_Name, @Client_No, @ExchangeRate, @InputType, @"& _ 
                "TradeDate, @Contract, @ContractType, @Modified_Final_Maturity_Date, @MonthToEven"& _ 
                "tStartDate, @AmountType, @ModifiedStartDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrgCcy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrgCcyAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PercentCalculation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EURequCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthToEventStartDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FX CREDIT EQUIVALENT Details REAL TIME] SET [ClientGroup] = @ClientGroup,"& _ 
                " [ClientGroupName] = @ClientGroupName, [StartDate] = @StartDate, [Final_Maturity"& _ 
                "_Date] = @Final_Maturity_Date, [MonthToEvent] = @MonthToEvent, [YearToEvent] = @"& _ 
                "YearToEvent, [OrgCcy] = @OrgCcy, [OrgCcyAmount] = @OrgCcyAmount, [EURequ] = @EUR"& _ 
                "equ, [PercentCalculation] = @PercentCalculation, [EURequCalculated] = @EURequCal"& _ 
                "culated, [RiskDate] = @RiskDate, [IdFX_CRED_EQU_BASIC] = @IdFX_CRED_EQU_BASIC, ["& _ 
                "Client_Name] = @Client_Name, [Client_No] = @Client_No, [ExchangeRate] = @Exchang"& _ 
                "eRate, [InputType] = @InputType, [TradeDate] = @TradeDate, [Contract] = @Contrac"& _ 
                "t, [ContractType] = @ContractType, [Modified_Final_Maturity_Date] = @Modified_Fi"& _ 
                "nal_Maturity_Date, [MonthToEventStartDate] = @MonthToEventStartDate, [AmountType"& _ 
                "] = @AmountType, [ModifiedStartDate] = @ModifiedStartDate WHERE (([ID] = @Origin"& _ 
                "al_ID) AND ((@IsNull_ClientGroup = 1 AND [ClientGroup] IS NULL) OR ([ClientGroup"& _ 
                "] = @Original_ClientGroup)) AND ((@IsNull_ClientGroupName = 1 AND [ClientGroupNa"& _ 
                "me] IS NULL) OR ([ClientGroupName] = @Original_ClientGroupName)) AND ((@IsNull_S"& _ 
                "tartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AN"& _ 
                "D ((@IsNull_Final_Maturity_Date = 1 AND [Final_Maturity_Date] IS NULL) OR ([Fina"& _ 
                "l_Maturity_Date] = @Original_Final_Maturity_Date)) AND ((@IsNull_MonthToEvent = "& _ 
                "1 AND [MonthToEvent] IS NULL) OR ([MonthToEvent] = @Original_MonthToEvent)) AND "& _ 
                "((@IsNull_YearToEvent = 1 AND [YearToEvent] IS NULL) OR ([YearToEvent] = @Origin"& _ 
                "al_YearToEvent)) AND ((@IsNull_OrgCcy = 1 AND [OrgCcy] IS NULL) OR ([OrgCcy] = @"& _ 
                "Original_OrgCcy)) AND ((@IsNull_OrgCcyAmount = 1 AND [OrgCcyAmount] IS NULL) OR "& _ 
                "([OrgCcyAmount] = @Original_OrgCcyAmount)) AND ((@IsNull_EURequ = 1 AND [EURequ]"& _ 
                " IS NULL) OR ([EURequ] = @Original_EURequ)) AND ((@IsNull_PercentCalculation = 1"& _ 
                " AND [PercentCalculation] IS NULL) OR ([PercentCalculation] = @Original_PercentC"& _ 
                "alculation)) AND ((@IsNull_EURequCalculated = 1 AND [EURequCalculated] IS NULL) "& _ 
                "OR ([EURequCalculated] = @Original_EURequCalculated)) AND ((@IsNull_RiskDate = 1"& _ 
                " AND [RiskDate] IS NULL) OR ([RiskDate] = @Original_RiskDate)) AND ((@IsNull_IdF"& _ 
                "X_CRED_EQU_BASIC = 1 AND [IdFX_CRED_EQU_BASIC] IS NULL) OR ([IdFX_CRED_EQU_BASIC"& _ 
                "] = @Original_IdFX_CRED_EQU_BASIC)) AND ((@IsNull_Client_Name = 1 AND [Client_Na"& _ 
                "me] IS NULL) OR ([Client_Name] = @Original_Client_Name)) AND ((@IsNull_Client_No"& _ 
                " = 1 AND [Client_No] IS NULL) OR ([Client_No] = @Original_Client_No)) AND ((@IsN"& _ 
                "ull_ExchangeRate = 1 AND [ExchangeRate] IS NULL) OR ([ExchangeRate] = @Original_"& _ 
                "ExchangeRate)) AND ((@IsNull_InputType = 1 AND [InputType] IS NULL) OR ([InputTy"& _ 
                "pe] = @Original_InputType)) AND ((@IsNull_TradeDate = 1 AND [TradeDate] IS NULL)"& _ 
                " OR ([TradeDate] = @Original_TradeDate)) AND ((@IsNull_Contract = 1 AND [Contrac"& _ 
                "t] IS NULL) OR ([Contract] = @Original_Contract)) AND ((@IsNull_ContractType = 1"& _ 
                " AND [ContractType] IS NULL) OR ([ContractType] = @Original_ContractType)) AND ("& _ 
                "(@IsNull_Modified_Final_Maturity_Date = 1 AND [Modified_Final_Maturity_Date] IS "& _ 
                "NULL) OR ([Modified_Final_Maturity_Date] = @Original_Modified_Final_Maturity_Dat"& _ 
                "e)) AND ((@IsNull_MonthToEventStartDate = 1 AND [MonthToEventStartDate] IS NULL)"& _ 
                " OR ([MonthToEventStartDate] = @Original_MonthToEventStartDate)) AND ((@IsNull_A"& _ 
                "mountType = 1 AND [AmountType] IS NULL) OR ([AmountType] = @Original_AmountType)"& _ 
                ") AND ((@IsNull_ModifiedStartDate = 1 AND [ModifiedStartDate] IS NULL) OR ([Modi"& _ 
                "fiedStartDate] = @Original_ModifiedStartDate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrgCcy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrgCcyAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PercentCalculation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EURequCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthToEventStartDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientGroupName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientGroupName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientGroupName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Final_Maturity_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MonthToEvent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MonthToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEvent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearToEvent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearToEvent", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearToEvent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrgCcy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrgCcy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrgCcyAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrgCcyAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrgCcyAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EURequ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EURequ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PercentCalculation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PercentCalculation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PercentCalculation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EURequCalculated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EURequCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EURequCalculated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdFX_CRED_EQU_BASIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdFX_CRED_EQU_BASIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TradeDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Modified_Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Modified_Final_Maturity_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MonthToEventStartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MonthToEventStartDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthToEventStartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AmountType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AmountType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ModifiedStartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ModifiedStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedStartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ClientGroup, ClientGroupName, StartDate, Final_Maturity_Date, M"& _ 
                "onthToEvent, YearToEvent, OrgCcy, OrgCcyAmount, EURequ, PercentCalculation, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       EURequCalculated, RiskDate, IdFX_CRED_EQU_BASIC, Client_N"& _ 
                "ame, Client_No, ExchangeRate, InputType, TradeDate, Contract, ContractType, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       Modified_Final_Maturity_Date, MonthToEventStartDate, Amou"& _ 
                "ntType, ModifiedStartDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [FX CREDIT EQUIVALENT Details REAL TI"& _ 
                "ME]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Contract"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AmountType, ClientGroup, ClientGroupName, Client_Name, Client_No, Contract"& _ 
                ", ContractType, EURequ, EURequCalculated, ExchangeRate, Final_Maturity_Date, ID,"& _ 
                " IdFX_CRED_EQU_BASIC, InputType, ModifiedStartDate, Modified_Final_Maturity_Date"& _ 
                ", MonthToEvent, MonthToEventStartDate, OrgCcy, OrgCcyAmount, PercentCalculation,"& _ 
                " RiskDate, StartDate, TradeDate, YearToEvent FROM [FX CREDIT EQUIVALENT Details "& _ 
                "REAL TIME] WHERE (RiskDate = @Param1) ORDER BY Contract"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable = New TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable = New TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TreasuryDataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TreasuryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FX CREDIT EQUIVALENT Details REAL TIME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ClientGroupName As String,  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_MonthToEvent As Global.System.Nullable(Of Double),  _
                    ByVal Original_YearToEvent As Global.System.Nullable(Of Double),  _
                    ByVal Original_OrgCcy As String,  _
                    ByVal Original_OrgCcyAmount As Global.System.Nullable(Of Double),  _
                    ByVal Original_EURequ As Global.System.Nullable(Of Double),  _
                    ByVal Original_PercentCalculation As Global.System.Nullable(Of Double),  _
                    ByVal Original_EURequCalculated As Global.System.Nullable(Of Double),  _
                    ByVal Original_RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_IdFX_CRED_EQU_BASIC As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Client_Name As String,  _
                    ByVal Original_Client_No As String,  _
                    ByVal Original_ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_InputType As String,  _
                    ByVal Original_TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Contract As String,  _
                    ByVal Original_ContractType As String,  _
                    ByVal Original_Modified_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_MonthToEventStartDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_AmountType As String,  _
                    ByVal Original_ModifiedStartDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ClientGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ClientGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MonthToEvent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MonthToEvent.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_YearToEvent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_YearToEvent.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_OrgCcy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_OrgCcy,String)
            End If
            If (Original_OrgCcyAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_OrgCcyAmount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_EURequ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_EURequ.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PercentCalculation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PercentCalculation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_EURequCalculated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_EURequCalculated.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_IdFX_CRED_EQU_BASIC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IdFX_CRED_EQU_BASIC.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Client_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Client_Name,String)
            End If
            If (Original_Client_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Client_No,String)
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_InputType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_InputType,String)
            End If
            If (Original_TradeDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_TradeDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Contract Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Contract,String)
            End If
            If (Original_ContractType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_ContractType,String)
            End If
            If (Original_Modified_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Modified_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_MonthToEventStartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_MonthToEventStartDate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_AmountType,String)
            End If
            If (Original_ModifiedStartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_ModifiedStartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal ClientGroupName As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal MonthToEvent As Global.System.Nullable(Of Double),  _
                    ByVal YearToEvent As Global.System.Nullable(Of Double),  _
                    ByVal OrgCcy As String,  _
                    ByVal OrgCcyAmount As Global.System.Nullable(Of Double),  _
                    ByVal EURequ As Global.System.Nullable(Of Double),  _
                    ByVal PercentCalculation As Global.System.Nullable(Of Double),  _
                    ByVal EURequCalculated As Global.System.Nullable(Of Double),  _
                    ByVal RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal IdFX_CRED_EQU_BASIC As Global.System.Nullable(Of Integer),  _
                    ByVal Client_Name As String,  _
                    ByVal Client_No As String,  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal InputType As String,  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Contract As String,  _
                    ByVal ContractType As String,  _
                    ByVal Modified_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal MonthToEventStartDate As Global.System.Nullable(Of Double),  _
                    ByVal AmountType As String,  _
                    ByVal ModifiedStartDate As Global.System.Nullable(Of Date)) As Integer
            If (ClientGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClientGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientGroupName,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MonthToEvent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MonthToEvent.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (YearToEvent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(YearToEvent.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (OrgCcy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(OrgCcy,String)
            End If
            If (OrgCcyAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(OrgCcyAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (EURequ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(EURequ.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PercentCalculation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PercentCalculation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (EURequCalculated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(EURequCalculated.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IdFX_CRED_EQU_BASIC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IdFX_CRED_EQU_BASIC.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Client_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Client_Name,String)
            End If
            If (Client_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Client_No,String)
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (InputType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(InputType,String)
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Contract,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ContractType,String)
            End If
            If (Modified_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Modified_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MonthToEventStartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(MonthToEventStartDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AmountType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(AmountType,String)
            End If
            If (ModifiedStartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ModifiedStartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal ClientGroupName As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal MonthToEvent As Global.System.Nullable(Of Double),  _
                    ByVal YearToEvent As Global.System.Nullable(Of Double),  _
                    ByVal OrgCcy As String,  _
                    ByVal OrgCcyAmount As Global.System.Nullable(Of Double),  _
                    ByVal EURequ As Global.System.Nullable(Of Double),  _
                    ByVal PercentCalculation As Global.System.Nullable(Of Double),  _
                    ByVal EURequCalculated As Global.System.Nullable(Of Double),  _
                    ByVal RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal IdFX_CRED_EQU_BASIC As Global.System.Nullable(Of Integer),  _
                    ByVal Client_Name As String,  _
                    ByVal Client_No As String,  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal InputType As String,  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Contract As String,  _
                    ByVal ContractType As String,  _
                    ByVal Modified_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal MonthToEventStartDate As Global.System.Nullable(Of Double),  _
                    ByVal AmountType As String,  _
                    ByVal ModifiedStartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ClientGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ClientGroupName As String,  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_MonthToEvent As Global.System.Nullable(Of Double),  _
                    ByVal Original_YearToEvent As Global.System.Nullable(Of Double),  _
                    ByVal Original_OrgCcy As String,  _
                    ByVal Original_OrgCcyAmount As Global.System.Nullable(Of Double),  _
                    ByVal Original_EURequ As Global.System.Nullable(Of Double),  _
                    ByVal Original_PercentCalculation As Global.System.Nullable(Of Double),  _
                    ByVal Original_EURequCalculated As Global.System.Nullable(Of Double),  _
                    ByVal Original_RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_IdFX_CRED_EQU_BASIC As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Client_Name As String,  _
                    ByVal Original_Client_No As String,  _
                    ByVal Original_ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal Original_InputType As String,  _
                    ByVal Original_TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Contract As String,  _
                    ByVal Original_ContractType As String,  _
                    ByVal Original_Modified_Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_MonthToEventStartDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_AmountType As String,  _
                    ByVal Original_ModifiedStartDate As Global.System.Nullable(Of Date)) As Integer
            If (ClientGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClientGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientGroupName,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MonthToEvent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MonthToEvent.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (YearToEvent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(YearToEvent.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (OrgCcy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(OrgCcy,String)
            End If
            If (OrgCcyAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(OrgCcyAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (EURequ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(EURequ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PercentCalculation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PercentCalculation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (EURequCalculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(EURequCalculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IdFX_CRED_EQU_BASIC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IdFX_CRED_EQU_BASIC.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Client_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Client_Name,String)
            End If
            If (Client_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Client_No,String)
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (InputType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(InputType,String)
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Contract Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Contract,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ContractType,String)
            End If
            If (Modified_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Modified_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MonthToEventStartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MonthToEventStartDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AmountType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(AmountType,String)
            End If
            If (ModifiedStartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ModifiedStartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ID,Integer)
            If (Original_ClientGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ClientGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ClientGroupName,String)
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MonthToEvent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_MonthToEvent.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_YearToEvent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_YearToEvent.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_OrgCcy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_OrgCcy,String)
            End If
            If (Original_OrgCcyAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_OrgCcyAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_EURequ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_EURequ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_PercentCalculation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PercentCalculation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_EURequCalculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_EURequCalculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_IdFX_CRED_EQU_BASIC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_IdFX_CRED_EQU_BASIC.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Client_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Client_Name,String)
            End If
            If (Original_Client_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Client_No,String)
            End If
            If (Original_ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_InputType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_InputType,String)
            End If
            If (Original_TradeDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_TradeDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_Contract Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Contract,String)
            End If
            If (Original_ContractType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_ContractType,String)
            End If
            If (Original_Modified_Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_Modified_Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_MonthToEventStartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_MonthToEventStartDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_AmountType,String)
            End If
            If (Original_ModifiedStartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_ModifiedStartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OWN_CURRENCIESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OWN_CURRENCIES"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CURRENCY CODE", "CURRENCY CODE")
            tableMapping.ColumnMappings.Add("CURRENCY NAME", "CURRENCY NAME")
            tableMapping.ColumnMappings.Add("OWN CURRENCY", "OWN CURRENCY")
            tableMapping.ColumnMappings.Add("ACCEPTS DECIMALS", "ACCEPTS DECIMALS")
            tableMapping.ColumnMappings.Add("SPREAD", "SPREAD")
            tableMapping.ColumnMappings.Add("VALID", "VALID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [OWN_CURRENCIES] WHERE (([ID] = @Original_ID) AND ([CURRENCY CODE] = "& _ 
                "@Original_CURRENCY_CODE) AND ((@IsNull_CURRENCY_NAME = 1 AND [CURRENCY NAME] IS "& _ 
                "NULL) OR ([CURRENCY NAME] = @Original_CURRENCY_NAME)) AND ((@IsNull_OWN_CURRENCY"& _ 
                " = 1 AND [OWN CURRENCY] IS NULL) OR ([OWN CURRENCY] = @Original_OWN_CURRENCY)) A"& _ 
                "ND ((@IsNull_ACCEPTS_DECIMALS = 1 AND [ACCEPTS DECIMALS] IS NULL) OR ([ACCEPTS D"& _ 
                "ECIMALS] = @Original_ACCEPTS_DECIMALS)) AND ((@IsNull_SPREAD = 1 AND [SPREAD] IS"& _ 
                " NULL) OR ([SPREAD] = @Original_SPREAD)) AND ((@IsNull_VALID = 1 AND [VALID] IS "& _ 
                "NULL) OR ([VALID] = @Original_VALID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OWN_CURRENCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OWN_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPREAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPREAD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [OWN_CURRENCIES] ([CURRENCY CODE], [CURRENCY NAME], [OWN CURRENCY], ["& _ 
                "ACCEPTS DECIMALS], [SPREAD], [VALID]) VALUES (@CURRENCY_CODE, @CURRENCY_NAME, @O"& _ 
                "WN_CURRENCY, @ACCEPTS_DECIMALS, @SPREAD, @VALID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OWN_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPREAD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [OWN_CURRENCIES] SET [CURRENCY CODE] = @CURRENCY_CODE, [CURRENCY NAME] = @"& _ 
                "CURRENCY_NAME, [OWN CURRENCY] = @OWN_CURRENCY, [ACCEPTS DECIMALS] = @ACCEPTS_DEC"& _ 
                "IMALS, [SPREAD] = @SPREAD, [VALID] = @VALID WHERE (([ID] = @Original_ID) AND ([C"& _ 
                "URRENCY CODE] = @Original_CURRENCY_CODE) AND ((@IsNull_CURRENCY_NAME = 1 AND [CU"& _ 
                "RRENCY NAME] IS NULL) OR ([CURRENCY NAME] = @Original_CURRENCY_NAME)) AND ((@IsN"& _ 
                "ull_OWN_CURRENCY = 1 AND [OWN CURRENCY] IS NULL) OR ([OWN CURRENCY] = @Original_"& _ 
                "OWN_CURRENCY)) AND ((@IsNull_ACCEPTS_DECIMALS = 1 AND [ACCEPTS DECIMALS] IS NULL"& _ 
                ") OR ([ACCEPTS DECIMALS] = @Original_ACCEPTS_DECIMALS)) AND ((@IsNull_SPREAD = 1"& _ 
                " AND [SPREAD] IS NULL) OR ([SPREAD] = @Original_SPREAD)) AND ((@IsNull_VALID = 1"& _ 
                " AND [VALID] IS NULL) OR ([VALID] = @Original_VALID)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OWN_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPREAD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURRENCY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURRENCY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OWN_CURRENCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OWN_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OWN CURRENCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCEPTS_DECIMALS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCEPTS DECIMALS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPREAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPREAD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPREAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, [CURRENCY CODE], [CURRENCY NAME], [OWN CURRENCY], [ACCEPTS DECI"& _ 
                "MALS], SPREAD, VALID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            OWN_CURRENCIES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        [ACCEPTS DECIMALS], [CURRENCY CODE], [CURRENCY NAME], ID, [OWN CURR"& _ 
                "ENCY], SPREAD, VALID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            OWN_CURRENCIES"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (VALID = 'Y')"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TreasuryDataSet.OWN_CURRENCIESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TreasuryDataSet.OWN_CURRENCIESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.OWN_CURRENCIESDataTable = New TreasuryDataSet.OWN_CURRENCIESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCurValid(ByVal dataTable As TreasuryDataSet.OWN_CURRENCIESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCurValid() As TreasuryDataSet.OWN_CURRENCIESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As TreasuryDataSet.OWN_CURRENCIESDataTable = New TreasuryDataSet.OWN_CURRENCIESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TreasuryDataSet.OWN_CURRENCIESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TreasuryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OWN_CURRENCIES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_CURRENCY_CODE As String, ByVal Original_CURRENCY_NAME As String, ByVal Original_OWN_CURRENCY As String, ByVal Original_ACCEPTS_DECIMALS As String, ByVal Original_SPREAD As Global.System.Nullable(Of Double), ByVal Original_VALID As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_CURRENCY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURRENCY_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CURRENCY_CODE,String)
            End If
            If (Original_CURRENCY_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CURRENCY_NAME,String)
            End If
            If (Original_OWN_CURRENCY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_OWN_CURRENCY,String)
            End If
            If (Original_ACCEPTS_DECIMALS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ACCEPTS_DECIMALS,String)
            End If
            If (Original_SPREAD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_SPREAD.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_VALID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CURRENCY_CODE As String, ByVal CURRENCY_NAME As String, ByVal OWN_CURRENCY As String, ByVal ACCEPTS_DECIMALS As String, ByVal SPREAD As Global.System.Nullable(Of Double), ByVal VALID As String) As Integer
            If (CURRENCY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURRENCY_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CURRENCY_CODE,String)
            End If
            If (CURRENCY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CURRENCY_NAME,String)
            End If
            If (OWN_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OWN_CURRENCY,String)
            End If
            If (ACCEPTS_DECIMALS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ACCEPTS_DECIMALS,String)
            End If
            If (SPREAD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPREAD.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VALID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURRENCY_CODE As String, ByVal CURRENCY_NAME As String, ByVal OWN_CURRENCY As String, ByVal ACCEPTS_DECIMALS As String, ByVal SPREAD As Global.System.Nullable(Of Double), ByVal VALID As String, ByVal Original_ID As Integer, ByVal Original_CURRENCY_CODE As String, ByVal Original_CURRENCY_NAME As String, ByVal Original_OWN_CURRENCY As String, ByVal Original_ACCEPTS_DECIMALS As String, ByVal Original_SPREAD As Global.System.Nullable(Of Double), ByVal Original_VALID As String) As Integer
            If (CURRENCY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURRENCY_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CURRENCY_CODE,String)
            End If
            If (CURRENCY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CURRENCY_NAME,String)
            End If
            If (OWN_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OWN_CURRENCY,String)
            End If
            If (ACCEPTS_DECIMALS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ACCEPTS_DECIMALS,String)
            End If
            If (SPREAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPREAD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(VALID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID,Integer)
            If (Original_CURRENCY_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURRENCY_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CURRENCY_CODE,String)
            End If
            If (Original_CURRENCY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CURRENCY_NAME,String)
            End If
            If (Original_OWN_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_OWN_CURRENCY,String)
            End If
            If (Original_ACCEPTS_DECIMALS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ACCEPTS_DECIMALS,String)
            End If
            If (Original_SPREAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SPREAD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_VALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_VALID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURRENCY_NAME As String, ByVal OWN_CURRENCY As String, ByVal ACCEPTS_DECIMALS As String, ByVal SPREAD As Global.System.Nullable(Of Double), ByVal VALID As String, ByVal Original_ID As Integer, ByVal Original_CURRENCY_CODE As String, ByVal Original_CURRENCY_NAME As String, ByVal Original_OWN_CURRENCY As String, ByVal Original_ACCEPTS_DECIMALS As String, ByVal Original_SPREAD As Global.System.Nullable(Of Double), ByVal Original_VALID As String) As Integer
            Return Me.Update(Original_CURRENCY_CODE, CURRENCY_NAME, OWN_CURRENCY, ACCEPTS_DECIMALS, SPREAD, VALID, Original_ID, Original_CURRENCY_CODE, Original_CURRENCY_NAME, Original_OWN_CURRENCY, Original_ACCEPTS_DECIMALS, Original_SPREAD, Original_VALID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FX_ALLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FX ALL"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("OCBS_CI_NO", "OCBS_CI_NO")
            tableMapping.ColumnMappings.Add("ClientName ", "ClientName ")
            tableMapping.ColumnMappings.Add("Client Type", "Client Type")
            tableMapping.ColumnMappings.Add("Bank Ind", "Bank Ind")
            tableMapping.ColumnMappings.Add("ContractNo", "ContractNo")
            tableMapping.ColumnMappings.Add("Contract Type", "Contract Type")
            tableMapping.ColumnMappings.Add("SPOT_FWD_SW_FLG", "SPOT_FWD_SW_FLG")
            tableMapping.ColumnMappings.Add("AccountingCenter", "AccountingCenter")
            tableMapping.ColumnMappings.Add("B/S", "B/S")
            tableMapping.ColumnMappings.Add("Input Date", "Input Date")
            tableMapping.ColumnMappings.Add("Start Date", "Start Date")
            tableMapping.ColumnMappings.Add("End Date", "End Date")
            tableMapping.ColumnMappings.Add("FAR_START_DATE", "FAR_START_DATE")
            tableMapping.ColumnMappings.Add("FAR_END_DATE", "FAR_END_DATE")
            tableMapping.ColumnMappings.Add("Deal Currency", "Deal Currency")
            tableMapping.ColumnMappings.Add("Deal Amount", "Deal Amount")
            tableMapping.ColumnMappings.Add("CCY_B", "CCY_B")
            tableMapping.ColumnMappings.Add("AMT_B", "AMT_B")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("CCY_S", "CCY_S")
            tableMapping.ColumnMappings.Add("AMT_S", "AMT_S")
            tableMapping.ColumnMappings.Add("AMT_B_Far", "AMT_B_Far")
            tableMapping.ColumnMappings.Add("AMT_S_Far", "AMT_S_Far")
            tableMapping.ColumnMappings.Add("Net Receive(NDF)", "Net Receive(NDF)")
            tableMapping.ColumnMappings.Add("Net Pay(NDF)", "Net Pay(NDF)")
            tableMapping.ColumnMappings.Add("Exchange Rate", "Exchange Rate")
            tableMapping.ColumnMappings.Add("Exchange Rate(Far)", "Exchange Rate(Far)")
            tableMapping.ColumnMappings.Add("Broker", "Broker")
            tableMapping.ColumnMappings.Add("Broker Name", "Broker Name")
            tableMapping.ColumnMappings.Add("Brokerage CCY", "Brokerage CCY")
            tableMapping.ColumnMappings.Add("Brokerage Amount", "Brokerage Amount")
            tableMapping.ColumnMappings.Add("Prodcut Type", "Prodcut Type")
            tableMapping.ColumnMappings.Add("GL Master", "GL Master")
            tableMapping.ColumnMappings.Add("Risk Country", "Risk Country")
            tableMapping.ColumnMappings.Add("Resident Country", "Resident Country")
            tableMapping.ColumnMappings.Add("Institutional Sector", "Institutional Sector")
            tableMapping.ColumnMappings.Add("Maker", "Maker")
            tableMapping.ColumnMappings.Add("Fixing Date(NDF)", "Fixing Date(NDF)")
            tableMapping.ColumnMappings.Add("Fixing Rate(NDF)", "Fixing Rate(NDF)")
            tableMapping.ColumnMappings.Add("Portfolio", "Portfolio")
            tableMapping.ColumnMappings.Add("SWAPNEAR", "SWAPNEAR")
            tableMapping.ColumnMappings.Add("SWAPFAR", "SWAPFAR")
            tableMapping.ColumnMappings.Add("REVAL_FX_RATE_S", "REVAL_FX_RATE_S")
            tableMapping.ColumnMappings.Add("REVAL_FX_RATE_S2", "REVAL_FX_RATE_S2")
            tableMapping.ColumnMappings.Add("REVAL_FX_RATE_B", "REVAL_FX_RATE_B")
            tableMapping.ColumnMappings.Add("REVAL_FX_RATE_B2", "REVAL_FX_RATE_B2")
            tableMapping.ColumnMappings.Add("INDUSTRY_LC", "INDUSTRY_LC")
            tableMapping.ColumnMappings.Add("ContractNrFar", "ContractNrFar")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("OwnDeal", "OwnDeal")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FX ALL] WHERE (([ID] = @Original_ID) AND ((@IsNull_OCBS_CI_NO = 1 AN"& _ 
                "D [OCBS_CI_NO] IS NULL) OR ([OCBS_CI_NO] = @Original_OCBS_CI_NO)) AND ((@IsNull_"& _ 
                "ClientName_ = 1 AND [ClientName ] IS NULL) OR ([ClientName ] = @Original_ClientN"& _ 
                "ame_)) AND ((@IsNull_Client_Type = 1 AND [Client Type] IS NULL) OR ([Client Type"& _ 
                "] = @Original_Client_Type)) AND ((@IsNull_Bank_Ind = 1 AND [Bank Ind] IS NULL) O"& _ 
                "R ([Bank Ind] = @Original_Bank_Ind)) AND ((@IsNull_ContractNo = 1 AND [ContractN"& _ 
                "o] IS NULL) OR ([ContractNo] = @Original_ContractNo)) AND ((@IsNull_Contract_Typ"& _ 
                "e = 1 AND [Contract Type] IS NULL) OR ([Contract Type] = @Original_Contract_Type"& _ 
                ")) AND ((@IsNull_SPOT_FWD_SW_FLG = 1 AND [SPOT_FWD_SW_FLG] IS NULL) OR ([SPOT_FW"& _ 
                "D_SW_FLG] = @Original_SPOT_FWD_SW_FLG)) AND ((@IsNull_AccountingCenter = 1 AND ["& _ 
                "AccountingCenter] IS NULL) OR ([AccountingCenter] = @Original_AccountingCenter))"& _ 
                " AND ((@p3 = 1 AND [B/S] IS NULL) OR ([B/S] = @p2)) AND ((@IsNull_Input_Date = 1"& _ 
                " AND [Input Date] IS NULL) OR ([Input Date] = @Original_Input_Date)) AND ((@IsNu"& _ 
                "ll_Start_Date = 1 AND [Start Date] IS NULL) OR ([Start Date] = @Original_Start_D"& _ 
                "ate)) AND ((@IsNull_End_Date = 1 AND [End Date] IS NULL) OR ([End Date] = @Origi"& _ 
                "nal_End_Date)) AND ((@IsNull_FAR_START_DATE = 1 AND [FAR_START_DATE] IS NULL) OR"& _ 
                " ([FAR_START_DATE] = @Original_FAR_START_DATE)) AND ((@IsNull_FAR_END_DATE = 1 A"& _ 
                "ND [FAR_END_DATE] IS NULL) OR ([FAR_END_DATE] = @Original_FAR_END_DATE)) AND ((@"& _ 
                "IsNull_Deal_Currency = 1 AND [Deal Currency] IS NULL) OR ([Deal Currency] = @Ori"& _ 
                "ginal_Deal_Currency)) AND ((@IsNull_Deal_Amount = 1 AND [Deal Amount] IS NULL) O"& _ 
                "R ([Deal Amount] = @Original_Deal_Amount)) AND ((@IsNull_CCY_B = 1 AND [CCY_B] I"& _ 
                "S NULL) OR ([CCY_B] = @Original_CCY_B)) AND ((@IsNull_AMT_B = 1 AND [AMT_B] IS N"& _ 
                "ULL) OR ([AMT_B] = @Original_AMT_B)) AND ((@IsNull_Status = 1 AND [Status] IS NU"& _ 
                "LL) OR ([Status] = @Original_Status)) AND ((@IsNull_CCY_S = 1 AND [CCY_S] IS NUL"& _ 
                "L) OR ([CCY_S] = @Original_CCY_S)) AND ((@IsNull_AMT_S = 1 AND [AMT_S] IS NULL) "& _ 
                "OR ([AMT_S] = @Original_AMT_S)) AND ((@IsNull_AMT_B_Far = 1 AND [AMT_B_Far] IS N"& _ 
                "ULL) OR ([AMT_B_Far] = @Original_AMT_B_Far)) AND ((@IsNull_AMT_S_Far = 1 AND [AM"& _ 
                "T_S_Far] IS NULL) OR ([AMT_S_Far] = @Original_AMT_S_Far)) AND ((@p6 = 1 AND [Net"& _ 
                " Receive(NDF)] IS NULL) OR ([Net Receive(NDF)] = @p5)) AND ((@p9 = 1 AND [Net Pa"& _ 
                "y(NDF)] IS NULL) OR ([Net Pay(NDF)] = @p8)) AND ((@IsNull_Exchange_Rate = 1 AND "& _ 
                "[Exchange Rate] IS NULL) OR ([Exchange Rate] = @Original_Exchange_Rate)) AND ((@"& _ 
                "p12 = 1 AND [Exchange Rate(Far)] IS NULL) OR ([Exchange Rate(Far)] = @p11)) AND "& _ 
                "((@IsNull_Broker = 1 AND [Broker] IS NULL) OR ([Broker] = @Original_Broker)) AND"& _ 
                " ((@IsNull_Broker_Name = 1 AND [Broker Name] IS NULL) OR ([Broker Name] = @Origi"& _ 
                "nal_Broker_Name)) AND ((@IsNull_Brokerage_CCY = 1 AND [Brokerage CCY] IS NULL) O"& _ 
                "R ([Brokerage CCY] = @Original_Brokerage_CCY)) AND ((@IsNull_Brokerage_Amount = "& _ 
                "1 AND [Brokerage Amount] IS NULL) OR ([Brokerage Amount] = @Original_Brokerage_A"& _ 
                "mount)) AND ((@IsNull_Prodcut_Type = 1 AND [Prodcut Type] IS NULL) OR ([Prodcut "& _ 
                "Type] = @Original_Prodcut_Type)) AND ((@IsNull_GL_Master = 1 AND [GL Master] IS "& _ 
                "NULL) OR ([GL Master] = @Original_GL_Master)) AND ((@IsNull_Risk_Country = 1 AND"& _ 
                " [Risk Country] IS NULL) OR ([Risk Country] = @Original_Risk_Country)) AND ((@Is"& _ 
                "Null_Resident_Country = 1 AND [Resident Country] IS NULL) OR ([Resident Country]"& _ 
                " = @Original_Resident_Country)) AND ((@IsNull_Institutional_Sector = 1 AND [Inst"& _ 
                "itutional Sector] IS NULL) OR ([Institutional Sector] = @Original_Institutional_"& _ 
                "Sector)) AND ((@IsNull_Maker = 1 AND [Maker] IS NULL) OR ([Maker] = @Original_Ma"& _ 
                "ker)) AND ((@p15 = 1 AND [Fixing Date(NDF)] IS NULL) OR ([Fixing Date(NDF)] = @p"& _ 
                "14)) AND ((@p18 = 1 AND [Fixing Rate(NDF)] IS NULL) OR ([Fixing Rate(NDF)] = @p1"& _ 
                "7)) AND ((@IsNull_Portfolio = 1 AND [Portfolio] IS NULL) OR ([Portfolio] = @Orig"& _ 
                "inal_Portfolio)) AND ((@IsNull_SWAPNEAR = 1 AND [SWAPNEAR] IS NULL) OR ([SWAPNEA"& _ 
                "R] = @Original_SWAPNEAR)) AND ((@IsNull_SWAPFAR = 1 AND [SWAPFAR] IS NULL) OR (["& _ 
                "SWAPFAR] = @Original_SWAPFAR)) AND ((@IsNull_REVAL_FX_RATE_S = 1 AND [REVAL_FX_R"& _ 
                "ATE_S] IS NULL) OR ([REVAL_FX_RATE_S] = @Original_REVAL_FX_RATE_S)) AND ((@IsNul"& _ 
                "l_REVAL_FX_RATE_S2 = 1 AND [REVAL_FX_RATE_S2] IS NULL) OR ([REVAL_FX_RATE_S2] = "& _ 
                "@Original_REVAL_FX_RATE_S2)) AND ((@IsNull_REVAL_FX_RATE_B = 1 AND [REVAL_FX_RAT"& _ 
                "E_B] IS NULL) OR ([REVAL_FX_RATE_B] = @Original_REVAL_FX_RATE_B)) AND ((@IsNull_"& _ 
                "REVAL_FX_RATE_B2 = 1 AND [REVAL_FX_RATE_B2] IS NULL) OR ([REVAL_FX_RATE_B2] = @O"& _ 
                "riginal_REVAL_FX_RATE_B2)) AND ((@IsNull_INDUSTRY_LC = 1 AND [INDUSTRY_LC] IS NU"& _ 
                "LL) OR ([INDUSTRY_LC] = @Original_INDUSTRY_LC)) AND ((@IsNull_ContractNrFar = 1 "& _ 
                "AND [ContractNrFar] IS NULL) OR ([ContractNrFar] = @Original_ContractNrFar)) AND"& _ 
                " ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)"& _ 
                ") AND ((@IsNull_OwnDeal = 1 AND [OwnDeal] IS NULL) OR ([OwnDeal] = @Original_Own"& _ 
                "Deal)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_CI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_CI_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientName_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientName_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Bank_Ind", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Bank_Ind", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AccountingCenter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AccountingCenter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Input_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Input_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Start_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_End_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAR_START_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAR_START_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAR_END_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAR_END_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Deal_Currency", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Deal_Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Deal_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Deal_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY_S", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_B_Far", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_B_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_S_Far", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_S_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Exchange_Rate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Exchange_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Broker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Broker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Broker_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Broker_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Brokerage_CCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Brokerage_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Brokerage_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Brokerage_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prodcut_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prodcut_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GL_Master", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Risk_Country", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Risk_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resident_Country", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resident_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Institutional_Sector", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Institutional_Sector", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Maker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Maker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p15", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p14", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p18", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p17", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Portfolio", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Portfolio", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SWAPNEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SWAPNEAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SWAPFAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SWAPFAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INDUSTRY_LC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INDUSTRY_LC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrFar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrFar", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OwnDeal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OwnDeal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FX ALL] ([OCBS_CI_NO], [ClientName ], [Client Type], [Bank Ind], [Co"& _ 
                "ntractNo], [Contract Type], [SPOT_FWD_SW_FLG], [AccountingCenter], [B/S], [Input"& _ 
                " Date], [Start Date], [End Date], [FAR_START_DATE], [FAR_END_DATE], [Deal Curren"& _ 
                "cy], [Deal Amount], [CCY_B], [AMT_B], [Status], [CCY_S], [AMT_S], [AMT_B_Far], ["& _ 
                "AMT_S_Far], [Net Receive(NDF)], [Net Pay(NDF)], [Exchange Rate], [Exchange Rate("& _ 
                "Far)], [Broker], [Broker Name], [Brokerage CCY], [Brokerage Amount], [Prodcut Ty"& _ 
                "pe], [GL Master], [Risk Country], [Resident Country], [Institutional Sector], [M"& _ 
                "aker], [Fixing Date(NDF)], [Fixing Rate(NDF)], [Portfolio], [SWAPNEAR], [SWAPFAR"& _ 
                "], [REVAL_FX_RATE_S], [REVAL_FX_RATE_S2], [REVAL_FX_RATE_B], [REVAL_FX_RATE_B2],"& _ 
                " [INDUSTRY_LC], [ContractNrFar], [Remarks], [OwnDeal]) VALUES (@OCBS_CI_NO, @Cli"& _ 
                "entName_, @Client_Type, @Bank_Ind, @ContractNo, @Contract_Type, @SPOT_FWD_SW_FLG"& _ 
                ", @AccountingCenter, @p1, @Input_Date, @Start_Date, @End_Date, @FAR_START_DATE, "& _ 
                "@FAR_END_DATE, @Deal_Currency, @Deal_Amount, @CCY_B, @AMT_B, @Status, @CCY_S, @A"& _ 
                "MT_S, @AMT_B_Far, @AMT_S_Far, @p4, @p7, @Exchange_Rate, @p10, @Broker, @Broker_N"& _ 
                "ame, @Brokerage_CCY, @Brokerage_Amount, @Prodcut_Type, @GL_Master, @Risk_Country"& _ 
                ", @Resident_Country, @Institutional_Sector, @Maker, @p13, @p16, @Portfolio, @SWA"& _ 
                "PNEAR, @SWAPFAR, @REVAL_FX_RATE_S, @REVAL_FX_RATE_S2, @REVAL_FX_RATE_B, @REVAL_F"& _ 
                "X_RATE_B2, @INDUSTRY_LC, @ContractNrFar, @Remarks, @OwnDeal)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_CI_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bank_Ind", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingCenter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAR_START_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAR_END_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deal_Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deal_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY_S", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_B_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_S_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exchange_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Broker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Broker_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Brokerage_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Brokerage_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prodcut_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Risk_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resident_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Institutional_Sector", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Maker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Portfolio", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SWAPNEAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SWAPFAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INDUSTRY_LC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrFar", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnDeal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FX ALL] SET [OCBS_CI_NO] = @OCBS_CI_NO, [ClientName ] = @ClientName_, [Cl"& _ 
                "ient Type] = @Client_Type, [Bank Ind] = @Bank_Ind, [ContractNo] = @ContractNo, ["& _ 
                "Contract Type] = @Contract_Type, [SPOT_FWD_SW_FLG] = @SPOT_FWD_SW_FLG, [Accounti"& _ 
                "ngCenter] = @AccountingCenter, [B/S] = @p1, [Input Date] = @Input_Date, [Start D"& _ 
                "ate] = @Start_Date, [End Date] = @End_Date, [FAR_START_DATE] = @FAR_START_DATE, "& _ 
                "[FAR_END_DATE] = @FAR_END_DATE, [Deal Currency] = @Deal_Currency, [Deal Amount] "& _ 
                "= @Deal_Amount, [CCY_B] = @CCY_B, [AMT_B] = @AMT_B, [Status] = @Status, [CCY_S] "& _ 
                "= @CCY_S, [AMT_S] = @AMT_S, [AMT_B_Far] = @AMT_B_Far, [AMT_S_Far] = @AMT_S_Far, "& _ 
                "[Net Receive(NDF)] = @p4, [Net Pay(NDF)] = @p7, [Exchange Rate] = @Exchange_Rate"& _ 
                ", [Exchange Rate(Far)] = @p10, [Broker] = @Broker, [Broker Name] = @Broker_Name,"& _ 
                " [Brokerage CCY] = @Brokerage_CCY, [Brokerage Amount] = @Brokerage_Amount, [Prod"& _ 
                "cut Type] = @Prodcut_Type, [GL Master] = @GL_Master, [Risk Country] = @Risk_Coun"& _ 
                "try, [Resident Country] = @Resident_Country, [Institutional Sector] = @Instituti"& _ 
                "onal_Sector, [Maker] = @Maker, [Fixing Date(NDF)] = @p13, [Fixing Rate(NDF)] = @"& _ 
                "p16, [Portfolio] = @Portfolio, [SWAPNEAR] = @SWAPNEAR, [SWAPFAR] = @SWAPFAR, [RE"& _ 
                "VAL_FX_RATE_S] = @REVAL_FX_RATE_S, [REVAL_FX_RATE_S2] = @REVAL_FX_RATE_S2, [REVA"& _ 
                "L_FX_RATE_B] = @REVAL_FX_RATE_B, [REVAL_FX_RATE_B2] = @REVAL_FX_RATE_B2, [INDUST"& _ 
                "RY_LC] = @INDUSTRY_LC, [ContractNrFar] = @ContractNrFar, [Remarks] = @Remarks, ["& _ 
                "OwnDeal] = @OwnDeal WHERE (([ID] = @Original_ID) AND ((@IsNull_OCBS_CI_NO = 1 AN"& _ 
                "D [OCBS_CI_NO] IS NULL) OR ([OCBS_CI_NO] = @Original_OCBS_CI_NO)) AND ((@IsNull_"& _ 
                "ClientName_ = 1 AND [ClientName ] IS NULL) OR ([ClientName ] = @Original_ClientN"& _ 
                "ame_)) AND ((@IsNull_Client_Type = 1 AND [Client Type] IS NULL) OR ([Client Type"& _ 
                "] = @Original_Client_Type)) AND ((@IsNull_Bank_Ind = 1 AND [Bank Ind] IS NULL) O"& _ 
                "R ([Bank Ind] = @Original_Bank_Ind)) AND ((@IsNull_ContractNo = 1 AND [ContractN"& _ 
                "o] IS NULL) OR ([ContractNo] = @Original_ContractNo)) AND ((@IsNull_Contract_Typ"& _ 
                "e = 1 AND [Contract Type] IS NULL) OR ([Contract Type] = @Original_Contract_Type"& _ 
                ")) AND ((@IsNull_SPOT_FWD_SW_FLG = 1 AND [SPOT_FWD_SW_FLG] IS NULL) OR ([SPOT_FW"& _ 
                "D_SW_FLG] = @Original_SPOT_FWD_SW_FLG)) AND ((@IsNull_AccountingCenter = 1 AND ["& _ 
                "AccountingCenter] IS NULL) OR ([AccountingCenter] = @Original_AccountingCenter))"& _ 
                " AND ((@p3 = 1 AND [B/S] IS NULL) OR ([B/S] = @p2)) AND ((@IsNull_Input_Date = 1"& _ 
                " AND [Input Date] IS NULL) OR ([Input Date] = @Original_Input_Date)) AND ((@IsNu"& _ 
                "ll_Start_Date = 1 AND [Start Date] IS NULL) OR ([Start Date] = @Original_Start_D"& _ 
                "ate)) AND ((@IsNull_End_Date = 1 AND [End Date] IS NULL) OR ([End Date] = @Origi"& _ 
                "nal_End_Date)) AND ((@IsNull_FAR_START_DATE = 1 AND [FAR_START_DATE] IS NULL) OR"& _ 
                " ([FAR_START_DATE] = @Original_FAR_START_DATE)) AND ((@IsNull_FAR_END_DATE = 1 A"& _ 
                "ND [FAR_END_DATE] IS NULL) OR ([FAR_END_DATE] = @Original_FAR_END_DATE)) AND ((@"& _ 
                "IsNull_Deal_Currency = 1 AND [Deal Currency] IS NULL) OR ([Deal Currency] = @Ori"& _ 
                "ginal_Deal_Currency)) AND ((@IsNull_Deal_Amount = 1 AND [Deal Amount] IS NULL) O"& _ 
                "R ([Deal Amount] = @Original_Deal_Amount)) AND ((@IsNull_CCY_B = 1 AND [CCY_B] I"& _ 
                "S NULL) OR ([CCY_B] = @Original_CCY_B)) AND ((@IsNull_AMT_B = 1 AND [AMT_B] IS N"& _ 
                "ULL) OR ([AMT_B] = @Original_AMT_B)) AND ((@IsNull_Status = 1 AND [Status] IS NU"& _ 
                "LL) OR ([Status] = @Original_Status)) AND ((@IsNull_CCY_S = 1 AND [CCY_S] IS NUL"& _ 
                "L) OR ([CCY_S] = @Original_CCY_S)) AND ((@IsNull_AMT_S = 1 AND [AMT_S] IS NULL) "& _ 
                "OR ([AMT_S] = @Original_AMT_S)) AND ((@IsNull_AMT_B_Far = 1 AND [AMT_B_Far] IS N"& _ 
                "ULL) OR ([AMT_B_Far] = @Original_AMT_B_Far)) AND ((@IsNull_AMT_S_Far = 1 AND [AM"& _ 
                "T_S_Far] IS NULL) OR ([AMT_S_Far] = @Original_AMT_S_Far)) AND ((@p6 = 1 AND [Net"& _ 
                " Receive(NDF)] IS NULL) OR ([Net Receive(NDF)] = @p5)) AND ((@p9 = 1 AND [Net Pa"& _ 
                "y(NDF)] IS NULL) OR ([Net Pay(NDF)] = @p8)) AND ((@IsNull_Exchange_Rate = 1 AND "& _ 
                "[Exchange Rate] IS NULL) OR ([Exchange Rate] = @Original_Exchange_Rate)) AND ((@"& _ 
                "p12 = 1 AND [Exchange Rate(Far)] IS NULL) OR ([Exchange Rate(Far)] = @p11)) AND "& _ 
                "((@IsNull_Broker = 1 AND [Broker] IS NULL) OR ([Broker] = @Original_Broker)) AND"& _ 
                " ((@IsNull_Broker_Name = 1 AND [Broker Name] IS NULL) OR ([Broker Name] = @Origi"& _ 
                "nal_Broker_Name)) AND ((@IsNull_Brokerage_CCY = 1 AND [Brokerage CCY] IS NULL) O"& _ 
                "R ([Brokerage CCY] = @Original_Brokerage_CCY)) AND ((@IsNull_Brokerage_Amount = "& _ 
                "1 AND [Brokerage Amount] IS NULL) OR ([Brokerage Amount] = @Original_Brokerage_A"& _ 
                "mount)) AND ((@IsNull_Prodcut_Type = 1 AND [Prodcut Type] IS NULL) OR ([Prodcut "& _ 
                "Type] = @Original_Prodcut_Type)) AND ((@IsNull_GL_Master = 1 AND [GL Master] IS "& _ 
                "NULL) OR ([GL Master] = @Original_GL_Master)) AND ((@IsNull_Risk_Country = 1 AND"& _ 
                " [Risk Country] IS NULL) OR ([Risk Country] = @Original_Risk_Country)) AND ((@Is"& _ 
                "Null_Resident_Country = 1 AND [Resident Country] IS NULL) OR ([Resident Country]"& _ 
                " = @Original_Resident_Country)) AND ((@IsNull_Institutional_Sector = 1 AND [Inst"& _ 
                "itutional Sector] IS NULL) OR ([Institutional Sector] = @Original_Institutional_"& _ 
                "Sector)) AND ((@IsNull_Maker = 1 AND [Maker] IS NULL) OR ([Maker] = @Original_Ma"& _ 
                "ker)) AND ((@p15 = 1 AND [Fixing Date(NDF)] IS NULL) OR ([Fixing Date(NDF)] = @p"& _ 
                "14)) AND ((@p18 = 1 AND [Fixing Rate(NDF)] IS NULL) OR ([Fixing Rate(NDF)] = @p1"& _ 
                "7)) AND ((@IsNull_Portfolio = 1 AND [Portfolio] IS NULL) OR ([Portfolio] = @Orig"& _ 
                "inal_Portfolio)) AND ((@IsNull_SWAPNEAR = 1 AND [SWAPNEAR] IS NULL) OR ([SWAPNEA"& _ 
                "R] = @Original_SWAPNEAR)) AND ((@IsNull_SWAPFAR = 1 AND [SWAPFAR] IS NULL) OR (["& _ 
                "SWAPFAR] = @Original_SWAPFAR)) AND ((@IsNull_REVAL_FX_RATE_S = 1 AND [REVAL_FX_R"& _ 
                "ATE_S] IS NULL) OR ([REVAL_FX_RATE_S] = @Original_REVAL_FX_RATE_S)) AND ((@IsNul"& _ 
                "l_REVAL_FX_RATE_S2 = 1 AND [REVAL_FX_RATE_S2] IS NULL) OR ([REVAL_FX_RATE_S2] = "& _ 
                "@Original_REVAL_FX_RATE_S2)) AND ((@IsNull_REVAL_FX_RATE_B = 1 AND [REVAL_FX_RAT"& _ 
                "E_B] IS NULL) OR ([REVAL_FX_RATE_B] = @Original_REVAL_FX_RATE_B)) AND ((@IsNull_"& _ 
                "REVAL_FX_RATE_B2 = 1 AND [REVAL_FX_RATE_B2] IS NULL) OR ([REVAL_FX_RATE_B2] = @O"& _ 
                "riginal_REVAL_FX_RATE_B2)) AND ((@IsNull_INDUSTRY_LC = 1 AND [INDUSTRY_LC] IS NU"& _ 
                "LL) OR ([INDUSTRY_LC] = @Original_INDUSTRY_LC)) AND ((@IsNull_ContractNrFar = 1 "& _ 
                "AND [ContractNrFar] IS NULL) OR ([ContractNrFar] = @Original_ContractNrFar)) AND"& _ 
                " ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)"& _ 
                ") AND ((@IsNull_OwnDeal = 1 AND [OwnDeal] IS NULL) OR ([OwnDeal] = @Original_Own"& _ 
                "Deal)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_CI_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bank_Ind", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingCenter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAR_START_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAR_END_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deal_Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deal_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY_S", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_B_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMT_S_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exchange_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Broker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Broker_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Brokerage_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Brokerage_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prodcut_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Risk_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resident_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Institutional_Sector", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Maker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Portfolio", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SWAPNEAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SWAPFAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INDUSTRY_LC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrFar", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnDeal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_CI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_CI_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_CI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientName_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientName_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Client_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Client_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Bank_Ind", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Bank_Ind", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bank Ind", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Contract_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPOT_FWD_SW_FLG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPOT_FWD_SW_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AccountingCenter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AccountingCenter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingCenter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B/S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Input_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Input_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Start_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Start Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_End_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "End Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAR_START_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAR_START_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_START_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAR_END_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAR_END_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAR_END_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Deal_Currency", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Deal_Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Deal_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Deal_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deal Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CCY_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCY_S", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_B_Far", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_B_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_B_Far", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AMT_S_Far", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AMT_S_Far", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMT_S_Far", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Receive(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Net Pay(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Exchange_Rate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Exchange_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exchange Rate(Far)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Broker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Broker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Broker_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Broker_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Broker Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Brokerage_CCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Brokerage_CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage CCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Brokerage_Amount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Brokerage_Amount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Brokerage Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prodcut_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prodcut_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prodcut Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GL_Master", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Risk_Country", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Risk_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Risk Country", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resident_Country", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resident_Country", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resident Country", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Institutional_Sector", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Institutional_Sector", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Institutional Sector", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Maker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Maker", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Maker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p15", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p14", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Date(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p18", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p17", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixing Rate(NDF)", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Portfolio", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Portfolio", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Portfolio", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SWAPNEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SWAPNEAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPNEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SWAPFAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SWAPFAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SWAPFAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_S2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_S2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVAL_FX_RATE_B2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVAL_FX_RATE_B2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INDUSTRY_LC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INDUSTRY_LC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INDUSTRY_LC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrFar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrFar", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrFar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OwnDeal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OwnDeal", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OwnDeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, OCBS_CI_NO, [ClientName ], [Client Type], [Bank Ind], ContractN"& _ 
                "o, [Contract Type], SPOT_FWD_SW_FLG, AccountingCenter, [B/S], [Input Date], [Sta"& _ 
                "rt Date], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [End Date], FAR_START_DATE, FAR_END_DATE, ["& _ 
                "Deal Currency], [Deal Amount], CCY_B, AMT_B, Status, CCY_S, AMT_S, AMT_B_Far, AM"& _ 
                "T_S_Far, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Net Receive(NDF)], [Net Pay(NDF)], [Exchang"& _ 
                "e Rate], [Exchange Rate(Far)], Broker, [Broker Name], [Brokerage CCY], [Brokerag"& _ 
                "e Amount], [Prodcut Type], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [GL Master], [Risk Country"& _ 
                "], [Resident Country], [Institutional Sector], Maker, [Fixing Date(NDF)], [Fixin"& _ 
                "g Rate(NDF)], Portfolio, SWAPNEAR, SWAPFAR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         REVAL_FX_"& _ 
                "RATE_S, REVAL_FX_RATE_S2, REVAL_FX_RATE_B, REVAL_FX_RATE_B2, INDUSTRY_LC, Contra"& _ 
                "ctNrFar, Remarks, OwnDeal"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [FX ALL]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AMT_B, AMT_B_Far, AMT_S, AMT_S_Far, AccountingCenter, [B/S], [Bank Ind], B"& _ 
                "roker, [Broker Name], [Brokerage Amount], [Brokerage CCY], CCY_B, CCY_S, [Client"& _ 
                " Type], [ClientName ], [Contract Type], ContractNo, ContractNrFar, [Deal Amount]"& _ 
                ", [Deal Currency], [End Date], [Exchange Rate], [Exchange Rate(Far)], FAR_END_DA"& _ 
                "TE, FAR_START_DATE, [Fixing Date(NDF)], [Fixing Rate(NDF)], [GL Master], ID, IND"& _ 
                "USTRY_LC, [Input Date], [Institutional Sector], Maker, [Net Pay(NDF)], [Net Rece"& _ 
                "ive(NDF)], OCBS_CI_NO, OwnDeal, Portfolio, [Prodcut Type], REVAL_FX_RATE_B, REVA"& _ 
                "L_FX_RATE_B2, REVAL_FX_RATE_S, REVAL_FX_RATE_S2, Remarks, [Resident Country], [R"& _ 
                "isk Country], SPOT_FWD_SW_FLG, SWAPFAR, SWAPNEAR, [Start Date], Status FROM [FX "& _ 
                "ALL] ORDER BY [Input Date] DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TreasuryDataSet.FX_ALLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TreasuryDataSet.FX_ALLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.FX_ALLDataTable = New TreasuryDataSet.FX_ALLDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByAllFX(ByVal dataTable As TreasuryDataSet.FX_ALLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByAllFX() As TreasuryDataSet.FX_ALLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As TreasuryDataSet.FX_ALLDataTable = New TreasuryDataSet.FX_ALLDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TreasuryDataSet.FX_ALLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TreasuryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FX ALL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_OCBS_CI_NO As String,  _
                    ByVal Original_ClientName_ As String,  _
                    ByVal Original_Client_Type As String,  _
                    ByVal Original_Bank_Ind As String,  _
                    ByVal Original_ContractNo As String,  _
                    ByVal Original_Contract_Type As String,  _
                    ByVal Original_SPOT_FWD_SW_FLG As String,  _
                    ByVal Original_AccountingCenter As String,  _
                    ByVal p2 As String,  _
                    ByVal Original_Input_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_FAR_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_FAR_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_Deal_Currency As String,  _
                    ByVal Original_Deal_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_CCY_B As String,  _
                    ByVal Original_AMT_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_Status As String,  _
                    ByVal Original_CCY_S As String,  _
                    ByVal Original_AMT_S As Global.System.Nullable(Of Double),  _
                    ByVal Original_AMT_B_Far As Global.System.Nullable(Of Double),  _
                    ByVal Original_AMT_S_Far As Global.System.Nullable(Of Double),  _
                    ByVal p5 As Global.System.Nullable(Of Double),  _
                    ByVal p8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Exchange_Rate As Global.System.Nullable(Of Double),  _
                    ByVal p11 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Broker As String,  _
                    ByVal Original_Broker_Name As String,  _
                    ByVal Original_Brokerage_CCY As String,  _
                    ByVal Original_Brokerage_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_Prodcut_Type As String,  _
                    ByVal Original_GL_Master As String,  _
                    ByVal Original_Risk_Country As String,  _
                    ByVal Original_Resident_Country As String,  _
                    ByVal Original_Institutional_Sector As String,  _
                    ByVal Original_Maker As String,  _
                    ByVal p14 As Global.System.Nullable(Of Date),  _
                    ByVal p17 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Portfolio As String,  _
                    ByVal Original_SWAPNEAR As String,  _
                    ByVal Original_SWAPFAR As String,  _
                    ByVal Original_REVAL_FX_RATE_S As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_S2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_B2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_INDUSTRY_LC As String,  _
                    ByVal Original_ContractNrFar As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_OwnDeal As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_OCBS_CI_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OCBS_CI_NO,String)
            End If
            If (Original_ClientName_ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ClientName_,String)
            End If
            If (Original_Client_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Client_Type,String)
            End If
            If (Original_Bank_Ind Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Bank_Ind,String)
            End If
            If (Original_ContractNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ContractNo,String)
            End If
            If (Original_Contract_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Contract_Type,String)
            End If
            If (Original_SPOT_FWD_SW_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SPOT_FWD_SW_FLG,String)
            End If
            If (Original_AccountingCenter Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_AccountingCenter,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(p2,String)
            End If
            If (Original_Input_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Input_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Start_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Start_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_End_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_End_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_FAR_START_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_FAR_START_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_FAR_END_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_FAR_END_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Deal_Currency Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Deal_Currency,String)
            End If
            If (Original_Deal_Amount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Deal_Amount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_CCY_B Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_CCY_B,String)
            End If
            If (Original_AMT_B.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_AMT_B.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Status,String)
            End If
            If (Original_CCY_S Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CCY_S,String)
            End If
            If (Original_AMT_S.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_AMT_S.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_AMT_B_Far.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_AMT_B_Far.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_AMT_S_Far.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_AMT_S_Far.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(p8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Exchange_Rate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_Exchange_Rate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(p11.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_Broker Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_Broker,String)
            End If
            If (Original_Broker_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_Broker_Name,String)
            End If
            If (Original_Brokerage_CCY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_Brokerage_CCY,String)
            End If
            If (Original_Brokerage_Amount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_Brokerage_Amount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_Prodcut_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_Prodcut_Type,String)
            End If
            If (Original_GL_Master Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_GL_Master,String)
            End If
            If (Original_Risk_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_Risk_Country,String)
            End If
            If (Original_Resident_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_Resident_Country,String)
            End If
            If (Original_Institutional_Sector Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_Institutional_Sector,String)
            End If
            If (Original_Maker Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_Maker,String)
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(p14.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(p17.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_Portfolio Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_Portfolio,String)
            End If
            If (Original_SWAPNEAR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_SWAPNEAR,String)
            End If
            If (Original_SWAPFAR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_SWAPFAR,String)
            End If
            If (Original_REVAL_FX_RATE_S.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_REVAL_FX_RATE_S.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_S2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_REVAL_FX_RATE_S2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_B.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_REVAL_FX_RATE_B.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_B2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_REVAL_FX_RATE_B2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_INDUSTRY_LC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_INDUSTRY_LC,String)
            End If
            If (Original_ContractNrFar Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_ContractNrFar,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_Remarks,String)
            End If
            If (Original_OwnDeal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_OwnDeal,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal OCBS_CI_NO As String,  _
                    ByVal ClientName_ As String,  _
                    ByVal Client_Type As String,  _
                    ByVal Bank_Ind As String,  _
                    ByVal ContractNo As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal SPOT_FWD_SW_FLG As String,  _
                    ByVal AccountingCenter As String,  _
                    ByVal p1 As String,  _
                    ByVal Input_Date As Global.System.Nullable(Of Date),  _
                    ByVal Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal End_Date As Global.System.Nullable(Of Date),  _
                    ByVal FAR_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal FAR_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Deal_Currency As String,  _
                    ByVal Deal_Amount As Global.System.Nullable(Of Double),  _
                    ByVal CCY_B As String,  _
                    ByVal AMT_B As Global.System.Nullable(Of Double),  _
                    ByVal Status As String,  _
                    ByVal CCY_S As String,  _
                    ByVal AMT_S As Global.System.Nullable(Of Double),  _
                    ByVal AMT_B_Far As Global.System.Nullable(Of Double),  _
                    ByVal AMT_S_Far As Global.System.Nullable(Of Double),  _
                    ByVal p4 As Global.System.Nullable(Of Double),  _
                    ByVal p7 As Global.System.Nullable(Of Double),  _
                    ByVal Exchange_Rate As Global.System.Nullable(Of Double),  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal Broker As String,  _
                    ByVal Broker_Name As String,  _
                    ByVal Brokerage_CCY As String,  _
                    ByVal Brokerage_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Prodcut_Type As String,  _
                    ByVal GL_Master As String,  _
                    ByVal Risk_Country As String,  _
                    ByVal Resident_Country As String,  _
                    ByVal Institutional_Sector As String,  _
                    ByVal Maker As String,  _
                    ByVal p13 As Global.System.Nullable(Of Date),  _
                    ByVal p16 As Global.System.Nullable(Of Double),  _
                    ByVal Portfolio As String,  _
                    ByVal SWAPNEAR As String,  _
                    ByVal SWAPFAR As String,  _
                    ByVal REVAL_FX_RATE_S As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_S2 As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_B As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_B2 As Global.System.Nullable(Of Double),  _
                    ByVal INDUSTRY_LC As String,  _
                    ByVal ContractNrFar As String,  _
                    ByVal Remarks As String,  _
                    ByVal OwnDeal As String) As Integer
            If (OCBS_CI_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(OCBS_CI_NO,String)
            End If
            If (ClientName_ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientName_,String)
            End If
            If (Client_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Client_Type,String)
            End If
            If (Bank_Ind Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bank_Ind,String)
            End If
            If (ContractNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ContractNo,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Contract_Type,String)
            End If
            If (SPOT_FWD_SW_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SPOT_FWD_SW_FLG,String)
            End If
            If (AccountingCenter Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(AccountingCenter,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p1,String)
            End If
            If (Input_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Input_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (End_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(End_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FAR_START_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FAR_START_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (FAR_END_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FAR_END_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Deal_Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Deal_Currency,String)
            End If
            If (Deal_Amount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Deal_Amount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CCY_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CCY_B,String)
            End If
            If (AMT_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(AMT_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Status,String)
            End If
            If (CCY_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CCY_S,String)
            End If
            If (AMT_S.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AMT_S.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AMT_B_Far.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(AMT_B_Far.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AMT_S_Far.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(AMT_S_Far.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Exchange_Rate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Exchange_Rate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Broker Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Broker,String)
            End If
            If (Broker_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Broker_Name,String)
            End If
            If (Brokerage_CCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Brokerage_CCY,String)
            End If
            If (Brokerage_Amount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Brokerage_Amount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Prodcut_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Prodcut_Type,String)
            End If
            If (GL_Master Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(GL_Master,String)
            End If
            If (Risk_Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Risk_Country,String)
            End If
            If (Resident_Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Resident_Country,String)
            End If
            If (Institutional_Sector Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Institutional_Sector,String)
            End If
            If (Maker Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Maker,String)
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(p13.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(p16.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Portfolio Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Portfolio,String)
            End If
            If (SWAPNEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(SWAPNEAR,String)
            End If
            If (SWAPFAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(SWAPFAR,String)
            End If
            If (REVAL_FX_RATE_S.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(REVAL_FX_RATE_S.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_S2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(REVAL_FX_RATE_S2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(REVAL_FX_RATE_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_B2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(REVAL_FX_RATE_B2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (INDUSTRY_LC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(INDUSTRY_LC,String)
            End If
            If (ContractNrFar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(ContractNrFar,String)
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Remarks,String)
            End If
            If (OwnDeal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(OwnDeal,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal OCBS_CI_NO As String,  _
                    ByVal ClientName_ As String,  _
                    ByVal Client_Type As String,  _
                    ByVal Bank_Ind As String,  _
                    ByVal ContractNo As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal SPOT_FWD_SW_FLG As String,  _
                    ByVal AccountingCenter As String,  _
                    ByVal p1 As String,  _
                    ByVal Input_Date As Global.System.Nullable(Of Date),  _
                    ByVal Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal End_Date As Global.System.Nullable(Of Date),  _
                    ByVal FAR_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal FAR_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Deal_Currency As String,  _
                    ByVal Deal_Amount As Global.System.Nullable(Of Double),  _
                    ByVal CCY_B As String,  _
                    ByVal AMT_B As Global.System.Nullable(Of Double),  _
                    ByVal Status As String,  _
                    ByVal CCY_S As String,  _
                    ByVal AMT_S As Global.System.Nullable(Of Double),  _
                    ByVal AMT_B_Far As Global.System.Nullable(Of Double),  _
                    ByVal AMT_S_Far As Global.System.Nullable(Of Double),  _
                    ByVal p4 As Global.System.Nullable(Of Double),  _
                    ByVal p7 As Global.System.Nullable(Of Double),  _
                    ByVal Exchange_Rate As Global.System.Nullable(Of Double),  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal Broker As String,  _
                    ByVal Broker_Name As String,  _
                    ByVal Brokerage_CCY As String,  _
                    ByVal Brokerage_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Prodcut_Type As String,  _
                    ByVal GL_Master As String,  _
                    ByVal Risk_Country As String,  _
                    ByVal Resident_Country As String,  _
                    ByVal Institutional_Sector As String,  _
                    ByVal Maker As String,  _
                    ByVal p13 As Global.System.Nullable(Of Date),  _
                    ByVal p16 As Global.System.Nullable(Of Double),  _
                    ByVal Portfolio As String,  _
                    ByVal SWAPNEAR As String,  _
                    ByVal SWAPFAR As String,  _
                    ByVal REVAL_FX_RATE_S As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_S2 As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_B As Global.System.Nullable(Of Double),  _
                    ByVal REVAL_FX_RATE_B2 As Global.System.Nullable(Of Double),  _
                    ByVal INDUSTRY_LC As String,  _
                    ByVal ContractNrFar As String,  _
                    ByVal Remarks As String,  _
                    ByVal OwnDeal As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_OCBS_CI_NO As String,  _
                    ByVal Original_ClientName_ As String,  _
                    ByVal Original_Client_Type As String,  _
                    ByVal Original_Bank_Ind As String,  _
                    ByVal Original_ContractNo As String,  _
                    ByVal Original_Contract_Type As String,  _
                    ByVal Original_SPOT_FWD_SW_FLG As String,  _
                    ByVal Original_AccountingCenter As String,  _
                    ByVal p2 As String,  _
                    ByVal Original_Input_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_FAR_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_FAR_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_Deal_Currency As String,  _
                    ByVal Original_Deal_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_CCY_B As String,  _
                    ByVal Original_AMT_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_Status As String,  _
                    ByVal Original_CCY_S As String,  _
                    ByVal Original_AMT_S As Global.System.Nullable(Of Double),  _
                    ByVal Original_AMT_B_Far As Global.System.Nullable(Of Double),  _
                    ByVal Original_AMT_S_Far As Global.System.Nullable(Of Double),  _
                    ByVal p5 As Global.System.Nullable(Of Double),  _
                    ByVal p8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Exchange_Rate As Global.System.Nullable(Of Double),  _
                    ByVal p11 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Broker As String,  _
                    ByVal Original_Broker_Name As String,  _
                    ByVal Original_Brokerage_CCY As String,  _
                    ByVal Original_Brokerage_Amount As Global.System.Nullable(Of Double),  _
                    ByVal Original_Prodcut_Type As String,  _
                    ByVal Original_GL_Master As String,  _
                    ByVal Original_Risk_Country As String,  _
                    ByVal Original_Resident_Country As String,  _
                    ByVal Original_Institutional_Sector As String,  _
                    ByVal Original_Maker As String,  _
                    ByVal p14 As Global.System.Nullable(Of Date),  _
                    ByVal p17 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Portfolio As String,  _
                    ByVal Original_SWAPNEAR As String,  _
                    ByVal Original_SWAPFAR As String,  _
                    ByVal Original_REVAL_FX_RATE_S As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_S2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_REVAL_FX_RATE_B2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_INDUSTRY_LC As String,  _
                    ByVal Original_ContractNrFar As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_OwnDeal As String) As Integer
            If (OCBS_CI_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(OCBS_CI_NO,String)
            End If
            If (ClientName_ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientName_,String)
            End If
            If (Client_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Client_Type,String)
            End If
            If (Bank_Ind Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Bank_Ind,String)
            End If
            If (ContractNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ContractNo,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Contract_Type,String)
            End If
            If (SPOT_FWD_SW_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SPOT_FWD_SW_FLG,String)
            End If
            If (AccountingCenter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(AccountingCenter,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p1,String)
            End If
            If (Input_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Input_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (End_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(End_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FAR_START_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(FAR_START_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (FAR_END_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FAR_END_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Deal_Currency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Deal_Currency,String)
            End If
            If (Deal_Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Deal_Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CCY_B Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CCY_B,String)
            End If
            If (AMT_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(AMT_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Status,String)
            End If
            If (CCY_S Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CCY_S,String)
            End If
            If (AMT_S.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AMT_S.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AMT_B_Far.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AMT_B_Far.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AMT_S_Far.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(AMT_S_Far.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Exchange_Rate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Exchange_Rate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Broker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Broker,String)
            End If
            If (Broker_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Broker_Name,String)
            End If
            If (Brokerage_CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Brokerage_CCY,String)
            End If
            If (Brokerage_Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Brokerage_Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Prodcut_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Prodcut_Type,String)
            End If
            If (GL_Master Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(GL_Master,String)
            End If
            If (Risk_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Risk_Country,String)
            End If
            If (Resident_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Resident_Country,String)
            End If
            If (Institutional_Sector Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Institutional_Sector,String)
            End If
            If (Maker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Maker,String)
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(p13.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(p16.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Portfolio Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Portfolio,String)
            End If
            If (SWAPNEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(SWAPNEAR,String)
            End If
            If (SWAPFAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(SWAPFAR,String)
            End If
            If (REVAL_FX_RATE_S.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(REVAL_FX_RATE_S.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_S2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(REVAL_FX_RATE_S2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(REVAL_FX_RATE_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (REVAL_FX_RATE_B2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(REVAL_FX_RATE_B2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (INDUSTRY_LC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(INDUSTRY_LC,String)
            End If
            If (ContractNrFar Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(ContractNrFar,String)
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Remarks,String)
            End If
            If (OwnDeal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(OwnDeal,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_ID,Integer)
            If (Original_OCBS_CI_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_OCBS_CI_NO,String)
            End If
            If (Original_ClientName_ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_ClientName_,String)
            End If
            If (Original_Client_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Client_Type,String)
            End If
            If (Original_Bank_Ind Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_Bank_Ind,String)
            End If
            If (Original_ContractNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_ContractNo,String)
            End If
            If (Original_Contract_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_Contract_Type,String)
            End If
            If (Original_SPOT_FWD_SW_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_SPOT_FWD_SW_FLG,String)
            End If
            If (Original_AccountingCenter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_AccountingCenter,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(p2,String)
            End If
            If (Original_Input_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_Input_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_Start_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_Start_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_End_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_End_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_FAR_START_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_FAR_START_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_FAR_END_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_FAR_END_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_Deal_Currency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Deal_Currency,String)
            End If
            If (Original_Deal_Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_Deal_Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_CCY_B Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_CCY_B,String)
            End If
            If (Original_AMT_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_AMT_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Status,String)
            End If
            If (Original_CCY_S Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CCY_S,String)
            End If
            If (Original_AMT_S.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_AMT_S.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_AMT_B_Far.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_AMT_B_Far.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_AMT_S_Far.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_AMT_S_Far.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(p8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_Exchange_Rate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_Exchange_Rate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(p11.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_Broker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_Broker,String)
            End If
            If (Original_Broker_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_Broker_Name,String)
            End If
            If (Original_Brokerage_CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_Brokerage_CCY,String)
            End If
            If (Original_Brokerage_Amount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_Brokerage_Amount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_Prodcut_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_Prodcut_Type,String)
            End If
            If (Original_GL_Master Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_GL_Master,String)
            End If
            If (Original_Risk_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_Risk_Country,String)
            End If
            If (Original_Resident_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_Resident_Country,String)
            End If
            If (Original_Institutional_Sector Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_Institutional_Sector,String)
            End If
            If (Original_Maker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_Maker,String)
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(p14.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(p17.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_Portfolio Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_Portfolio,String)
            End If
            If (Original_SWAPNEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_SWAPNEAR,String)
            End If
            If (Original_SWAPFAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_SWAPFAR,String)
            End If
            If (Original_REVAL_FX_RATE_S.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(Original_REVAL_FX_RATE_S.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_S2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(Original_REVAL_FX_RATE_S2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(Original_REVAL_FX_RATE_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            End If
            If (Original_REVAL_FX_RATE_B2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_REVAL_FX_RATE_B2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            End If
            If (Original_INDUSTRY_LC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_INDUSTRY_LC,String)
            End If
            If (Original_ContractNrFar Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(Original_ContractNrFar,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(Original_Remarks,String)
            End If
            If (Original_OwnDeal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(Original_OwnDeal,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FX_Pairs_TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FX_Pairs"
            tableMapping.ColumnMappings.Add("ContractNr", "ContractNr")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("ContractType", "ContractType")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("Input Date", "Input Date")
            tableMapping.ColumnMappings.Add("ValueDate", "ValueDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("B/S", "B/S")
            tableMapping.ColumnMappings.Add("Buy CCY", "Buy CCY")
            tableMapping.ColumnMappings.Add("Buy Amount", "Buy Amount")
            tableMapping.ColumnMappings.Add("Sell CCY", "Sell CCY")
            tableMapping.ColumnMappings.Add("Sell Amount", "Sell Amount")
            tableMapping.ColumnMappings.Add("Exchange Rate", "Exchange Rate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DISTINCT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         A.ContractNo AS 'ContractNr', B.DealTy"& _ 
                "pe AS 'Type', A.OCBS_CI_NO AS 'ClientNr', A.[ClientName ] AS 'ClientName', A.[Co"& _ 
                "ntract Type] AS 'ContractType', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         A.[Prodcut Type] AS '"& _ 
                "ProductType', A.[Input Date], A.[Start Date] AS 'ValueDate', A.[End Date] AS 'Ma"& _ 
                "turityDate', A.[B/S], A.CCY_B AS 'Buy CCY', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         A.AMT_B A"& _ 
                "S 'Buy Amount', A.CCY_S AS 'Sell CCY', A.AMT_S AS 'Sell Amount', A.[Exchange Rat"& _ 
                "e]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [FX ALL] AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [FX DAILY"& _ 
                " REVALUATION] AS B ON A.ContractNo = B.ContractNr AND A.[B/S] = B.DealSellBuy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"U"& _ 
                "NION ALL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DISTINCT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         A.ContractNo AS 'ContractNr"& _ 
                "', B.DealType AS 'Type', B.ClientNo AS 'ClientNr', B.ClientName, B.ContractType,"& _ 
                " B.ProductType, B.InputDate, B.ValueDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.MaturityD"& _ 
                "ate, B.DealSellBuy, B.BuyCCY AS 'Buy CCY', B.BuyAmount AS 'Buy Amount', B.SellCC"& _ 
                "Y AS 'Sell CCY', B.SellAmount AS 'Sell Amount', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.[Ex"& _ 
                "change Rate]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [FX ALL] AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                " [FX DAILY REVALUATION] AS B ON A.ContractNo = B.ContractNr AND A.[B/S] <> B.Dea"& _ 
                "lSellBuy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY 'ContractNr' DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill_FX_Pairs(ByVal dataTable As TreasuryDataSet.FX_PairsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData_FX_Pairs() As TreasuryDataSet.FX_PairsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TreasuryDataSet.FX_PairsDataTable = New TreasuryDataSet.FX_PairsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cUSTOMER_RATINGTableAdapter As CUSTOMER_RATINGTableAdapter
        
        Private _fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter
        
        Private _fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter As FX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter
        
        Private _oWN_CURRENCIESTableAdapter As OWN_CURRENCIESTableAdapter
        
        Private _fX_ALLTableAdapter As FX_ALLTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CUSTOMER_RATINGTableAdapter() As CUSTOMER_RATINGTableAdapter
            Get
                Return Me._cUSTOMER_RATINGTableAdapter
            End Get
            Set
                Me._cUSTOMER_RATINGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter() As FX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter
            Get
                Return Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter
            End Get
            Set
                Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter() As FX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter
            Get
                Return Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter
            End Get
            Set
                Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property OWN_CURRENCIESTableAdapter() As OWN_CURRENCIESTableAdapter
            Get
                Return Me._oWN_CURRENCIESTableAdapter
            End Get
            Set
                Me._oWN_CURRENCIESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FX_ALLTableAdapter() As FX_ALLTableAdapter
            Get
                Return Me._fX_ALLTableAdapter
            End Get
            Set
                Me._fX_ALLTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cUSTOMER_RATINGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cUSTOMER_RATINGTableAdapter.Connection
                End If
                If ((Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection) Is Nothing)) Then
                    Return Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection
                End If
                If ((Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection) Is Nothing)) Then
                    Return Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection
                End If
                If ((Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oWN_CURRENCIESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oWN_CURRENCIESTableAdapter.Connection
                End If
                If ((Not (Me._fX_ALLTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fX_ALLTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fX_ALLTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As TreasuryDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CUSTOMER_RATING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cUSTOMER_RATINGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.OWN_CURRENCIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oWN_CURRENCIESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FX_ALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fX_ALLTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As TreasuryDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CUSTOMER_RATING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cUSTOMER_RATINGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.OWN_CURRENCIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oWN_CURRENCIESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FX_ALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fX_ALLTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As TreasuryDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FX_ALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fX_ALLTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.OWN_CURRENCIES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oWN_CURRENCIESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Details_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CUSTOMER_RATING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cUSTOMER_RATINGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FX_CREDIT_EQUIVALENT_Basic_REAL_TIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As TreasuryDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cUSTOMER_RATINGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oWN_CURRENCIESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fX_ALLTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fX_ALLTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cUSTOMER_RATINGTableAdapter, Me._cUSTOMER_RATINGTableAdapter.Connection)
                    Me._cUSTOMER_RATINGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cUSTOMER_RATINGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cUSTOMER_RATINGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cUSTOMER_RATINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cUSTOMER_RATINGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter, Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection)
                    Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter, Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection)
                    Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oWN_CURRENCIESTableAdapter, Me._oWN_CURRENCIESTableAdapter.Connection)
                    Me._oWN_CURRENCIESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oWN_CURRENCIESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oWN_CURRENCIESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oWN_CURRENCIESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oWN_CURRENCIESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fX_ALLTableAdapter, Me._fX_ALLTableAdapter.Connection)
                    Me._fX_ALLTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_ALLTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fX_ALLTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fX_ALLTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fX_ALLTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cUSTOMER_RATINGTableAdapter) Is Nothing) Then
                    Me._cUSTOMER_RATINGTableAdapter.Connection = CType(revertConnections(Me._cUSTOMER_RATINGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cUSTOMER_RATINGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter) Is Nothing) Then
                    Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Connection = CType(revertConnections(Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_CREDIT_EQUIVALENT_Basic_REAL_TIMETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter) Is Nothing) Then
                    Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Connection = CType(revertConnections(Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_CREDIT_EQUIVALENT_Details_REAL_TIMETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oWN_CURRENCIESTableAdapter) Is Nothing) Then
                    Me._oWN_CURRENCIESTableAdapter.Connection = CType(revertConnections(Me._oWN_CURRENCIESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oWN_CURRENCIESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fX_ALLTableAdapter) Is Nothing) Then
                    Me._fX_ALLTableAdapter.Connection = CType(revertConnections(Me._fX_ALLTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fX_ALLTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
