'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SECURITIESDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SECURITIESDataset
    Inherits Global.System.Data.DataSet
    
    Private tableSECURITIES_OUR As SECURITIES_OURDataTable
    
    Private tableSECURITIES_DEPRECIATIONS As SECURITIES_DEPRECIATIONSDataTable
    
    Private tableSECURITIES_DailyPrice As SECURITIES_DailyPriceDataTable
    
    Private tableSECURITIES_LIQUIDITYRESERVE As SECURITIES_LIQUIDITYRESERVEDataTable
    
    Private tableSECURITIES_BOOKINGS As SECURITIES_BOOKINGSDataTable
    
    Private tableSECURITIES_BESTAND As SECURITIES_BESTANDDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SECURITIES_OUR")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_OURDataTable(ds.Tables("SECURITIES_OUR")))
            End If
            If (Not (ds.Tables("SECURITIES_DEPRECIATIONS")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_DEPRECIATIONSDataTable(ds.Tables("SECURITIES_DEPRECIATIONS")))
            End If
            If (Not (ds.Tables("SECURITIES_DailyPrice")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_DailyPriceDataTable(ds.Tables("SECURITIES_DailyPrice")))
            End If
            If (Not (ds.Tables("SECURITIES_LIQUIDITYRESERVE")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_LIQUIDITYRESERVEDataTable(ds.Tables("SECURITIES_LIQUIDITYRESERVE")))
            End If
            If (Not (ds.Tables("SECURITIES_BOOKINGS")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_BOOKINGSDataTable(ds.Tables("SECURITIES_BOOKINGS")))
            End If
            If (Not (ds.Tables("SECURITIES_BESTAND")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_BESTANDDataTable(ds.Tables("SECURITIES_BESTAND")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_OUR() As SECURITIES_OURDataTable
        Get
            Return Me.tableSECURITIES_OUR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_DEPRECIATIONS() As SECURITIES_DEPRECIATIONSDataTable
        Get
            Return Me.tableSECURITIES_DEPRECIATIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_DailyPrice() As SECURITIES_DailyPriceDataTable
        Get
            Return Me.tableSECURITIES_DailyPrice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_LIQUIDITYRESERVE() As SECURITIES_LIQUIDITYRESERVEDataTable
        Get
            Return Me.tableSECURITIES_LIQUIDITYRESERVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_BOOKINGS() As SECURITIES_BOOKINGSDataTable
        Get
            Return Me.tableSECURITIES_BOOKINGS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SECURITIES_BESTAND() As SECURITIES_BESTANDDataTable
        Get
            Return Me.tableSECURITIES_BESTAND
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SECURITIESDataset = CType(MyBase.Clone,SECURITIESDataset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("SECURITIES_OUR")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_OURDataTable(ds.Tables("SECURITIES_OUR")))
            End If
            If (Not (ds.Tables("SECURITIES_DEPRECIATIONS")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_DEPRECIATIONSDataTable(ds.Tables("SECURITIES_DEPRECIATIONS")))
            End If
            If (Not (ds.Tables("SECURITIES_DailyPrice")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_DailyPriceDataTable(ds.Tables("SECURITIES_DailyPrice")))
            End If
            If (Not (ds.Tables("SECURITIES_LIQUIDITYRESERVE")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_LIQUIDITYRESERVEDataTable(ds.Tables("SECURITIES_LIQUIDITYRESERVE")))
            End If
            If (Not (ds.Tables("SECURITIES_BOOKINGS")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_BOOKINGSDataTable(ds.Tables("SECURITIES_BOOKINGS")))
            End If
            If (Not (ds.Tables("SECURITIES_BESTAND")) Is Nothing) Then
                MyBase.Tables.Add(New SECURITIES_BESTANDDataTable(ds.Tables("SECURITIES_BESTAND")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSECURITIES_OUR = CType(MyBase.Tables("SECURITIES_OUR"),SECURITIES_OURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_OUR) Is Nothing) Then
                Me.tableSECURITIES_OUR.InitVars
            End If
        End If
        Me.tableSECURITIES_DEPRECIATIONS = CType(MyBase.Tables("SECURITIES_DEPRECIATIONS"),SECURITIES_DEPRECIATIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_DEPRECIATIONS) Is Nothing) Then
                Me.tableSECURITIES_DEPRECIATIONS.InitVars
            End If
        End If
        Me.tableSECURITIES_DailyPrice = CType(MyBase.Tables("SECURITIES_DailyPrice"),SECURITIES_DailyPriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_DailyPrice) Is Nothing) Then
                Me.tableSECURITIES_DailyPrice.InitVars
            End If
        End If
        Me.tableSECURITIES_LIQUIDITYRESERVE = CType(MyBase.Tables("SECURITIES_LIQUIDITYRESERVE"),SECURITIES_LIQUIDITYRESERVEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_LIQUIDITYRESERVE) Is Nothing) Then
                Me.tableSECURITIES_LIQUIDITYRESERVE.InitVars
            End If
        End If
        Me.tableSECURITIES_BOOKINGS = CType(MyBase.Tables("SECURITIES_BOOKINGS"),SECURITIES_BOOKINGSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_BOOKINGS) Is Nothing) Then
                Me.tableSECURITIES_BOOKINGS.InitVars
            End If
        End If
        Me.tableSECURITIES_BESTAND = CType(MyBase.Tables("SECURITIES_BESTAND"),SECURITIES_BESTANDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSECURITIES_BESTAND) Is Nothing) Then
                Me.tableSECURITIES_BESTAND.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "SECURITIESDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SECURITIESDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSECURITIES_OUR = New SECURITIES_OURDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_OUR)
        Me.tableSECURITIES_DEPRECIATIONS = New SECURITIES_DEPRECIATIONSDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_DEPRECIATIONS)
        Me.tableSECURITIES_DailyPrice = New SECURITIES_DailyPriceDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_DailyPrice)
        Me.tableSECURITIES_LIQUIDITYRESERVE = New SECURITIES_LIQUIDITYRESERVEDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_LIQUIDITYRESERVE)
        Me.tableSECURITIES_BOOKINGS = New SECURITIES_BOOKINGSDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_BOOKINGS)
        Me.tableSECURITIES_BESTAND = New SECURITIES_BESTANDDataTable()
        MyBase.Tables.Add(Me.tableSECURITIES_BESTAND)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_OUR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_DEPRECIATIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_DailyPrice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_LIQUIDITYRESERVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_BOOKINGS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeSECURITIES_BESTAND() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SECURITIESDataset = New SECURITIESDataset()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_OURRowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_OURRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_DEPRECIATIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_DEPRECIATIONSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_DailyPriceRowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_DailyPriceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_LIQUIDITYRESERVERowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_LIQUIDITYRESERVERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_BOOKINGSRowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_BOOKINGSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub SECURITIES_BESTANDRowChangeEventHandler(ByVal sender As Object, ByVal e As SECURITIES_BESTANDRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_OURDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_OURRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnISIN As Global.System.Data.DataColumn
        
        Private columnSecurityName As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnPrincipalOrigAmt As Global.System.Data.DataColumn
        
        Private columnPrincipalEuroAmt As Global.System.Data.DataColumn
        
        Private columnContractNrOCBS As Global.System.Data.DataColumn
        
        Private columnAssetType As Global.System.Data.DataColumn
        
        Private columnTradeDate As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnSektor As Global.System.Data.DataColumn
        
        Private columnSektorCountry As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnPurchase_Price As Global.System.Data.DataColumn
        
        Private columnAmt_Paid As Global.System.Data.DataColumn
        
        Private columnRIC As Global.System.Data.DataColumn
        
        Private columnSwap_Price As Global.System.Data.DataColumn
        
        Private columnindustry As Global.System.Data.DataColumn
        
        Private columnFixed_rate_coupon As Global.System.Data.DataColumn
        
        Private _columnFloating_leg__spread_ As Global.System.Data.DataColumn
        
        Private columnpurchasing_yield As Global.System.Data.DataColumn
        
        Private columnbond_type As Global.System.Data.DataColumn
        
        Private columnwith_swap_or_not As Global.System.Data.DataColumn
        
        Private _columnMoody_Rating As Global.System.Data.DataColumn
        
        Private _columnS___P As Global.System.Data.DataColumn
        
        Private _columnFitch_Rating As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnSektorDescription As Global.System.Data.DataColumn
        
        Private columnAmt_Paid_Eur As Global.System.Data.DataColumn
        
        Private columnBewertungsabs_LiquideAktiva As Global.System.Data.DataColumn
        
        Private columnLCR_Position As Global.System.Data.DataColumn
        
        Private columnLCR_Position_Name As Global.System.Data.DataColumn
        
        Private columnLinkedToIRS As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_OUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SecurityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecurityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalOrigAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalOrigAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalEuroAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalEuroAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractNrOCBSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNrOCBS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AssetTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TradeDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SektorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSektor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SektorCountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSektorCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Purchase_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchase_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Amt_PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_Paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Swap_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSwap_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property industryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnindustry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Fixed_rate_couponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixed_rate_coupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Floating_leg__spread_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFloating_leg__spread_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property purchasing_yieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurchasing_yield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bond_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property with_swap_or_notColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwith_swap_or_not
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Moody_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnMoody_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _S___PColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnS___P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Fitch_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnFitch_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SektorDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSektorDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Amt_Paid_EurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_Paid_Eur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Bewertungsabs_LiquideAktivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBewertungsabs_LiquideAktiva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LCR_PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCR_Position
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LCR_Position_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCR_Position_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LinkedToIRSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinkedToIRS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_OURRow
            Get
                Return CType(Me.Rows(index),SECURITIES_OURRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_OURRowChanging As SECURITIES_OURRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_OURRowChanged As SECURITIES_OURRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_OURRowDeleting As SECURITIES_OURRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_OURRowDeleted As SECURITIES_OURRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_OURRow(ByVal row As SECURITIES_OURRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_OURRow( _
                    ByVal ISIN As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Currency As String,  _
                    ByVal PrincipalOrigAmt As Double,  _
                    ByVal PrincipalEuroAmt As Double,  _
                    ByVal ContractNrOCBS As Double,  _
                    ByVal AssetType As String,  _
                    ByVal TradeDate As Date,  _
                    ByVal StartDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal Sektor As Double,  _
                    ByVal SektorCountry As String,  _
                    ByVal STATUS As String,  _
                    ByVal Purchase_Price As Double,  _
                    ByVal Amt_Paid As Double,  _
                    ByVal RIC As String,  _
                    ByVal Swap_Price As Double,  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Double,  _
                    ByVal _Floating_leg__spread_ As Double,  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal _Moody_Rating As String,  _
                    ByVal _S___P As String,  _
                    ByVal _Fitch_Rating As String,  _
                    ByVal ClientNr As String,  _
                    ByVal SektorDescription As String,  _
                    ByVal Amt_Paid_Eur As Double,  _
                    ByVal Bewertungsabs_LiquideAktiva As Double,  _
                    ByVal LCR_Position As String,  _
                    ByVal LCR_Position_Name As String,  _
                    ByVal LinkedToIRS As Boolean,  _
                    ByVal ExchangeRate As Double) As SECURITIES_OURRow
            Dim rowSECURITIES_OURRow As SECURITIES_OURRow = CType(Me.NewRow,SECURITIES_OURRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ISIN, SecurityName, Currency, PrincipalOrigAmt, PrincipalEuroAmt, ContractNrOCBS, AssetType, TradeDate, StartDate, MaturityDate, Sektor, SektorCountry, STATUS, Purchase_Price, Amt_Paid, RIC, Swap_Price, industry, Fixed_rate_coupon, _Floating_leg__spread_, purchasing_yield, bond_type, with_swap_or_not, _Moody_Rating, _S___P, _Fitch_Rating, ClientNr, SektorDescription, Amt_Paid_Eur, Bewertungsabs_LiquideAktiva, LCR_Position, LCR_Position_Name, LinkedToIRS, ExchangeRate}
            rowSECURITIES_OURRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_OURRow)
            Return rowSECURITIES_OURRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_OURRow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_OURRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_OURDataTable = CType(MyBase.Clone,SECURITIES_OURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_OURDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnISIN = MyBase.Columns("ISIN")
            Me.columnSecurityName = MyBase.Columns("SecurityName")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnPrincipalOrigAmt = MyBase.Columns("PrincipalOrigAmt")
            Me.columnPrincipalEuroAmt = MyBase.Columns("PrincipalEuroAmt")
            Me.columnContractNrOCBS = MyBase.Columns("ContractNrOCBS")
            Me.columnAssetType = MyBase.Columns("AssetType")
            Me.columnTradeDate = MyBase.Columns("TradeDate")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnSektor = MyBase.Columns("Sektor")
            Me.columnSektorCountry = MyBase.Columns("SektorCountry")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnPurchase_Price = MyBase.Columns("Purchase_Price")
            Me.columnAmt_Paid = MyBase.Columns("Amt_Paid")
            Me.columnRIC = MyBase.Columns("RIC")
            Me.columnSwap_Price = MyBase.Columns("Swap_Price")
            Me.columnindustry = MyBase.Columns("industry")
            Me.columnFixed_rate_coupon = MyBase.Columns("Fixed rate coupon")
            Me._columnFloating_leg__spread_ = MyBase.Columns("Floating(leg) spread ")
            Me.columnpurchasing_yield = MyBase.Columns("purchasing yield")
            Me.columnbond_type = MyBase.Columns("bond type")
            Me.columnwith_swap_or_not = MyBase.Columns("with swap or not")
            Me._columnMoody_Rating = MyBase.Columns("Moody-Rating")
            Me._columnS___P = MyBase.Columns("S & P")
            Me._columnFitch_Rating = MyBase.Columns("Fitch-Rating")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnSektorDescription = MyBase.Columns("SektorDescription")
            Me.columnAmt_Paid_Eur = MyBase.Columns("Amt_Paid_Eur")
            Me.columnBewertungsabs_LiquideAktiva = MyBase.Columns("Bewertungsabs_LiquideAktiva")
            Me.columnLCR_Position = MyBase.Columns("LCR_Position")
            Me.columnLCR_Position_Name = MyBase.Columns("LCR_Position_Name")
            Me.columnLinkedToIRS = MyBase.Columns("LinkedToIRS")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnISIN = New Global.System.Data.DataColumn("ISIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN)
            Me.columnSecurityName = New Global.System.Data.DataColumn("SecurityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecurityName)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnPrincipalOrigAmt = New Global.System.Data.DataColumn("PrincipalOrigAmt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalOrigAmt)
            Me.columnPrincipalEuroAmt = New Global.System.Data.DataColumn("PrincipalEuroAmt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalEuroAmt)
            Me.columnContractNrOCBS = New Global.System.Data.DataColumn("ContractNrOCBS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNrOCBS)
            Me.columnAssetType = New Global.System.Data.DataColumn("AssetType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetType)
            Me.columnTradeDate = New Global.System.Data.DataColumn("TradeDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeDate)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnSektor = New Global.System.Data.DataColumn("Sektor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSektor)
            Me.columnSektorCountry = New Global.System.Data.DataColumn("SektorCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSektorCountry)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnPurchase_Price = New Global.System.Data.DataColumn("Purchase_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchase_Price)
            Me.columnAmt_Paid = New Global.System.Data.DataColumn("Amt_Paid", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_Paid)
            Me.columnRIC = New Global.System.Data.DataColumn("RIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIC)
            Me.columnSwap_Price = New Global.System.Data.DataColumn("Swap_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSwap_Price)
            Me.columnindustry = New Global.System.Data.DataColumn("industry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnindustry)
            Me.columnFixed_rate_coupon = New Global.System.Data.DataColumn("Fixed rate coupon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixed_rate_coupon)
            Me._columnFloating_leg__spread_ = New Global.System.Data.DataColumn("Floating(leg) spread ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFloating_leg__spread_")
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_UserColumnName", "Floating(leg) spread ")
            MyBase.Columns.Add(Me._columnFloating_leg__spread_)
            Me.columnpurchasing_yield = New Global.System.Data.DataColumn("purchasing yield", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurchasing_yield)
            Me.columnbond_type = New Global.System.Data.DataColumn("bond type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_type)
            Me.columnwith_swap_or_not = New Global.System.Data.DataColumn("with swap or not", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwith_swap_or_not)
            Me._columnMoody_Rating = New Global.System.Data.DataColumn("Moody-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMoody_Rating")
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Moody-Rating")
            MyBase.Columns.Add(Me._columnMoody_Rating)
            Me._columnS___P = New Global.System.Data.DataColumn("S & P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnS___P.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnS___P")
            Me._columnS___P.ExtendedProperties.Add("Generator_UserColumnName", "S & P")
            MyBase.Columns.Add(Me._columnS___P)
            Me._columnFitch_Rating = New Global.System.Data.DataColumn("Fitch-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFitch_Rating")
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Fitch-Rating")
            MyBase.Columns.Add(Me._columnFitch_Rating)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnSektorDescription = New Global.System.Data.DataColumn("SektorDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSektorDescription)
            Me.columnAmt_Paid_Eur = New Global.System.Data.DataColumn("Amt_Paid_Eur", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_Paid_Eur)
            Me.columnBewertungsabs_LiquideAktiva = New Global.System.Data.DataColumn("Bewertungsabs_LiquideAktiva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBewertungsabs_LiquideAktiva)
            Me.columnLCR_Position = New Global.System.Data.DataColumn("LCR_Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCR_Position)
            Me.columnLCR_Position_Name = New Global.System.Data.DataColumn("LCR_Position_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCR_Position_Name)
            Me.columnLinkedToIRS = New Global.System.Data.DataColumn("LinkedToIRS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinkedToIRS)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnISIN.AllowDBNull = false
            Me.columnISIN.MaxLength = 50
            Me.columnSecurityName.AllowDBNull = false
            Me.columnSecurityName.MaxLength = 255
            Me.columnCurrency.AllowDBNull = false
            Me.columnCurrency.MaxLength = 10
            Me.columnPrincipalOrigAmt.AllowDBNull = false
            Me.columnPrincipalEuroAmt.AllowDBNull = false
            Me.columnContractNrOCBS.AllowDBNull = false
            Me.columnAssetType.AllowDBNull = false
            Me.columnAssetType.MaxLength = 255
            Me.columnTradeDate.AllowDBNull = false
            Me.columnStartDate.AllowDBNull = false
            Me.columnMaturityDate.AllowDBNull = false
            Me.columnSektor.AllowDBNull = false
            Me.columnSektorCountry.AllowDBNull = false
            Me.columnSektorCountry.MaxLength = 255
            Me.columnSTATUS.AllowDBNull = false
            Me.columnSTATUS.MaxLength = 10
            Me.columnPurchase_Price.AllowDBNull = false
            Me.columnAmt_Paid.AllowDBNull = false
            Me.columnRIC.MaxLength = 255
            Me.columnindustry.MaxLength = 255
            Me.columnpurchasing_yield.MaxLength = 255
            Me.columnbond_type.MaxLength = 255
            Me.columnwith_swap_or_not.MaxLength = 255
            Me._columnMoody_Rating.MaxLength = 255
            Me._columnS___P.MaxLength = 255
            Me._columnFitch_Rating.MaxLength = 255
            Me.columnClientNr.MaxLength = 50
            Me.columnSektorDescription.MaxLength = 255
            Me.columnAmt_Paid_Eur.AllowDBNull = false
            Me.columnLCR_Position.MaxLength = 50
            Me.columnLCR_Position_Name.MaxLength = 255
            Me.columnExchangeRate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_OURRow() As SECURITIES_OURRow
            Return CType(Me.NewRow,SECURITIES_OURRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_OURRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_OURRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_OURRowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_OURRowChanged(Me, New SECURITIES_OURRowChangeEvent(CType(e.Row,SECURITIES_OURRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_OURRowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_OURRowChanging(Me, New SECURITIES_OURRowChangeEvent(CType(e.Row,SECURITIES_OURRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_OURRowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_OURRowDeleted(Me, New SECURITIES_OURRowChangeEvent(CType(e.Row,SECURITIES_OURRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_OURRowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_OURRowDeleting(Me, New SECURITIES_OURRowChangeEvent(CType(e.Row,SECURITIES_OURRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_OURRow(ByVal row As SECURITIES_OURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_OURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_DEPRECIATIONSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_DEPRECIATIONSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnISIN_Code As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnCcy As Global.System.Data.DataColumn
        
        Private columnDepreciation_Type As Global.System.Data.DataColumn
        
        Private columnBooked_Depreciation As Global.System.Data.DataColumn
        
        Private columnActual_Depreciation As Global.System.Data.DataColumn
        
        Private columnOCBS_Booked_Before As Global.System.Data.DataColumn
        
        Private columnOCBS_Booked_Later As Global.System.Data.DataColumn
        
        Private columnDepreciation As Global.System.Data.DataColumn
        
        Private columnAppreciation As Global.System.Data.DataColumn
        
        Private columnActual_Appreciation As Global.System.Data.DataColumn
        
        Private columnContractNr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_DEPRECIATIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Depreciation_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciation_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Booked_DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBooked_Depreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Actual_DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActual_Depreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OCBS_Booked_BeforeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_Booked_Before
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OCBS_Booked_LaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_Booked_Later
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AppreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Actual_AppreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActual_Appreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_DEPRECIATIONSRow
            Get
                Return CType(Me.Rows(index),SECURITIES_DEPRECIATIONSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DEPRECIATIONSRowChanging As SECURITIES_DEPRECIATIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DEPRECIATIONSRowChanged As SECURITIES_DEPRECIATIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DEPRECIATIONSRowDeleting As SECURITIES_DEPRECIATIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DEPRECIATIONSRowDeleted As SECURITIES_DEPRECIATIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_DEPRECIATIONSRow(ByVal row As SECURITIES_DEPRECIATIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_DEPRECIATIONSRow(ByVal _Date As Date, ByVal ISIN_Code As String, ByVal Name As String, ByVal Ccy As String, ByVal Depreciation_Type As String, ByVal Booked_Depreciation As Double, ByVal Actual_Depreciation As Double, ByVal OCBS_Booked_Before As Double, ByVal OCBS_Booked_Later As Double, ByVal Depreciation As Double, ByVal Appreciation As Double, ByVal Actual_Appreciation As Double, ByVal ContractNr As String) As SECURITIES_DEPRECIATIONSRow
            Dim rowSECURITIES_DEPRECIATIONSRow As SECURITIES_DEPRECIATIONSRow = CType(Me.NewRow,SECURITIES_DEPRECIATIONSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, _Date, ISIN_Code, Name, Ccy, Depreciation_Type, Booked_Depreciation, Actual_Depreciation, OCBS_Booked_Before, OCBS_Booked_Later, Depreciation, Appreciation, Actual_Appreciation, ContractNr}
            rowSECURITIES_DEPRECIATIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_DEPRECIATIONSRow)
            Return rowSECURITIES_DEPRECIATIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_DEPRECIATIONSRow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_DEPRECIATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_DEPRECIATIONSDataTable = CType(MyBase.Clone,SECURITIES_DEPRECIATIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_DEPRECIATIONSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnISIN_Code = MyBase.Columns("ISIN_Code")
            Me.columnName = MyBase.Columns("Name")
            Me.columnCcy = MyBase.Columns("Ccy")
            Me.columnDepreciation_Type = MyBase.Columns("Depreciation_Type")
            Me.columnBooked_Depreciation = MyBase.Columns("Booked_Depreciation")
            Me.columnActual_Depreciation = MyBase.Columns("Actual_Depreciation")
            Me.columnOCBS_Booked_Before = MyBase.Columns("OCBS_Booked_Before")
            Me.columnOCBS_Booked_Later = MyBase.Columns("OCBS_Booked_Later")
            Me.columnDepreciation = MyBase.Columns("Depreciation")
            Me.columnAppreciation = MyBase.Columns("Appreciation")
            Me.columnActual_Appreciation = MyBase.Columns("Actual_Appreciation")
            Me.columnContractNr = MyBase.Columns("ContractNr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnISIN_Code = New Global.System.Data.DataColumn("ISIN_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_Code)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnCcy = New Global.System.Data.DataColumn("Ccy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCcy)
            Me.columnDepreciation_Type = New Global.System.Data.DataColumn("Depreciation_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciation_Type)
            Me.columnBooked_Depreciation = New Global.System.Data.DataColumn("Booked_Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBooked_Depreciation)
            Me.columnActual_Depreciation = New Global.System.Data.DataColumn("Actual_Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual_Depreciation)
            Me.columnOCBS_Booked_Before = New Global.System.Data.DataColumn("OCBS_Booked_Before", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_Booked_Before)
            Me.columnOCBS_Booked_Later = New Global.System.Data.DataColumn("OCBS_Booked_Later", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_Booked_Later)
            Me.columnDepreciation = New Global.System.Data.DataColumn("Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciation)
            Me.columnAppreciation = New Global.System.Data.DataColumn("Appreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppreciation)
            Me.columnActual_Appreciation = New Global.System.Data.DataColumn("Actual_Appreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual_Appreciation)
            Me.columnContractNr = New Global.System.Data.DataColumn("ContractNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDate.AllowDBNull = false
            Me.columnISIN_Code.MaxLength = 255
            Me.columnName.MaxLength = 255
            Me.columnCcy.MaxLength = 255
            Me.columnDepreciation_Type.MaxLength = 255
            Me.columnContractNr.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_DEPRECIATIONSRow() As SECURITIES_DEPRECIATIONSRow
            Return CType(Me.NewRow,SECURITIES_DEPRECIATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_DEPRECIATIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_DEPRECIATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_DEPRECIATIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DEPRECIATIONSRowChanged(Me, New SECURITIES_DEPRECIATIONSRowChangeEvent(CType(e.Row,SECURITIES_DEPRECIATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_DEPRECIATIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DEPRECIATIONSRowChanging(Me, New SECURITIES_DEPRECIATIONSRowChangeEvent(CType(e.Row,SECURITIES_DEPRECIATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_DEPRECIATIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DEPRECIATIONSRowDeleted(Me, New SECURITIES_DEPRECIATIONSRowChangeEvent(CType(e.Row,SECURITIES_DEPRECIATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_DEPRECIATIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DEPRECIATIONSRowDeleting(Me, New SECURITIES_DEPRECIATIONSRowChangeEvent(CType(e.Row,SECURITIES_DEPRECIATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_DEPRECIATIONSRow(ByVal row As SECURITIES_DEPRECIATIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_DEPRECIATIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_DailyPriceDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_DailyPriceRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnCcy As Global.System.Data.DataColumn
        
        Private columnISIN_Code As Global.System.Data.DataColumn
        
        Private columnRIC As Global.System.Data.DataColumn
        
        Private columnMarket_Price As Global.System.Data.DataColumn
        
        Private columnSwap_Price As Global.System.Data.DataColumn
        
        Private columnPurchase_price As Global.System.Data.DataColumn
        
        Private columnindustry As Global.System.Data.DataColumn
        
        Private columnFixed_rate_coupon As Global.System.Data.DataColumn
        
        Private _columnFloating_leg__spread_ As Global.System.Data.DataColumn
        
        Private columnpurchasing_yield As Global.System.Data.DataColumn
        
        Private columnbond_type As Global.System.Data.DataColumn
        
        Private columnwith_swap_or_not As Global.System.Data.DataColumn
        
        Private _columnMoody_Rating As Global.System.Data.DataColumn
        
        Private _columnS___P As Global.System.Data.DataColumn
        
        Private _columnFitch_Rating As Global.System.Data.DataColumn
        
        Private columnContractNrOCBS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_DailyPrice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Market_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Swap_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSwap_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Purchase_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchase_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property industryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnindustry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Fixed_rate_couponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixed_rate_coupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Floating_leg__spread_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFloating_leg__spread_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property purchasing_yieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurchasing_yield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bond_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property with_swap_or_notColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwith_swap_or_not
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Moody_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnMoody_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _S___PColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnS___P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Fitch_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnFitch_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractNrOCBSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNrOCBS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_DailyPriceRow
            Get
                Return CType(Me.Rows(index),SECURITIES_DailyPriceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DailyPriceRowChanging As SECURITIES_DailyPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DailyPriceRowChanged As SECURITIES_DailyPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DailyPriceRowDeleting As SECURITIES_DailyPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_DailyPriceRowDeleted As SECURITIES_DailyPriceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_DailyPriceRow(ByVal row As SECURITIES_DailyPriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_DailyPriceRow( _
                    ByVal _Date As Date,  _
                    ByVal Name As String,  _
                    ByVal Ccy As String,  _
                    ByVal ISIN_Code As String,  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Double,  _
                    ByVal Swap_Price As Double,  _
                    ByVal Purchase_price As Double,  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Double,  _
                    ByVal _Floating_leg__spread_ As Double,  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal _Moody_Rating As String,  _
                    ByVal _S___P As String,  _
                    ByVal _Fitch_Rating As String,  _
                    ByVal ContractNrOCBS As Double) As SECURITIES_DailyPriceRow
            Dim rowSECURITIES_DailyPriceRow As SECURITIES_DailyPriceRow = CType(Me.NewRow,SECURITIES_DailyPriceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, _Date, Name, Ccy, ISIN_Code, RIC, Market_Price, Swap_Price, Purchase_price, industry, Fixed_rate_coupon, _Floating_leg__spread_, purchasing_yield, bond_type, with_swap_or_not, _Moody_Rating, _S___P, _Fitch_Rating, ContractNrOCBS}
            rowSECURITIES_DailyPriceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_DailyPriceRow)
            Return rowSECURITIES_DailyPriceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_DailyPriceRow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_DailyPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_DailyPriceDataTable = CType(MyBase.Clone,SECURITIES_DailyPriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_DailyPriceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnName = MyBase.Columns("Name")
            Me.columnCcy = MyBase.Columns("Ccy")
            Me.columnISIN_Code = MyBase.Columns("ISIN_Code")
            Me.columnRIC = MyBase.Columns("RIC")
            Me.columnMarket_Price = MyBase.Columns("Market_Price")
            Me.columnSwap_Price = MyBase.Columns("Swap_Price")
            Me.columnPurchase_price = MyBase.Columns("Purchase_price")
            Me.columnindustry = MyBase.Columns("industry")
            Me.columnFixed_rate_coupon = MyBase.Columns("Fixed rate coupon")
            Me._columnFloating_leg__spread_ = MyBase.Columns("Floating(leg) spread ")
            Me.columnpurchasing_yield = MyBase.Columns("purchasing yield")
            Me.columnbond_type = MyBase.Columns("bond type")
            Me.columnwith_swap_or_not = MyBase.Columns("with swap or not")
            Me._columnMoody_Rating = MyBase.Columns("Moody-Rating")
            Me._columnS___P = MyBase.Columns("S & P")
            Me._columnFitch_Rating = MyBase.Columns("Fitch-Rating")
            Me.columnContractNrOCBS = MyBase.Columns("ContractNrOCBS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnCcy = New Global.System.Data.DataColumn("Ccy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCcy)
            Me.columnISIN_Code = New Global.System.Data.DataColumn("ISIN_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_Code)
            Me.columnRIC = New Global.System.Data.DataColumn("RIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIC)
            Me.columnMarket_Price = New Global.System.Data.DataColumn("Market_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket_Price)
            Me.columnSwap_Price = New Global.System.Data.DataColumn("Swap_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSwap_Price)
            Me.columnPurchase_price = New Global.System.Data.DataColumn("Purchase_price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchase_price)
            Me.columnindustry = New Global.System.Data.DataColumn("industry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnindustry)
            Me.columnFixed_rate_coupon = New Global.System.Data.DataColumn("Fixed rate coupon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixed_rate_coupon)
            Me._columnFloating_leg__spread_ = New Global.System.Data.DataColumn("Floating(leg) spread ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFloating_leg__spread_")
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_UserColumnName", "Floating(leg) spread ")
            MyBase.Columns.Add(Me._columnFloating_leg__spread_)
            Me.columnpurchasing_yield = New Global.System.Data.DataColumn("purchasing yield", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurchasing_yield)
            Me.columnbond_type = New Global.System.Data.DataColumn("bond type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_type)
            Me.columnwith_swap_or_not = New Global.System.Data.DataColumn("with swap or not", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwith_swap_or_not)
            Me._columnMoody_Rating = New Global.System.Data.DataColumn("Moody-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMoody_Rating")
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Moody-Rating")
            MyBase.Columns.Add(Me._columnMoody_Rating)
            Me._columnS___P = New Global.System.Data.DataColumn("S & P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnS___P.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnS___P")
            Me._columnS___P.ExtendedProperties.Add("Generator_UserColumnName", "S & P")
            MyBase.Columns.Add(Me._columnS___P)
            Me._columnFitch_Rating = New Global.System.Data.DataColumn("Fitch-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFitch_Rating")
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Fitch-Rating")
            MyBase.Columns.Add(Me._columnFitch_Rating)
            Me.columnContractNrOCBS = New Global.System.Data.DataColumn("ContractNrOCBS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNrOCBS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnCcy.MaxLength = 255
            Me.columnISIN_Code.MaxLength = 255
            Me.columnRIC.MaxLength = 255
            Me.columnindustry.MaxLength = 255
            Me.columnpurchasing_yield.MaxLength = 255
            Me.columnbond_type.MaxLength = 255
            Me.columnwith_swap_or_not.MaxLength = 255
            Me._columnMoody_Rating.MaxLength = 255
            Me._columnS___P.MaxLength = 255
            Me._columnFitch_Rating.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_DailyPriceRow() As SECURITIES_DailyPriceRow
            Return CType(Me.NewRow,SECURITIES_DailyPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_DailyPriceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_DailyPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_DailyPriceRowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DailyPriceRowChanged(Me, New SECURITIES_DailyPriceRowChangeEvent(CType(e.Row,SECURITIES_DailyPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_DailyPriceRowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DailyPriceRowChanging(Me, New SECURITIES_DailyPriceRowChangeEvent(CType(e.Row,SECURITIES_DailyPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_DailyPriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DailyPriceRowDeleted(Me, New SECURITIES_DailyPriceRowChangeEvent(CType(e.Row,SECURITIES_DailyPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_DailyPriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_DailyPriceRowDeleting(Me, New SECURITIES_DailyPriceRowChangeEvent(CType(e.Row,SECURITIES_DailyPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_DailyPriceRow(ByVal row As SECURITIES_DailyPriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_DailyPriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_LIQUIDITYRESERVEDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_LIQUIDITYRESERVERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnLiquidityCreationDate As Global.System.Data.DataColumn
        
        Private columnLiquidityDate As Global.System.Data.DataColumn
        
        Private columnISIN_Code As Global.System.Data.DataColumn
        
        Private columnSecurityName As Global.System.Data.DataColumn
        
        Private columnCcy As Global.System.Data.DataColumn
        
        Private columnPrincipalEuroAmt As Global.System.Data.DataColumn
        
        Private columnContractNrOCBS As Global.System.Data.DataColumn
        
        Private columnTradeDate As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnSektor As Global.System.Data.DataColumn
        
        Private columnSektorCountry As Global.System.Data.DataColumn
        
        Private columnAssetType As Global.System.Data.DataColumn
        
        Private columnBooked_Depreciation As Global.System.Data.DataColumn
        
        Private columnActual_Depreciation As Global.System.Data.DataColumn
        
        Private columnOCBS_Booked_Before As Global.System.Data.DataColumn
        
        Private columnOCBS_Booked_Later As Global.System.Data.DataColumn
        
        Private columnCurrent_Interest_Rate As Global.System.Data.DataColumn
        
        Private columnCurrent_Interest_Coupon_Period_Start_Date As Global.System.Data.DataColumn
        
        Private columnCurrent_Interest_Coupon_Period_End_Date As Global.System.Data.DataColumn
        
        Private columnAccrued_Interest_Coupon_Org_Ccy As Global.System.Data.DataColumn
        
        Private columnAccrued_Interest_Coupon_EUR_Equ As Global.System.Data.DataColumn
        
        Private columnInterest_Coupon_amount_Org_Ccy As Global.System.Data.DataColumn
        
        Private columnInterest_Coupon_Amount_EUR_Equ As Global.System.Data.DataColumn
        
        Private columnRIC As Global.System.Data.DataColumn
        
        Private columnMarket_Price As Global.System.Data.DataColumn
        
        Private columnSwap_Price As Global.System.Data.DataColumn
        
        Private columnPurchase_price As Global.System.Data.DataColumn
        
        Private columnindustry As Global.System.Data.DataColumn
        
        Private columnFixed_rate_coupon As Global.System.Data.DataColumn
        
        Private _columnFloating_leg__spread_ As Global.System.Data.DataColumn
        
        Private columnpurchasing_yield As Global.System.Data.DataColumn
        
        Private columnbond_type As Global.System.Data.DataColumn
        
        Private columnwith_swap_or_not As Global.System.Data.DataColumn
        
        Private _columnMoody_Rating As Global.System.Data.DataColumn
        
        Private _columnS___P As Global.System.Data.DataColumn
        
        Private _columnFitch_Rating As Global.System.Data.DataColumn
        
        Private columnStartofYear_price As Global.System.Data.DataColumn
        
        Private columnAmt_Paid As Global.System.Data.DataColumn
        
        Private columnValueAsOfDate As Global.System.Data.DataColumn
        
        Private columnDepreciation As Global.System.Data.DataColumn
        
        Private columnApreciation As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnActual_Appreciation As Global.System.Data.DataColumn
        
        Private columnPrincipalOrigAmt As Global.System.Data.DataColumn
        
        Private columnExchangeRateAgainstEUR_Purchase As Global.System.Data.DataColumn
        
        Private columnAmt_Paid_EUR As Global.System.Data.DataColumn
        
        Private columnExchangeRateAgainstEUR_Current As Global.System.Data.DataColumn
        
        Private columnValueAsOfDate_OrigCcy As Global.System.Data.DataColumn
        
        Private columnStilleReserve As Global.System.Data.DataColumn
        
        Private columnStilleLast As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_LIQUIDITYRESERVE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LiquidityCreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidityCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LiquidityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SecurityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecurityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalEuroAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalEuroAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractNrOCBSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNrOCBS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TradeDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SektorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSektor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SektorCountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSektorCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AssetTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Booked_DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBooked_Depreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Actual_DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActual_Depreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OCBS_Booked_BeforeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_Booked_Before
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OCBS_Booked_LaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_Booked_Later
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Current_Interest_RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrent_Interest_Rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Current_Interest_Coupon_Period_Start_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrent_Interest_Coupon_Period_Start_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Current_Interest_Coupon_Period_End_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrent_Interest_Coupon_Period_End_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Accrued_Interest_Coupon_Org_CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccrued_Interest_Coupon_Org_Ccy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Accrued_Interest_Coupon_EUR_EquColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccrued_Interest_Coupon_EUR_Equ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Interest_Coupon_amount_Org_CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest_Coupon_amount_Org_Ccy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Interest_Coupon_Amount_EUR_EquColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest_Coupon_Amount_EUR_Equ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Market_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Swap_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSwap_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Purchase_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchase_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property industryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnindustry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Fixed_rate_couponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFixed_rate_coupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Floating_leg__spread_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFloating_leg__spread_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property purchasing_yieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurchasing_yield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bond_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property with_swap_or_notColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwith_swap_or_not
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Moody_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnMoody_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _S___PColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnS___P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Fitch_RatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnFitch_Rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartofYear_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartofYear_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Amt_PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_Paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ValueAsOfDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueAsOfDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ApreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Actual_AppreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActual_Appreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalOrigAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalOrigAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExchangeRateAgainstEUR_PurchaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRateAgainstEUR_Purchase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Amt_Paid_EURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_Paid_EUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExchangeRateAgainstEUR_CurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRateAgainstEUR_Current
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ValueAsOfDate_OrigCcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueAsOfDate_OrigCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StilleReserveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStilleReserve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StilleLastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStilleLast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_LIQUIDITYRESERVERow
            Get
                Return CType(Me.Rows(index),SECURITIES_LIQUIDITYRESERVERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_LIQUIDITYRESERVERowChanging As SECURITIES_LIQUIDITYRESERVERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_LIQUIDITYRESERVERowChanged As SECURITIES_LIQUIDITYRESERVERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_LIQUIDITYRESERVERowDeleting As SECURITIES_LIQUIDITYRESERVERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_LIQUIDITYRESERVERowDeleted As SECURITIES_LIQUIDITYRESERVERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_LIQUIDITYRESERVERow(ByVal row As SECURITIES_LIQUIDITYRESERVERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_LIQUIDITYRESERVERow( _
                    ByVal LiquidityCreationDate As Date,  _
                    ByVal LiquidityDate As Date,  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Double,  _
                    ByVal ContractNrOCBS As Double,  _
                    ByVal TradeDate As Date,  _
                    ByVal StartDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal Sektor As Double,  _
                    ByVal SektorCountry As String,  _
                    ByVal AssetType As String,  _
                    ByVal Booked_Depreciation As Double,  _
                    ByVal Actual_Depreciation As Double,  _
                    ByVal OCBS_Booked_Before As Double,  _
                    ByVal OCBS_Booked_Later As Double,  _
                    ByVal Current_Interest_Rate As Double,  _
                    ByVal Current_Interest_Coupon_Period_Start_Date As Date,  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Date,  _
                    ByVal Accrued_Interest_Coupon_Org_Ccy As Double,  _
                    ByVal Accrued_Interest_Coupon_EUR_Equ As Double,  _
                    ByVal Interest_Coupon_amount_Org_Ccy As Double,  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Double,  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Double,  _
                    ByVal Swap_Price As Double,  _
                    ByVal Purchase_price As Double,  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Double,  _
                    ByVal _Floating_leg__spread_ As Double,  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal _Moody_Rating As String,  _
                    ByVal _S___P As String,  _
                    ByVal _Fitch_Rating As String,  _
                    ByVal StartofYear_price As Double,  _
                    ByVal Amt_Paid As Double,  _
                    ByVal ValueAsOfDate As Double,  _
                    ByVal Depreciation As Double,  _
                    ByVal Apreciation As Double,  _
                    ByVal ClientNr As String,  _
                    ByVal Actual_Appreciation As Double,  _
                    ByVal PrincipalOrigAmt As Double,  _
                    ByVal ExchangeRateAgainstEUR_Purchase As Double,  _
                    ByVal Amt_Paid_EUR As Double,  _
                    ByVal ExchangeRateAgainstEUR_Current As Double,  _
                    ByVal ValueAsOfDate_OrigCcy As Double,  _
                    ByVal StilleReserve As Double,  _
                    ByVal StilleLast As Double) As SECURITIES_LIQUIDITYRESERVERow
            Dim rowSECURITIES_LIQUIDITYRESERVERow As SECURITIES_LIQUIDITYRESERVERow = CType(Me.NewRow,SECURITIES_LIQUIDITYRESERVERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LiquidityCreationDate, LiquidityDate, ISIN_Code, SecurityName, Ccy, PrincipalEuroAmt, ContractNrOCBS, TradeDate, StartDate, MaturityDate, Sektor, SektorCountry, AssetType, Booked_Depreciation, Actual_Depreciation, OCBS_Booked_Before, OCBS_Booked_Later, Current_Interest_Rate, Current_Interest_Coupon_Period_Start_Date, Current_Interest_Coupon_Period_End_Date, Accrued_Interest_Coupon_Org_Ccy, Accrued_Interest_Coupon_EUR_Equ, Interest_Coupon_amount_Org_Ccy, Interest_Coupon_Amount_EUR_Equ, RIC, Market_Price, Swap_Price, Purchase_price, industry, Fixed_rate_coupon, _Floating_leg__spread_, purchasing_yield, bond_type, with_swap_or_not, _Moody_Rating, _S___P, _Fitch_Rating, StartofYear_price, Amt_Paid, ValueAsOfDate, Depreciation, Apreciation, ClientNr, Actual_Appreciation, PrincipalOrigAmt, ExchangeRateAgainstEUR_Purchase, Amt_Paid_EUR, ExchangeRateAgainstEUR_Current, ValueAsOfDate_OrigCcy, StilleReserve, StilleLast}
            rowSECURITIES_LIQUIDITYRESERVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_LIQUIDITYRESERVERow)
            Return rowSECURITIES_LIQUIDITYRESERVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_LIQUIDITYRESERVERow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_LIQUIDITYRESERVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_LIQUIDITYRESERVEDataTable = CType(MyBase.Clone,SECURITIES_LIQUIDITYRESERVEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_LIQUIDITYRESERVEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnLiquidityCreationDate = MyBase.Columns("LiquidityCreationDate")
            Me.columnLiquidityDate = MyBase.Columns("LiquidityDate")
            Me.columnISIN_Code = MyBase.Columns("ISIN_Code")
            Me.columnSecurityName = MyBase.Columns("SecurityName")
            Me.columnCcy = MyBase.Columns("Ccy")
            Me.columnPrincipalEuroAmt = MyBase.Columns("PrincipalEuroAmt")
            Me.columnContractNrOCBS = MyBase.Columns("ContractNrOCBS")
            Me.columnTradeDate = MyBase.Columns("TradeDate")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnSektor = MyBase.Columns("Sektor")
            Me.columnSektorCountry = MyBase.Columns("SektorCountry")
            Me.columnAssetType = MyBase.Columns("AssetType")
            Me.columnBooked_Depreciation = MyBase.Columns("Booked_Depreciation")
            Me.columnActual_Depreciation = MyBase.Columns("Actual_Depreciation")
            Me.columnOCBS_Booked_Before = MyBase.Columns("OCBS_Booked_Before")
            Me.columnOCBS_Booked_Later = MyBase.Columns("OCBS_Booked_Later")
            Me.columnCurrent_Interest_Rate = MyBase.Columns("Current Interest Rate")
            Me.columnCurrent_Interest_Coupon_Period_Start_Date = MyBase.Columns("Current Interest Coupon Period Start Date")
            Me.columnCurrent_Interest_Coupon_Period_End_Date = MyBase.Columns("Current Interest Coupon Period End Date")
            Me.columnAccrued_Interest_Coupon_Org_Ccy = MyBase.Columns("Accrued Interest Coupon Org Ccy")
            Me.columnAccrued_Interest_Coupon_EUR_Equ = MyBase.Columns("Accrued Interest Coupon EUR Equ")
            Me.columnInterest_Coupon_amount_Org_Ccy = MyBase.Columns("Interest Coupon amount Org Ccy")
            Me.columnInterest_Coupon_Amount_EUR_Equ = MyBase.Columns("Interest Coupon Amount EUR Equ")
            Me.columnRIC = MyBase.Columns("RIC")
            Me.columnMarket_Price = MyBase.Columns("Market_Price")
            Me.columnSwap_Price = MyBase.Columns("Swap_Price")
            Me.columnPurchase_price = MyBase.Columns("Purchase_price")
            Me.columnindustry = MyBase.Columns("industry")
            Me.columnFixed_rate_coupon = MyBase.Columns("Fixed rate coupon")
            Me._columnFloating_leg__spread_ = MyBase.Columns("Floating(leg) spread ")
            Me.columnpurchasing_yield = MyBase.Columns("purchasing yield")
            Me.columnbond_type = MyBase.Columns("bond type")
            Me.columnwith_swap_or_not = MyBase.Columns("with swap or not")
            Me._columnMoody_Rating = MyBase.Columns("Moody-Rating")
            Me._columnS___P = MyBase.Columns("S & P")
            Me._columnFitch_Rating = MyBase.Columns("Fitch-Rating")
            Me.columnStartofYear_price = MyBase.Columns("StartofYear_price")
            Me.columnAmt_Paid = MyBase.Columns("Amt_Paid")
            Me.columnValueAsOfDate = MyBase.Columns("ValueAsOfDate")
            Me.columnDepreciation = MyBase.Columns("Depreciation")
            Me.columnApreciation = MyBase.Columns("Apreciation")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnActual_Appreciation = MyBase.Columns("Actual_Appreciation")
            Me.columnPrincipalOrigAmt = MyBase.Columns("PrincipalOrigAmt")
            Me.columnExchangeRateAgainstEUR_Purchase = MyBase.Columns("ExchangeRateAgainstEUR_Purchase")
            Me.columnAmt_Paid_EUR = MyBase.Columns("Amt_Paid_EUR")
            Me.columnExchangeRateAgainstEUR_Current = MyBase.Columns("ExchangeRateAgainstEUR_Current")
            Me.columnValueAsOfDate_OrigCcy = MyBase.Columns("ValueAsOfDate_OrigCcy")
            Me.columnStilleReserve = MyBase.Columns("StilleReserve")
            Me.columnStilleLast = MyBase.Columns("StilleLast")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnLiquidityCreationDate = New Global.System.Data.DataColumn("LiquidityCreationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidityCreationDate)
            Me.columnLiquidityDate = New Global.System.Data.DataColumn("LiquidityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidityDate)
            Me.columnISIN_Code = New Global.System.Data.DataColumn("ISIN_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_Code)
            Me.columnSecurityName = New Global.System.Data.DataColumn("SecurityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecurityName)
            Me.columnCcy = New Global.System.Data.DataColumn("Ccy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCcy)
            Me.columnPrincipalEuroAmt = New Global.System.Data.DataColumn("PrincipalEuroAmt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalEuroAmt)
            Me.columnContractNrOCBS = New Global.System.Data.DataColumn("ContractNrOCBS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNrOCBS)
            Me.columnTradeDate = New Global.System.Data.DataColumn("TradeDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeDate)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnSektor = New Global.System.Data.DataColumn("Sektor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSektor)
            Me.columnSektorCountry = New Global.System.Data.DataColumn("SektorCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSektorCountry)
            Me.columnAssetType = New Global.System.Data.DataColumn("AssetType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetType)
            Me.columnBooked_Depreciation = New Global.System.Data.DataColumn("Booked_Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBooked_Depreciation)
            Me.columnActual_Depreciation = New Global.System.Data.DataColumn("Actual_Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual_Depreciation)
            Me.columnOCBS_Booked_Before = New Global.System.Data.DataColumn("OCBS_Booked_Before", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_Booked_Before)
            Me.columnOCBS_Booked_Later = New Global.System.Data.DataColumn("OCBS_Booked_Later", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_Booked_Later)
            Me.columnCurrent_Interest_Rate = New Global.System.Data.DataColumn("Current Interest Rate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrent_Interest_Rate)
            Me.columnCurrent_Interest_Coupon_Period_Start_Date = New Global.System.Data.DataColumn("Current Interest Coupon Period Start Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrent_Interest_Coupon_Period_Start_Date)
            Me.columnCurrent_Interest_Coupon_Period_End_Date = New Global.System.Data.DataColumn("Current Interest Coupon Period End Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrent_Interest_Coupon_Period_End_Date)
            Me.columnAccrued_Interest_Coupon_Org_Ccy = New Global.System.Data.DataColumn("Accrued Interest Coupon Org Ccy", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccrued_Interest_Coupon_Org_Ccy)
            Me.columnAccrued_Interest_Coupon_EUR_Equ = New Global.System.Data.DataColumn("Accrued Interest Coupon EUR Equ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccrued_Interest_Coupon_EUR_Equ)
            Me.columnInterest_Coupon_amount_Org_Ccy = New Global.System.Data.DataColumn("Interest Coupon amount Org Ccy", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest_Coupon_amount_Org_Ccy)
            Me.columnInterest_Coupon_Amount_EUR_Equ = New Global.System.Data.DataColumn("Interest Coupon Amount EUR Equ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest_Coupon_Amount_EUR_Equ)
            Me.columnRIC = New Global.System.Data.DataColumn("RIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIC)
            Me.columnMarket_Price = New Global.System.Data.DataColumn("Market_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket_Price)
            Me.columnSwap_Price = New Global.System.Data.DataColumn("Swap_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSwap_Price)
            Me.columnPurchase_price = New Global.System.Data.DataColumn("Purchase_price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchase_price)
            Me.columnindustry = New Global.System.Data.DataColumn("industry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnindustry)
            Me.columnFixed_rate_coupon = New Global.System.Data.DataColumn("Fixed rate coupon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFixed_rate_coupon)
            Me._columnFloating_leg__spread_ = New Global.System.Data.DataColumn("Floating(leg) spread ", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFloating_leg__spread_")
            Me._columnFloating_leg__spread_.ExtendedProperties.Add("Generator_UserColumnName", "Floating(leg) spread ")
            MyBase.Columns.Add(Me._columnFloating_leg__spread_)
            Me.columnpurchasing_yield = New Global.System.Data.DataColumn("purchasing yield", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurchasing_yield)
            Me.columnbond_type = New Global.System.Data.DataColumn("bond type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_type)
            Me.columnwith_swap_or_not = New Global.System.Data.DataColumn("with swap or not", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwith_swap_or_not)
            Me._columnMoody_Rating = New Global.System.Data.DataColumn("Moody-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMoody_Rating")
            Me._columnMoody_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Moody-Rating")
            MyBase.Columns.Add(Me._columnMoody_Rating)
            Me._columnS___P = New Global.System.Data.DataColumn("S & P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnS___P.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnS___P")
            Me._columnS___P.ExtendedProperties.Add("Generator_UserColumnName", "S & P")
            MyBase.Columns.Add(Me._columnS___P)
            Me._columnFitch_Rating = New Global.System.Data.DataColumn("Fitch-Rating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFitch_Rating")
            Me._columnFitch_Rating.ExtendedProperties.Add("Generator_UserColumnName", "Fitch-Rating")
            MyBase.Columns.Add(Me._columnFitch_Rating)
            Me.columnStartofYear_price = New Global.System.Data.DataColumn("StartofYear_price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartofYear_price)
            Me.columnAmt_Paid = New Global.System.Data.DataColumn("Amt_Paid", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_Paid)
            Me.columnValueAsOfDate = New Global.System.Data.DataColumn("ValueAsOfDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueAsOfDate)
            Me.columnDepreciation = New Global.System.Data.DataColumn("Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciation)
            Me.columnApreciation = New Global.System.Data.DataColumn("Apreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApreciation)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnActual_Appreciation = New Global.System.Data.DataColumn("Actual_Appreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual_Appreciation)
            Me.columnPrincipalOrigAmt = New Global.System.Data.DataColumn("PrincipalOrigAmt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalOrigAmt)
            Me.columnExchangeRateAgainstEUR_Purchase = New Global.System.Data.DataColumn("ExchangeRateAgainstEUR_Purchase", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRateAgainstEUR_Purchase)
            Me.columnAmt_Paid_EUR = New Global.System.Data.DataColumn("Amt_Paid_EUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_Paid_EUR)
            Me.columnExchangeRateAgainstEUR_Current = New Global.System.Data.DataColumn("ExchangeRateAgainstEUR_Current", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRateAgainstEUR_Current)
            Me.columnValueAsOfDate_OrigCcy = New Global.System.Data.DataColumn("ValueAsOfDate_OrigCcy", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueAsOfDate_OrigCcy)
            Me.columnStilleReserve = New Global.System.Data.DataColumn("StilleReserve", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStilleReserve)
            Me.columnStilleLast = New Global.System.Data.DataColumn("StilleLast", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStilleLast)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnISIN_Code.MaxLength = 255
            Me.columnSecurityName.MaxLength = 255
            Me.columnCcy.MaxLength = 255
            Me.columnSektorCountry.MaxLength = 50
            Me.columnAssetType.MaxLength = 50
            Me.columnRIC.MaxLength = 255
            Me.columnindustry.MaxLength = 255
            Me.columnpurchasing_yield.MaxLength = 255
            Me.columnbond_type.MaxLength = 255
            Me.columnwith_swap_or_not.MaxLength = 255
            Me._columnMoody_Rating.MaxLength = 255
            Me._columnS___P.MaxLength = 255
            Me._columnFitch_Rating.MaxLength = 255
            Me.columnClientNr.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_LIQUIDITYRESERVERow() As SECURITIES_LIQUIDITYRESERVERow
            Return CType(Me.NewRow,SECURITIES_LIQUIDITYRESERVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_LIQUIDITYRESERVERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_LIQUIDITYRESERVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_LIQUIDITYRESERVERowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_LIQUIDITYRESERVERowChanged(Me, New SECURITIES_LIQUIDITYRESERVERowChangeEvent(CType(e.Row,SECURITIES_LIQUIDITYRESERVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_LIQUIDITYRESERVERowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_LIQUIDITYRESERVERowChanging(Me, New SECURITIES_LIQUIDITYRESERVERowChangeEvent(CType(e.Row,SECURITIES_LIQUIDITYRESERVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_LIQUIDITYRESERVERowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_LIQUIDITYRESERVERowDeleted(Me, New SECURITIES_LIQUIDITYRESERVERowChangeEvent(CType(e.Row,SECURITIES_LIQUIDITYRESERVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_LIQUIDITYRESERVERowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_LIQUIDITYRESERVERowDeleting(Me, New SECURITIES_LIQUIDITYRESERVERowChangeEvent(CType(e.Row,SECURITIES_LIQUIDITYRESERVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_LIQUIDITYRESERVERow(ByVal row As SECURITIES_LIQUIDITYRESERVERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_LIQUIDITYRESERVEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_BOOKINGSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_BOOKINGSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnBookingDate As Global.System.Data.DataColumn
        
        Private columnValueDate As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnCcy As Global.System.Data.DataColumn
        
        Private _columnDebit_Appreciation As Global.System.Data.DataColumn
        
        Private _columnCredit_Depreciation As Global.System.Data.DataColumn
        
        Private columnBookingText As Global.System.Data.DataColumn
        
        Private columnContractNr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_BOOKINGS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BookingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ValueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Debit_AppreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnDebit_Appreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Credit_DepreciationColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnCredit_Depreciation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BookingTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookingText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_BOOKINGSRow
            Get
                Return CType(Me.Rows(index),SECURITIES_BOOKINGSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BOOKINGSRowChanging As SECURITIES_BOOKINGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BOOKINGSRowChanged As SECURITIES_BOOKINGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BOOKINGSRowDeleting As SECURITIES_BOOKINGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BOOKINGSRowDeleted As SECURITIES_BOOKINGSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_BOOKINGSRow(ByVal row As SECURITIES_BOOKINGSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_BOOKINGSRow(ByVal BookingDate As Date, ByVal ValueDate As Date, ByVal Reference As String, ByVal Ccy As String, ByVal _Debit_Appreciation As Double, ByVal _Credit_Depreciation As Double, ByVal BookingText As String, ByVal ContractNr As String) As SECURITIES_BOOKINGSRow
            Dim rowSECURITIES_BOOKINGSRow As SECURITIES_BOOKINGSRow = CType(Me.NewRow,SECURITIES_BOOKINGSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, BookingDate, ValueDate, Reference, Ccy, _Debit_Appreciation, _Credit_Depreciation, BookingText, ContractNr}
            rowSECURITIES_BOOKINGSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_BOOKINGSRow)
            Return rowSECURITIES_BOOKINGSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_BOOKINGSRow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_BOOKINGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_BOOKINGSDataTable = CType(MyBase.Clone,SECURITIES_BOOKINGSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_BOOKINGSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnBookingDate = MyBase.Columns("BookingDate")
            Me.columnValueDate = MyBase.Columns("ValueDate")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnCcy = MyBase.Columns("Ccy")
            Me._columnDebit_Appreciation = MyBase.Columns("Debit-Appreciation")
            Me._columnCredit_Depreciation = MyBase.Columns("Credit-Depreciation")
            Me.columnBookingText = MyBase.Columns("BookingText")
            Me.columnContractNr = MyBase.Columns("ContractNr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnBookingDate = New Global.System.Data.DataColumn("BookingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookingDate)
            Me.columnValueDate = New Global.System.Data.DataColumn("ValueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueDate)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnCcy = New Global.System.Data.DataColumn("Ccy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCcy)
            Me._columnDebit_Appreciation = New Global.System.Data.DataColumn("Debit-Appreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDebit_Appreciation.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDebit_Appreciation")
            Me._columnDebit_Appreciation.ExtendedProperties.Add("Generator_UserColumnName", "Debit-Appreciation")
            MyBase.Columns.Add(Me._columnDebit_Appreciation)
            Me._columnCredit_Depreciation = New Global.System.Data.DataColumn("Credit-Depreciation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCredit_Depreciation.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCredit_Depreciation")
            Me._columnCredit_Depreciation.ExtendedProperties.Add("Generator_UserColumnName", "Credit-Depreciation")
            MyBase.Columns.Add(Me._columnCredit_Depreciation)
            Me.columnBookingText = New Global.System.Data.DataColumn("BookingText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookingText)
            Me.columnContractNr = New Global.System.Data.DataColumn("ContractNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnReference.MaxLength = 30
            Me.columnCcy.MaxLength = 3
            Me.columnBookingText.MaxLength = 255
            Me.columnContractNr.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_BOOKINGSRow() As SECURITIES_BOOKINGSRow
            Return CType(Me.NewRow,SECURITIES_BOOKINGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_BOOKINGSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_BOOKINGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_BOOKINGSRowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BOOKINGSRowChanged(Me, New SECURITIES_BOOKINGSRowChangeEvent(CType(e.Row,SECURITIES_BOOKINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_BOOKINGSRowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BOOKINGSRowChanging(Me, New SECURITIES_BOOKINGSRowChangeEvent(CType(e.Row,SECURITIES_BOOKINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_BOOKINGSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BOOKINGSRowDeleted(Me, New SECURITIES_BOOKINGSRowChangeEvent(CType(e.Row,SECURITIES_BOOKINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_BOOKINGSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BOOKINGSRowDeleting(Me, New SECURITIES_BOOKINGSRowChangeEvent(CType(e.Row,SECURITIES_BOOKINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_BOOKINGSRow(ByVal row As SECURITIES_BOOKINGSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_BOOKINGSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SECURITIES_BESTANDDataTable
        Inherits Global.System.Data.TypedTableBase(Of SECURITIES_BESTANDRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnBestandCreationDate As Global.System.Data.DataColumn
        
        Private columnBestandDate As Global.System.Data.DataColumn
        
        Private columnISIN_Code As Global.System.Data.DataColumn
        
        Private columnSecurityName As Global.System.Data.DataColumn
        
        Private columnCcy As Global.System.Data.DataColumn
        
        Private columnPrincipalEuroAmt As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnPurchase_price As Global.System.Data.DataColumn
        
        Private columnStartofYear_price As Global.System.Data.DataColumn
        
        Private columnMarket_Price As Global.System.Data.DataColumn
        
        Private columnAmt_Paid As Global.System.Data.DataColumn
        
        Private columnStartofYear_Amt As Global.System.Data.DataColumn
        
        Private columnValueAsOfDate As Global.System.Data.DataColumn
        
        Private columnOCBS_Booked_Later As Global.System.Data.DataColumn
        
        Private columnBuchwert As Global.System.Data.DataColumn
        
        Private columnBuchwertAbgrenzungen As Global.System.Data.DataColumn
        
        Private columnAenderungLfdJahr As Global.System.Data.DataColumn
        
        Private columnKursReserve As Global.System.Data.DataColumn
        
        Private columnAssetType As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SECURITIES_BESTAND"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BestandCreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBestandCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BestandDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBestandDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SecurityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecurityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalEuroAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalEuroAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Purchase_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchase_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartofYear_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartofYear_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Market_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Amt_PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmt_Paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartofYear_AmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartofYear_Amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ValueAsOfDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueAsOfDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OCBS_Booked_LaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCBS_Booked_Later
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BuchwertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuchwert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BuchwertAbgrenzungenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuchwertAbgrenzungen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AenderungLfdJahrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAenderungLfdJahr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property KursReserveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKursReserve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AssetTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SECURITIES_BESTANDRow
            Get
                Return CType(Me.Rows(index),SECURITIES_BESTANDRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BESTANDRowChanging As SECURITIES_BESTANDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BESTANDRowChanged As SECURITIES_BESTANDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BESTANDRowDeleting As SECURITIES_BESTANDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event SECURITIES_BESTANDRowDeleted As SECURITIES_BESTANDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddSECURITIES_BESTANDRow(ByVal row As SECURITIES_BESTANDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddSECURITIES_BESTANDRow( _
                    ByVal BestandCreationDate As Date,  _
                    ByVal BestandDate As Date,  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Double,  _
                    ByVal MaturityDate As Date,  _
                    ByVal Purchase_price As Double,  _
                    ByVal StartofYear_price As Double,  _
                    ByVal Market_Price As Double,  _
                    ByVal Amt_Paid As Double,  _
                    ByVal StartofYear_Amt As Double,  _
                    ByVal ValueAsOfDate As Double,  _
                    ByVal OCBS_Booked_Later As Double,  _
                    ByVal Buchwert As Double,  _
                    ByVal BuchwertAbgrenzungen As Double,  _
                    ByVal AenderungLfdJahr As Double,  _
                    ByVal KursReserve As Double,  _
                    ByVal AssetType As String,  _
                    ByVal ClientNr As String) As SECURITIES_BESTANDRow
            Dim rowSECURITIES_BESTANDRow As SECURITIES_BESTANDRow = CType(Me.NewRow,SECURITIES_BESTANDRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, BestandCreationDate, BestandDate, ISIN_Code, SecurityName, Ccy, PrincipalEuroAmt, MaturityDate, Purchase_price, StartofYear_price, Market_Price, Amt_Paid, StartofYear_Amt, ValueAsOfDate, OCBS_Booked_Later, Buchwert, BuchwertAbgrenzungen, AenderungLfdJahr, KursReserve, AssetType, ClientNr}
            rowSECURITIES_BESTANDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSECURITIES_BESTANDRow)
            Return rowSECURITIES_BESTANDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SECURITIES_BESTANDRow
            Return CType(Me.Rows.Find(New Object() {ID}),SECURITIES_BESTANDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SECURITIES_BESTANDDataTable = CType(MyBase.Clone,SECURITIES_BESTANDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SECURITIES_BESTANDDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnBestandCreationDate = MyBase.Columns("BestandCreationDate")
            Me.columnBestandDate = MyBase.Columns("BestandDate")
            Me.columnISIN_Code = MyBase.Columns("ISIN_Code")
            Me.columnSecurityName = MyBase.Columns("SecurityName")
            Me.columnCcy = MyBase.Columns("Ccy")
            Me.columnPrincipalEuroAmt = MyBase.Columns("PrincipalEuroAmt")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnPurchase_price = MyBase.Columns("Purchase_price")
            Me.columnStartofYear_price = MyBase.Columns("StartofYear_price")
            Me.columnMarket_Price = MyBase.Columns("Market_Price")
            Me.columnAmt_Paid = MyBase.Columns("Amt_Paid")
            Me.columnStartofYear_Amt = MyBase.Columns("StartofYear_Amt")
            Me.columnValueAsOfDate = MyBase.Columns("ValueAsOfDate")
            Me.columnOCBS_Booked_Later = MyBase.Columns("OCBS_Booked_Later")
            Me.columnBuchwert = MyBase.Columns("Buchwert")
            Me.columnBuchwertAbgrenzungen = MyBase.Columns("BuchwertAbgrenzungen")
            Me.columnAenderungLfdJahr = MyBase.Columns("AenderungLfdJahr")
            Me.columnKursReserve = MyBase.Columns("KursReserve")
            Me.columnAssetType = MyBase.Columns("AssetType")
            Me.columnClientNr = MyBase.Columns("ClientNr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnBestandCreationDate = New Global.System.Data.DataColumn("BestandCreationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBestandCreationDate)
            Me.columnBestandDate = New Global.System.Data.DataColumn("BestandDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBestandDate)
            Me.columnISIN_Code = New Global.System.Data.DataColumn("ISIN_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_Code)
            Me.columnSecurityName = New Global.System.Data.DataColumn("SecurityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecurityName)
            Me.columnCcy = New Global.System.Data.DataColumn("Ccy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCcy)
            Me.columnPrincipalEuroAmt = New Global.System.Data.DataColumn("PrincipalEuroAmt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalEuroAmt)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnPurchase_price = New Global.System.Data.DataColumn("Purchase_price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchase_price)
            Me.columnStartofYear_price = New Global.System.Data.DataColumn("StartofYear_price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartofYear_price)
            Me.columnMarket_Price = New Global.System.Data.DataColumn("Market_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket_Price)
            Me.columnAmt_Paid = New Global.System.Data.DataColumn("Amt_Paid", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmt_Paid)
            Me.columnStartofYear_Amt = New Global.System.Data.DataColumn("StartofYear_Amt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartofYear_Amt)
            Me.columnValueAsOfDate = New Global.System.Data.DataColumn("ValueAsOfDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueAsOfDate)
            Me.columnOCBS_Booked_Later = New Global.System.Data.DataColumn("OCBS_Booked_Later", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCBS_Booked_Later)
            Me.columnBuchwert = New Global.System.Data.DataColumn("Buchwert", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuchwert)
            Me.columnBuchwertAbgrenzungen = New Global.System.Data.DataColumn("BuchwertAbgrenzungen", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuchwertAbgrenzungen)
            Me.columnAenderungLfdJahr = New Global.System.Data.DataColumn("AenderungLfdJahr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAenderungLfdJahr)
            Me.columnKursReserve = New Global.System.Data.DataColumn("KursReserve", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKursReserve)
            Me.columnAssetType = New Global.System.Data.DataColumn("AssetType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetType)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnISIN_Code.MaxLength = 255
            Me.columnSecurityName.MaxLength = 255
            Me.columnCcy.MaxLength = 255
            Me.columnAssetType.MaxLength = 50
            Me.columnClientNr.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewSECURITIES_BESTANDRow() As SECURITIES_BESTANDRow
            Return CType(Me.NewRow,SECURITIES_BESTANDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SECURITIES_BESTANDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SECURITIES_BESTANDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SECURITIES_BESTANDRowChangedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BESTANDRowChanged(Me, New SECURITIES_BESTANDRowChangeEvent(CType(e.Row,SECURITIES_BESTANDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SECURITIES_BESTANDRowChangingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BESTANDRowChanging(Me, New SECURITIES_BESTANDRowChangeEvent(CType(e.Row,SECURITIES_BESTANDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SECURITIES_BESTANDRowDeletedEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BESTANDRowDeleted(Me, New SECURITIES_BESTANDRowChangeEvent(CType(e.Row,SECURITIES_BESTANDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SECURITIES_BESTANDRowDeletingEvent) Is Nothing) Then
                RaiseEvent SECURITIES_BESTANDRowDeleting(Me, New SECURITIES_BESTANDRowChangeEvent(CType(e.Row,SECURITIES_BESTANDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveSECURITIES_BESTANDRow(ByVal row As SECURITIES_BESTANDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SECURITIESDataset = New SECURITIESDataset()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SECURITIES_BESTANDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_OURRow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_OUR As SECURITIES_OURDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_OUR = CType(Me.Table,SECURITIES_OURDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.ISINColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.ISINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SecurityName() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.SecurityNameColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.SecurityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Currency() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.CurrencyColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrincipalOrigAmt() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.PrincipalOrigAmtColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.PrincipalOrigAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrincipalEuroAmt() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.PrincipalEuroAmtColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.PrincipalEuroAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractNrOCBS() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.ContractNrOCBSColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.ContractNrOCBSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AssetType() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.AssetTypeColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.AssetTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TradeDate() As Date
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.TradeDateColumn),Date)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.TradeDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.StartDateColumn),Date)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.MaturityDateColumn),Date)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Sektor() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.SektorColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.SektorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SektorCountry() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.SektorCountryColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.SektorCountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STATUS() As String
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.STATUSColumn),String)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Purchase_Price() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.Purchase_PriceColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Purchase_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Amt_Paid() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.Amt_PaidColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Amt_PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.RICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIC' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.RICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Swap_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.Swap_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Swap_Price' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Swap_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property industry() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.industryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'industry' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.industryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Fixed_rate_coupon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.Fixed_rate_couponColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fixed rate coupon' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Fixed_rate_couponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Floating_leg__spread_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR._Floating_leg__spread_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Floating(leg) spread ' in table 'SECURITIES_OUR' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR._Floating_leg__spread_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property purchasing_yield() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.purchasing_yieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'purchasing yield' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.purchasing_yieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property bond_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.bond_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bond type' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.bond_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property with_swap_or_not() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.with_swap_or_notColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'with swap or not' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.with_swap_or_notColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Moody_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR._Moody_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moody-Rating' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR._Moody_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _S___P() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR._S___PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'S & P' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR._S___PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Fitch_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR._Fitch_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fitch-Rating' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR._Fitch_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SektorDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.SektorDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SektorDescription' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.SektorDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Amt_Paid_Eur() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.Amt_Paid_EurColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Amt_Paid_EurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Bewertungsabs_LiquideAktiva() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.Bewertungsabs_LiquideAktivaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bewertungsabs_LiquideAktiva' in table 'SECURITIES_OUR' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.Bewertungsabs_LiquideAktivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LCR_Position() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.LCR_PositionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCR_Position' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.LCR_PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LCR_Position_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.LCR_Position_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCR_Position_Name' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.LCR_Position_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LinkedToIRS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_OUR.LinkedToIRSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LinkedToIRS' in table 'SECURITIES_OUR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.LinkedToIRSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Return CType(Me(Me.tableSECURITIES_OUR.ExchangeRateColumn),Double)
            End Get
            Set
                Me(Me.tableSECURITIES_OUR.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRICNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.RICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRICNull()
            Me(Me.tableSECURITIES_OUR.RICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSwap_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.Swap_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSwap_PriceNull()
            Me(Me.tableSECURITIES_OUR.Swap_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsindustryNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.industryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetindustryNull()
            Me(Me.tableSECURITIES_OUR.industryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFixed_rate_couponNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.Fixed_rate_couponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFixed_rate_couponNull()
            Me(Me.tableSECURITIES_OUR.Fixed_rate_couponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Floating_leg__spread_Null() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR._Floating_leg__spread_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Floating_leg__spread_Null()
            Me(Me.tableSECURITIES_OUR._Floating_leg__spread_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Ispurchasing_yieldNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.purchasing_yieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setpurchasing_yieldNull()
            Me(Me.tableSECURITIES_OUR.purchasing_yieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isbond_typeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.bond_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setbond_typeNull()
            Me(Me.tableSECURITIES_OUR.bond_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Iswith_swap_or_notNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.with_swap_or_notColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setwith_swap_or_notNull()
            Me(Me.tableSECURITIES_OUR.with_swap_or_notColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Moody_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR._Moody_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Moody_RatingNull()
            Me(Me.tableSECURITIES_OUR._Moody_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_S___PNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR._S___PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_S___PNull()
            Me(Me.tableSECURITIES_OUR._S___PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Fitch_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR._Fitch_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Fitch_RatingNull()
            Me(Me.tableSECURITIES_OUR._Fitch_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableSECURITIES_OUR.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSektorDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.SektorDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSektorDescriptionNull()
            Me(Me.tableSECURITIES_OUR.SektorDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBewertungsabs_LiquideAktivaNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.Bewertungsabs_LiquideAktivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBewertungsabs_LiquideAktivaNull()
            Me(Me.tableSECURITIES_OUR.Bewertungsabs_LiquideAktivaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLCR_PositionNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.LCR_PositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLCR_PositionNull()
            Me(Me.tableSECURITIES_OUR.LCR_PositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLCR_Position_NameNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.LCR_Position_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLCR_Position_NameNull()
            Me(Me.tableSECURITIES_OUR.LCR_Position_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLinkedToIRSNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_OUR.LinkedToIRSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLinkedToIRSNull()
            Me(Me.tableSECURITIES_OUR.LinkedToIRSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_DEPRECIATIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_DEPRECIATIONS As SECURITIES_DEPRECIATIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_DEPRECIATIONS = CType(Me.Table,SECURITIES_DEPRECIATIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.DateColumn),Date)
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.ISIN_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_Code' in table 'SECURITIES_DEPRECIATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.ISIN_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'SECURITIES_DEPRECIATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Ccy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.CcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ccy' in table 'SECURITIES_DEPRECIATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Depreciation_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.Depreciation_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciation_Type' in table 'SECURITIES_DEPRECIATIONS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.Depreciation_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Booked_Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.Booked_DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Booked_Depreciation' in table 'SECURITIES_DEPRECIATIONS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.Booked_DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Actual_Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actual_Depreciation' in table 'SECURITIES_DEPRECIATIONS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OCBS_Booked_Before() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_BeforeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_Booked_Before' in table 'SECURITIES_DEPRECIATIONS' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_BeforeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OCBS_Booked_Later() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_LaterColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_Booked_Later' in table 'SECURITIES_DEPRECIATIONS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_LaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciation' in table 'SECURITIES_DEPRECIATIONS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Appreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.AppreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Appreciation' in table 'SECURITIES_DEPRECIATIONS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.AppreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Actual_Appreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_AppreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actual_Appreciation' in table 'SECURITIES_DEPRECIATIONS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_AppreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DEPRECIATIONS.ContractNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNr' in table 'SECURITIES_DEPRECIATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DEPRECIATIONS.ContractNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.ISIN_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_CodeNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.ISIN_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNameNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCcyNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDepreciation_TypeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.Depreciation_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDepreciation_TypeNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.Depreciation_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBooked_DepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.Booked_DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBooked_DepreciationNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.Booked_DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsActual_DepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.Actual_DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetActual_DepreciationNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOCBS_Booked_BeforeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_BeforeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOCBS_Booked_BeforeNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_BeforeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOCBS_Booked_LaterNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_LaterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOCBS_Booked_LaterNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.OCBS_Booked_LaterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDepreciationNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAppreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.AppreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAppreciationNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.AppreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsActual_AppreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.Actual_AppreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetActual_AppreciationNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.Actual_AppreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractNrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DEPRECIATIONS.ContractNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractNrNull()
            Me(Me.tableSECURITIES_DEPRECIATIONS.ContractNrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_DailyPriceRow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_DailyPrice As SECURITIES_DailyPriceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_DailyPrice = CType(Me.Table,SECURITIES_DailyPriceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_DailyPrice.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Ccy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.CcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ccy' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.ISIN_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_Code' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.ISIN_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.RICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIC' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.RICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Market_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.Market_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market_Price' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.Market_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Swap_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.Swap_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Swap_Price' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.Swap_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Purchase_price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.Purchase_priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purchase_price' in table 'SECURITIES_DailyPrice' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.Purchase_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property industry() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.industryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'industry' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.industryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Fixed_rate_coupon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.Fixed_rate_couponColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fixed rate coupon' in table 'SECURITIES_DailyPrice' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.Fixed_rate_couponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Floating_leg__spread_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice._Floating_leg__spread_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Floating(leg) spread ' in table 'SECURITIES_DailyPrice' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice._Floating_leg__spread_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property purchasing_yield() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.purchasing_yieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'purchasing yield' in table 'SECURITIES_DailyPrice' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.purchasing_yieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property bond_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.bond_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bond type' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.bond_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property with_swap_or_not() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.with_swap_or_notColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'with swap or not' in table 'SECURITIES_DailyPrice' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.with_swap_or_notColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Moody_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice._Moody_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moody-Rating' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice._Moody_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _S___P() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice._S___PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'S & P' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice._S___PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Fitch_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice._Fitch_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fitch-Rating' in table 'SECURITIES_DailyPrice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice._Fitch_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractNrOCBS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_DailyPrice.ContractNrOCBSColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNrOCBS' in table 'SECURITIES_DailyPrice' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_DailyPrice.ContractNrOCBSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSECURITIES_DailyPrice.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNameNull()
            Me(Me.tableSECURITIES_DailyPrice.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCcyNull()
            Me(Me.tableSECURITIES_DailyPrice.CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.ISIN_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_CodeNull()
            Me(Me.tableSECURITIES_DailyPrice.ISIN_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRICNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.RICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRICNull()
            Me(Me.tableSECURITIES_DailyPrice.RICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMarket_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.Market_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMarket_PriceNull()
            Me(Me.tableSECURITIES_DailyPrice.Market_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSwap_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.Swap_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSwap_PriceNull()
            Me(Me.tableSECURITIES_DailyPrice.Swap_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPurchase_priceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.Purchase_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPurchase_priceNull()
            Me(Me.tableSECURITIES_DailyPrice.Purchase_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsindustryNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.industryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetindustryNull()
            Me(Me.tableSECURITIES_DailyPrice.industryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFixed_rate_couponNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.Fixed_rate_couponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFixed_rate_couponNull()
            Me(Me.tableSECURITIES_DailyPrice.Fixed_rate_couponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Floating_leg__spread_Null() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice._Floating_leg__spread_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Floating_leg__spread_Null()
            Me(Me.tableSECURITIES_DailyPrice._Floating_leg__spread_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Ispurchasing_yieldNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.purchasing_yieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setpurchasing_yieldNull()
            Me(Me.tableSECURITIES_DailyPrice.purchasing_yieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isbond_typeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.bond_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setbond_typeNull()
            Me(Me.tableSECURITIES_DailyPrice.bond_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Iswith_swap_or_notNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.with_swap_or_notColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setwith_swap_or_notNull()
            Me(Me.tableSECURITIES_DailyPrice.with_swap_or_notColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Moody_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice._Moody_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Moody_RatingNull()
            Me(Me.tableSECURITIES_DailyPrice._Moody_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_S___PNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice._S___PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_S___PNull()
            Me(Me.tableSECURITIES_DailyPrice._S___PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Fitch_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice._Fitch_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Fitch_RatingNull()
            Me(Me.tableSECURITIES_DailyPrice._Fitch_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractNrOCBSNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_DailyPrice.ContractNrOCBSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractNrOCBSNull()
            Me(Me.tableSECURITIES_DailyPrice.ContractNrOCBSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_LIQUIDITYRESERVERow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_LIQUIDITYRESERVE As SECURITIES_LIQUIDITYRESERVEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_LIQUIDITYRESERVE = CType(Me.Table,SECURITIES_LIQUIDITYRESERVEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LiquidityCreationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityCreationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiquidityCreationDate' in table 'SECURITIES_LIQUIDITYRESERV"& _ 
                            "E' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityCreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LiquidityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiquidityDate' in table 'SECURITIES_LIQUIDITYRESERVE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ISIN_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_Code' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ISIN_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SecurityName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SecurityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecurityName' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SecurityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Ccy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.CcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ccy' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrincipalEuroAmt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalEuroAmtColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrincipalEuroAmt' in table 'SECURITIES_LIQUIDITYRESERVE' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalEuroAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractNrOCBS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ContractNrOCBSColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNrOCBS' in table 'SECURITIES_LIQUIDITYRESERVE' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ContractNrOCBSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TradeDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.TradeDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeDate' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.TradeDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Sektor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sektor' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SektorCountry() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorCountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SektorCountry' in table 'SECURITIES_LIQUIDITYRESERVE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorCountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AssetType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.AssetTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetType' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.AssetTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Booked_Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Booked_DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Booked_Depreciation' in table 'SECURITIES_LIQUIDITYRESERVE'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Booked_DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Actual_Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actual_Depreciation' in table 'SECURITIES_LIQUIDITYRESERVE'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OCBS_Booked_Before() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_BeforeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_Booked_Before' in table 'SECURITIES_LIQUIDITYRESERVE' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_BeforeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OCBS_Booked_Later() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_LaterColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_Booked_Later' in table 'SECURITIES_LIQUIDITYRESERVE' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_LaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Current_Interest_Rate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_RateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Current Interest Rate' in table 'SECURITIES_LIQUIDITYRESERV"& _ 
                            "E' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Current_Interest_Coupon_Period_Start_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_Start_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Current Interest Coupon Period Start Date' in table 'SECURI"& _ 
                            "TIES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_Start_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Current_Interest_Coupon_Period_End_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_End_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Current Interest Coupon Period End Date' in table 'SECURITI"& _ 
                            "ES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_End_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Accrued_Interest_Coupon_Org_Ccy() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_Org_CcyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Accrued Interest Coupon Org Ccy' in table 'SECURITIES_LIQUI"& _ 
                            "DITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_Org_CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Accrued_Interest_Coupon_EUR_Equ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_EUR_EquColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Accrued Interest Coupon EUR Equ' in table 'SECURITIES_LIQUI"& _ 
                            "DITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_EUR_EquColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Interest_Coupon_amount_Org_Ccy() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_amount_Org_CcyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Coupon amount Org Ccy' in table 'SECURITIES_LIQUID"& _ 
                            "ITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_amount_Org_CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Interest_Coupon_Amount_EUR_Equ() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_Amount_EUR_EquColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Coupon Amount EUR Equ' in table 'SECURITIES_LIQUID"& _ 
                            "ITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_Amount_EUR_EquColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.RICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIC' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.RICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Market_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Market_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market_Price' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Market_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Swap_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Swap_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Swap_Price' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Swap_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Purchase_price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Purchase_priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purchase_price' in table 'SECURITIES_LIQUIDITYRESERVE' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Purchase_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property industry() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.industryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'industry' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.industryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Fixed_rate_coupon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Fixed_rate_couponColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fixed rate coupon' in table 'SECURITIES_LIQUIDITYRESERVE' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Fixed_rate_couponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Floating_leg__spread_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Floating_leg__spread_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Floating(leg) spread ' in table 'SECURITIES_LIQUIDITYRESERV"& _ 
                            "E' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Floating_leg__spread_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property purchasing_yield() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.purchasing_yieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'purchasing yield' in table 'SECURITIES_LIQUIDITYRESERVE' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.purchasing_yieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property bond_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.bond_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bond type' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.bond_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property with_swap_or_not() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.with_swap_or_notColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'with swap or not' in table 'SECURITIES_LIQUIDITYRESERVE' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.with_swap_or_notColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Moody_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Moody_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moody-Rating' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Moody_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _S___P() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE._S___PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'S & P' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE._S___PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Fitch_Rating() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Fitch_RatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fitch-Rating' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Fitch_RatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartofYear_price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartofYear_priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartofYear_price' in table 'SECURITIES_LIQUIDITYRESERVE' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartofYear_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Amt_Paid() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_PaidColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amt_Paid' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ValueAsOfDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueAsOfDate' in table 'SECURITIES_LIQUIDITYRESERVE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciation' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Apreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ApreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Apreciation' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ApreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Actual_Appreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_AppreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actual_Appreciation' in table 'SECURITIES_LIQUIDITYRESERVE'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_AppreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrincipalOrigAmt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalOrigAmtColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrincipalOrigAmt' in table 'SECURITIES_LIQUIDITYRESERVE' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalOrigAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExchangeRateAgainstEUR_Purchase() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_PurchaseColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRateAgainstEUR_Purchase' in table 'SECURITIES_LIQUI"& _ 
                            "DITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_PurchaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Amt_Paid_EUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_Paid_EURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amt_Paid_EUR' in table 'SECURITIES_LIQUIDITYRESERVE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_Paid_EURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExchangeRateAgainstEUR_Current() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_CurrentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRateAgainstEUR_Current' in table 'SECURITIES_LIQUID"& _ 
                            "ITYRESERVE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_CurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ValueAsOfDate_OrigCcy() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDate_OrigCcyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueAsOfDate_OrigCcy' in table 'SECURITIES_LIQUIDITYRESERV"& _ 
                            "E' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDate_OrigCcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StilleReserve() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleReserveColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StilleReserve' in table 'SECURITIES_LIQUIDITYRESERVE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleReserveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StilleLast() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleLastColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StilleLast' in table 'SECURITIES_LIQUIDITYRESERVE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleLastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLiquidityCreationDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityCreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLiquidityCreationDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityCreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLiquidityDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLiquidityDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.LiquidityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ISIN_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_CodeNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ISIN_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSecurityNameNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.SecurityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSecurityNameNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SecurityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCcyNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPrincipalEuroAmtNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalEuroAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPrincipalEuroAmtNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalEuroAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractNrOCBSNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ContractNrOCBSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractNrOCBSNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ContractNrOCBSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTradeDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.TradeDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTradeDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.TradeDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSektorNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSektorNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSektorCountryNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorCountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSektorCountryNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.SektorCountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAssetTypeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.AssetTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAssetTypeNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.AssetTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBooked_DepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Booked_DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBooked_DepreciationNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Booked_DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsActual_DepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetActual_DepreciationNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOCBS_Booked_BeforeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_BeforeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOCBS_Booked_BeforeNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_BeforeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOCBS_Booked_LaterNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_LaterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOCBS_Booked_LaterNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.OCBS_Booked_LaterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCurrent_Interest_RateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCurrent_Interest_RateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_RateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCurrent_Interest_Coupon_Period_Start_DateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_Start_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCurrent_Interest_Coupon_Period_Start_DateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_Start_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCurrent_Interest_Coupon_Period_End_DateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_End_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCurrent_Interest_Coupon_Period_End_DateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Current_Interest_Coupon_Period_End_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAccrued_Interest_Coupon_Org_CcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_Org_CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAccrued_Interest_Coupon_Org_CcyNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_Org_CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAccrued_Interest_Coupon_EUR_EquNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_EUR_EquColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAccrued_Interest_Coupon_EUR_EquNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Accrued_Interest_Coupon_EUR_EquColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterest_Coupon_amount_Org_CcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_amount_Org_CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterest_Coupon_amount_Org_CcyNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_amount_Org_CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterest_Coupon_Amount_EUR_EquNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_Amount_EUR_EquColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterest_Coupon_Amount_EUR_EquNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Interest_Coupon_Amount_EUR_EquColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRICNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.RICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRICNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.RICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMarket_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Market_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMarket_PriceNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Market_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSwap_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Swap_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSwap_PriceNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Swap_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPurchase_priceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Purchase_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPurchase_priceNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Purchase_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsindustryNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.industryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetindustryNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.industryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFixed_rate_couponNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Fixed_rate_couponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFixed_rate_couponNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Fixed_rate_couponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Floating_leg__spread_Null() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE._Floating_leg__spread_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Floating_leg__spread_Null()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Floating_leg__spread_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Ispurchasing_yieldNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.purchasing_yieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setpurchasing_yieldNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.purchasing_yieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isbond_typeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.bond_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setbond_typeNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.bond_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Iswith_swap_or_notNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.with_swap_or_notColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setwith_swap_or_notNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.with_swap_or_notColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Moody_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE._Moody_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Moody_RatingNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Moody_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_S___PNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE._S___PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_S___PNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE._S___PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Fitch_RatingNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE._Fitch_RatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Fitch_RatingNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE._Fitch_RatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStartofYear_priceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.StartofYear_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStartofYear_priceNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StartofYear_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAmt_PaidNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_PaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAmt_PaidNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_PaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsValueAsOfDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetValueAsOfDateNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDepreciationNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsApreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ApreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetApreciationNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ApreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsActual_AppreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_AppreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetActual_AppreciationNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Actual_AppreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPrincipalOrigAmtNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalOrigAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPrincipalOrigAmtNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.PrincipalOrigAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsExchangeRateAgainstEUR_PurchaseNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_PurchaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetExchangeRateAgainstEUR_PurchaseNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_PurchaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAmt_Paid_EURNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_Paid_EURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAmt_Paid_EURNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.Amt_Paid_EURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsExchangeRateAgainstEUR_CurrentNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_CurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetExchangeRateAgainstEUR_CurrentNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ExchangeRateAgainstEUR_CurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsValueAsOfDate_OrigCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDate_OrigCcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetValueAsOfDate_OrigCcyNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.ValueAsOfDate_OrigCcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStilleReserveNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleReserveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStilleReserveNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleReserveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStilleLastNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleLastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStilleLastNull()
            Me(Me.tableSECURITIES_LIQUIDITYRESERVE.StilleLastColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_BOOKINGSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_BOOKINGS As SECURITIES_BOOKINGSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_BOOKINGS = CType(Me.Table,SECURITIES_BOOKINGSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_BOOKINGS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BookingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.BookingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BookingDate' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.BookingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ValueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.ValueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueDate' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.ValueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Ccy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.CcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ccy' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Debit_Appreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS._Debit_AppreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Debit-Appreciation' in table 'SECURITIES_BOOKINGS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS._Debit_AppreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Credit_Depreciation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS._Credit_DepreciationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credit-Depreciation' in table 'SECURITIES_BOOKINGS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS._Credit_DepreciationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BookingText() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.BookingTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BookingText' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.BookingTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BOOKINGS.ContractNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractNr' in table 'SECURITIES_BOOKINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BOOKINGS.ContractNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBookingDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.BookingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBookingDateNull()
            Me(Me.tableSECURITIES_BOOKINGS.BookingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsValueDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.ValueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetValueDateNull()
            Me(Me.tableSECURITIES_BOOKINGS.ValueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetReferenceNull()
            Me(Me.tableSECURITIES_BOOKINGS.ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCcyNull()
            Me(Me.tableSECURITIES_BOOKINGS.CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Debit_AppreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS._Debit_AppreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Debit_AppreciationNull()
            Me(Me.tableSECURITIES_BOOKINGS._Debit_AppreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Credit_DepreciationNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS._Credit_DepreciationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Credit_DepreciationNull()
            Me(Me.tableSECURITIES_BOOKINGS._Credit_DepreciationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBookingTextNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.BookingTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBookingTextNull()
            Me(Me.tableSECURITIES_BOOKINGS.BookingTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractNrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BOOKINGS.ContractNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractNrNull()
            Me(Me.tableSECURITIES_BOOKINGS.ContractNrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SECURITIES_BESTANDRow
        Inherits Global.System.Data.DataRow
        
        Private tableSECURITIES_BESTAND As SECURITIES_BESTANDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSECURITIES_BESTAND = CType(Me.Table,SECURITIES_BESTANDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSECURITIES_BESTAND.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BestandCreationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.BestandCreationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BestandCreationDate' in table 'SECURITIES_BESTAND' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.BestandCreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BestandDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.BestandDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BestandDate' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.BestandDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.ISIN_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_Code' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.ISIN_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SecurityName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.SecurityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecurityName' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.SecurityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Ccy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.CcyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ccy' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.CcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrincipalEuroAmt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.PrincipalEuroAmtColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrincipalEuroAmt' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.PrincipalEuroAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Purchase_price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.Purchase_priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purchase_price' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.Purchase_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartofYear_price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.StartofYear_priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartofYear_price' in table 'SECURITIES_BESTAND' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.StartofYear_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Market_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.Market_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market_Price' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.Market_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Amt_Paid() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.Amt_PaidColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amt_Paid' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.Amt_PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartofYear_Amt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.StartofYear_AmtColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartofYear_Amt' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.StartofYear_AmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ValueAsOfDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.ValueAsOfDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueAsOfDate' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.ValueAsOfDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OCBS_Booked_Later() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.OCBS_Booked_LaterColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OCBS_Booked_Later' in table 'SECURITIES_BESTAND' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.OCBS_Booked_LaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Buchwert() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.BuchwertColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Buchwert' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.BuchwertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BuchwertAbgrenzungen() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.BuchwertAbgrenzungenColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BuchwertAbgrenzungen' in table 'SECURITIES_BESTAND' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.BuchwertAbgrenzungenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AenderungLfdJahr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.AenderungLfdJahrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AenderungLfdJahr' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.AenderungLfdJahrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property KursReserve() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.KursReserveColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KursReserve' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.KursReserveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AssetType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.AssetTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetType' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.AssetTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableSECURITIES_BESTAND.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'SECURITIES_BESTAND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSECURITIES_BESTAND.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBestandCreationDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.BestandCreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBestandCreationDateNull()
            Me(Me.tableSECURITIES_BESTAND.BestandCreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBestandDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.BestandDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBestandDateNull()
            Me(Me.tableSECURITIES_BESTAND.BestandDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.ISIN_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_CodeNull()
            Me(Me.tableSECURITIES_BESTAND.ISIN_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSecurityNameNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.SecurityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSecurityNameNull()
            Me(Me.tableSECURITIES_BESTAND.SecurityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCcyNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.CcyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCcyNull()
            Me(Me.tableSECURITIES_BESTAND.CcyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPrincipalEuroAmtNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.PrincipalEuroAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPrincipalEuroAmtNull()
            Me(Me.tableSECURITIES_BESTAND.PrincipalEuroAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableSECURITIES_BESTAND.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPurchase_priceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.Purchase_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPurchase_priceNull()
            Me(Me.tableSECURITIES_BESTAND.Purchase_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStartofYear_priceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.StartofYear_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStartofYear_priceNull()
            Me(Me.tableSECURITIES_BESTAND.StartofYear_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMarket_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.Market_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMarket_PriceNull()
            Me(Me.tableSECURITIES_BESTAND.Market_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAmt_PaidNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.Amt_PaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAmt_PaidNull()
            Me(Me.tableSECURITIES_BESTAND.Amt_PaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStartofYear_AmtNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.StartofYear_AmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStartofYear_AmtNull()
            Me(Me.tableSECURITIES_BESTAND.StartofYear_AmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsValueAsOfDateNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.ValueAsOfDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetValueAsOfDateNull()
            Me(Me.tableSECURITIES_BESTAND.ValueAsOfDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOCBS_Booked_LaterNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.OCBS_Booked_LaterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOCBS_Booked_LaterNull()
            Me(Me.tableSECURITIES_BESTAND.OCBS_Booked_LaterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBuchwertNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.BuchwertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBuchwertNull()
            Me(Me.tableSECURITIES_BESTAND.BuchwertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBuchwertAbgrenzungenNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.BuchwertAbgrenzungenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBuchwertAbgrenzungenNull()
            Me(Me.tableSECURITIES_BESTAND.BuchwertAbgrenzungenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAenderungLfdJahrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.AenderungLfdJahrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAenderungLfdJahrNull()
            Me(Me.tableSECURITIES_BESTAND.AenderungLfdJahrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsKursReserveNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.KursReserveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetKursReserveNull()
            Me(Me.tableSECURITIES_BESTAND.KursReserveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAssetTypeNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.AssetTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAssetTypeNull()
            Me(Me.tableSECURITIES_BESTAND.AssetTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableSECURITIES_BESTAND.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableSECURITIES_BESTAND.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_OURRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_OURRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_OURRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_OURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_DEPRECIATIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_DEPRECIATIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_DEPRECIATIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_DEPRECIATIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_DailyPriceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_DailyPriceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_DailyPriceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_DailyPriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_LIQUIDITYRESERVERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_LIQUIDITYRESERVERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_LIQUIDITYRESERVERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_LIQUIDITYRESERVERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_BOOKINGSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_BOOKINGSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_BOOKINGSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_BOOKINGSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class SECURITIES_BESTANDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SECURITIES_BESTANDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As SECURITIES_BESTANDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As SECURITIES_BESTANDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SECURITIESDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_OURTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_OUR"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ISIN", "ISIN")
            tableMapping.ColumnMappings.Add("SecurityName", "SecurityName")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("PrincipalOrigAmt", "PrincipalOrigAmt")
            tableMapping.ColumnMappings.Add("PrincipalEuroAmt", "PrincipalEuroAmt")
            tableMapping.ColumnMappings.Add("ContractNrOCBS", "ContractNrOCBS")
            tableMapping.ColumnMappings.Add("AssetType", "AssetType")
            tableMapping.ColumnMappings.Add("TradeDate", "TradeDate")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("Sektor", "Sektor")
            tableMapping.ColumnMappings.Add("SektorCountry", "SektorCountry")
            tableMapping.ColumnMappings.Add("STATUS", "STATUS")
            tableMapping.ColumnMappings.Add("Purchase_Price", "Purchase_Price")
            tableMapping.ColumnMappings.Add("Amt_Paid", "Amt_Paid")
            tableMapping.ColumnMappings.Add("RIC", "RIC")
            tableMapping.ColumnMappings.Add("Swap_Price", "Swap_Price")
            tableMapping.ColumnMappings.Add("industry", "industry")
            tableMapping.ColumnMappings.Add("Fixed rate coupon", "Fixed rate coupon")
            tableMapping.ColumnMappings.Add("Floating(leg) spread ", "Floating(leg) spread ")
            tableMapping.ColumnMappings.Add("purchasing yield", "purchasing yield")
            tableMapping.ColumnMappings.Add("bond type", "bond type")
            tableMapping.ColumnMappings.Add("with swap or not", "with swap or not")
            tableMapping.ColumnMappings.Add("Moody-Rating", "Moody-Rating")
            tableMapping.ColumnMappings.Add("S & P", "S & P")
            tableMapping.ColumnMappings.Add("Fitch-Rating", "Fitch-Rating")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("SektorDescription", "SektorDescription")
            tableMapping.ColumnMappings.Add("Amt_Paid_Eur", "Amt_Paid_Eur")
            tableMapping.ColumnMappings.Add("Bewertungsabs_LiquideAktiva", "Bewertungsabs_LiquideAktiva")
            tableMapping.ColumnMappings.Add("LCR_Position", "LCR_Position")
            tableMapping.ColumnMappings.Add("LCR_Position_Name", "LCR_Position_Name")
            tableMapping.ColumnMappings.Add("LinkedToIRS", "LinkedToIRS")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_OUR] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_OUR] ([ISIN], [SecurityName], [Currency], [PrincipalOrigA"& _ 
                "mt], [PrincipalEuroAmt], [ContractNrOCBS], [AssetType], [TradeDate], [StartDate]"& _ 
                ", [MaturityDate], [Sektor], [SektorCountry], [STATUS], [Amt_Paid], [Purchase_Pri"& _ 
                "ce], [RIC], [Swap_Price], [industry], [Fixed rate coupon], [Floating(leg) spread"& _ 
                " ], [purchasing yield], [bond type], [with swap or not], [Moody-Rating], [S & P]"& _ 
                ", [Fitch-Rating], [ClientNr], [SektorDescription], [Amt_Paid_Eur], [Bewertungsab"& _ 
                "s_LiquideAktiva], [LCR_Position], [LCR_Position_Name], [LinkedToIRS], [ExchangeR"& _ 
                "ate]) VALUES (@ISIN, @SecurityName, @Currency, @PrincipalOrigAmt, @PrincipalEuro"& _ 
                "Amt, @ContractNrOCBS, @AssetType, @TradeDate, @StartDate, @MaturityDate, @Sektor"& _ 
                ", @SektorCountry, @STATUS, @Amt_Paid, @Purchase_Price, @RIC, @Swap_Price, @indus"& _ 
                "try, @Fixed_rate_coupon, @p1, @purchasing_yield, @bond_type, @with_swap_or_not, "& _ 
                "@p4, @p7, @p10, @ClientNr, @SektorDescription, @Amt_Paid_Eur, @Bewertungsabs_Liq"& _ 
                "uideAktiva, @LCR_Position, @LCR_Position_Name, @LinkedToIRS, @ExchangeRate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid_Eur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_Eur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bewertungsabs_LiquideAktiva", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bewertungsabs_LiquideAktiva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCR_Position", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCR_Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCR_Position_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCR_Position_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LinkedToIRS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LinkedToIRS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_OUR] SET [ISIN] = @ISIN, [SecurityName] = @SecurityName, [Curr"& _ 
                "ency] = @Currency, [PrincipalOrigAmt] = @PrincipalOrigAmt, [PrincipalEuroAmt] = "& _ 
                "@PrincipalEuroAmt, [ContractNrOCBS] = @ContractNrOCBS, [AssetType] = @AssetType,"& _ 
                " [TradeDate] = @TradeDate, [StartDate] = @StartDate, [MaturityDate] = @MaturityD"& _ 
                "ate, [Sektor] = @Sektor, [SektorCountry] = @SektorCountry, [STATUS] = @STATUS, ["& _ 
                "Amt_Paid] = @Amt_Paid, [Purchase_Price] = @Purchase_Price, [RIC] = @RIC, [Swap_P"& _ 
                "rice] = @Swap_Price, [industry] = @industry, [Fixed rate coupon] = @Fixed_rate_c"& _ 
                "oupon, [Floating(leg) spread ] = @p1, [purchasing yield] = @purchasing_yield, [b"& _ 
                "ond type] = @bond_type, [with swap or not] = @with_swap_or_not, [Moody-Rating] ="& _ 
                " @p4, [S & P] = @p7, [Fitch-Rating] = @p10, [ClientNr] = @ClientNr, [SektorDescr"& _ 
                "iption] = @SektorDescription, [Amt_Paid_Eur] = @Amt_Paid_Eur, [Bewertungsabs_Liq"& _ 
                "uideAktiva] = @Bewertungsabs_LiquideAktiva, [LCR_Position] = @LCR_Position, [LCR"& _ 
                "_Position_Name] = @LCR_Position_Name, [LinkedToIRS] = @LinkedToIRS, [ExchangeRat"& _ 
                "e] = @ExchangeRate WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid_Eur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_Eur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bewertungsabs_LiquideAktiva", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bewertungsabs_LiquideAktiva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCR_Position", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCR_Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCR_Position_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCR_Position_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LinkedToIRS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LinkedToIRS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ISIN, SecurityName, Currency, PrincipalOrigAmt, PrincipalEuroAm"& _ 
                "t, ContractNrOCBS, AssetType, TradeDate, StartDate, MaturityDate, Sektor, Sektor"& _ 
                "Country, STATUS, Amt_Paid, Purchase_Price, RIC, Swap_Price, industry, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 [Fixed rate coupon], [Floating(leg) spread ], [purchasing yield"& _ 
                "], [bond type], [with swap or not], [Moody-Rating], [S & P], [Fitch-Rating], Cli"& _ 
                "entNr, SektorDescription, Amt_Paid_Eur, Bewertungsabs_LiquideAktiva, LCR_Positio"& _ 
                "n, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         LCR_Position_Name, LinkedToIRS, ExchangeRate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                "            SECURITIES_OUR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_OURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_OURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_OURDataTable = New SECURITIESDataset.SECURITIES_OURDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_OURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_OUR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ISIN As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Currency As String,  _
                    ByVal PrincipalOrigAmt As Double,  _
                    ByVal PrincipalEuroAmt As Double,  _
                    ByVal ContractNrOCBS As Double,  _
                    ByVal AssetType As String,  _
                    ByVal TradeDate As Date,  _
                    ByVal StartDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal Sektor As Double,  _
                    ByVal SektorCountry As String,  _
                    ByVal STATUS As String,  _
                    ByVal Amt_Paid As Double,  _
                    ByVal Purchase_Price As Double,  _
                    ByVal RIC As String,  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal ClientNr As String,  _
                    ByVal SektorDescription As String,  _
                    ByVal Amt_Paid_Eur As Double,  _
                    ByVal Bewertungsabs_LiquideAktiva As Global.System.Nullable(Of Double),  _
                    ByVal LCR_Position As String,  _
                    ByVal LCR_Position_Name As String,  _
                    ByVal LinkedToIRS As Global.System.Nullable(Of Boolean),  _
                    ByVal ExchangeRate As Double) As Integer
            If (ISIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ISIN")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ISIN,String)
            End If
            If (SecurityName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SecurityName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SecurityName,String)
            End If
            If (Currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currency")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Currency,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PrincipalOrigAmt,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PrincipalEuroAmt,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ContractNrOCBS,Double)
            If (AssetType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AssetType")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(AssetType,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(TradeDate,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(StartDate,Date)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaturityDate,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(Sektor,Double)
            If (SektorCountry Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SektorCountry")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SektorCountry,String)
            End If
            If (STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STATUS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(Amt_Paid,Double)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Purchase_Price,Double)
            If (RIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RIC,String)
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p10,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ClientNr,String)
            End If
            If (SektorDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(SektorDescription,String)
            End If
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(Amt_Paid_Eur,Double)
            If (Bewertungsabs_LiquideAktiva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Bewertungsabs_LiquideAktiva.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (LCR_Position Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(LCR_Position,String)
            End If
            If (LCR_Position_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(LCR_Position_Name,String)
            End If
            If (LinkedToIRS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(LinkedToIRS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(ExchangeRate,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ISIN As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Currency As String,  _
                    ByVal PrincipalOrigAmt As Double,  _
                    ByVal PrincipalEuroAmt As Double,  _
                    ByVal ContractNrOCBS As Double,  _
                    ByVal AssetType As String,  _
                    ByVal TradeDate As Date,  _
                    ByVal StartDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal Sektor As Double,  _
                    ByVal SektorCountry As String,  _
                    ByVal STATUS As String,  _
                    ByVal Amt_Paid As Double,  _
                    ByVal Purchase_Price As Double,  _
                    ByVal RIC As String,  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal ClientNr As String,  _
                    ByVal SektorDescription As String,  _
                    ByVal Amt_Paid_Eur As Double,  _
                    ByVal Bewertungsabs_LiquideAktiva As Global.System.Nullable(Of Double),  _
                    ByVal LCR_Position As String,  _
                    ByVal LCR_Position_Name As String,  _
                    ByVal LinkedToIRS As Global.System.Nullable(Of Boolean),  _
                    ByVal ExchangeRate As Double,  _
                    ByVal Original_ID As Integer) As Integer
            If (ISIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ISIN")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ISIN,String)
            End If
            If (SecurityName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SecurityName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SecurityName,String)
            End If
            If (Currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Currency,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PrincipalOrigAmt,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PrincipalEuroAmt,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ContractNrOCBS,Double)
            If (AssetType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AssetType")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(AssetType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TradeDate,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(StartDate,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MaturityDate,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Sektor,Double)
            If (SektorCountry Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SektorCountry")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SektorCountry,String)
            End If
            If (STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(STATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Amt_Paid,Double)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Purchase_Price,Double)
            If (RIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RIC,String)
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p10,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ClientNr,String)
            End If
            If (SektorDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(SektorDescription,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Amt_Paid_Eur,Double)
            If (Bewertungsabs_LiquideAktiva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Bewertungsabs_LiquideAktiva.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (LCR_Position Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(LCR_Position,String)
            End If
            If (LCR_Position_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(LCR_Position_Name,String)
            End If
            If (LinkedToIRS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(LinkedToIRS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ExchangeRate,Double)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_DEPRECIATIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_DEPRECIATIONS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("ISIN_Code", "ISIN_Code")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Ccy", "Ccy")
            tableMapping.ColumnMappings.Add("Depreciation_Type", "Depreciation_Type")
            tableMapping.ColumnMappings.Add("Booked_Depreciation", "Booked_Depreciation")
            tableMapping.ColumnMappings.Add("Actual_Depreciation", "Actual_Depreciation")
            tableMapping.ColumnMappings.Add("OCBS_Booked_Before", "OCBS_Booked_Before")
            tableMapping.ColumnMappings.Add("OCBS_Booked_Later", "OCBS_Booked_Later")
            tableMapping.ColumnMappings.Add("Depreciation", "Depreciation")
            tableMapping.ColumnMappings.Add("Appreciation", "Appreciation")
            tableMapping.ColumnMappings.Add("Actual_Appreciation", "Actual_Appreciation")
            tableMapping.ColumnMappings.Add("ContractNr", "ContractNr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_DEPRECIATIONS] WHERE (([ID] = @Original_ID) AND ([Date] ="& _ 
                " @Original_Date) AND ((@IsNull_ISIN_Code = 1 AND [ISIN_Code] IS NULL) OR ([ISIN_"& _ 
                "Code] = @Original_ISIN_Code)) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Na"& _ 
                "me] = @Original_Name)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) OR ([Ccy] = @Ori"& _ 
                "ginal_Ccy)) AND ((@IsNull_Depreciation_Type = 1 AND [Depreciation_Type] IS NULL)"& _ 
                " OR ([Depreciation_Type] = @Original_Depreciation_Type)) AND ((@IsNull_Booked_De"& _ 
                "preciation = 1 AND [Booked_Depreciation] IS NULL) OR ([Booked_Depreciation] = @O"& _ 
                "riginal_Booked_Depreciation)) AND ((@IsNull_Actual_Depreciation = 1 AND [Actual_"& _ 
                "Depreciation] IS NULL) OR ([Actual_Depreciation] = @Original_Actual_Depreciation"& _ 
                ")) AND ((@IsNull_OCBS_Booked_Before = 1 AND [OCBS_Booked_Before] IS NULL) OR ([O"& _ 
                "CBS_Booked_Before] = @Original_OCBS_Booked_Before)) AND ((@IsNull_OCBS_Booked_La"& _ 
                "ter = 1 AND [OCBS_Booked_Later] IS NULL) OR ([OCBS_Booked_Later] = @Original_OCB"& _ 
                "S_Booked_Later)) AND ((@IsNull_Appreciation = 1 AND [Appreciation] IS NULL) OR ("& _ 
                "[Appreciation] = @Original_Appreciation)) AND ((@IsNull_Depreciation = 1 AND [De"& _ 
                "preciation] IS NULL) OR ([Depreciation] = @Original_Depreciation)) AND ((@IsNull"& _ 
                "_Actual_Appreciation = 1 AND [Actual_Appreciation] IS NULL) OR ([Actual_Apprecia"& _ 
                "tion] = @Original_Actual_Appreciation)) AND ((@IsNull_ContractNr = 1 AND [Contra"& _ 
                "ctNr] IS NULL) OR ([ContractNr] = @Original_ContractNr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Booked_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Before", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_DEPRECIATIONS] ([Date], [ISIN_Code], [Name], [Ccy], [Depr"& _ 
                "eciation_Type], [Booked_Depreciation], [Actual_Depreciation], [OCBS_Booked_Befor"& _ 
                "e], [OCBS_Booked_Later], [Appreciation], [Depreciation], [Actual_Appreciation], "& _ 
                "[ContractNr]) VALUES (@Date, @ISIN_Code, @Name, @Ccy, @Depreciation_Type, @Booke"& _ 
                "d_Depreciation, @Actual_Depreciation, @OCBS_Booked_Before, @OCBS_Booked_Later, @"& _ 
                "Appreciation, @Depreciation, @Actual_Appreciation, @ContractNr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_DEPRECIATIONS] SET [Date] = @Date, [ISIN_Code] = @ISIN_Code, ["& _ 
                "Name] = @Name, [Ccy] = @Ccy, [Depreciation_Type] = @Depreciation_Type, [Booked_D"& _ 
                "epreciation] = @Booked_Depreciation, [Actual_Depreciation] = @Actual_Depreciatio"& _ 
                "n, [OCBS_Booked_Before] = @OCBS_Booked_Before, [OCBS_Booked_Later] = @OCBS_Booke"& _ 
                "d_Later, [Appreciation] = @Appreciation, [Depreciation] = @Depreciation, [Actual"& _ 
                "_Appreciation] = @Actual_Appreciation, [ContractNr] = @ContractNr WHERE (([ID] ="& _ 
                " @Original_ID) AND ([Date] = @Original_Date) AND ((@IsNull_ISIN_Code = 1 AND [IS"& _ 
                "IN_Code] IS NULL) OR ([ISIN_Code] = @Original_ISIN_Code)) AND ((@IsNull_Name = 1"& _ 
                " AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Ccy = 1 AND [Cc"& _ 
                "y] IS NULL) OR ([Ccy] = @Original_Ccy)) AND ((@IsNull_Depreciation_Type = 1 AND "& _ 
                "[Depreciation_Type] IS NULL) OR ([Depreciation_Type] = @Original_Depreciation_Ty"& _ 
                "pe)) AND ((@IsNull_Booked_Depreciation = 1 AND [Booked_Depreciation] IS NULL) OR"& _ 
                " ([Booked_Depreciation] = @Original_Booked_Depreciation)) AND ((@IsNull_Actual_D"& _ 
                "epreciation = 1 AND [Actual_Depreciation] IS NULL) OR ([Actual_Depreciation] = @"& _ 
                "Original_Actual_Depreciation)) AND ((@IsNull_OCBS_Booked_Before = 1 AND [OCBS_Bo"& _ 
                "oked_Before] IS NULL) OR ([OCBS_Booked_Before] = @Original_OCBS_Booked_Before)) "& _ 
                "AND ((@IsNull_OCBS_Booked_Later = 1 AND [OCBS_Booked_Later] IS NULL) OR ([OCBS_B"& _ 
                "ooked_Later] = @Original_OCBS_Booked_Later)) AND ((@IsNull_Appreciation = 1 AND "& _ 
                "[Appreciation] IS NULL) OR ([Appreciation] = @Original_Appreciation)) AND ((@IsN"& _ 
                "ull_Depreciation = 1 AND [Depreciation] IS NULL) OR ([Depreciation] = @Original_"& _ 
                "Depreciation)) AND ((@IsNull_Actual_Appreciation = 1 AND [Actual_Appreciation] I"& _ 
                "S NULL) OR ([Actual_Appreciation] = @Original_Actual_Appreciation)) AND ((@IsNul"& _ 
                "l_ContractNr = 1 AND [ContractNr] IS NULL) OR ([ContractNr] = @Original_Contract"& _ 
                "Nr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation_Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Booked_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Before", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Date, ISIN_Code, Name, Ccy, Depreciation_Type, Booked_Depreciat"& _ 
                "ion, Actual_Depreciation, OCBS_Booked_Before, OCBS_Booked_Later, Appreciation, D"& _ 
                "epreciation, Actual_Appreciation, ContractNr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SECURITIES_DEPRECI"& _ 
                "ATIONS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_DEPRECIATIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_DEPRECIATIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_DEPRECIATIONSDataTable = New SECURITIESDataset.SECURITIES_DEPRECIATIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_DEPRECIATIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_DEPRECIATIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Date As Date, ByVal Original_ISIN_Code As String, ByVal Original_Name As String, ByVal Original_Ccy As String, ByVal Original_Depreciation_Type As String, ByVal Original_Booked_Depreciation As Global.System.Nullable(Of Double), ByVal Original_Actual_Depreciation As Global.System.Nullable(Of Double), ByVal Original_OCBS_Booked_Before As Global.System.Nullable(Of Double), ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double), ByVal Original_Appreciation As Global.System.Nullable(Of Double), ByVal Original_Depreciation As Global.System.Nullable(Of Double), ByVal Original_Actual_Appreciation As Global.System.Nullable(Of Double), ByVal Original_ContractNr As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Date,Date)
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Name,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Ccy,String)
            End If
            If (Original_Depreciation_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Depreciation_Type,String)
            End If
            If (Original_Booked_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Appreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Appreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Appreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal _Date As Date, ByVal ISIN_Code As String, ByVal Name As String, ByVal Ccy As String, ByVal Depreciation_Type As String, ByVal Booked_Depreciation As Global.System.Nullable(Of Double), ByVal Actual_Depreciation As Global.System.Nullable(Of Double), ByVal OCBS_Booked_Before As Global.System.Nullable(Of Double), ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double), ByVal Appreciation As Global.System.Nullable(Of Double), ByVal Depreciation As Global.System.Nullable(Of Double), ByVal Actual_Appreciation As Global.System.Nullable(Of Double), ByVal ContractNr As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(_Date,Date)
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ISIN_Code,String)
            End If
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Name,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Ccy,String)
            End If
            If (Depreciation_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Depreciation_Type,String)
            End If
            If (Booked_Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Actual_Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Appreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Appreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Actual_Appreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ContractNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal _Date As Date,  _
                    ByVal ISIN_Code As String,  _
                    ByVal Name As String,  _
                    ByVal Ccy As String,  _
                    ByVal Depreciation_Type As String,  _
                    ByVal Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal ContractNr As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Date As Date,  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_Depreciation_Type As String,  _
                    ByVal Original_Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Original_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_ContractNr As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(_Date,Date)
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ISIN_Code,String)
            End If
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Name,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Ccy,String)
            End If
            If (Depreciation_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Depreciation_Type,String)
            End If
            If (Booked_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Actual_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Actual_Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ContractNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ContractNr,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Date,Date)
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Name,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Ccy,String)
            End If
            If (Original_Depreciation_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Depreciation_Type,String)
            End If
            If (Original_Booked_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_DailyPriceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_DailyPrice"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Ccy", "Ccy")
            tableMapping.ColumnMappings.Add("ISIN_Code", "ISIN_Code")
            tableMapping.ColumnMappings.Add("RIC", "RIC")
            tableMapping.ColumnMappings.Add("Market_Price", "Market_Price")
            tableMapping.ColumnMappings.Add("Swap_Price", "Swap_Price")
            tableMapping.ColumnMappings.Add("Purchase_price", "Purchase_price")
            tableMapping.ColumnMappings.Add("industry", "industry")
            tableMapping.ColumnMappings.Add("Fixed rate coupon", "Fixed rate coupon")
            tableMapping.ColumnMappings.Add("Floating(leg) spread ", "Floating(leg) spread ")
            tableMapping.ColumnMappings.Add("purchasing yield", "purchasing yield")
            tableMapping.ColumnMappings.Add("bond type", "bond type")
            tableMapping.ColumnMappings.Add("with swap or not", "with swap or not")
            tableMapping.ColumnMappings.Add("Moody-Rating", "Moody-Rating")
            tableMapping.ColumnMappings.Add("S & P", "S & P")
            tableMapping.ColumnMappings.Add("Fitch-Rating", "Fitch-Rating")
            tableMapping.ColumnMappings.Add("ContractNrOCBS", "ContractNrOCBS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_DailyPrice] WHERE (([ID] = @Original_ID) AND ((@IsNull_Da"& _ 
                "te = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Name = 1 "& _ 
                "AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Ccy = 1 AND [Ccy"& _ 
                "] IS NULL) OR ([Ccy] = @Original_Ccy)) AND ((@IsNull_ISIN_Code = 1 AND [ISIN_Cod"& _ 
                "e] IS NULL) OR ([ISIN_Code] = @Original_ISIN_Code)) AND ((@IsNull_RIC = 1 AND [R"& _ 
                "IC] IS NULL) OR ([RIC] = @Original_RIC)) AND ((@IsNull_Market_Price = 1 AND [Mar"& _ 
                "ket_Price] IS NULL) OR ([Market_Price] = @Original_Market_Price)) AND ((@IsNull_"& _ 
                "Swap_Price = 1 AND [Swap_Price] IS NULL) OR ([Swap_Price] = @Original_Swap_Price"& _ 
                ")) AND ((@IsNull_Purchase_price = 1 AND [Purchase_price] IS NULL) OR ([Purchase_"& _ 
                "price] = @Original_Purchase_price)) AND ((@IsNull_industry = 1 AND [industry] IS"& _ 
                " NULL) OR ([industry] = @Original_industry)) AND ((@IsNull_Fixed_rate_coupon = 1"& _ 
                " AND [Fixed rate coupon] IS NULL) OR ([Fixed rate coupon] = @Original_Fixed_rate"& _ 
                "_coupon)) AND ((@p3 = 1 AND [Floating(leg) spread ] IS NULL) OR ([Floating(leg) "& _ 
                "spread ] = @p2)) AND ((@IsNull_purchasing_yield = 1 AND [purchasing yield] IS NU"& _ 
                "LL) OR ([purchasing yield] = @Original_purchasing_yield)) AND ((@IsNull_bond_typ"& _ 
                "e = 1 AND [bond type] IS NULL) OR ([bond type] = @Original_bond_type)) AND ((@Is"& _ 
                "Null_with_swap_or_not = 1 AND [with swap or not] IS NULL) OR ([with swap or not]"& _ 
                " = @Original_with_swap_or_not)) AND ((@p6 = 1 AND [Moody-Rating] IS NULL) OR ([M"& _ 
                "oody-Rating] = @p5)) AND ((@p9 = 1 AND [S & P] IS NULL) OR ([S & P] = @p8)) AND "& _ 
                "((@p12 = 1 AND [Fitch-Rating] IS NULL) OR ([Fitch-Rating] = @p11)) AND ((@IsNull"& _ 
                "_ContractNrOCBS = 1 AND [ContractNrOCBS] IS NULL) OR ([ContractNrOCBS] = @Origin"& _ 
                "al_ContractNrOCBS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Swap_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_industry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fixed_rate_coupon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_purchasing_yield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bond_type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_with_swap_or_not", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrOCBS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_DailyPrice] ([Date], [Name], [Ccy], [ISIN_Code], [RIC], ["& _ 
                "Market_Price], [Swap_Price], [Purchase_price], [industry], [Fixed rate coupon], "& _ 
                "[Floating(leg) spread ], [purchasing yield], [bond type], [with swap or not], [M"& _ 
                "oody-Rating], [S & P], [Fitch-Rating], [ContractNrOCBS]) VALUES (@Date, @Name, @"& _ 
                "Ccy, @ISIN_Code, @RIC, @Market_Price, @Swap_Price, @Purchase_price, @industry, @"& _ 
                "Fixed_rate_coupon, @p1, @purchasing_yield, @bond_type, @with_swap_or_not, @p4, @"& _ 
                "p7, @p10, @ContractNrOCBS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_DailyPrice] SET [Date] = @Date, [Name] = @Name, [Ccy] = @Ccy, "& _ 
                "[ISIN_Code] = @ISIN_Code, [RIC] = @RIC, [Market_Price] = @Market_Price, [Swap_Pr"& _ 
                "ice] = @Swap_Price, [Purchase_price] = @Purchase_price, [industry] = @industry, "& _ 
                "[Fixed rate coupon] = @Fixed_rate_coupon, [Floating(leg) spread ] = @p1, [purcha"& _ 
                "sing yield] = @purchasing_yield, [bond type] = @bond_type, [with swap or not] = "& _ 
                "@with_swap_or_not, [Moody-Rating] = @p4, [S & P] = @p7, [Fitch-Rating] = @p10, ["& _ 
                "ContractNrOCBS] = @ContractNrOCBS WHERE (([ID] = @Original_ID) AND ((@IsNull_Dat"& _ 
                "e = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Name = 1 A"& _ 
                "ND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Ccy = 1 AND [Ccy]"& _ 
                " IS NULL) OR ([Ccy] = @Original_Ccy)) AND ((@IsNull_ISIN_Code = 1 AND [ISIN_Code"& _ 
                "] IS NULL) OR ([ISIN_Code] = @Original_ISIN_Code)) AND ((@IsNull_RIC = 1 AND [RI"& _ 
                "C] IS NULL) OR ([RIC] = @Original_RIC)) AND ((@IsNull_Market_Price = 1 AND [Mark"& _ 
                "et_Price] IS NULL) OR ([Market_Price] = @Original_Market_Price)) AND ((@IsNull_S"& _ 
                "wap_Price = 1 AND [Swap_Price] IS NULL) OR ([Swap_Price] = @Original_Swap_Price)"& _ 
                ") AND ((@IsNull_Purchase_price = 1 AND [Purchase_price] IS NULL) OR ([Purchase_p"& _ 
                "rice] = @Original_Purchase_price)) AND ((@IsNull_industry = 1 AND [industry] IS "& _ 
                "NULL) OR ([industry] = @Original_industry)) AND ((@IsNull_Fixed_rate_coupon = 1 "& _ 
                "AND [Fixed rate coupon] IS NULL) OR ([Fixed rate coupon] = @Original_Fixed_rate_"& _ 
                "coupon)) AND ((@p3 = 1 AND [Floating(leg) spread ] IS NULL) OR ([Floating(leg) s"& _ 
                "pread ] = @p2)) AND ((@IsNull_purchasing_yield = 1 AND [purchasing yield] IS NUL"& _ 
                "L) OR ([purchasing yield] = @Original_purchasing_yield)) AND ((@IsNull_bond_type"& _ 
                " = 1 AND [bond type] IS NULL) OR ([bond type] = @Original_bond_type)) AND ((@IsN"& _ 
                "ull_with_swap_or_not = 1 AND [with swap or not] IS NULL) OR ([with swap or not] "& _ 
                "= @Original_with_swap_or_not)) AND ((@p6 = 1 AND [Moody-Rating] IS NULL) OR ([Mo"& _ 
                "ody-Rating] = @p5)) AND ((@p9 = 1 AND [S & P] IS NULL) OR ([S & P] = @p8)) AND ("& _ 
                "(@p12 = 1 AND [Fitch-Rating] IS NULL) OR ([Fitch-Rating] = @p11)) AND ((@IsNull_"& _ 
                "ContractNrOCBS = 1 AND [ContractNrOCBS] IS NULL) OR ([ContractNrOCBS] = @Origina"& _ 
                "l_ContractNrOCBS)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Swap_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_industry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fixed_rate_coupon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_purchasing_yield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bond_type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_with_swap_or_not", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrOCBS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Date, Name, Ccy, ISIN_Code, RIC, Market_Price, Swap_Price, Purc"& _ 
                "hase_price, industry, [Fixed rate coupon], [Floating(leg) spread ], [purchasing "& _ 
                "yield], [bond type], [with swap or not], [Moody-Rating], [S & P], [Fitch-Rating]"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ContractNrOCBS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SECURITIES_DailyPri"& _ 
                "ce"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Date DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_DailyPriceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_DailyPriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_DailyPriceDataTable = New SECURITIESDataset.SECURITIES_DailyPriceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_DailyPriceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_DailyPrice")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_RIC As String,  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_industry As String,  _
                    ByVal Original_Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_purchasing_yield As String,  _
                    ByVal Original_bond_type As String,  _
                    ByVal Original_with_swap_or_not As String,  _
                    ByVal p5 As String,  _
                    ByVal p8 As String,  _
                    ByVal p11 As String,  _
                    ByVal Original_ContractNrOCBS As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Name,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Ccy,String)
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_RIC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RIC,String)
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Swap_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Swap_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_industry Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_industry,String)
            End If
            If (Original_Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_purchasing_yield Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_purchasing_yield,String)
            End If
            If (Original_bond_type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_bond_type,String)
            End If
            If (Original_with_swap_or_not Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_with_swap_or_not,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(p5,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(p8,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(p11,String)
            End If
            If (Original_ContractNrOCBS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Name As String,  _
                    ByVal Ccy As String,  _
                    ByVal ISIN_Code As String,  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal ContractNrOCBS As Global.System.Nullable(Of Double)) As Integer
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Ccy,String)
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ISIN_Code,String)
            End If
            If (RIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RIC,String)
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p10,String)
            End If
            If (ContractNrOCBS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Name As String,  _
                    ByVal Ccy As String,  _
                    ByVal ISIN_Code As String,  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal ContractNrOCBS As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_RIC As String,  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_industry As String,  _
                    ByVal Original_Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_purchasing_yield As String,  _
                    ByVal Original_bond_type As String,  _
                    ByVal Original_with_swap_or_not As String,  _
                    ByVal p5 As String,  _
                    ByVal p8 As String,  _
                    ByVal p11 As String,  _
                    ByVal Original_ContractNrOCBS As Global.System.Nullable(Of Double)) As Integer
            If (_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Ccy,String)
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ISIN_Code,String)
            End If
            If (RIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RIC,String)
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p10,String)
            End If
            If (ContractNrOCBS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID,Integer)
            If (Original_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Name,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Ccy,String)
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_RIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_RIC,String)
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Swap_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Swap_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_industry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_industry,String)
            End If
            If (Original_Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_purchasing_yield Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_purchasing_yield,String)
            End If
            If (Original_bond_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_bond_type,String)
            End If
            If (Original_with_swap_or_not Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_with_swap_or_not,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(p5,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(p8,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(p11,String)
            End If
            If (Original_ContractNrOCBS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_LIQUIDITYRESERVETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_LIQUIDITYRESERVE"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("LiquidityCreationDate", "LiquidityCreationDate")
            tableMapping.ColumnMappings.Add("LiquidityDate", "LiquidityDate")
            tableMapping.ColumnMappings.Add("ISIN_Code", "ISIN_Code")
            tableMapping.ColumnMappings.Add("SecurityName", "SecurityName")
            tableMapping.ColumnMappings.Add("Ccy", "Ccy")
            tableMapping.ColumnMappings.Add("PrincipalEuroAmt", "PrincipalEuroAmt")
            tableMapping.ColumnMappings.Add("ContractNrOCBS", "ContractNrOCBS")
            tableMapping.ColumnMappings.Add("TradeDate", "TradeDate")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("Sektor", "Sektor")
            tableMapping.ColumnMappings.Add("SektorCountry", "SektorCountry")
            tableMapping.ColumnMappings.Add("AssetType", "AssetType")
            tableMapping.ColumnMappings.Add("Booked_Depreciation", "Booked_Depreciation")
            tableMapping.ColumnMappings.Add("Actual_Depreciation", "Actual_Depreciation")
            tableMapping.ColumnMappings.Add("OCBS_Booked_Before", "OCBS_Booked_Before")
            tableMapping.ColumnMappings.Add("OCBS_Booked_Later", "OCBS_Booked_Later")
            tableMapping.ColumnMappings.Add("Current Interest Rate", "Current Interest Rate")
            tableMapping.ColumnMappings.Add("Current Interest Coupon Period Start Date", "Current Interest Coupon Period Start Date")
            tableMapping.ColumnMappings.Add("Current Interest Coupon Period End Date", "Current Interest Coupon Period End Date")
            tableMapping.ColumnMappings.Add("Accrued Interest Coupon Org Ccy", "Accrued Interest Coupon Org Ccy")
            tableMapping.ColumnMappings.Add("Accrued Interest Coupon EUR Equ", "Accrued Interest Coupon EUR Equ")
            tableMapping.ColumnMappings.Add("Interest Coupon amount Org Ccy", "Interest Coupon amount Org Ccy")
            tableMapping.ColumnMappings.Add("Interest Coupon Amount EUR Equ", "Interest Coupon Amount EUR Equ")
            tableMapping.ColumnMappings.Add("RIC", "RIC")
            tableMapping.ColumnMappings.Add("Market_Price", "Market_Price")
            tableMapping.ColumnMappings.Add("Swap_Price", "Swap_Price")
            tableMapping.ColumnMappings.Add("Purchase_price", "Purchase_price")
            tableMapping.ColumnMappings.Add("industry", "industry")
            tableMapping.ColumnMappings.Add("Fixed rate coupon", "Fixed rate coupon")
            tableMapping.ColumnMappings.Add("Floating(leg) spread ", "Floating(leg) spread ")
            tableMapping.ColumnMappings.Add("purchasing yield", "purchasing yield")
            tableMapping.ColumnMappings.Add("bond type", "bond type")
            tableMapping.ColumnMappings.Add("with swap or not", "with swap or not")
            tableMapping.ColumnMappings.Add("Moody-Rating", "Moody-Rating")
            tableMapping.ColumnMappings.Add("S & P", "S & P")
            tableMapping.ColumnMappings.Add("Fitch-Rating", "Fitch-Rating")
            tableMapping.ColumnMappings.Add("StartofYear_price", "StartofYear_price")
            tableMapping.ColumnMappings.Add("Amt_Paid", "Amt_Paid")
            tableMapping.ColumnMappings.Add("ValueAsOfDate", "ValueAsOfDate")
            tableMapping.ColumnMappings.Add("Depreciation", "Depreciation")
            tableMapping.ColumnMappings.Add("Apreciation", "Apreciation")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("Actual_Appreciation", "Actual_Appreciation")
            tableMapping.ColumnMappings.Add("PrincipalOrigAmt", "PrincipalOrigAmt")
            tableMapping.ColumnMappings.Add("ExchangeRateAgainstEUR_Purchase", "ExchangeRateAgainstEUR_Purchase")
            tableMapping.ColumnMappings.Add("Amt_Paid_EUR", "Amt_Paid_EUR")
            tableMapping.ColumnMappings.Add("ExchangeRateAgainstEUR_Current", "ExchangeRateAgainstEUR_Current")
            tableMapping.ColumnMappings.Add("ValueAsOfDate_OrigCcy", "ValueAsOfDate_OrigCcy")
            tableMapping.ColumnMappings.Add("StilleReserve", "StilleReserve")
            tableMapping.ColumnMappings.Add("StilleLast", "StilleLast")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_LIQUIDITYRESERVE] WHERE (([ID] = @Original_ID) AND ((@IsN"& _ 
                "ull_LiquidityCreationDate = 1 AND [LiquidityCreationDate] IS NULL) OR ([Liquidit"& _ 
                "yCreationDate] = @Original_LiquidityCreationDate)) AND ((@IsNull_LiquidityDate ="& _ 
                " 1 AND [LiquidityDate] IS NULL) OR ([LiquidityDate] = @Original_LiquidityDate)) "& _ 
                "AND ((@IsNull_ISIN_Code = 1 AND [ISIN_Code] IS NULL) OR ([ISIN_Code] = @Original"& _ 
                "_ISIN_Code)) AND ((@IsNull_SecurityName = 1 AND [SecurityName] IS NULL) OR ([Sec"& _ 
                "urityName] = @Original_SecurityName)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) O"& _ 
                "R ([Ccy] = @Original_Ccy)) AND ((@IsNull_PrincipalEuroAmt = 1 AND [PrincipalEuro"& _ 
                "Amt] IS NULL) OR ([PrincipalEuroAmt] = @Original_PrincipalEuroAmt)) AND ((@IsNul"& _ 
                "l_ContractNrOCBS = 1 AND [ContractNrOCBS] IS NULL) OR ([ContractNrOCBS] = @Origi"& _ 
                "nal_ContractNrOCBS)) AND ((@IsNull_TradeDate = 1 AND [TradeDate] IS NULL) OR ([T"& _ 
                "radeDate] = @Original_TradeDate)) AND ((@IsNull_StartDate = 1 AND [StartDate] IS"& _ 
                " NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_MaturityDate = 1 AN"& _ 
                "D [MaturityDate] IS NULL) OR ([MaturityDate] = @Original_MaturityDate)) AND ((@I"& _ 
                "sNull_Sektor = 1 AND [Sektor] IS NULL) OR ([Sektor] = @Original_Sektor)) AND ((@"& _ 
                "IsNull_SektorCountry = 1 AND [SektorCountry] IS NULL) OR ([SektorCountry] = @Ori"& _ 
                "ginal_SektorCountry)) AND ((@IsNull_AssetType = 1 AND [AssetType] IS NULL) OR (["& _ 
                "AssetType] = @Original_AssetType)) AND ((@IsNull_Booked_Depreciation = 1 AND [Bo"& _ 
                "oked_Depreciation] IS NULL) OR ([Booked_Depreciation] = @Original_Booked_Depreci"& _ 
                "ation)) AND ((@IsNull_Actual_Depreciation = 1 AND [Actual_Depreciation] IS NULL)"& _ 
                " OR ([Actual_Depreciation] = @Original_Actual_Depreciation)) AND ((@IsNull_OCBS_"& _ 
                "Booked_Before = 1 AND [OCBS_Booked_Before] IS NULL) OR ([OCBS_Booked_Before] = @"& _ 
                "Original_OCBS_Booked_Before)) AND ((@IsNull_OCBS_Booked_Later = 1 AND [OCBS_Book"& _ 
                "ed_Later] IS NULL) OR ([OCBS_Booked_Later] = @Original_OCBS_Booked_Later)) AND ("& _ 
                "(@IsNull_Current_Interest_Rate = 1 AND [Current Interest Rate] IS NULL) OR ([Cur"& _ 
                "rent Interest Rate] = @Original_Current_Interest_Rate)) AND ((@IsNull_Current_In"& _ 
                "terest_Coupon_Period_Start_Date = 1 AND [Current Interest Coupon Period Start Da"& _ 
                "te] IS NULL) OR ([Current Interest Coupon Period Start Date] = @Original_Current"& _ 
                "_Interest_Coupon_Period_Start_Date)) AND ((@IsNull_Current_Interest_Coupon_Perio"& _ 
                "d_End_Date = 1 AND [Current Interest Coupon Period End Date] IS NULL) OR ([Curre"& _ 
                "nt Interest Coupon Period End Date] = @Original_Current_Interest_Coupon_Period_E"& _ 
                "nd_Date)) AND ((@IsNull_Accrued_Interest_Coupon_Org_Ccy = 1 AND [Accrued Interes"& _ 
                "t Coupon Org Ccy] IS NULL) OR ([Accrued Interest Coupon Org Ccy] = @Original_Acc"& _ 
                "rued_Interest_Coupon_Org_Ccy)) AND ((@IsNull_Accrued_Interest_Coupon_EUR_Equ = 1"& _ 
                " AND [Accrued Interest Coupon EUR Equ] IS NULL) OR ([Accrued Interest Coupon EUR"& _ 
                " Equ] = @Original_Accrued_Interest_Coupon_EUR_Equ)) AND ((@IsNull_Interest_Coupo"& _ 
                "n_amount_Org_Ccy = 1 AND [Interest Coupon amount Org Ccy] IS NULL) OR ([Interest"& _ 
                " Coupon amount Org Ccy] = @Original_Interest_Coupon_amount_Org_Ccy)) AND ((@IsNu"& _ 
                "ll_Interest_Coupon_Amount_EUR_Equ = 1 AND [Interest Coupon Amount EUR Equ] IS NU"& _ 
                "LL) OR ([Interest Coupon Amount EUR Equ] = @Original_Interest_Coupon_Amount_EUR_"& _ 
                "Equ)) AND ((@IsNull_RIC = 1 AND [RIC] IS NULL) OR ([RIC] = @Original_RIC)) AND ("& _ 
                "(@IsNull_Market_Price = 1 AND [Market_Price] IS NULL) OR ([Market_Price] = @Orig"& _ 
                "inal_Market_Price)) AND ((@IsNull_Swap_Price = 1 AND [Swap_Price] IS NULL) OR (["& _ 
                "Swap_Price] = @Original_Swap_Price)) AND ((@IsNull_Purchase_price = 1 AND [Purch"& _ 
                "ase_price] IS NULL) OR ([Purchase_price] = @Original_Purchase_price)) AND ((@IsN"& _ 
                "ull_industry = 1 AND [industry] IS NULL) OR ([industry] = @Original_industry)) A"& _ 
                "ND ((@IsNull_Fixed_rate_coupon = 1 AND [Fixed rate coupon] IS NULL) OR ([Fixed r"& _ 
                "ate coupon] = @Original_Fixed_rate_coupon)) AND ((@p3 = 1 AND [Floating(leg) spr"& _ 
                "ead ] IS NULL) OR ([Floating(leg) spread ] = @p2)) AND ((@IsNull_purchasing_yiel"& _ 
                "d = 1 AND [purchasing yield] IS NULL) OR ([purchasing yield] = @Original_purchas"& _ 
                "ing_yield)) AND ((@IsNull_bond_type = 1 AND [bond type] IS NULL) OR ([bond type]"& _ 
                " = @Original_bond_type)) AND ((@IsNull_with_swap_or_not = 1 AND [with swap or no"& _ 
                "t] IS NULL) OR ([with swap or not] = @Original_with_swap_or_not)) AND ((@p6 = 1 "& _ 
                "AND [Moody-Rating] IS NULL) OR ([Moody-Rating] = @p5)) AND ((@p9 = 1 AND [S & P]"& _ 
                " IS NULL) OR ([S & P] = @p8)) AND ((@p12 = 1 AND [Fitch-Rating] IS NULL) OR ([Fi"& _ 
                "tch-Rating] = @p11)) AND ((@IsNull_StartofYear_price = 1 AND [StartofYear_price]"& _ 
                " IS NULL) OR ([StartofYear_price] = @Original_StartofYear_price)) AND ((@IsNull_"& _ 
                "Amt_Paid = 1 AND [Amt_Paid] IS NULL) OR ([Amt_Paid] = @Original_Amt_Paid)) AND ("& _ 
                "(@IsNull_ValueAsOfDate = 1 AND [ValueAsOfDate] IS NULL) OR ([ValueAsOfDate] = @O"& _ 
                "riginal_ValueAsOfDate)) AND ((@IsNull_Apreciation = 1 AND [Apreciation] IS NULL)"& _ 
                " OR ([Apreciation] = @Original_Apreciation)) AND ((@IsNull_Depreciation = 1 AND "& _ 
                "[Depreciation] IS NULL) OR ([Depreciation] = @Original_Depreciation)) AND ((@IsN"& _ 
                "ull_ClientNr = 1 AND [ClientNr] IS NULL) OR ([ClientNr] = @Original_ClientNr)) A"& _ 
                "ND ((@IsNull_Actual_Appreciation = 1 AND [Actual_Appreciation] IS NULL) OR ([Act"& _ 
                "ual_Appreciation] = @Original_Actual_Appreciation)) AND ((@IsNull_PrincipalOrigA"& _ 
                "mt = 1 AND [PrincipalOrigAmt] IS NULL) OR ([PrincipalOrigAmt] = @Original_Princi"& _ 
                "palOrigAmt)) AND ((@IsNull_ExchangeRateAgainstEUR_Purchase = 1 AND [ExchangeRate"& _ 
                "AgainstEUR_Purchase] IS NULL) OR ([ExchangeRateAgainstEUR_Purchase] = @Original_"& _ 
                "ExchangeRateAgainstEUR_Purchase)) AND ((@IsNull_Amt_Paid_EUR = 1 AND [Amt_Paid_E"& _ 
                "UR] IS NULL) OR ([Amt_Paid_EUR] = @Original_Amt_Paid_EUR)) AND ((@IsNull_Exchang"& _ 
                "eRateAgainstEUR_Current = 1 AND [ExchangeRateAgainstEUR_Current] IS NULL) OR ([E"& _ 
                "xchangeRateAgainstEUR_Current] = @Original_ExchangeRateAgainstEUR_Current)) AND "& _ 
                "((@IsNull_ValueAsOfDate_OrigCcy = 1 AND [ValueAsOfDate_OrigCcy] IS NULL) OR ([Va"& _ 
                "lueAsOfDate_OrigCcy] = @Original_ValueAsOfDate_OrigCcy)) AND ((@IsNull_StilleRes"& _ 
                "erve = 1 AND [StilleReserve] IS NULL) OR ([StilleReserve] = @Original_StilleRese"& _ 
                "rve)) AND ((@IsNull_StilleLast = 1 AND [StilleLast] IS NULL) OR ([StilleLast] = "& _ 
                "@Original_StilleLast)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidityCreationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidityCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecurityName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalEuroAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrOCBS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TradeDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaturityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Sektor", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SektorCountry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssetType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Booked_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Before", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Rate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Swap_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_industry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fixed_rate_coupon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_purchasing_yield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bond_type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_with_swap_or_not", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Apreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Apreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalOrigAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid_EUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StilleReserve", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StilleReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StilleLast", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StilleLast", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_LIQUIDITYRESERVE] ([LiquidityCreationDate], [LiquidityDat"& _ 
                "e], [ISIN_Code], [SecurityName], [Ccy], [PrincipalEuroAmt], [ContractNrOCBS], [T"& _ 
                "radeDate], [StartDate], [MaturityDate], [Sektor], [SektorCountry], [AssetType], "& _ 
                "[Booked_Depreciation], [Actual_Depreciation], [OCBS_Booked_Before], [OCBS_Booked"& _ 
                "_Later], [Current Interest Rate], [Current Interest Coupon Period Start Date], ["& _ 
                "Current Interest Coupon Period End Date], [Accrued Interest Coupon Org Ccy], [Ac"& _ 
                "crued Interest Coupon EUR Equ], [Interest Coupon amount Org Ccy], [Interest Coup"& _ 
                "on Amount EUR Equ], [RIC], [Market_Price], [Swap_Price], [Purchase_price], [indu"& _ 
                "stry], [Fixed rate coupon], [Floating(leg) spread ], [purchasing yield], [bond t"& _ 
                "ype], [with swap or not], [Moody-Rating], [S & P], [Fitch-Rating], [StartofYear_"& _ 
                "price], [Amt_Paid], [ValueAsOfDate], [Apreciation], [Depreciation], [ClientNr], "& _ 
                "[Actual_Appreciation], [PrincipalOrigAmt], [ExchangeRateAgainstEUR_Purchase], [A"& _ 
                "mt_Paid_EUR], [ExchangeRateAgainstEUR_Current], [ValueAsOfDate_OrigCcy], [Stille"& _ 
                "Reserve], [StilleLast]) VALUES (@LiquidityCreationDate, @LiquidityDate, @ISIN_Co"& _ 
                "de, @SecurityName, @Ccy, @PrincipalEuroAmt, @ContractNrOCBS, @TradeDate, @StartD"& _ 
                "ate, @MaturityDate, @Sektor, @SektorCountry, @AssetType, @Booked_Depreciation, @"& _ 
                "Actual_Depreciation, @OCBS_Booked_Before, @OCBS_Booked_Later, @Current_Interest_"& _ 
                "Rate, @Current_Interest_Coupon_Period_Start_Date, @Current_Interest_Coupon_Perio"& _ 
                "d_End_Date, @Accrued_Interest_Coupon_Org_Ccy, @Accrued_Interest_Coupon_EUR_Equ, "& _ 
                "@Interest_Coupon_amount_Org_Ccy, @Interest_Coupon_Amount_EUR_Equ, @RIC, @Market_"& _ 
                "Price, @Swap_Price, @Purchase_price, @industry, @Fixed_rate_coupon, @p1, @purcha"& _ 
                "sing_yield, @bond_type, @with_swap_or_not, @p4, @p7, @p10, @StartofYear_price, @"& _ 
                "Amt_Paid, @ValueAsOfDate, @Apreciation, @Depreciation, @ClientNr, @Actual_Apprec"& _ 
                "iation, @PrincipalOrigAmt, @ExchangeRateAgainstEUR_Purchase, @Amt_Paid_EUR, @Exc"& _ 
                "hangeRateAgainstEUR_Current, @ValueAsOfDate_OrigCcy, @StilleReserve, @StilleLast"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Apreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StilleReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StilleLast", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_LIQUIDITYRESERVE] SET [LiquidityCreationDate] = @LiquidityCrea"& _ 
                "tionDate, [LiquidityDate] = @LiquidityDate, [ISIN_Code] = @ISIN_Code, [SecurityN"& _ 
                "ame] = @SecurityName, [Ccy] = @Ccy, [PrincipalEuroAmt] = @PrincipalEuroAmt, [Con"& _ 
                "tractNrOCBS] = @ContractNrOCBS, [TradeDate] = @TradeDate, [StartDate] = @StartDa"& _ 
                "te, [MaturityDate] = @MaturityDate, [Sektor] = @Sektor, [SektorCountry] = @Sekto"& _ 
                "rCountry, [AssetType] = @AssetType, [Booked_Depreciation] = @Booked_Depreciation"& _ 
                ", [Actual_Depreciation] = @Actual_Depreciation, [OCBS_Booked_Before] = @OCBS_Boo"& _ 
                "ked_Before, [OCBS_Booked_Later] = @OCBS_Booked_Later, [Current Interest Rate] = "& _ 
                "@Current_Interest_Rate, [Current Interest Coupon Period Start Date] = @Current_I"& _ 
                "nterest_Coupon_Period_Start_Date, [Current Interest Coupon Period End Date] = @C"& _ 
                "urrent_Interest_Coupon_Period_End_Date, [Accrued Interest Coupon Org Ccy] = @Acc"& _ 
                "rued_Interest_Coupon_Org_Ccy, [Accrued Interest Coupon EUR Equ] = @Accrued_Inter"& _ 
                "est_Coupon_EUR_Equ, [Interest Coupon amount Org Ccy] = @Interest_Coupon_amount_O"& _ 
                "rg_Ccy, [Interest Coupon Amount EUR Equ] = @Interest_Coupon_Amount_EUR_Equ, [RIC"& _ 
                "] = @RIC, [Market_Price] = @Market_Price, [Swap_Price] = @Swap_Price, [Purchase_"& _ 
                "price] = @Purchase_price, [industry] = @industry, [Fixed rate coupon] = @Fixed_r"& _ 
                "ate_coupon, [Floating(leg) spread ] = @p1, [purchasing yield] = @purchasing_yiel"& _ 
                "d, [bond type] = @bond_type, [with swap or not] = @with_swap_or_not, [Moody-Rati"& _ 
                "ng] = @p4, [S & P] = @p7, [Fitch-Rating] = @p10, [StartofYear_price] = @StartofY"& _ 
                "ear_price, [Amt_Paid] = @Amt_Paid, [ValueAsOfDate] = @ValueAsOfDate, [Apreciatio"& _ 
                "n] = @Apreciation, [Depreciation] = @Depreciation, [ClientNr] = @ClientNr, [Actu"& _ 
                "al_Appreciation] = @Actual_Appreciation, [PrincipalOrigAmt] = @PrincipalOrigAmt,"& _ 
                " [ExchangeRateAgainstEUR_Purchase] = @ExchangeRateAgainstEUR_Purchase, [Amt_Paid"& _ 
                "_EUR] = @Amt_Paid_EUR, [ExchangeRateAgainstEUR_Current] = @ExchangeRateAgainstEU"& _ 
                "R_Current, [ValueAsOfDate_OrigCcy] = @ValueAsOfDate_OrigCcy, [StilleReserve] = @"& _ 
                "StilleReserve, [StilleLast] = @StilleLast WHERE (([ID] = @Original_ID) AND ((@Is"& _ 
                "Null_LiquidityCreationDate = 1 AND [LiquidityCreationDate] IS NULL) OR ([Liquidi"& _ 
                "tyCreationDate] = @Original_LiquidityCreationDate)) AND ((@IsNull_LiquidityDate "& _ 
                "= 1 AND [LiquidityDate] IS NULL) OR ([LiquidityDate] = @Original_LiquidityDate))"& _ 
                " AND ((@IsNull_ISIN_Code = 1 AND [ISIN_Code] IS NULL) OR ([ISIN_Code] = @Origina"& _ 
                "l_ISIN_Code)) AND ((@IsNull_SecurityName = 1 AND [SecurityName] IS NULL) OR ([Se"& _ 
                "curityName] = @Original_SecurityName)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) "& _ 
                "OR ([Ccy] = @Original_Ccy)) AND ((@IsNull_PrincipalEuroAmt = 1 AND [PrincipalEur"& _ 
                "oAmt] IS NULL) OR ([PrincipalEuroAmt] = @Original_PrincipalEuroAmt)) AND ((@IsNu"& _ 
                "ll_ContractNrOCBS = 1 AND [ContractNrOCBS] IS NULL) OR ([ContractNrOCBS] = @Orig"& _ 
                "inal_ContractNrOCBS)) AND ((@IsNull_TradeDate = 1 AND [TradeDate] IS NULL) OR (["& _ 
                "TradeDate] = @Original_TradeDate)) AND ((@IsNull_StartDate = 1 AND [StartDate] I"& _ 
                "S NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_MaturityDate = 1 A"& _ 
                "ND [MaturityDate] IS NULL) OR ([MaturityDate] = @Original_MaturityDate)) AND ((@"& _ 
                "IsNull_Sektor = 1 AND [Sektor] IS NULL) OR ([Sektor] = @Original_Sektor)) AND (("& _ 
                "@IsNull_SektorCountry = 1 AND [SektorCountry] IS NULL) OR ([SektorCountry] = @Or"& _ 
                "iginal_SektorCountry)) AND ((@IsNull_AssetType = 1 AND [AssetType] IS NULL) OR ("& _ 
                "[AssetType] = @Original_AssetType)) AND ((@IsNull_Booked_Depreciation = 1 AND [B"& _ 
                "ooked_Depreciation] IS NULL) OR ([Booked_Depreciation] = @Original_Booked_Deprec"& _ 
                "iation)) AND ((@IsNull_Actual_Depreciation = 1 AND [Actual_Depreciation] IS NULL"& _ 
                ") OR ([Actual_Depreciation] = @Original_Actual_Depreciation)) AND ((@IsNull_OCBS"& _ 
                "_Booked_Before = 1 AND [OCBS_Booked_Before] IS NULL) OR ([OCBS_Booked_Before] = "& _ 
                "@Original_OCBS_Booked_Before)) AND ((@IsNull_OCBS_Booked_Later = 1 AND [OCBS_Boo"& _ 
                "ked_Later] IS NULL) OR ([OCBS_Booked_Later] = @Original_OCBS_Booked_Later)) AND "& _ 
                "((@IsNull_Current_Interest_Rate = 1 AND [Current Interest Rate] IS NULL) OR ([Cu"& _ 
                "rrent Interest Rate] = @Original_Current_Interest_Rate)) AND ((@IsNull_Current_I"& _ 
                "nterest_Coupon_Period_Start_Date = 1 AND [Current Interest Coupon Period Start D"& _ 
                "ate] IS NULL) OR ([Current Interest Coupon Period Start Date] = @Original_Curren"& _ 
                "t_Interest_Coupon_Period_Start_Date)) AND ((@IsNull_Current_Interest_Coupon_Peri"& _ 
                "od_End_Date = 1 AND [Current Interest Coupon Period End Date] IS NULL) OR ([Curr"& _ 
                "ent Interest Coupon Period End Date] = @Original_Current_Interest_Coupon_Period_"& _ 
                "End_Date)) AND ((@IsNull_Accrued_Interest_Coupon_Org_Ccy = 1 AND [Accrued Intere"& _ 
                "st Coupon Org Ccy] IS NULL) OR ([Accrued Interest Coupon Org Ccy] = @Original_Ac"& _ 
                "crued_Interest_Coupon_Org_Ccy)) AND ((@IsNull_Accrued_Interest_Coupon_EUR_Equ = "& _ 
                "1 AND [Accrued Interest Coupon EUR Equ] IS NULL) OR ([Accrued Interest Coupon EU"& _ 
                "R Equ] = @Original_Accrued_Interest_Coupon_EUR_Equ)) AND ((@IsNull_Interest_Coup"& _ 
                "on_amount_Org_Ccy = 1 AND [Interest Coupon amount Org Ccy] IS NULL) OR ([Interes"& _ 
                "t Coupon amount Org Ccy] = @Original_Interest_Coupon_amount_Org_Ccy)) AND ((@IsN"& _ 
                "ull_Interest_Coupon_Amount_EUR_Equ = 1 AND [Interest Coupon Amount EUR Equ] IS N"& _ 
                "ULL) OR ([Interest Coupon Amount EUR Equ] = @Original_Interest_Coupon_Amount_EUR"& _ 
                "_Equ)) AND ((@IsNull_RIC = 1 AND [RIC] IS NULL) OR ([RIC] = @Original_RIC)) AND "& _ 
                "((@IsNull_Market_Price = 1 AND [Market_Price] IS NULL) OR ([Market_Price] = @Ori"& _ 
                "ginal_Market_Price)) AND ((@IsNull_Swap_Price = 1 AND [Swap_Price] IS NULL) OR ("& _ 
                "[Swap_Price] = @Original_Swap_Price)) AND ((@IsNull_Purchase_price = 1 AND [Purc"& _ 
                "hase_price] IS NULL) OR ([Purchase_price] = @Original_Purchase_price)) AND ((@Is"& _ 
                "Null_industry = 1 AND [industry] IS NULL) OR ([industry] = @Original_industry)) "& _ 
                "AND ((@IsNull_Fixed_rate_coupon = 1 AND [Fixed rate coupon] IS NULL) OR ([Fixed "& _ 
                "rate coupon] = @Original_Fixed_rate_coupon)) AND ((@p3 = 1 AND [Floating(leg) sp"& _ 
                "read ] IS NULL) OR ([Floating(leg) spread ] = @p2)) AND ((@IsNull_purchasing_yie"& _ 
                "ld = 1 AND [purchasing yield] IS NULL) OR ([purchasing yield] = @Original_purcha"& _ 
                "sing_yield)) AND ((@IsNull_bond_type = 1 AND [bond type] IS NULL) OR ([bond type"& _ 
                "] = @Original_bond_type)) AND ((@IsNull_with_swap_or_not = 1 AND [with swap or n"& _ 
                "ot] IS NULL) OR ([with swap or not] = @Original_with_swap_or_not)) AND ((@p6 = 1"& _ 
                " AND [Moody-Rating] IS NULL) OR ([Moody-Rating] = @p5)) AND ((@p9 = 1 AND [S & P"& _ 
                "] IS NULL) OR ([S & P] = @p8)) AND ((@p12 = 1 AND [Fitch-Rating] IS NULL) OR ([F"& _ 
                "itch-Rating] = @p11)) AND ((@IsNull_StartofYear_price = 1 AND [StartofYear_price"& _ 
                "] IS NULL) OR ([StartofYear_price] = @Original_StartofYear_price)) AND ((@IsNull"& _ 
                "_Amt_Paid = 1 AND [Amt_Paid] IS NULL) OR ([Amt_Paid] = @Original_Amt_Paid)) AND "& _ 
                "((@IsNull_ValueAsOfDate = 1 AND [ValueAsOfDate] IS NULL) OR ([ValueAsOfDate] = @"& _ 
                "Original_ValueAsOfDate)) AND ((@IsNull_Apreciation = 1 AND [Apreciation] IS NULL"& _ 
                ") OR ([Apreciation] = @Original_Apreciation)) AND ((@IsNull_Depreciation = 1 AND"& _ 
                " [Depreciation] IS NULL) OR ([Depreciation] = @Original_Depreciation)) AND ((@Is"& _ 
                "Null_ClientNr = 1 AND [ClientNr] IS NULL) OR ([ClientNr] = @Original_ClientNr)) "& _ 
                "AND ((@IsNull_Actual_Appreciation = 1 AND [Actual_Appreciation] IS NULL) OR ([Ac"& _ 
                "tual_Appreciation] = @Original_Actual_Appreciation)) AND ((@IsNull_PrincipalOrig"& _ 
                "Amt = 1 AND [PrincipalOrigAmt] IS NULL) OR ([PrincipalOrigAmt] = @Original_Princ"& _ 
                "ipalOrigAmt)) AND ((@IsNull_ExchangeRateAgainstEUR_Purchase = 1 AND [ExchangeRat"& _ 
                "eAgainstEUR_Purchase] IS NULL) OR ([ExchangeRateAgainstEUR_Purchase] = @Original"& _ 
                "_ExchangeRateAgainstEUR_Purchase)) AND ((@IsNull_Amt_Paid_EUR = 1 AND [Amt_Paid_"& _ 
                "EUR] IS NULL) OR ([Amt_Paid_EUR] = @Original_Amt_Paid_EUR)) AND ((@IsNull_Exchan"& _ 
                "geRateAgainstEUR_Current = 1 AND [ExchangeRateAgainstEUR_Current] IS NULL) OR (["& _ 
                "ExchangeRateAgainstEUR_Current] = @Original_ExchangeRateAgainstEUR_Current)) AND"& _ 
                " ((@IsNull_ValueAsOfDate_OrigCcy = 1 AND [ValueAsOfDate_OrigCcy] IS NULL) OR ([V"& _ 
                "alueAsOfDate_OrigCcy] = @Original_ValueAsOfDate_OrigCcy)) AND ((@IsNull_StilleRe"& _ 
                "serve = 1 AND [StilleReserve] IS NULL) OR ([StilleReserve] = @Original_StilleRes"& _ 
                "erve)) AND ((@IsNull_StilleLast = 1 AND [StilleLast] IS NULL) OR ([StilleLast] ="& _ 
                " @Original_StilleLast)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Apreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StilleReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StilleLast", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidityCreationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidityCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityCreationDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecurityName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalEuroAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNrOCBS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNrOCBS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNrOCBS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TradeDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TradeDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TradeDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaturityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Sektor", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sektor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sektor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SektorCountry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SektorCountry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SektorCountry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssetType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Booked_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Booked_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Booked_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Before", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Before", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Before", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Rate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Rate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Coupon_Period_Start_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period Start Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Current_Interest_Coupon_Period_End_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Current Interest Coupon Period End Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Accrued_Interest_Coupon_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon Org Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Accrued_Interest_Coupon_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accrued Interest Coupon EUR Equ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Interest_Coupon_amount_Org_Ccy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon amount Org Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Interest_Coupon_Amount_EUR_Equ", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Coupon Amount EUR Equ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RIC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RIC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RIC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Swap_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Swap_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Swap_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_industry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_industry", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "industry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fixed_rate_coupon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fixed_rate_coupon", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fixed rate coupon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Floating(leg) spread ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_purchasing_yield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_purchasing_yield", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "purchasing yield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bond_type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bond_type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bond type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_with_swap_or_not", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_with_swap_or_not", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "with swap or not", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Moody-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "S & P", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fitch-Rating", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Apreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Apreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Depreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Depreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Actual_Appreciation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Actual_Appreciation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Actual_Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalOrigAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalOrigAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalOrigAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRateAgainstEUR_Purchase", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Purchase", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid_EUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid_EUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid_EUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExchangeRateAgainstEUR_Current", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRateAgainstEUR_Current", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate_OrigCcy", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate_OrigCcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StilleReserve", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StilleReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleReserve", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StilleLast", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StilleLast", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StilleLast", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, LiquidityCreationDate, LiquidityDate, ISIN_Code, SecurityName, "& _ 
                "Ccy, PrincipalEuroAmt, ContractNrOCBS, TradeDate, StartDate, MaturityDate, Sekto"& _ 
                "r, SektorCountry, AssetType, Booked_Depreciation, Actual_Depreciation, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                  OCBS_Booked_Before, OCBS_Booked_Later, [Current Interest Rate]"& _ 
                ", [Current Interest Coupon Period Start Date], [Current Interest Coupon Period E"& _ 
                "nd Date], [Accrued Interest Coupon Org Ccy], [Accrued Interest Coupon EUR Equ], "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Interest Coupon amount Org Ccy], [Interest Coupon Am"& _ 
                "ount EUR Equ], RIC, Market_Price, Swap_Price, Purchase_price, industry, [Fixed r"& _ 
                "ate coupon], [Floating(leg) spread ], [purchasing yield], [bond type], [with swa"& _ 
                "p or not], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Moody-Rating], [S & P], [Fitch-Rating], S"& _ 
                "tartofYear_price, Amt_Paid, ValueAsOfDate, Apreciation, Depreciation, ClientNr, "& _ 
                "Actual_Appreciation, PrincipalOrigAmt, ExchangeRateAgainstEUR_Purchase, Amt_Paid"& _ 
                "_EUR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ExchangeRateAgainstEUR_Current, ValueAsOfDate_O"& _ 
                "rigCcy, StilleReserve, StilleLast"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SECURITIES_LIQUIDITYRESERVE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "ORDER BY LiquidityDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_LIQUIDITYRESERVEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_LIQUIDITYRESERVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_LIQUIDITYRESERVEDataTable = New SECURITIESDataset.SECURITIES_LIQUIDITYRESERVEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_LIQUIDITYRESERVEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_LIQUIDITYRESERVE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LiquidityCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_LiquidityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_SecurityName As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ContractNrOCBS As Global.System.Nullable(Of Double),  _
                    ByVal Original_TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Sektor As Global.System.Nullable(Of Double),  _
                    ByVal Original_SektorCountry As String,  _
                    ByVal Original_AssetType As String,  _
                    ByVal Original_Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Original_Current_Interest_Rate As Global.System.Nullable(Of Double),  _
                    ByVal Original_Current_Interest_Coupon_Period_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Accrued_Interest_Coupon_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Original_Accrued_Interest_Coupon_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Original_Interest_Coupon_amount_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Original_Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Original_RIC As String,  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_industry As String,  _
                    ByVal Original_Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_purchasing_yield As String,  _
                    ByVal Original_bond_type As String,  _
                    ByVal Original_with_swap_or_not As String,  _
                    ByVal p5 As String,  _
                    ByVal p8 As String,  _
                    ByVal p11 As String,  _
                    ByVal Original_StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_Apreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_ClientNr As String,  _
                    ByVal Original_Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_PrincipalOrigAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRateAgainstEUR_Purchase As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid_EUR As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRateAgainstEUR_Current As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate_OrigCcy As Global.System.Nullable(Of Double),  _
                    ByVal Original_StilleReserve As Global.System.Nullable(Of Double),  _
                    ByVal Original_StilleLast As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_LiquidityCreationDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LiquidityCreationDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_LiquidityDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LiquidityDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_SecurityName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SecurityName,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Ccy,String)
            End If
            If (Original_PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNrOCBS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TradeDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TradeDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_MaturityDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MaturityDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Sektor.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Sektor.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_SektorCountry Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SektorCountry,String)
            End If
            If (Original_AssetType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_AssetType,String)
            End If
            If (Original_Booked_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Rate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Current_Interest_Rate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Coupon_Period_Start_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Current_Interest_Coupon_Period_Start_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Accrued_Interest_Coupon_Org_Ccy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Accrued_Interest_Coupon_Org_Ccy.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_Accrued_Interest_Coupon_EUR_Equ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_Accrued_Interest_Coupon_EUR_Equ.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Interest_Coupon_amount_Org_Ccy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_Interest_Coupon_amount_Org_Ccy.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_RIC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_RIC,String)
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_Swap_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_Swap_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_industry Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_industry,String)
            End If
            If (Original_Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_purchasing_yield Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_purchasing_yield,String)
            End If
            If (Original_bond_type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_bond_type,String)
            End If
            If (Original_with_swap_or_not Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_with_swap_or_not,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(p5,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(p8,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(p11,String)
            End If
            If (Original_StartofYear_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_StartofYear_price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_Amt_Paid.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_Apreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_Apreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_Depreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_Depreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_ClientNr,String)
            End If
            If (Original_Actual_Appreciation.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_PrincipalOrigAmt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_PrincipalOrigAmt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRateAgainstEUR_Purchase.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_ExchangeRateAgainstEUR_Purchase.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid_EUR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_Amt_Paid_EUR.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRateAgainstEUR_Current.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_ExchangeRateAgainstEUR_Current.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate_OrigCcy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_ValueAsOfDate_OrigCcy.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_StilleReserve.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_StilleReserve.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_StilleLast.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_StilleLast.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LiquidityCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal LiquidityDate As Global.System.Nullable(Of Date),  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal ContractNrOCBS As Global.System.Nullable(Of Double),  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Sektor As Global.System.Nullable(Of Double),  _
                    ByVal SektorCountry As String,  _
                    ByVal AssetType As String,  _
                    ByVal Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Current_Interest_Rate As Global.System.Nullable(Of Double),  _
                    ByVal Current_Interest_Coupon_Period_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Accrued_Interest_Coupon_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Accrued_Interest_Coupon_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Coupon_amount_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Apreciation As Global.System.Nullable(Of Double),  _
                    ByVal Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal ClientNr As String,  _
                    ByVal Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal PrincipalOrigAmt As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRateAgainstEUR_Purchase As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid_EUR As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRateAgainstEUR_Current As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate_OrigCcy As Global.System.Nullable(Of Double),  _
                    ByVal StilleReserve As Global.System.Nullable(Of Double),  _
                    ByVal StilleLast As Global.System.Nullable(Of Double)) As Integer
            If (LiquidityCreationDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LiquidityCreationDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (LiquidityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LiquidityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ISIN_Code,String)
            End If
            If (SecurityName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SecurityName,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ccy,String)
            End If
            If (PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ContractNrOCBS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Sektor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Sektor.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SektorCountry Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SektorCountry,String)
            End If
            If (AssetType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AssetType,String)
            End If
            If (Booked_Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Actual_Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Rate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Current_Interest_Rate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_Start_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Current_Interest_Coupon_Period_Start_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Accrued_Interest_Coupon_Org_Ccy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Accrued_Interest_Coupon_Org_Ccy.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Accrued_Interest_Coupon_EUR_Equ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Accrued_Interest_Coupon_EUR_Equ.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_amount_Org_Ccy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Interest_Coupon_amount_Org_Ccy.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (RIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(RIC,String)
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(p10,String)
            End If
            If (StartofYear_price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(StartofYear_price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Amt_Paid.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Apreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(Apreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Depreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Depreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(ClientNr,String)
            End If
            If (Actual_Appreciation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PrincipalOrigAmt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PrincipalOrigAmt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRateAgainstEUR_Purchase.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(ExchangeRateAgainstEUR_Purchase.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid_EUR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Amt_Paid_EUR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRateAgainstEUR_Current.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(ExchangeRateAgainstEUR_Current.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate_OrigCcy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(ValueAsOfDate_OrigCcy.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (StilleReserve.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(StilleReserve.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (StilleLast.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(StilleLast.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LiquidityCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal LiquidityDate As Global.System.Nullable(Of Date),  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal ContractNrOCBS As Global.System.Nullable(Of Double),  _
                    ByVal TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Sektor As Global.System.Nullable(Of Double),  _
                    ByVal SektorCountry As String,  _
                    ByVal AssetType As String,  _
                    ByVal Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Current_Interest_Rate As Global.System.Nullable(Of Double),  _
                    ByVal Current_Interest_Coupon_Period_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Accrued_Interest_Coupon_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Accrued_Interest_Coupon_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Coupon_amount_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal RIC As String,  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal industry As String,  _
                    ByVal Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal purchasing_yield As String,  _
                    ByVal bond_type As String,  _
                    ByVal with_swap_or_not As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal p10 As String,  _
                    ByVal StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Apreciation As Global.System.Nullable(Of Double),  _
                    ByVal Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal ClientNr As String,  _
                    ByVal Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal PrincipalOrigAmt As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRateAgainstEUR_Purchase As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid_EUR As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRateAgainstEUR_Current As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate_OrigCcy As Global.System.Nullable(Of Double),  _
                    ByVal StilleReserve As Global.System.Nullable(Of Double),  _
                    ByVal StilleLast As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LiquidityCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_LiquidityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_SecurityName As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ContractNrOCBS As Global.System.Nullable(Of Double),  _
                    ByVal Original_TradeDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Sektor As Global.System.Nullable(Of Double),  _
                    ByVal Original_SektorCountry As String,  _
                    ByVal Original_AssetType As String,  _
                    ByVal Original_Booked_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Actual_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Before As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Original_Current_Interest_Rate As Global.System.Nullable(Of Double),  _
                    ByVal Original_Current_Interest_Coupon_Period_Start_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Current_Interest_Coupon_Period_End_Date As Global.System.Nullable(Of Date),  _
                    ByVal Original_Accrued_Interest_Coupon_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Original_Accrued_Interest_Coupon_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Original_Interest_Coupon_amount_Org_Ccy As Global.System.Nullable(Of Double),  _
                    ByVal Original_Interest_Coupon_Amount_EUR_Equ As Global.System.Nullable(Of Double),  _
                    ByVal Original_RIC As String,  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Swap_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_industry As String,  _
                    ByVal Original_Fixed_rate_coupon As Global.System.Nullable(Of Double),  _
                    ByVal p2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_purchasing_yield As String,  _
                    ByVal Original_bond_type As String,  _
                    ByVal Original_with_swap_or_not As String,  _
                    ByVal p5 As String,  _
                    ByVal p8 As String,  _
                    ByVal p11 As String,  _
                    ByVal Original_StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_Apreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_Depreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_ClientNr As String,  _
                    ByVal Original_Actual_Appreciation As Global.System.Nullable(Of Double),  _
                    ByVal Original_PrincipalOrigAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRateAgainstEUR_Purchase As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid_EUR As Global.System.Nullable(Of Double),  _
                    ByVal Original_ExchangeRateAgainstEUR_Current As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate_OrigCcy As Global.System.Nullable(Of Double),  _
                    ByVal Original_StilleReserve As Global.System.Nullable(Of Double),  _
                    ByVal Original_StilleLast As Global.System.Nullable(Of Double)) As Integer
            If (LiquidityCreationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LiquidityCreationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (LiquidityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LiquidityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ISIN_Code,String)
            End If
            If (SecurityName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SecurityName,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ccy,String)
            End If
            If (PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ContractNrOCBS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TradeDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TradeDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Sektor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Sektor.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SektorCountry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SektorCountry,String)
            End If
            If (AssetType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AssetType,String)
            End If
            If (Booked_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Actual_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Rate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Current_Interest_Rate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_Start_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Current_Interest_Coupon_Period_Start_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Accrued_Interest_Coupon_Org_Ccy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Accrued_Interest_Coupon_Org_Ccy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Accrued_Interest_Coupon_EUR_Equ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Accrued_Interest_Coupon_EUR_Equ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_amount_Org_Ccy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Interest_Coupon_amount_Org_Ccy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (RIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(RIC,String)
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Swap_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Swap_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (industry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(industry,String)
            End If
            If (Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (purchasing_yield Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(purchasing_yield,String)
            End If
            If (bond_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(bond_type,String)
            End If
            If (with_swap_or_not Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(with_swap_or_not,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p7,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(p10,String)
            End If
            If (StartofYear_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(StartofYear_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Amt_Paid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Apreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Apreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(ClientNr,String)
            End If
            If (Actual_Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PrincipalOrigAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(PrincipalOrigAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRateAgainstEUR_Purchase.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(ExchangeRateAgainstEUR_Purchase.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid_EUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Amt_Paid_EUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRateAgainstEUR_Current.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(ExchangeRateAgainstEUR_Current.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate_OrigCcy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(ValueAsOfDate_OrigCcy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (StilleReserve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(StilleReserve.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (StilleLast.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(StilleLast.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_ID,Integer)
            If (Original_LiquidityCreationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_LiquidityCreationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_LiquidityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_LiquidityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_SecurityName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SecurityName,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Ccy,String)
            End If
            If (Original_PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNrOCBS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ContractNrOCBS.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_TradeDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_TradeDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_Sektor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_Sektor.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_SektorCountry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_SektorCountry,String)
            End If
            If (Original_AssetType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_AssetType,String)
            End If
            If (Original_Booked_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Booked_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_Actual_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_Actual_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Before.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_OCBS_Booked_Before.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Rate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_Current_Interest_Rate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Coupon_Period_Start_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_Current_Interest_Coupon_Period_Start_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_Current_Interest_Coupon_Period_End_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_Current_Interest_Coupon_Period_End_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_Accrued_Interest_Coupon_Org_Ccy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_Accrued_Interest_Coupon_Org_Ccy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_Accrued_Interest_Coupon_EUR_Equ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_Accrued_Interest_Coupon_EUR_Equ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_Interest_Coupon_amount_Org_Ccy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_Interest_Coupon_amount_Org_Ccy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_Interest_Coupon_Amount_EUR_Equ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_Interest_Coupon_Amount_EUR_Equ.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_RIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_RIC,String)
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_Swap_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_Swap_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_industry Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_industry,String)
            End If
            If (Original_Fixed_rate_coupon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_Fixed_rate_coupon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_purchasing_yield Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_purchasing_yield,String)
            End If
            If (Original_bond_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_bond_type,String)
            End If
            If (Original_with_swap_or_not Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_with_swap_or_not,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(p5,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(p8,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(p11,String)
            End If
            If (Original_StartofYear_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_StartofYear_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_Amt_Paid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            End If
            If (Original_Apreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_Apreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            If (Original_Depreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_Depreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (Original_ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_ClientNr,String)
            End If
            If (Original_Actual_Appreciation.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_Actual_Appreciation.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            End If
            If (Original_PrincipalOrigAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_PrincipalOrigAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRateAgainstEUR_Purchase.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_ExchangeRateAgainstEUR_Purchase.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid_EUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_Amt_Paid_EUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            End If
            If (Original_ExchangeRateAgainstEUR_Current.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_ExchangeRateAgainstEUR_Current.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate_OrigCcy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_ValueAsOfDate_OrigCcy.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            End If
            If (Original_StilleReserve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_StilleReserve.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            End If
            If (Original_StilleLast.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_StilleLast.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_BOOKINGSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_BOOKINGS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("BookingDate", "BookingDate")
            tableMapping.ColumnMappings.Add("ValueDate", "ValueDate")
            tableMapping.ColumnMappings.Add("Reference", "Reference")
            tableMapping.ColumnMappings.Add("Ccy", "Ccy")
            tableMapping.ColumnMappings.Add("Debit-Appreciation", "Debit-Appreciation")
            tableMapping.ColumnMappings.Add("Credit-Depreciation", "Credit-Depreciation")
            tableMapping.ColumnMappings.Add("BookingText", "BookingText")
            tableMapping.ColumnMappings.Add("ContractNr", "ContractNr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_BOOKINGS] WHERE (([ID] = @Original_ID) AND ((@IsNull_Book"& _ 
                "ingDate = 1 AND [BookingDate] IS NULL) OR ([BookingDate] = @Original_BookingDate"& _ 
                ")) AND ((@IsNull_ValueDate = 1 AND [ValueDate] IS NULL) OR ([ValueDate] = @Origi"& _ 
                "nal_ValueDate)) AND ((@IsNull_Reference = 1 AND [Reference] IS NULL) OR ([Refere"& _ 
                "nce] = @Original_Reference)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) OR ([Ccy] "& _ 
                "= @Original_Ccy)) AND ((@p3 = 1 AND [Debit-Appreciation] IS NULL) OR ([Debit-App"& _ 
                "reciation] = @p2)) AND ((@p6 = 1 AND [Credit-Depreciation] IS NULL) OR ([Credit-"& _ 
                "Depreciation] = @p5)) AND ((@IsNull_ContractNr = 1 AND [ContractNr] IS NULL) OR "& _ 
                "([ContractNr] = @Original_ContractNr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BookingDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BookingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Reference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_BOOKINGS] ([BookingDate], [ValueDate], [Reference], [Ccy]"& _ 
                ", [Debit-Appreciation], [Credit-Depreciation], [BookingText], [ContractNr]) VALU"& _ 
                "ES (@BookingDate, @ValueDate, @Reference, @Ccy, @p1, @p4, @BookingText, @Contrac"& _ 
                "tNr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BookingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BookingText", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingText", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_BOOKINGS] SET [BookingDate] = @BookingDate, [ValueDate] = @Val"& _ 
                "ueDate, [Reference] = @Reference, [Ccy] = @Ccy, [Debit-Appreciation] = @p1, [Cre"& _ 
                "dit-Depreciation] = @p4, [BookingText] = @BookingText, [ContractNr] = @ContractN"& _ 
                "r WHERE (([ID] = @Original_ID) AND ((@IsNull_BookingDate = 1 AND [BookingDate] I"& _ 
                "S NULL) OR ([BookingDate] = @Original_BookingDate)) AND ((@IsNull_ValueDate = 1 "& _ 
                "AND [ValueDate] IS NULL) OR ([ValueDate] = @Original_ValueDate)) AND ((@IsNull_R"& _ 
                "eference = 1 AND [Reference] IS NULL) OR ([Reference] = @Original_Reference)) AN"& _ 
                "D ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) OR ([Ccy] = @Original_Ccy)) AND ((@p3 = 1"& _ 
                " AND [Debit-Appreciation] IS NULL) OR ([Debit-Appreciation] = @p2)) AND ((@p6 = "& _ 
                "1 AND [Credit-Depreciation] IS NULL) OR ([Credit-Depreciation] = @p5)) AND ((@Is"& _ 
                "Null_ContractNr = 1 AND [ContractNr] IS NULL) OR ([ContractNr] = @Original_Contr"& _ 
                "actNr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BookingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BookingText", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingText", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BookingDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BookingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BookingDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Reference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Debit-Appreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Credit-Depreciation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContractNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContractNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, BookingDate, ValueDate, Reference, Ccy, [Debit-Appreciation], ["& _ 
                "Credit-Depreciation], BookingText, ContractNr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SECURITIES_BOOKIN"& _ 
                "GS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY BookingDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_BOOKINGSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_BOOKINGSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_BOOKINGSDataTable = New SECURITIESDataset.SECURITIES_BOOKINGSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_BOOKINGSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_BOOKINGS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_BookingDate As Global.System.Nullable(Of Date), ByVal Original_ValueDate As Global.System.Nullable(Of Date), ByVal Original_Reference As String, ByVal Original_Ccy As String, ByVal p2 As Global.System.Nullable(Of Double), ByVal p5 As Global.System.Nullable(Of Double), ByVal Original_ContractNr As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_BookingDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_BookingDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ValueDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Reference Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Reference,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Ccy,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal BookingDate As Global.System.Nullable(Of Date), ByVal ValueDate As Global.System.Nullable(Of Date), ByVal Reference As String, ByVal Ccy As String, ByVal p1 As Global.System.Nullable(Of Double), ByVal p4 As Global.System.Nullable(Of Double), ByVal BookingText As String, ByVal ContractNr As String) As Integer
            If (BookingDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(BookingDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Reference Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reference,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Ccy,String)
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BookingText Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BookingText,String)
            End If
            If (ContractNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal BookingDate As Global.System.Nullable(Of Date),  _
                    ByVal ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal Reference As String,  _
                    ByVal Ccy As String,  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal p4 As Global.System.Nullable(Of Double),  _
                    ByVal BookingText As String,  _
                    ByVal ContractNr As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_BookingDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ValueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Reference As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal p2 As Global.System.Nullable(Of Double),  _
                    ByVal p5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ContractNr As String) As Integer
            If (BookingDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BookingDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ValueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ValueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Reference Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Reference,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Ccy,String)
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BookingText Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BookingText,String)
            End If
            If (ContractNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ContractNr,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID,Integer)
            If (Original_BookingDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_BookingDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ValueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Reference Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Reference,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Ccy,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ContractNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ContractNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SECURITIES_BESTANDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SECURITIES_BESTAND"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("BestandCreationDate", "BestandCreationDate")
            tableMapping.ColumnMappings.Add("BestandDate", "BestandDate")
            tableMapping.ColumnMappings.Add("ISIN_Code", "ISIN_Code")
            tableMapping.ColumnMappings.Add("SecurityName", "SecurityName")
            tableMapping.ColumnMappings.Add("Ccy", "Ccy")
            tableMapping.ColumnMappings.Add("PrincipalEuroAmt", "PrincipalEuroAmt")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("Purchase_price", "Purchase_price")
            tableMapping.ColumnMappings.Add("StartofYear_price", "StartofYear_price")
            tableMapping.ColumnMappings.Add("Market_Price", "Market_Price")
            tableMapping.ColumnMappings.Add("Amt_Paid", "Amt_Paid")
            tableMapping.ColumnMappings.Add("StartofYear_Amt", "StartofYear_Amt")
            tableMapping.ColumnMappings.Add("ValueAsOfDate", "ValueAsOfDate")
            tableMapping.ColumnMappings.Add("OCBS_Booked_Later", "OCBS_Booked_Later")
            tableMapping.ColumnMappings.Add("Buchwert", "Buchwert")
            tableMapping.ColumnMappings.Add("BuchwertAbgrenzungen", "BuchwertAbgrenzungen")
            tableMapping.ColumnMappings.Add("AenderungLfdJahr", "AenderungLfdJahr")
            tableMapping.ColumnMappings.Add("KursReserve", "KursReserve")
            tableMapping.ColumnMappings.Add("AssetType", "AssetType")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SECURITIES_BESTAND] WHERE (([ID] = @Original_ID) AND ((@IsNull_Besta"& _ 
                "ndCreationDate = 1 AND [BestandCreationDate] IS NULL) OR ([BestandCreationDate] "& _ 
                "= @Original_BestandCreationDate)) AND ((@IsNull_BestandDate = 1 AND [BestandDate"& _ 
                "] IS NULL) OR ([BestandDate] = @Original_BestandDate)) AND ((@IsNull_ISIN_Code ="& _ 
                " 1 AND [ISIN_Code] IS NULL) OR ([ISIN_Code] = @Original_ISIN_Code)) AND ((@IsNul"& _ 
                "l_SecurityName = 1 AND [SecurityName] IS NULL) OR ([SecurityName] = @Original_Se"& _ 
                "curityName)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) OR ([Ccy] = @Original_Ccy)"& _ 
                ") AND ((@IsNull_PrincipalEuroAmt = 1 AND [PrincipalEuroAmt] IS NULL) OR ([Princi"& _ 
                "palEuroAmt] = @Original_PrincipalEuroAmt)) AND ((@IsNull_MaturityDate = 1 AND [M"& _ 
                "aturityDate] IS NULL) OR ([MaturityDate] = @Original_MaturityDate)) AND ((@IsNul"& _ 
                "l_Purchase_price = 1 AND [Purchase_price] IS NULL) OR ([Purchase_price] = @Origi"& _ 
                "nal_Purchase_price)) AND ((@IsNull_StartofYear_price = 1 AND [StartofYear_price]"& _ 
                " IS NULL) OR ([StartofYear_price] = @Original_StartofYear_price)) AND ((@IsNull_"& _ 
                "Market_Price = 1 AND [Market_Price] IS NULL) OR ([Market_Price] = @Original_Mark"& _ 
                "et_Price)) AND ((@IsNull_Amt_Paid = 1 AND [Amt_Paid] IS NULL) OR ([Amt_Paid] = @"& _ 
                "Original_Amt_Paid)) AND ((@IsNull_StartofYear_Amt = 1 AND [StartofYear_Amt] IS N"& _ 
                "ULL) OR ([StartofYear_Amt] = @Original_StartofYear_Amt)) AND ((@IsNull_ValueAsOf"& _ 
                "Date = 1 AND [ValueAsOfDate] IS NULL) OR ([ValueAsOfDate] = @Original_ValueAsOfD"& _ 
                "ate)) AND ((@IsNull_OCBS_Booked_Later = 1 AND [OCBS_Booked_Later] IS NULL) OR (["& _ 
                "OCBS_Booked_Later] = @Original_OCBS_Booked_Later)) AND ((@IsNull_Buchwert = 1 AN"& _ 
                "D [Buchwert] IS NULL) OR ([Buchwert] = @Original_Buchwert)) AND ((@IsNull_Buchwe"& _ 
                "rtAbgrenzungen = 1 AND [BuchwertAbgrenzungen] IS NULL) OR ([BuchwertAbgrenzungen"& _ 
                "] = @Original_BuchwertAbgrenzungen)) AND ((@IsNull_AenderungLfdJahr = 1 AND [Aen"& _ 
                "derungLfdJahr] IS NULL) OR ([AenderungLfdJahr] = @Original_AenderungLfdJahr)) AN"& _ 
                "D ((@IsNull_KursReserve = 1 AND [KursReserve] IS NULL) OR ([KursReserve] = @Orig"& _ 
                "inal_KursReserve)) AND ((@IsNull_AssetType = 1 AND [AssetType] IS NULL) OR ([Ass"& _ 
                "etType] = @Original_AssetType)) AND ((@IsNull_ClientNr = 1 AND [ClientNr] IS NUL"& _ 
                "L) OR ([ClientNr] = @Original_ClientNr)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BestandCreationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BestandCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BestandDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BestandDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecurityName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalEuroAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaturityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_Amt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Buchwert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Buchwert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AenderungLfdJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AenderungLfdJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KursReserve", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KursReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssetType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SECURITIES_BESTAND] ([BestandCreationDate], [BestandDate], [ISIN_Cod"& _ 
                "e], [SecurityName], [Ccy], [PrincipalEuroAmt], [MaturityDate], [Purchase_price],"& _ 
                " [StartofYear_price], [Market_Price], [Amt_Paid], [StartofYear_Amt], [ValueAsOfD"& _ 
                "ate], [OCBS_Booked_Later], [Buchwert], [BuchwertAbgrenzungen], [AenderungLfdJahr"& _ 
                "], [KursReserve], [AssetType], [ClientNr]) VALUES (@BestandCreationDate, @Bestan"& _ 
                "dDate, @ISIN_Code, @SecurityName, @Ccy, @PrincipalEuroAmt, @MaturityDate, @Purch"& _ 
                "ase_price, @StartofYear_price, @Market_Price, @Amt_Paid, @StartofYear_Amt, @Valu"& _ 
                "eAsOfDate, @OCBS_Booked_Later, @Buchwert, @BuchwertAbgrenzungen, @AenderungLfdJa"& _ 
                "hr, @KursReserve, @AssetType, @ClientNr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BestandCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BestandDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Buchwert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AenderungLfdJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KursReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SECURITIES_BESTAND] SET [BestandCreationDate] = @BestandCreationDate, [Be"& _ 
                "standDate] = @BestandDate, [ISIN_Code] = @ISIN_Code, [SecurityName] = @SecurityN"& _ 
                "ame, [Ccy] = @Ccy, [PrincipalEuroAmt] = @PrincipalEuroAmt, [MaturityDate] = @Mat"& _ 
                "urityDate, [Purchase_price] = @Purchase_price, [StartofYear_price] = @StartofYea"& _ 
                "r_price, [Market_Price] = @Market_Price, [Amt_Paid] = @Amt_Paid, [StartofYear_Am"& _ 
                "t] = @StartofYear_Amt, [ValueAsOfDate] = @ValueAsOfDate, [OCBS_Booked_Later] = @"& _ 
                "OCBS_Booked_Later, [Buchwert] = @Buchwert, [BuchwertAbgrenzungen] = @BuchwertAbg"& _ 
                "renzungen, [AenderungLfdJahr] = @AenderungLfdJahr, [KursReserve] = @KursReserve,"& _ 
                " [AssetType] = @AssetType, [ClientNr] = @ClientNr WHERE (([ID] = @Original_ID) A"& _ 
                "ND ((@IsNull_BestandCreationDate = 1 AND [BestandCreationDate] IS NULL) OR ([Bes"& _ 
                "tandCreationDate] = @Original_BestandCreationDate)) AND ((@IsNull_BestandDate = "& _ 
                "1 AND [BestandDate] IS NULL) OR ([BestandDate] = @Original_BestandDate)) AND ((@"& _ 
                "IsNull_ISIN_Code = 1 AND [ISIN_Code] IS NULL) OR ([ISIN_Code] = @Original_ISIN_C"& _ 
                "ode)) AND ((@IsNull_SecurityName = 1 AND [SecurityName] IS NULL) OR ([SecurityNa"& _ 
                "me] = @Original_SecurityName)) AND ((@IsNull_Ccy = 1 AND [Ccy] IS NULL) OR ([Ccy"& _ 
                "] = @Original_Ccy)) AND ((@IsNull_PrincipalEuroAmt = 1 AND [PrincipalEuroAmt] IS"& _ 
                " NULL) OR ([PrincipalEuroAmt] = @Original_PrincipalEuroAmt)) AND ((@IsNull_Matur"& _ 
                "ityDate = 1 AND [MaturityDate] IS NULL) OR ([MaturityDate] = @Original_MaturityD"& _ 
                "ate)) AND ((@IsNull_Purchase_price = 1 AND [Purchase_price] IS NULL) OR ([Purcha"& _ 
                "se_price] = @Original_Purchase_price)) AND ((@IsNull_StartofYear_price = 1 AND ["& _ 
                "StartofYear_price] IS NULL) OR ([StartofYear_price] = @Original_StartofYear_pric"& _ 
                "e)) AND ((@IsNull_Market_Price = 1 AND [Market_Price] IS NULL) OR ([Market_Price"& _ 
                "] = @Original_Market_Price)) AND ((@IsNull_Amt_Paid = 1 AND [Amt_Paid] IS NULL) "& _ 
                "OR ([Amt_Paid] = @Original_Amt_Paid)) AND ((@IsNull_StartofYear_Amt = 1 AND [Sta"& _ 
                "rtofYear_Amt] IS NULL) OR ([StartofYear_Amt] = @Original_StartofYear_Amt)) AND ("& _ 
                "(@IsNull_ValueAsOfDate = 1 AND [ValueAsOfDate] IS NULL) OR ([ValueAsOfDate] = @O"& _ 
                "riginal_ValueAsOfDate)) AND ((@IsNull_OCBS_Booked_Later = 1 AND [OCBS_Booked_Lat"& _ 
                "er] IS NULL) OR ([OCBS_Booked_Later] = @Original_OCBS_Booked_Later)) AND ((@IsNu"& _ 
                "ll_Buchwert = 1 AND [Buchwert] IS NULL) OR ([Buchwert] = @Original_Buchwert)) AN"& _ 
                "D ((@IsNull_BuchwertAbgrenzungen = 1 AND [BuchwertAbgrenzungen] IS NULL) OR ([Bu"& _ 
                "chwertAbgrenzungen] = @Original_BuchwertAbgrenzungen)) AND ((@IsNull_AenderungLf"& _ 
                "dJahr = 1 AND [AenderungLfdJahr] IS NULL) OR ([AenderungLfdJahr] = @Original_Aen"& _ 
                "derungLfdJahr)) AND ((@IsNull_KursReserve = 1 AND [KursReserve] IS NULL) OR ([Ku"& _ 
                "rsReserve] = @Original_KursReserve)) AND ((@IsNull_AssetType = 1 AND [AssetType]"& _ 
                " IS NULL) OR ([AssetType] = @Original_AssetType)) AND ((@IsNull_ClientNr = 1 AND"& _ 
                " [ClientNr] IS NULL) OR ([ClientNr] = @Original_ClientNr)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BestandCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BestandDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartofYear_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Buchwert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AenderungLfdJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KursReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BestandCreationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BestandCreationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandCreationDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BestandDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BestandDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BestandDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISIN_Code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISIN_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecurityName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ccy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ccy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ccy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PrincipalEuroAmt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrincipalEuroAmt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrincipalEuroAmt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaturityDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Purchase_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Purchase_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purchase_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Market_Price", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Market_Price", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Market_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Amt_Paid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amt_Paid", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amt_Paid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartofYear_Amt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartofYear_Amt", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartofYear_Amt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ValueAsOfDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ValueAsOfDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValueAsOfDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OCBS_Booked_Later", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCBS_Booked_Later", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCBS_Booked_Later", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Buchwert", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Buchwert", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Buchwert", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BuchwertAbgrenzungen", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuchwertAbgrenzungen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AenderungLfdJahr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AenderungLfdJahr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AenderungLfdJahr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KursReserve", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KursReserve", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KursReserve", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssetType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssetType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClientNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, BestandCreationDate, BestandDate, ISIN_Code, SecurityName, Ccy,"& _ 
                " PrincipalEuroAmt, MaturityDate, Purchase_price, StartofYear_price, Market_Price"& _ 
                ", Amt_Paid, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         StartofYear_Amt, ValueAsOfDate, OCBS_Book"& _ 
                "ed_Later, Buchwert, BuchwertAbgrenzungen, AenderungLfdJahr, KursReserve, AssetTy"& _ 
                "pe, ClientNr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SECURITIES_BESTAND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY BestandDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SECURITIESDataset.SECURITIES_BESTANDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SECURITIESDataset.SECURITIES_BESTANDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SECURITIESDataset.SECURITIES_BESTANDDataTable = New SECURITIESDataset.SECURITIES_BESTANDDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SECURITIESDataset.SECURITIES_BESTANDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SECURITIESDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SECURITIES_BESTAND")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_BestandCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_BestandDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_SecurityName As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal Original_StartofYear_Amt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Original_Buchwert As Global.System.Nullable(Of Double),  _
                    ByVal Original_BuchwertAbgrenzungen As Global.System.Nullable(Of Double),  _
                    ByVal Original_AenderungLfdJahr As Global.System.Nullable(Of Double),  _
                    ByVal Original_KursReserve As Global.System.Nullable(Of Double),  _
                    ByVal Original_AssetType As String,  _
                    ByVal Original_ClientNr As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_BestandCreationDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_BestandCreationDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_BestandDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BestandDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_SecurityName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SecurityName,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Ccy,String)
            End If
            If (Original_PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_MaturityDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MaturityDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_StartofYear_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_StartofYear_price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Amt_Paid.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_StartofYear_Amt.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_StartofYear_Amt.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Buchwert.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Buchwert.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_BuchwertAbgrenzungen.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_BuchwertAbgrenzungen.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_AenderungLfdJahr.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_AenderungLfdJahr.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_KursReserve.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_KursReserve.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_AssetType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_AssetType,String)
            End If
            If (Original_ClientNr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_ClientNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal BestandCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal BestandDate As Global.System.Nullable(Of Date),  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal StartofYear_Amt As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Buchwert As Global.System.Nullable(Of Double),  _
                    ByVal BuchwertAbgrenzungen As Global.System.Nullable(Of Double),  _
                    ByVal AenderungLfdJahr As Global.System.Nullable(Of Double),  _
                    ByVal KursReserve As Global.System.Nullable(Of Double),  _
                    ByVal AssetType As String,  _
                    ByVal ClientNr As String) As Integer
            If (BestandCreationDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(BestandCreationDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (BestandDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BestandDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ISIN_Code,String)
            End If
            If (SecurityName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SecurityName,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ccy,String)
            End If
            If (PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartofYear_price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(StartofYear_price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Amt_Paid.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (StartofYear_Amt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(StartofYear_Amt.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Buchwert.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Buchwert.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BuchwertAbgrenzungen.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BuchwertAbgrenzungen.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (AenderungLfdJahr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(AenderungLfdJahr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (KursReserve.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(KursReserve.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (AssetType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AssetType,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ClientNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal BestandCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal BestandDate As Global.System.Nullable(Of Date),  _
                    ByVal ISIN_Code As String,  _
                    ByVal SecurityName As String,  _
                    ByVal Ccy As String,  _
                    ByVal PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal StartofYear_Amt As Global.System.Nullable(Of Double),  _
                    ByVal ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Buchwert As Global.System.Nullable(Of Double),  _
                    ByVal BuchwertAbgrenzungen As Global.System.Nullable(Of Double),  _
                    ByVal AenderungLfdJahr As Global.System.Nullable(Of Double),  _
                    ByVal KursReserve As Global.System.Nullable(Of Double),  _
                    ByVal AssetType As String,  _
                    ByVal ClientNr As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_BestandCreationDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_BestandDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ISIN_Code As String,  _
                    ByVal Original_SecurityName As String,  _
                    ByVal Original_Ccy As String,  _
                    ByVal Original_PrincipalEuroAmt As Global.System.Nullable(Of Double),  _
                    ByVal Original_MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Purchase_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_StartofYear_price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Market_Price As Global.System.Nullable(Of Double),  _
                    ByVal Original_Amt_Paid As Global.System.Nullable(Of Double),  _
                    ByVal Original_StartofYear_Amt As Global.System.Nullable(Of Double),  _
                    ByVal Original_ValueAsOfDate As Global.System.Nullable(Of Double),  _
                    ByVal Original_OCBS_Booked_Later As Global.System.Nullable(Of Double),  _
                    ByVal Original_Buchwert As Global.System.Nullable(Of Double),  _
                    ByVal Original_BuchwertAbgrenzungen As Global.System.Nullable(Of Double),  _
                    ByVal Original_AenderungLfdJahr As Global.System.Nullable(Of Double),  _
                    ByVal Original_KursReserve As Global.System.Nullable(Of Double),  _
                    ByVal Original_AssetType As String,  _
                    ByVal Original_ClientNr As String) As Integer
            If (BestandCreationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BestandCreationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (BestandDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(BestandDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ISIN_Code,String)
            End If
            If (SecurityName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SecurityName,String)
            End If
            If (Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ccy,String)
            End If
            If (PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartofYear_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(StartofYear_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Amt_Paid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Amt_Paid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (StartofYear_Amt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(StartofYear_Amt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ValueAsOfDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Buchwert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Buchwert.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BuchwertAbgrenzungen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(BuchwertAbgrenzungen.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (AenderungLfdJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(AenderungLfdJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (KursReserve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(KursReserve.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (AssetType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AssetType,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ClientNr,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID,Integer)
            If (Original_BestandCreationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_BestandCreationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_BestandDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_BestandDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ISIN_Code Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ISIN_Code,String)
            End If
            If (Original_SecurityName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SecurityName,String)
            End If
            If (Original_Ccy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Ccy,String)
            End If
            If (Original_PrincipalEuroAmt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PrincipalEuroAmt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_Purchase_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Purchase_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_StartofYear_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_StartofYear_price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Market_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Market_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Amt_Paid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Amt_Paid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_StartofYear_Amt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_StartofYear_Amt.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_ValueAsOfDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_ValueAsOfDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_OCBS_Booked_Later.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_OCBS_Booked_Later.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_Buchwert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Buchwert.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_BuchwertAbgrenzungen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_BuchwertAbgrenzungen.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_AenderungLfdJahr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_AenderungLfdJahr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_KursReserve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_KursReserve.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_AssetType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_AssetType,String)
            End If
            If (Original_ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_ClientNr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _sECURITIES_OURTableAdapter As SECURITIES_OURTableAdapter
        
        Private _sECURITIES_DEPRECIATIONSTableAdapter As SECURITIES_DEPRECIATIONSTableAdapter
        
        Private _sECURITIES_DailyPriceTableAdapter As SECURITIES_DailyPriceTableAdapter
        
        Private _sECURITIES_LIQUIDITYRESERVETableAdapter As SECURITIES_LIQUIDITYRESERVETableAdapter
        
        Private _sECURITIES_BOOKINGSTableAdapter As SECURITIES_BOOKINGSTableAdapter
        
        Private _sECURITIES_BESTANDTableAdapter As SECURITIES_BESTANDTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_OURTableAdapter() As SECURITIES_OURTableAdapter
            Get
                Return Me._sECURITIES_OURTableAdapter
            End Get
            Set
                Me._sECURITIES_OURTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_DEPRECIATIONSTableAdapter() As SECURITIES_DEPRECIATIONSTableAdapter
            Get
                Return Me._sECURITIES_DEPRECIATIONSTableAdapter
            End Get
            Set
                Me._sECURITIES_DEPRECIATIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_DailyPriceTableAdapter() As SECURITIES_DailyPriceTableAdapter
            Get
                Return Me._sECURITIES_DailyPriceTableAdapter
            End Get
            Set
                Me._sECURITIES_DailyPriceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_LIQUIDITYRESERVETableAdapter() As SECURITIES_LIQUIDITYRESERVETableAdapter
            Get
                Return Me._sECURITIES_LIQUIDITYRESERVETableAdapter
            End Get
            Set
                Me._sECURITIES_LIQUIDITYRESERVETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_BOOKINGSTableAdapter() As SECURITIES_BOOKINGSTableAdapter
            Get
                Return Me._sECURITIES_BOOKINGSTableAdapter
            End Get
            Set
                Me._sECURITIES_BOOKINGSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SECURITIES_BESTANDTableAdapter() As SECURITIES_BESTANDTableAdapter
            Get
                Return Me._sECURITIES_BESTANDTableAdapter
            End Get
            Set
                Me._sECURITIES_BESTANDTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._sECURITIES_OURTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_OURTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_OURTableAdapter.Connection
                End If
                If ((Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection
                End If
                If ((Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_DailyPriceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_DailyPriceTableAdapter.Connection
                End If
                If ((Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection
                End If
                If ((Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_BOOKINGSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_BOOKINGSTableAdapter.Connection
                End If
                If ((Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sECURITIES_BESTANDTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sECURITIES_BESTANDTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As SECURITIESDataset, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_OUR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_OURTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DEPRECIATIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_DEPRECIATIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DailyPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_DailyPriceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_LIQUIDITYRESERVE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BOOKINGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_BOOKINGSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BESTAND.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sECURITIES_BESTANDTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As SECURITIESDataset, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_OUR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_OURTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DEPRECIATIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_DEPRECIATIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DailyPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_DailyPriceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_LIQUIDITYRESERVE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BOOKINGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_BOOKINGSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BESTAND.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sECURITIES_BESTANDTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As SECURITIESDataset, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BESTAND.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_BESTANDTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_BOOKINGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_BOOKINGSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_LIQUIDITYRESERVE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DailyPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_DailyPriceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_DEPRECIATIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_DEPRECIATIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SECURITIES_OUR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sECURITIES_OURTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As SECURITIESDataset) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._sECURITIES_OURTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_OURTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_DailyPriceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_BOOKINGSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sECURITIES_BESTANDTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_OURTableAdapter, Me._sECURITIES_OURTableAdapter.Connection)
                    Me._sECURITIES_OURTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_OURTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_OURTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_OURTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_OURTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_DEPRECIATIONSTableAdapter, Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection)
                    Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_DEPRECIATIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_DEPRECIATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_DEPRECIATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_DEPRECIATIONSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_DailyPriceTableAdapter, Me._sECURITIES_DailyPriceTableAdapter.Connection)
                    Me._sECURITIES_DailyPriceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_DailyPriceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_DailyPriceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_DailyPriceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_DailyPriceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_LIQUIDITYRESERVETableAdapter, Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection)
                    Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_BOOKINGSTableAdapter, Me._sECURITIES_BOOKINGSTableAdapter.Connection)
                    Me._sECURITIES_BOOKINGSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_BOOKINGSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_BOOKINGSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_BOOKINGSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_BOOKINGSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sECURITIES_BESTANDTableAdapter, Me._sECURITIES_BESTANDTableAdapter.Connection)
                    Me._sECURITIES_BESTANDTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_BESTANDTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sECURITIES_BESTANDTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sECURITIES_BESTANDTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sECURITIES_BESTANDTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._sECURITIES_OURTableAdapter) Is Nothing) Then
                    Me._sECURITIES_OURTableAdapter.Connection = CType(revertConnections(Me._sECURITIES_OURTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_OURTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sECURITIES_DEPRECIATIONSTableAdapter) Is Nothing) Then
                    Me._sECURITIES_DEPRECIATIONSTableAdapter.Connection = CType(revertConnections(Me._sECURITIES_DEPRECIATIONSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_DEPRECIATIONSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sECURITIES_DailyPriceTableAdapter) Is Nothing) Then
                    Me._sECURITIES_DailyPriceTableAdapter.Connection = CType(revertConnections(Me._sECURITIES_DailyPriceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_DailyPriceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sECURITIES_LIQUIDITYRESERVETableAdapter) Is Nothing) Then
                    Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Connection = CType(revertConnections(Me._sECURITIES_LIQUIDITYRESERVETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_LIQUIDITYRESERVETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sECURITIES_BOOKINGSTableAdapter) Is Nothing) Then
                    Me._sECURITIES_BOOKINGSTableAdapter.Connection = CType(revertConnections(Me._sECURITIES_BOOKINGSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_BOOKINGSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sECURITIES_BESTANDTableAdapter) Is Nothing) Then
                    Me._sECURITIES_BESTANDTableAdapter.Connection = CType(revertConnections(Me._sECURITIES_BESTANDTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sECURITIES_BESTANDTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
