'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CreditSpreadRiskDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CreditSpreadRiskDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableParameter_CreditSpreadRisk_References As Parameter_CreditSpreadRisk_ReferencesDataTable
    
    Private tableParameter_CreditSpreadRisk_Correlations As Parameter_CreditSpreadRisk_CorrelationsDataTable
    
    Private tableCreditSpreadRisk_BondPortfolio As CreditSpreadRisk_BondPortfolioDataTable
    
    Private tableCreditSpreadRisk_MatrixCorrelationCalculations As CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
    
    Private tableCreditSpreadRisk_PortfolioRiskCalculation As CreditSpreadRisk_PortfolioRiskCalculationDataTable
    
    Private tableCreditSpreadRisk_SegmentRiskCalculation As CreditSpreadRisk_SegmentRiskCalculationDataTable
    
    Private tableCreditSpreadRisk_Segments As CreditSpreadRisk_SegmentsDataTable
    
    Private tableCreditSpreadRisk_SingleAssetsCorrelation As CreditSpreadRisk_SingleAssetsCorrelationDataTable
    
    Private tableCreditSpreadRisk_TOTALS As CreditSpreadRisk_TOTALSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Parameter_CreditSpreadRisk_References")) Is Nothing) Then
                MyBase.Tables.Add(New Parameter_CreditSpreadRisk_ReferencesDataTable(ds.Tables("Parameter_CreditSpreadRisk_References")))
            End If
            If (Not (ds.Tables("Parameter_CreditSpreadRisk_Correlations")) Is Nothing) Then
                MyBase.Tables.Add(New Parameter_CreditSpreadRisk_CorrelationsDataTable(ds.Tables("Parameter_CreditSpreadRisk_Correlations")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_BondPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_BondPortfolioDataTable(ds.Tables("CreditSpreadRisk_BondPortfolio")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_MatrixCorrelationCalculations")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_MatrixCorrelationCalculationsDataTable(ds.Tables("CreditSpreadRisk_MatrixCorrelationCalculations")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_PortfolioRiskCalculation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_PortfolioRiskCalculationDataTable(ds.Tables("CreditSpreadRisk_PortfolioRiskCalculation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_SegmentRiskCalculation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SegmentRiskCalculationDataTable(ds.Tables("CreditSpreadRisk_SegmentRiskCalculation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_Segments")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SegmentsDataTable(ds.Tables("CreditSpreadRisk_Segments")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_SingleAssetsCorrelation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SingleAssetsCorrelationDataTable(ds.Tables("CreditSpreadRisk_SingleAssetsCorrelation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_TOTALS")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_TOTALSDataTable(ds.Tables("CreditSpreadRisk_TOTALS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parameter_CreditSpreadRisk_References() As Parameter_CreditSpreadRisk_ReferencesDataTable
        Get
            Return Me.tableParameter_CreditSpreadRisk_References
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parameter_CreditSpreadRisk_Correlations() As Parameter_CreditSpreadRisk_CorrelationsDataTable
        Get
            Return Me.tableParameter_CreditSpreadRisk_Correlations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_BondPortfolio() As CreditSpreadRisk_BondPortfolioDataTable
        Get
            Return Me.tableCreditSpreadRisk_BondPortfolio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_MatrixCorrelationCalculations() As CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
        Get
            Return Me.tableCreditSpreadRisk_MatrixCorrelationCalculations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_PortfolioRiskCalculation() As CreditSpreadRisk_PortfolioRiskCalculationDataTable
        Get
            Return Me.tableCreditSpreadRisk_PortfolioRiskCalculation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_SegmentRiskCalculation() As CreditSpreadRisk_SegmentRiskCalculationDataTable
        Get
            Return Me.tableCreditSpreadRisk_SegmentRiskCalculation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_Segments() As CreditSpreadRisk_SegmentsDataTable
        Get
            Return Me.tableCreditSpreadRisk_Segments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_SingleAssetsCorrelation() As CreditSpreadRisk_SingleAssetsCorrelationDataTable
        Get
            Return Me.tableCreditSpreadRisk_SingleAssetsCorrelation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSpreadRisk_TOTALS() As CreditSpreadRisk_TOTALSDataTable
        Get
            Return Me.tableCreditSpreadRisk_TOTALS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CreditSpreadRiskDataSet = CType(MyBase.Clone,CreditSpreadRiskDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Parameter_CreditSpreadRisk_References")) Is Nothing) Then
                MyBase.Tables.Add(New Parameter_CreditSpreadRisk_ReferencesDataTable(ds.Tables("Parameter_CreditSpreadRisk_References")))
            End If
            If (Not (ds.Tables("Parameter_CreditSpreadRisk_Correlations")) Is Nothing) Then
                MyBase.Tables.Add(New Parameter_CreditSpreadRisk_CorrelationsDataTable(ds.Tables("Parameter_CreditSpreadRisk_Correlations")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_BondPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_BondPortfolioDataTable(ds.Tables("CreditSpreadRisk_BondPortfolio")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_MatrixCorrelationCalculations")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_MatrixCorrelationCalculationsDataTable(ds.Tables("CreditSpreadRisk_MatrixCorrelationCalculations")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_PortfolioRiskCalculation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_PortfolioRiskCalculationDataTable(ds.Tables("CreditSpreadRisk_PortfolioRiskCalculation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_SegmentRiskCalculation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SegmentRiskCalculationDataTable(ds.Tables("CreditSpreadRisk_SegmentRiskCalculation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_Segments")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SegmentsDataTable(ds.Tables("CreditSpreadRisk_Segments")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_SingleAssetsCorrelation")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_SingleAssetsCorrelationDataTable(ds.Tables("CreditSpreadRisk_SingleAssetsCorrelation")))
            End If
            If (Not (ds.Tables("CreditSpreadRisk_TOTALS")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSpreadRisk_TOTALSDataTable(ds.Tables("CreditSpreadRisk_TOTALS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableParameter_CreditSpreadRisk_References = CType(MyBase.Tables("Parameter_CreditSpreadRisk_References"),Parameter_CreditSpreadRisk_ReferencesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParameter_CreditSpreadRisk_References) Is Nothing) Then
                Me.tableParameter_CreditSpreadRisk_References.InitVars
            End If
        End If
        Me.tableParameter_CreditSpreadRisk_Correlations = CType(MyBase.Tables("Parameter_CreditSpreadRisk_Correlations"),Parameter_CreditSpreadRisk_CorrelationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParameter_CreditSpreadRisk_Correlations) Is Nothing) Then
                Me.tableParameter_CreditSpreadRisk_Correlations.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_BondPortfolio = CType(MyBase.Tables("CreditSpreadRisk_BondPortfolio"),CreditSpreadRisk_BondPortfolioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_BondPortfolio) Is Nothing) Then
                Me.tableCreditSpreadRisk_BondPortfolio.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_MatrixCorrelationCalculations = CType(MyBase.Tables("CreditSpreadRisk_MatrixCorrelationCalculations"),CreditSpreadRisk_MatrixCorrelationCalculationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_MatrixCorrelationCalculations) Is Nothing) Then
                Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_PortfolioRiskCalculation = CType(MyBase.Tables("CreditSpreadRisk_PortfolioRiskCalculation"),CreditSpreadRisk_PortfolioRiskCalculationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_PortfolioRiskCalculation) Is Nothing) Then
                Me.tableCreditSpreadRisk_PortfolioRiskCalculation.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_SegmentRiskCalculation = CType(MyBase.Tables("CreditSpreadRisk_SegmentRiskCalculation"),CreditSpreadRisk_SegmentRiskCalculationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_SegmentRiskCalculation) Is Nothing) Then
                Me.tableCreditSpreadRisk_SegmentRiskCalculation.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_Segments = CType(MyBase.Tables("CreditSpreadRisk_Segments"),CreditSpreadRisk_SegmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_Segments) Is Nothing) Then
                Me.tableCreditSpreadRisk_Segments.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_SingleAssetsCorrelation = CType(MyBase.Tables("CreditSpreadRisk_SingleAssetsCorrelation"),CreditSpreadRisk_SingleAssetsCorrelationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_SingleAssetsCorrelation) Is Nothing) Then
                Me.tableCreditSpreadRisk_SingleAssetsCorrelation.InitVars
            End If
        End If
        Me.tableCreditSpreadRisk_TOTALS = CType(MyBase.Tables("CreditSpreadRisk_TOTALS"),CreditSpreadRisk_TOTALSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCreditSpreadRisk_TOTALS) Is Nothing) Then
                Me.tableCreditSpreadRisk_TOTALS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "CreditSpreadRiskDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CreditSpreadRiskDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableParameter_CreditSpreadRisk_References = New Parameter_CreditSpreadRisk_ReferencesDataTable()
        MyBase.Tables.Add(Me.tableParameter_CreditSpreadRisk_References)
        Me.tableParameter_CreditSpreadRisk_Correlations = New Parameter_CreditSpreadRisk_CorrelationsDataTable()
        MyBase.Tables.Add(Me.tableParameter_CreditSpreadRisk_Correlations)
        Me.tableCreditSpreadRisk_BondPortfolio = New CreditSpreadRisk_BondPortfolioDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_BondPortfolio)
        Me.tableCreditSpreadRisk_MatrixCorrelationCalculations = New CreditSpreadRisk_MatrixCorrelationCalculationsDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations)
        Me.tableCreditSpreadRisk_PortfolioRiskCalculation = New CreditSpreadRisk_PortfolioRiskCalculationDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_PortfolioRiskCalculation)
        Me.tableCreditSpreadRisk_SegmentRiskCalculation = New CreditSpreadRisk_SegmentRiskCalculationDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_SegmentRiskCalculation)
        Me.tableCreditSpreadRisk_Segments = New CreditSpreadRisk_SegmentsDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_Segments)
        Me.tableCreditSpreadRisk_SingleAssetsCorrelation = New CreditSpreadRisk_SingleAssetsCorrelationDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_SingleAssetsCorrelation)
        Me.tableCreditSpreadRisk_TOTALS = New CreditSpreadRisk_TOTALSDataTable()
        MyBase.Tables.Add(Me.tableCreditSpreadRisk_TOTALS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeParameter_CreditSpreadRisk_References() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeParameter_CreditSpreadRisk_Correlations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_BondPortfolio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_MatrixCorrelationCalculations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_PortfolioRiskCalculation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_SegmentRiskCalculation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_Segments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_SingleAssetsCorrelation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeCreditSpreadRisk_TOTALS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub Parameter_CreditSpreadRisk_ReferencesRowChangeEventHandler(ByVal sender As Object, ByVal e As Parameter_CreditSpreadRisk_ReferencesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub Parameter_CreditSpreadRisk_CorrelationsRowChangeEventHandler(ByVal sender As Object, ByVal e As Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_BondPortfolioRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_BondPortfolioRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_PortfolioRiskCalculationRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_SegmentRiskCalculationRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_SegmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_SegmentsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_SingleAssetsCorrelationRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub CreditSpreadRisk_TOTALSRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSpreadRisk_TOTALSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Parameter_CreditSpreadRisk_ReferencesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Parameter_CreditSpreadRisk_ReferencesRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnParameterNr As Global.System.Data.DataColumn
        
        Private columnParameterNameGeneral As Global.System.Data.DataColumn
        
        Private columnParameterName1 As Global.System.Data.DataColumn
        
        Private columnParameterName2 As Global.System.Data.DataColumn
        
        Private columnParameterName3 As Global.System.Data.DataColumn
        
        Private columnParameterName4 As Global.System.Data.DataColumn
        
        Private columnParameterName5 As Global.System.Data.DataColumn
        
        Private columnParameterValue1 As Global.System.Data.DataColumn
        
        Private columnParameterValue2 As Global.System.Data.DataColumn
        
        Private columnParameterValue3 As Global.System.Data.DataColumn
        
        Private columnParameterValue4 As Global.System.Data.DataColumn
        
        Private columnParameterValue5 As Global.System.Data.DataColumn
        
        Private columnParameterDate1 As Global.System.Data.DataColumn
        
        Private columnParameterDate2 As Global.System.Data.DataColumn
        
        Private columnParameterDate3 As Global.System.Data.DataColumn
        
        Private columnParameterDate4 As Global.System.Data.DataColumn
        
        Private columnParameterDate5 As Global.System.Data.DataColumn
        
        Private columnParameterStatus As Global.System.Data.DataColumn
        
        Private columnLastAction As Global.System.Data.DataColumn
        
        Private columnLastUpdateUser As Global.System.Data.DataColumn
        
        Private columnLastUpdateDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parameter_CreditSpreadRisk_References"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterNameGeneralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterNameGeneral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterValue1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterValue1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterValue2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterValue2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterValue3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterValue3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterValue4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterValue4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterValue5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterValue5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterDate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterDate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterDate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterDate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterDate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterDate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterDate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterDate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterDate5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterDate5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ParameterStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastUpdateUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastUpdateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Parameter_CreditSpreadRisk_ReferencesRow
            Get
                Return CType(Me.Rows(index),Parameter_CreditSpreadRisk_ReferencesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_ReferencesRowChanging As Parameter_CreditSpreadRisk_ReferencesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_ReferencesRowChanged As Parameter_CreditSpreadRisk_ReferencesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_ReferencesRowDeleting As Parameter_CreditSpreadRisk_ReferencesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_ReferencesRowDeleted As Parameter_CreditSpreadRisk_ReferencesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddParameter_CreditSpreadRisk_ReferencesRow(ByVal row As Parameter_CreditSpreadRisk_ReferencesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddParameter_CreditSpreadRisk_ReferencesRow( _
                    ByVal ParameterNr As Integer,  _
                    ByVal ParameterNameGeneral As String,  _
                    ByVal ParameterName1 As String,  _
                    ByVal ParameterName2 As String,  _
                    ByVal ParameterName3 As String,  _
                    ByVal ParameterName4 As String,  _
                    ByVal ParameterName5 As String,  _
                    ByVal ParameterValue1 As Double,  _
                    ByVal ParameterValue2 As Double,  _
                    ByVal ParameterValue3 As Double,  _
                    ByVal ParameterValue4 As Double,  _
                    ByVal ParameterValue5 As Double,  _
                    ByVal ParameterDate1 As Date,  _
                    ByVal ParameterDate2 As Date,  _
                    ByVal ParameterDate3 As Date,  _
                    ByVal ParameterDate4 As Date,  _
                    ByVal ParameterDate5 As Date,  _
                    ByVal ParameterStatus As String,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Date) As Parameter_CreditSpreadRisk_ReferencesRow
            Dim rowParameter_CreditSpreadRisk_ReferencesRow As Parameter_CreditSpreadRisk_ReferencesRow = CType(Me.NewRow,Parameter_CreditSpreadRisk_ReferencesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ParameterNr, ParameterNameGeneral, ParameterName1, ParameterName2, ParameterName3, ParameterName4, ParameterName5, ParameterValue1, ParameterValue2, ParameterValue3, ParameterValue4, ParameterValue5, ParameterDate1, ParameterDate2, ParameterDate3, ParameterDate4, ParameterDate5, ParameterStatus, LastAction, LastUpdateUser, LastUpdateDate}
            rowParameter_CreditSpreadRisk_ReferencesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParameter_CreditSpreadRisk_ReferencesRow)
            Return rowParameter_CreditSpreadRisk_ReferencesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As Parameter_CreditSpreadRisk_ReferencesRow
            Return CType(Me.Rows.Find(New Object() {ID}),Parameter_CreditSpreadRisk_ReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Parameter_CreditSpreadRisk_ReferencesDataTable = CType(MyBase.Clone,Parameter_CreditSpreadRisk_ReferencesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Parameter_CreditSpreadRisk_ReferencesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnParameterNr = MyBase.Columns("ParameterNr")
            Me.columnParameterNameGeneral = MyBase.Columns("ParameterNameGeneral")
            Me.columnParameterName1 = MyBase.Columns("ParameterName1")
            Me.columnParameterName2 = MyBase.Columns("ParameterName2")
            Me.columnParameterName3 = MyBase.Columns("ParameterName3")
            Me.columnParameterName4 = MyBase.Columns("ParameterName4")
            Me.columnParameterName5 = MyBase.Columns("ParameterName5")
            Me.columnParameterValue1 = MyBase.Columns("ParameterValue1")
            Me.columnParameterValue2 = MyBase.Columns("ParameterValue2")
            Me.columnParameterValue3 = MyBase.Columns("ParameterValue3")
            Me.columnParameterValue4 = MyBase.Columns("ParameterValue4")
            Me.columnParameterValue5 = MyBase.Columns("ParameterValue5")
            Me.columnParameterDate1 = MyBase.Columns("ParameterDate1")
            Me.columnParameterDate2 = MyBase.Columns("ParameterDate2")
            Me.columnParameterDate3 = MyBase.Columns("ParameterDate3")
            Me.columnParameterDate4 = MyBase.Columns("ParameterDate4")
            Me.columnParameterDate5 = MyBase.Columns("ParameterDate5")
            Me.columnParameterStatus = MyBase.Columns("ParameterStatus")
            Me.columnLastAction = MyBase.Columns("LastAction")
            Me.columnLastUpdateUser = MyBase.Columns("LastUpdateUser")
            Me.columnLastUpdateDate = MyBase.Columns("LastUpdateDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnParameterNr = New Global.System.Data.DataColumn("ParameterNr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterNr)
            Me.columnParameterNameGeneral = New Global.System.Data.DataColumn("ParameterNameGeneral", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterNameGeneral)
            Me.columnParameterName1 = New Global.System.Data.DataColumn("ParameterName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName1)
            Me.columnParameterName2 = New Global.System.Data.DataColumn("ParameterName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName2)
            Me.columnParameterName3 = New Global.System.Data.DataColumn("ParameterName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName3)
            Me.columnParameterName4 = New Global.System.Data.DataColumn("ParameterName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName4)
            Me.columnParameterName5 = New Global.System.Data.DataColumn("ParameterName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName5)
            Me.columnParameterValue1 = New Global.System.Data.DataColumn("ParameterValue1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterValue1)
            Me.columnParameterValue2 = New Global.System.Data.DataColumn("ParameterValue2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterValue2)
            Me.columnParameterValue3 = New Global.System.Data.DataColumn("ParameterValue3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterValue3)
            Me.columnParameterValue4 = New Global.System.Data.DataColumn("ParameterValue4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterValue4)
            Me.columnParameterValue5 = New Global.System.Data.DataColumn("ParameterValue5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterValue5)
            Me.columnParameterDate1 = New Global.System.Data.DataColumn("ParameterDate1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterDate1)
            Me.columnParameterDate2 = New Global.System.Data.DataColumn("ParameterDate2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterDate2)
            Me.columnParameterDate3 = New Global.System.Data.DataColumn("ParameterDate3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterDate3)
            Me.columnParameterDate4 = New Global.System.Data.DataColumn("ParameterDate4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterDate4)
            Me.columnParameterDate5 = New Global.System.Data.DataColumn("ParameterDate5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterDate5)
            Me.columnParameterStatus = New Global.System.Data.DataColumn("ParameterStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterStatus)
            Me.columnLastAction = New Global.System.Data.DataColumn("LastAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastAction)
            Me.columnLastUpdateUser = New Global.System.Data.DataColumn("LastUpdateUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateUser)
            Me.columnLastUpdateDate = New Global.System.Data.DataColumn("LastUpdateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnParameterNameGeneral.MaxLength = 2147483647
            Me.columnParameterName1.MaxLength = 2147483647
            Me.columnParameterName2.MaxLength = 2147483647
            Me.columnParameterName3.MaxLength = 2147483647
            Me.columnParameterName4.MaxLength = 2147483647
            Me.columnParameterName5.MaxLength = 2147483647
            Me.columnParameterStatus.MaxLength = 50
            Me.columnLastAction.MaxLength = 50
            Me.columnLastUpdateUser.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewParameter_CreditSpreadRisk_ReferencesRow() As Parameter_CreditSpreadRisk_ReferencesRow
            Return CType(Me.NewRow,Parameter_CreditSpreadRisk_ReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Parameter_CreditSpreadRisk_ReferencesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Parameter_CreditSpreadRisk_ReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Parameter_CreditSpreadRisk_ReferencesRowChangedEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_ReferencesRowChanged(Me, New Parameter_CreditSpreadRisk_ReferencesRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_ReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Parameter_CreditSpreadRisk_ReferencesRowChangingEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_ReferencesRowChanging(Me, New Parameter_CreditSpreadRisk_ReferencesRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_ReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Parameter_CreditSpreadRisk_ReferencesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_ReferencesRowDeleted(Me, New Parameter_CreditSpreadRisk_ReferencesRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_ReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Parameter_CreditSpreadRisk_ReferencesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_ReferencesRowDeleting(Me, New Parameter_CreditSpreadRisk_ReferencesRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_ReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveParameter_CreditSpreadRisk_ReferencesRow(ByVal row As Parameter_CreditSpreadRisk_ReferencesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Parameter_CreditSpreadRisk_ReferencesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Parameter_CreditSpreadRisk_CorrelationsDataTable
        Inherits Global.System.Data.TypedTableBase(Of Parameter_CreditSpreadRisk_CorrelationsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSeqNr As Global.System.Data.DataColumn
        
        Private columnSeqNr1 As Global.System.Data.DataColumn
        
        Private columnSeqNr2 As Global.System.Data.DataColumn
        
        Private columnSeqNr3 As Global.System.Data.DataColumn
        
        Private columnSeqNr4 As Global.System.Data.DataColumn
        
        Private columnSeqNr5 As Global.System.Data.DataColumn
        
        Private columnSeqNr6 As Global.System.Data.DataColumn
        
        Private columnSeqNr7 As Global.System.Data.DataColumn
        
        Private columnSeqNr8 As Global.System.Data.DataColumn
        
        Private columnSeqNr9 As Global.System.Data.DataColumn
        
        Private columnSeqNr10 As Global.System.Data.DataColumn
        
        Private columnSeqNr11 As Global.System.Data.DataColumn
        
        Private columnSeqNr12 As Global.System.Data.DataColumn
        
        Private columnSeqNr13 As Global.System.Data.DataColumn
        
        Private columnSeqNr14 As Global.System.Data.DataColumn
        
        Private columnSeqNr15 As Global.System.Data.DataColumn
        
        Private columnSeqNr16 As Global.System.Data.DataColumn
        
        Private columnLastAction As Global.System.Data.DataColumn
        
        Private columnLastUpdateUser As Global.System.Data.DataColumn
        
        Private columnLastUpdateDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parameter_CreditSpreadRisk_Correlations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SeqNr16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNr16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastUpdateUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LastUpdateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Parameter_CreditSpreadRisk_CorrelationsRow
            Get
                Return CType(Me.Rows(index),Parameter_CreditSpreadRisk_CorrelationsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_CorrelationsRowChanging As Parameter_CreditSpreadRisk_CorrelationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_CorrelationsRowChanged As Parameter_CreditSpreadRisk_CorrelationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_CorrelationsRowDeleting As Parameter_CreditSpreadRisk_CorrelationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event Parameter_CreditSpreadRisk_CorrelationsRowDeleted As Parameter_CreditSpreadRisk_CorrelationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddParameter_CreditSpreadRisk_CorrelationsRow(ByVal row As Parameter_CreditSpreadRisk_CorrelationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddParameter_CreditSpreadRisk_CorrelationsRow( _
                    ByVal SeqNr As Double,  _
                    ByVal SeqNr1 As Double,  _
                    ByVal SeqNr2 As Double,  _
                    ByVal SeqNr3 As Double,  _
                    ByVal SeqNr4 As Double,  _
                    ByVal SeqNr5 As Double,  _
                    ByVal SeqNr6 As Double,  _
                    ByVal SeqNr7 As Double,  _
                    ByVal SeqNr8 As Double,  _
                    ByVal SeqNr9 As Double,  _
                    ByVal SeqNr10 As Double,  _
                    ByVal SeqNr11 As Double,  _
                    ByVal SeqNr12 As Double,  _
                    ByVal SeqNr13 As Double,  _
                    ByVal SeqNr14 As Double,  _
                    ByVal SeqNr15 As Double,  _
                    ByVal SeqNr16 As Double,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Date) As Parameter_CreditSpreadRisk_CorrelationsRow
            Dim rowParameter_CreditSpreadRisk_CorrelationsRow As Parameter_CreditSpreadRisk_CorrelationsRow = CType(Me.NewRow,Parameter_CreditSpreadRisk_CorrelationsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SeqNr, SeqNr1, SeqNr2, SeqNr3, SeqNr4, SeqNr5, SeqNr6, SeqNr7, SeqNr8, SeqNr9, SeqNr10, SeqNr11, SeqNr12, SeqNr13, SeqNr14, SeqNr15, SeqNr16, LastAction, LastUpdateUser, LastUpdateDate}
            rowParameter_CreditSpreadRisk_CorrelationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParameter_CreditSpreadRisk_CorrelationsRow)
            Return rowParameter_CreditSpreadRisk_CorrelationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As Parameter_CreditSpreadRisk_CorrelationsRow
            Return CType(Me.Rows.Find(New Object() {ID}),Parameter_CreditSpreadRisk_CorrelationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Parameter_CreditSpreadRisk_CorrelationsDataTable = CType(MyBase.Clone,Parameter_CreditSpreadRisk_CorrelationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Parameter_CreditSpreadRisk_CorrelationsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSeqNr = MyBase.Columns("SeqNr")
            Me.columnSeqNr1 = MyBase.Columns("SeqNr1")
            Me.columnSeqNr2 = MyBase.Columns("SeqNr2")
            Me.columnSeqNr3 = MyBase.Columns("SeqNr3")
            Me.columnSeqNr4 = MyBase.Columns("SeqNr4")
            Me.columnSeqNr5 = MyBase.Columns("SeqNr5")
            Me.columnSeqNr6 = MyBase.Columns("SeqNr6")
            Me.columnSeqNr7 = MyBase.Columns("SeqNr7")
            Me.columnSeqNr8 = MyBase.Columns("SeqNr8")
            Me.columnSeqNr9 = MyBase.Columns("SeqNr9")
            Me.columnSeqNr10 = MyBase.Columns("SeqNr10")
            Me.columnSeqNr11 = MyBase.Columns("SeqNr11")
            Me.columnSeqNr12 = MyBase.Columns("SeqNr12")
            Me.columnSeqNr13 = MyBase.Columns("SeqNr13")
            Me.columnSeqNr14 = MyBase.Columns("SeqNr14")
            Me.columnSeqNr15 = MyBase.Columns("SeqNr15")
            Me.columnSeqNr16 = MyBase.Columns("SeqNr16")
            Me.columnLastAction = MyBase.Columns("LastAction")
            Me.columnLastUpdateUser = MyBase.Columns("LastUpdateUser")
            Me.columnLastUpdateDate = MyBase.Columns("LastUpdateDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSeqNr = New Global.System.Data.DataColumn("SeqNr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr)
            Me.columnSeqNr1 = New Global.System.Data.DataColumn("SeqNr1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr1)
            Me.columnSeqNr2 = New Global.System.Data.DataColumn("SeqNr2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr2)
            Me.columnSeqNr3 = New Global.System.Data.DataColumn("SeqNr3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr3)
            Me.columnSeqNr4 = New Global.System.Data.DataColumn("SeqNr4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr4)
            Me.columnSeqNr5 = New Global.System.Data.DataColumn("SeqNr5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr5)
            Me.columnSeqNr6 = New Global.System.Data.DataColumn("SeqNr6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr6)
            Me.columnSeqNr7 = New Global.System.Data.DataColumn("SeqNr7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr7)
            Me.columnSeqNr8 = New Global.System.Data.DataColumn("SeqNr8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr8)
            Me.columnSeqNr9 = New Global.System.Data.DataColumn("SeqNr9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr9)
            Me.columnSeqNr10 = New Global.System.Data.DataColumn("SeqNr10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr10)
            Me.columnSeqNr11 = New Global.System.Data.DataColumn("SeqNr11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr11)
            Me.columnSeqNr12 = New Global.System.Data.DataColumn("SeqNr12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr12)
            Me.columnSeqNr13 = New Global.System.Data.DataColumn("SeqNr13", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr13)
            Me.columnSeqNr14 = New Global.System.Data.DataColumn("SeqNr14", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr14)
            Me.columnSeqNr15 = New Global.System.Data.DataColumn("SeqNr15", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr15)
            Me.columnSeqNr16 = New Global.System.Data.DataColumn("SeqNr16", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNr16)
            Me.columnLastAction = New Global.System.Data.DataColumn("LastAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastAction)
            Me.columnLastUpdateUser = New Global.System.Data.DataColumn("LastUpdateUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateUser)
            Me.columnLastUpdateDate = New Global.System.Data.DataColumn("LastUpdateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSeqNr.AllowDBNull = false
            Me.columnSeqNr1.AllowDBNull = false
            Me.columnSeqNr2.AllowDBNull = false
            Me.columnSeqNr3.AllowDBNull = false
            Me.columnSeqNr4.AllowDBNull = false
            Me.columnSeqNr5.AllowDBNull = false
            Me.columnSeqNr6.AllowDBNull = false
            Me.columnSeqNr7.AllowDBNull = false
            Me.columnSeqNr8.AllowDBNull = false
            Me.columnSeqNr9.AllowDBNull = false
            Me.columnSeqNr10.AllowDBNull = false
            Me.columnSeqNr11.AllowDBNull = false
            Me.columnSeqNr12.AllowDBNull = false
            Me.columnSeqNr13.AllowDBNull = false
            Me.columnSeqNr14.AllowDBNull = false
            Me.columnSeqNr15.AllowDBNull = false
            Me.columnSeqNr16.AllowDBNull = false
            Me.columnLastAction.MaxLength = 50
            Me.columnLastUpdateUser.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewParameter_CreditSpreadRisk_CorrelationsRow() As Parameter_CreditSpreadRisk_CorrelationsRow
            Return CType(Me.NewRow,Parameter_CreditSpreadRisk_CorrelationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Parameter_CreditSpreadRisk_CorrelationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Parameter_CreditSpreadRisk_CorrelationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Parameter_CreditSpreadRisk_CorrelationsRowChangedEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_CorrelationsRowChanged(Me, New Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_CorrelationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Parameter_CreditSpreadRisk_CorrelationsRowChangingEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_CorrelationsRowChanging(Me, New Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_CorrelationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Parameter_CreditSpreadRisk_CorrelationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_CorrelationsRowDeleted(Me, New Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_CorrelationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Parameter_CreditSpreadRisk_CorrelationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Parameter_CreditSpreadRisk_CorrelationsRowDeleting(Me, New Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent(CType(e.Row,Parameter_CreditSpreadRisk_CorrelationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveParameter_CreditSpreadRisk_CorrelationsRow(ByVal row As Parameter_CreditSpreadRisk_CorrelationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Parameter_CreditSpreadRisk_CorrelationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_BondPortfolioDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_BondPortfolioRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnISIN As Global.System.Data.DataColumn
        
        Private columnEmmitentNr As Global.System.Data.DataColumn
        
        Private columnSecurityName As Global.System.Data.DataColumn
        
        Private columnNominal As Global.System.Data.DataColumn
        
        Private columnMarketValueEUR As Global.System.Data.DataColumn
        
        Private columnModifiedDuration As Global.System.Data.DataColumn
        
        Private columnCS01 As Global.System.Data.DataColumn
        
        Private columnSegment As Global.System.Data.DataColumn
        
        Private columnSpreadMovement As Global.System.Data.DataColumn
        
        Private columnCurve_Type As Global.System.Data.DataColumn
        
        Private columnSingleAssetRisk As Global.System.Data.DataColumn
        
        Private columnK_Tenor As Global.System.Data.DataColumn
        
        Private columnMidVec As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_BondPortfolio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EmmitentNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmmitentNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SecurityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecurityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NominalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNominal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MarketValueEURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketValueEUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ModifiedDurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CS01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCS01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SpreadMovementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpreadMovement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Curve_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurve_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SingleAssetRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSingleAssetRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_TenorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_Tenor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MidVecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMidVec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_BondPortfolioRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_BondPortfolioRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_BondPortfolioRowChanging As CreditSpreadRisk_BondPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_BondPortfolioRowChanged As CreditSpreadRisk_BondPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_BondPortfolioRowDeleting As CreditSpreadRisk_BondPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_BondPortfolioRowDeleted As CreditSpreadRisk_BondPortfolioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_BondPortfolioRow(ByVal row As CreditSpreadRisk_BondPortfolioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_BondPortfolioRow(ByVal ISIN As String, ByVal EmmitentNr As String, ByVal SecurityName As String, ByVal Nominal As Double, ByVal MarketValueEUR As Double, ByVal ModifiedDuration As Double, ByVal CS01 As Double, ByVal Segment As Double, ByVal SpreadMovement As Double, ByVal Curve_Type As String, ByVal SingleAssetRisk As Double, ByVal K_Tenor As String, ByVal MidVec As Double, ByVal RiskDate As Date) As CreditSpreadRisk_BondPortfolioRow
            Dim rowCreditSpreadRisk_BondPortfolioRow As CreditSpreadRisk_BondPortfolioRow = CType(Me.NewRow,CreditSpreadRisk_BondPortfolioRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ISIN, EmmitentNr, SecurityName, Nominal, MarketValueEUR, ModifiedDuration, CS01, Segment, SpreadMovement, Curve_Type, SingleAssetRisk, K_Tenor, MidVec, RiskDate}
            rowCreditSpreadRisk_BondPortfolioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_BondPortfolioRow)
            Return rowCreditSpreadRisk_BondPortfolioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_BondPortfolioRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_BondPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_BondPortfolioDataTable = CType(MyBase.Clone,CreditSpreadRisk_BondPortfolioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_BondPortfolioDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnISIN = MyBase.Columns("ISIN")
            Me.columnEmmitentNr = MyBase.Columns("EmmitentNr")
            Me.columnSecurityName = MyBase.Columns("SecurityName")
            Me.columnNominal = MyBase.Columns("Nominal")
            Me.columnMarketValueEUR = MyBase.Columns("MarketValueEUR")
            Me.columnModifiedDuration = MyBase.Columns("ModifiedDuration")
            Me.columnCS01 = MyBase.Columns("CS01")
            Me.columnSegment = MyBase.Columns("Segment")
            Me.columnSpreadMovement = MyBase.Columns("SpreadMovement")
            Me.columnCurve_Type = MyBase.Columns("Curve_Type")
            Me.columnSingleAssetRisk = MyBase.Columns("SingleAssetRisk")
            Me.columnK_Tenor = MyBase.Columns("K_Tenor")
            Me.columnMidVec = MyBase.Columns("MidVec")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnISIN = New Global.System.Data.DataColumn("ISIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN)
            Me.columnEmmitentNr = New Global.System.Data.DataColumn("EmmitentNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmmitentNr)
            Me.columnSecurityName = New Global.System.Data.DataColumn("SecurityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecurityName)
            Me.columnNominal = New Global.System.Data.DataColumn("Nominal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNominal)
            Me.columnMarketValueEUR = New Global.System.Data.DataColumn("MarketValueEUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketValueEUR)
            Me.columnModifiedDuration = New Global.System.Data.DataColumn("ModifiedDuration", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDuration)
            Me.columnCS01 = New Global.System.Data.DataColumn("CS01", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCS01)
            Me.columnSegment = New Global.System.Data.DataColumn("Segment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment)
            Me.columnSpreadMovement = New Global.System.Data.DataColumn("SpreadMovement", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpreadMovement)
            Me.columnCurve_Type = New Global.System.Data.DataColumn("Curve_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurve_Type)
            Me.columnSingleAssetRisk = New Global.System.Data.DataColumn("SingleAssetRisk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSingleAssetRisk)
            Me.columnK_Tenor = New Global.System.Data.DataColumn("K_Tenor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_Tenor)
            Me.columnMidVec = New Global.System.Data.DataColumn("MidVec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMidVec)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnISIN.MaxLength = 50
            Me.columnEmmitentNr.MaxLength = 50
            Me.columnSecurityName.MaxLength = 255
            Me.columnCurve_Type.MaxLength = 50
            Me.columnK_Tenor.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_BondPortfolioRow() As CreditSpreadRisk_BondPortfolioRow
            Return CType(Me.NewRow,CreditSpreadRisk_BondPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_BondPortfolioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_BondPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_BondPortfolioRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_BondPortfolioRowChanged(Me, New CreditSpreadRisk_BondPortfolioRowChangeEvent(CType(e.Row,CreditSpreadRisk_BondPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_BondPortfolioRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_BondPortfolioRowChanging(Me, New CreditSpreadRisk_BondPortfolioRowChangeEvent(CType(e.Row,CreditSpreadRisk_BondPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_BondPortfolioRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_BondPortfolioRowDeleted(Me, New CreditSpreadRisk_BondPortfolioRowChangeEvent(CType(e.Row,CreditSpreadRisk_BondPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_BondPortfolioRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_BondPortfolioRowDeleting(Me, New CreditSpreadRisk_BondPortfolioRowChangeEvent(CType(e.Row,CreditSpreadRisk_BondPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_BondPortfolioRow(ByVal row As CreditSpreadRisk_BondPortfolioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_BondPortfolioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_MatrixCorrelationCalculationsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCalculationDescription As Global.System.Data.DataColumn
        
        Private columnRowNr As Global.System.Data.DataColumn
        
        Private columnColNr As Global.System.Data.DataColumn
        
        Private columnFieldName1 As Global.System.Data.DataColumn
        
        Private columnFieldName2 As Global.System.Data.DataColumn
        
        Private columnFieldName3 As Global.System.Data.DataColumn
        
        Private columnFieldName4 As Global.System.Data.DataColumn
        
        Private columnFieldName5 As Global.System.Data.DataColumn
        
        Private columnFieldName6 As Global.System.Data.DataColumn
        
        Private columnFieldName7 As Global.System.Data.DataColumn
        
        Private columnFieldName8 As Global.System.Data.DataColumn
        
        Private columnFieldName9 As Global.System.Data.DataColumn
        
        Private columnFieldName10 As Global.System.Data.DataColumn
        
        Private columnFieldValue1 As Global.System.Data.DataColumn
        
        Private columnFieldValue2 As Global.System.Data.DataColumn
        
        Private columnFieldValue3 As Global.System.Data.DataColumn
        
        Private columnFieldValue4 As Global.System.Data.DataColumn
        
        Private columnFieldValue5 As Global.System.Data.DataColumn
        
        Private columnFieldValue6 As Global.System.Data.DataColumn
        
        Private columnFieldValue7 As Global.System.Data.DataColumn
        
        Private columnFieldValue8 As Global.System.Data.DataColumn
        
        Private columnFieldValue9 As Global.System.Data.DataColumn
        
        Private columnFieldValue10 As Global.System.Data.DataColumn
        
        Private columnResultFieldName As Global.System.Data.DataColumn
        
        Private columnResultFieldValue As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_MatrixCorrelationCalculations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CalculationDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RowNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ColNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldName10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FieldValue10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldValue10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ResultFieldNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResultFieldName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ResultFieldValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResultFieldValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_MatrixCorrelationCalculationsRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_MatrixCorrelationCalculationsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_MatrixCorrelationCalculationsRowChanging As CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_MatrixCorrelationCalculationsRowChanged As CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_MatrixCorrelationCalculationsRowDeleting As CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_MatrixCorrelationCalculationsRowDeleted As CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_MatrixCorrelationCalculationsRow(ByVal row As CreditSpreadRisk_MatrixCorrelationCalculationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_MatrixCorrelationCalculationsRow( _
                    ByVal CalculationDescription As String,  _
                    ByVal RowNr As Integer,  _
                    ByVal ColNr As Integer,  _
                    ByVal FieldName1 As String,  _
                    ByVal FieldName2 As String,  _
                    ByVal FieldName3 As String,  _
                    ByVal FieldName4 As String,  _
                    ByVal FieldName5 As String,  _
                    ByVal FieldName6 As String,  _
                    ByVal FieldName7 As String,  _
                    ByVal FieldName8 As String,  _
                    ByVal FieldName9 As String,  _
                    ByVal FieldName10 As String,  _
                    ByVal FieldValue1 As Double,  _
                    ByVal FieldValue2 As Double,  _
                    ByVal FieldValue3 As Double,  _
                    ByVal FieldValue4 As Double,  _
                    ByVal FieldValue5 As Double,  _
                    ByVal FieldValue6 As Double,  _
                    ByVal FieldValue7 As Double,  _
                    ByVal FieldValue8 As Double,  _
                    ByVal FieldValue9 As Double,  _
                    ByVal FieldValue10 As Double,  _
                    ByVal ResultFieldName As String,  _
                    ByVal ResultFieldValue As Double,  _
                    ByVal RiskDate As Date) As CreditSpreadRisk_MatrixCorrelationCalculationsRow
            Dim rowCreditSpreadRisk_MatrixCorrelationCalculationsRow As CreditSpreadRisk_MatrixCorrelationCalculationsRow = CType(Me.NewRow,CreditSpreadRisk_MatrixCorrelationCalculationsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CalculationDescription, RowNr, ColNr, FieldName1, FieldName2, FieldName3, FieldName4, FieldName5, FieldName6, FieldName7, FieldName8, FieldName9, FieldName10, FieldValue1, FieldValue2, FieldValue3, FieldValue4, FieldValue5, FieldValue6, FieldValue7, FieldValue8, FieldValue9, FieldValue10, ResultFieldName, ResultFieldValue, RiskDate}
            rowCreditSpreadRisk_MatrixCorrelationCalculationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_MatrixCorrelationCalculationsRow)
            Return rowCreditSpreadRisk_MatrixCorrelationCalculationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_MatrixCorrelationCalculationsRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_MatrixCorrelationCalculationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_MatrixCorrelationCalculationsDataTable = CType(MyBase.Clone,CreditSpreadRisk_MatrixCorrelationCalculationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_MatrixCorrelationCalculationsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCalculationDescription = MyBase.Columns("CalculationDescription")
            Me.columnRowNr = MyBase.Columns("RowNr")
            Me.columnColNr = MyBase.Columns("ColNr")
            Me.columnFieldName1 = MyBase.Columns("FieldName1")
            Me.columnFieldName2 = MyBase.Columns("FieldName2")
            Me.columnFieldName3 = MyBase.Columns("FieldName3")
            Me.columnFieldName4 = MyBase.Columns("FieldName4")
            Me.columnFieldName5 = MyBase.Columns("FieldName5")
            Me.columnFieldName6 = MyBase.Columns("FieldName6")
            Me.columnFieldName7 = MyBase.Columns("FieldName7")
            Me.columnFieldName8 = MyBase.Columns("FieldName8")
            Me.columnFieldName9 = MyBase.Columns("FieldName9")
            Me.columnFieldName10 = MyBase.Columns("FieldName10")
            Me.columnFieldValue1 = MyBase.Columns("FieldValue1")
            Me.columnFieldValue2 = MyBase.Columns("FieldValue2")
            Me.columnFieldValue3 = MyBase.Columns("FieldValue3")
            Me.columnFieldValue4 = MyBase.Columns("FieldValue4")
            Me.columnFieldValue5 = MyBase.Columns("FieldValue5")
            Me.columnFieldValue6 = MyBase.Columns("FieldValue6")
            Me.columnFieldValue7 = MyBase.Columns("FieldValue7")
            Me.columnFieldValue8 = MyBase.Columns("FieldValue8")
            Me.columnFieldValue9 = MyBase.Columns("FieldValue9")
            Me.columnFieldValue10 = MyBase.Columns("FieldValue10")
            Me.columnResultFieldName = MyBase.Columns("ResultFieldName")
            Me.columnResultFieldValue = MyBase.Columns("ResultFieldValue")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCalculationDescription = New Global.System.Data.DataColumn("CalculationDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationDescription)
            Me.columnRowNr = New Global.System.Data.DataColumn("RowNr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowNr)
            Me.columnColNr = New Global.System.Data.DataColumn("ColNr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColNr)
            Me.columnFieldName1 = New Global.System.Data.DataColumn("FieldName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName1)
            Me.columnFieldName2 = New Global.System.Data.DataColumn("FieldName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName2)
            Me.columnFieldName3 = New Global.System.Data.DataColumn("FieldName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName3)
            Me.columnFieldName4 = New Global.System.Data.DataColumn("FieldName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName4)
            Me.columnFieldName5 = New Global.System.Data.DataColumn("FieldName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName5)
            Me.columnFieldName6 = New Global.System.Data.DataColumn("FieldName6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName6)
            Me.columnFieldName7 = New Global.System.Data.DataColumn("FieldName7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName7)
            Me.columnFieldName8 = New Global.System.Data.DataColumn("FieldName8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName8)
            Me.columnFieldName9 = New Global.System.Data.DataColumn("FieldName9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName9)
            Me.columnFieldName10 = New Global.System.Data.DataColumn("FieldName10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName10)
            Me.columnFieldValue1 = New Global.System.Data.DataColumn("FieldValue1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue1)
            Me.columnFieldValue2 = New Global.System.Data.DataColumn("FieldValue2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue2)
            Me.columnFieldValue3 = New Global.System.Data.DataColumn("FieldValue3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue3)
            Me.columnFieldValue4 = New Global.System.Data.DataColumn("FieldValue4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue4)
            Me.columnFieldValue5 = New Global.System.Data.DataColumn("FieldValue5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue5)
            Me.columnFieldValue6 = New Global.System.Data.DataColumn("FieldValue6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue6)
            Me.columnFieldValue7 = New Global.System.Data.DataColumn("FieldValue7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue7)
            Me.columnFieldValue8 = New Global.System.Data.DataColumn("FieldValue8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue8)
            Me.columnFieldValue9 = New Global.System.Data.DataColumn("FieldValue9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue9)
            Me.columnFieldValue10 = New Global.System.Data.DataColumn("FieldValue10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldValue10)
            Me.columnResultFieldName = New Global.System.Data.DataColumn("ResultFieldName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResultFieldName)
            Me.columnResultFieldValue = New Global.System.Data.DataColumn("ResultFieldValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResultFieldValue)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCalculationDescription.MaxLength = 2147483647
            Me.columnFieldName1.MaxLength = 2147483647
            Me.columnFieldName2.MaxLength = 2147483647
            Me.columnFieldName3.MaxLength = 2147483647
            Me.columnFieldName4.MaxLength = 2147483647
            Me.columnFieldName5.MaxLength = 2147483647
            Me.columnFieldName6.MaxLength = 2147483647
            Me.columnFieldName7.MaxLength = 2147483647
            Me.columnFieldName8.MaxLength = 2147483647
            Me.columnFieldName9.MaxLength = 2147483647
            Me.columnFieldName10.MaxLength = 2147483647
            Me.columnResultFieldName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_MatrixCorrelationCalculationsRow() As CreditSpreadRisk_MatrixCorrelationCalculationsRow
            Return CType(Me.NewRow,CreditSpreadRisk_MatrixCorrelationCalculationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_MatrixCorrelationCalculationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_MatrixCorrelationCalculationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_MatrixCorrelationCalculationsRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_MatrixCorrelationCalculationsRowChanged(Me, New CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent(CType(e.Row,CreditSpreadRisk_MatrixCorrelationCalculationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_MatrixCorrelationCalculationsRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_MatrixCorrelationCalculationsRowChanging(Me, New CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent(CType(e.Row,CreditSpreadRisk_MatrixCorrelationCalculationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_MatrixCorrelationCalculationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_MatrixCorrelationCalculationsRowDeleted(Me, New CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent(CType(e.Row,CreditSpreadRisk_MatrixCorrelationCalculationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_MatrixCorrelationCalculationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_MatrixCorrelationCalculationsRowDeleting(Me, New CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent(CType(e.Row,CreditSpreadRisk_MatrixCorrelationCalculationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_MatrixCorrelationCalculationsRow(ByVal row As CreditSpreadRisk_MatrixCorrelationCalculationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_MatrixCorrelationCalculationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_PortfolioRiskCalculationDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_PortfolioRiskCalculationRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSegment_A As Global.System.Data.DataColumn
        
        Private columnSegment_B As Global.System.Data.DataColumn
        
        Private columnSegmentCorrelation As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_PortfolioRiskCalculation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Segment_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Segment_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentCorrelationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegmentCorrelation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_PortfolioRiskCalculationRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_PortfolioRiskCalculationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_PortfolioRiskCalculationRowChanging As CreditSpreadRisk_PortfolioRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_PortfolioRiskCalculationRowChanged As CreditSpreadRisk_PortfolioRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_PortfolioRiskCalculationRowDeleting As CreditSpreadRisk_PortfolioRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_PortfolioRiskCalculationRowDeleted As CreditSpreadRisk_PortfolioRiskCalculationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_PortfolioRiskCalculationRow(ByVal row As CreditSpreadRisk_PortfolioRiskCalculationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_PortfolioRiskCalculationRow(ByVal Segment_A As Double, ByVal Segment_B As Double, ByVal SegmentCorrelation As Double, ByVal RiskDate As Date) As CreditSpreadRisk_PortfolioRiskCalculationRow
            Dim rowCreditSpreadRisk_PortfolioRiskCalculationRow As CreditSpreadRisk_PortfolioRiskCalculationRow = CType(Me.NewRow,CreditSpreadRisk_PortfolioRiskCalculationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Segment_A, Segment_B, SegmentCorrelation, RiskDate}
            rowCreditSpreadRisk_PortfolioRiskCalculationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_PortfolioRiskCalculationRow)
            Return rowCreditSpreadRisk_PortfolioRiskCalculationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_PortfolioRiskCalculationRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_PortfolioRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_PortfolioRiskCalculationDataTable = CType(MyBase.Clone,CreditSpreadRisk_PortfolioRiskCalculationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_PortfolioRiskCalculationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSegment_A = MyBase.Columns("Segment_A")
            Me.columnSegment_B = MyBase.Columns("Segment_B")
            Me.columnSegmentCorrelation = MyBase.Columns("SegmentCorrelation")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSegment_A = New Global.System.Data.DataColumn("Segment_A", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_A)
            Me.columnSegment_B = New Global.System.Data.DataColumn("Segment_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_B)
            Me.columnSegmentCorrelation = New Global.System.Data.DataColumn("SegmentCorrelation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegmentCorrelation)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_PortfolioRiskCalculationRow() As CreditSpreadRisk_PortfolioRiskCalculationRow
            Return CType(Me.NewRow,CreditSpreadRisk_PortfolioRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_PortfolioRiskCalculationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_PortfolioRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_PortfolioRiskCalculationRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_PortfolioRiskCalculationRowChanged(Me, New CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_PortfolioRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_PortfolioRiskCalculationRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_PortfolioRiskCalculationRowChanging(Me, New CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_PortfolioRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_PortfolioRiskCalculationRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_PortfolioRiskCalculationRowDeleted(Me, New CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_PortfolioRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_PortfolioRiskCalculationRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_PortfolioRiskCalculationRowDeleting(Me, New CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_PortfolioRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_PortfolioRiskCalculationRow(ByVal row As CreditSpreadRisk_PortfolioRiskCalculationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_PortfolioRiskCalculationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_SegmentRiskCalculationDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_SegmentRiskCalculationRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSegment As Global.System.Data.DataColumn
        
        Private columnAssetRisk_MidVec As Global.System.Data.DataColumn
        
        Private columnSegmentRisk As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_SegmentRiskCalculation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AssetRisk_MidVecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetRisk_MidVec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegmentRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_SegmentRiskCalculationRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_SegmentRiskCalculationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentRiskCalculationRowChanging As CreditSpreadRisk_SegmentRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentRiskCalculationRowChanged As CreditSpreadRisk_SegmentRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentRiskCalculationRowDeleting As CreditSpreadRisk_SegmentRiskCalculationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentRiskCalculationRowDeleted As CreditSpreadRisk_SegmentRiskCalculationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_SegmentRiskCalculationRow(ByVal row As CreditSpreadRisk_SegmentRiskCalculationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_SegmentRiskCalculationRow(ByVal Segment As Double, ByVal AssetRisk_MidVec As Double, ByVal SegmentRisk As Double, ByVal RiskDate As Date) As CreditSpreadRisk_SegmentRiskCalculationRow
            Dim rowCreditSpreadRisk_SegmentRiskCalculationRow As CreditSpreadRisk_SegmentRiskCalculationRow = CType(Me.NewRow,CreditSpreadRisk_SegmentRiskCalculationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Segment, AssetRisk_MidVec, SegmentRisk, RiskDate}
            rowCreditSpreadRisk_SegmentRiskCalculationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_SegmentRiskCalculationRow)
            Return rowCreditSpreadRisk_SegmentRiskCalculationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_SegmentRiskCalculationRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_SegmentRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_SegmentRiskCalculationDataTable = CType(MyBase.Clone,CreditSpreadRisk_SegmentRiskCalculationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_SegmentRiskCalculationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSegment = MyBase.Columns("Segment")
            Me.columnAssetRisk_MidVec = MyBase.Columns("AssetRisk_MidVec")
            Me.columnSegmentRisk = MyBase.Columns("SegmentRisk")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSegment = New Global.System.Data.DataColumn("Segment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment)
            Me.columnAssetRisk_MidVec = New Global.System.Data.DataColumn("AssetRisk_MidVec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetRisk_MidVec)
            Me.columnSegmentRisk = New Global.System.Data.DataColumn("SegmentRisk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegmentRisk)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_SegmentRiskCalculationRow() As CreditSpreadRisk_SegmentRiskCalculationRow
            Return CType(Me.NewRow,CreditSpreadRisk_SegmentRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_SegmentRiskCalculationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_SegmentRiskCalculationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_SegmentRiskCalculationRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentRiskCalculationRowChanged(Me, New CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_SegmentRiskCalculationRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentRiskCalculationRowChanging(Me, New CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_SegmentRiskCalculationRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentRiskCalculationRowDeleted(Me, New CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_SegmentRiskCalculationRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentRiskCalculationRowDeleting(Me, New CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentRiskCalculationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_SegmentRiskCalculationRow(ByVal row As CreditSpreadRisk_SegmentRiskCalculationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_SegmentRiskCalculationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_SegmentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_SegmentsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSegment As Global.System.Data.DataColumn
        
        Private columnAssetRisk_MidVec As Global.System.Data.DataColumn
        
        Private columnSegmentRisk As Global.System.Data.DataColumn
        
        Private columnSegmentRisk_MidVec As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_Segments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AssetRisk_MidVecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetRisk_MidVec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegmentRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentRisk_MidVecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegmentRisk_MidVec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_SegmentsRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_SegmentsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentsRowChanging As CreditSpreadRisk_SegmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentsRowChanged As CreditSpreadRisk_SegmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentsRowDeleting As CreditSpreadRisk_SegmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SegmentsRowDeleted As CreditSpreadRisk_SegmentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_SegmentsRow(ByVal row As CreditSpreadRisk_SegmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_SegmentsRow(ByVal Segment As Double, ByVal AssetRisk_MidVec As Double, ByVal SegmentRisk As Double, ByVal SegmentRisk_MidVec As Double, ByVal RiskDate As Date) As CreditSpreadRisk_SegmentsRow
            Dim rowCreditSpreadRisk_SegmentsRow As CreditSpreadRisk_SegmentsRow = CType(Me.NewRow,CreditSpreadRisk_SegmentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Segment, AssetRisk_MidVec, SegmentRisk, SegmentRisk_MidVec, RiskDate}
            rowCreditSpreadRisk_SegmentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_SegmentsRow)
            Return rowCreditSpreadRisk_SegmentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_SegmentsRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_SegmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_SegmentsDataTable = CType(MyBase.Clone,CreditSpreadRisk_SegmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_SegmentsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSegment = MyBase.Columns("Segment")
            Me.columnAssetRisk_MidVec = MyBase.Columns("AssetRisk_MidVec")
            Me.columnSegmentRisk = MyBase.Columns("SegmentRisk")
            Me.columnSegmentRisk_MidVec = MyBase.Columns("SegmentRisk_MidVec")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSegment = New Global.System.Data.DataColumn("Segment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment)
            Me.columnAssetRisk_MidVec = New Global.System.Data.DataColumn("AssetRisk_MidVec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetRisk_MidVec)
            Me.columnSegmentRisk = New Global.System.Data.DataColumn("SegmentRisk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegmentRisk)
            Me.columnSegmentRisk_MidVec = New Global.System.Data.DataColumn("SegmentRisk_MidVec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegmentRisk_MidVec)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_SegmentsRow() As CreditSpreadRisk_SegmentsRow
            Return CType(Me.NewRow,CreditSpreadRisk_SegmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_SegmentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_SegmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_SegmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentsRowChanged(Me, New CreditSpreadRisk_SegmentsRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_SegmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentsRowChanging(Me, New CreditSpreadRisk_SegmentsRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_SegmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentsRowDeleted(Me, New CreditSpreadRisk_SegmentsRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_SegmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SegmentsRowDeleting(Me, New CreditSpreadRisk_SegmentsRowChangeEvent(CType(e.Row,CreditSpreadRisk_SegmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_SegmentsRow(ByVal row As CreditSpreadRisk_SegmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_SegmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_SingleAssetsCorrelationDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_SingleAssetsCorrelationRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnEMMITENT_A As Global.System.Data.DataColumn
        
        Private columnEMMITENT_B As Global.System.Data.DataColumn
        
        Private columnID_A As Global.System.Data.DataColumn
        
        Private columnID_B As Global.System.Data.DataColumn
        
        Private columnISIN_A As Global.System.Data.DataColumn
        
        Private columnISIN_B As Global.System.Data.DataColumn
        
        Private columnTENOR_A As Global.System.Data.DataColumn
        
        Private columnTENOR_B As Global.System.Data.DataColumn
        
        Private columnCURVE_A As Global.System.Data.DataColumn
        
        Private columnCURVE_B As Global.System.Data.DataColumn
        
        Private columnSEGMENT_A As Global.System.Data.DataColumn
        
        Private columnSEGMENT_B As Global.System.Data.DataColumn
        
        Private columnCorrelation_Name As Global.System.Data.DataColumn
        
        Private columnCorrelation_Tenor As Global.System.Data.DataColumn
        
        Private columnCorrelation_Basis As Global.System.Data.DataColumn
        
        Private columnCorrelationValue As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_SingleAssetsCorrelation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EMMITENT_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMMITENT_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EMMITENT_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMMITENT_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ID_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ID_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISIN_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIN_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TENOR_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTENOR_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TENOR_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTENOR_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURVE_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURVE_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURVE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURVE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SEGMENT_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEGMENT_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SEGMENT_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEGMENT_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Correlation_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCorrelation_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Correlation_TenorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCorrelation_Tenor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Correlation_BasisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCorrelation_Basis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CorrelationValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCorrelationValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_SingleAssetsCorrelationRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_SingleAssetsCorrelationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SingleAssetsCorrelationRowChanging As CreditSpreadRisk_SingleAssetsCorrelationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SingleAssetsCorrelationRowChanged As CreditSpreadRisk_SingleAssetsCorrelationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SingleAssetsCorrelationRowDeleting As CreditSpreadRisk_SingleAssetsCorrelationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_SingleAssetsCorrelationRowDeleted As CreditSpreadRisk_SingleAssetsCorrelationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_SingleAssetsCorrelationRow(ByVal row As CreditSpreadRisk_SingleAssetsCorrelationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_SingleAssetsCorrelationRow( _
                    ByVal EMMITENT_A As String,  _
                    ByVal EMMITENT_B As String,  _
                    ByVal ID_A As Integer,  _
                    ByVal ID_B As Integer,  _
                    ByVal ISIN_A As String,  _
                    ByVal ISIN_B As String,  _
                    ByVal TENOR_A As String,  _
                    ByVal TENOR_B As String,  _
                    ByVal CURVE_A As String,  _
                    ByVal CURVE_B As String,  _
                    ByVal SEGMENT_A As Double,  _
                    ByVal SEGMENT_B As Double,  _
                    ByVal Correlation_Name As Double,  _
                    ByVal Correlation_Tenor As Double,  _
                    ByVal Correlation_Basis As Double,  _
                    ByVal CorrelationValue As Double,  _
                    ByVal RiskDate As Date) As CreditSpreadRisk_SingleAssetsCorrelationRow
            Dim rowCreditSpreadRisk_SingleAssetsCorrelationRow As CreditSpreadRisk_SingleAssetsCorrelationRow = CType(Me.NewRow,CreditSpreadRisk_SingleAssetsCorrelationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EMMITENT_A, EMMITENT_B, ID_A, ID_B, ISIN_A, ISIN_B, TENOR_A, TENOR_B, CURVE_A, CURVE_B, SEGMENT_A, SEGMENT_B, Correlation_Name, Correlation_Tenor, Correlation_Basis, CorrelationValue, RiskDate}
            rowCreditSpreadRisk_SingleAssetsCorrelationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_SingleAssetsCorrelationRow)
            Return rowCreditSpreadRisk_SingleAssetsCorrelationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_SingleAssetsCorrelationRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_SingleAssetsCorrelationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_SingleAssetsCorrelationDataTable = CType(MyBase.Clone,CreditSpreadRisk_SingleAssetsCorrelationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_SingleAssetsCorrelationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnEMMITENT_A = MyBase.Columns("EMMITENT_A")
            Me.columnEMMITENT_B = MyBase.Columns("EMMITENT_B")
            Me.columnID_A = MyBase.Columns("ID_A")
            Me.columnID_B = MyBase.Columns("ID_B")
            Me.columnISIN_A = MyBase.Columns("ISIN_A")
            Me.columnISIN_B = MyBase.Columns("ISIN_B")
            Me.columnTENOR_A = MyBase.Columns("TENOR_A")
            Me.columnTENOR_B = MyBase.Columns("TENOR_B")
            Me.columnCURVE_A = MyBase.Columns("CURVE_A")
            Me.columnCURVE_B = MyBase.Columns("CURVE_B")
            Me.columnSEGMENT_A = MyBase.Columns("SEGMENT_A")
            Me.columnSEGMENT_B = MyBase.Columns("SEGMENT_B")
            Me.columnCorrelation_Name = MyBase.Columns("Correlation_Name")
            Me.columnCorrelation_Tenor = MyBase.Columns("Correlation_Tenor")
            Me.columnCorrelation_Basis = MyBase.Columns("Correlation_Basis")
            Me.columnCorrelationValue = MyBase.Columns("CorrelationValue")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnEMMITENT_A = New Global.System.Data.DataColumn("EMMITENT_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMMITENT_A)
            Me.columnEMMITENT_B = New Global.System.Data.DataColumn("EMMITENT_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMMITENT_B)
            Me.columnID_A = New Global.System.Data.DataColumn("ID_A", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_A)
            Me.columnID_B = New Global.System.Data.DataColumn("ID_B", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_B)
            Me.columnISIN_A = New Global.System.Data.DataColumn("ISIN_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_A)
            Me.columnISIN_B = New Global.System.Data.DataColumn("ISIN_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIN_B)
            Me.columnTENOR_A = New Global.System.Data.DataColumn("TENOR_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTENOR_A)
            Me.columnTENOR_B = New Global.System.Data.DataColumn("TENOR_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTENOR_B)
            Me.columnCURVE_A = New Global.System.Data.DataColumn("CURVE_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURVE_A)
            Me.columnCURVE_B = New Global.System.Data.DataColumn("CURVE_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURVE_B)
            Me.columnSEGMENT_A = New Global.System.Data.DataColumn("SEGMENT_A", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEGMENT_A)
            Me.columnSEGMENT_B = New Global.System.Data.DataColumn("SEGMENT_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEGMENT_B)
            Me.columnCorrelation_Name = New Global.System.Data.DataColumn("Correlation_Name", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorrelation_Name)
            Me.columnCorrelation_Tenor = New Global.System.Data.DataColumn("Correlation_Tenor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorrelation_Tenor)
            Me.columnCorrelation_Basis = New Global.System.Data.DataColumn("Correlation_Basis", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorrelation_Basis)
            Me.columnCorrelationValue = New Global.System.Data.DataColumn("CorrelationValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorrelationValue)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnEMMITENT_A.MaxLength = 50
            Me.columnEMMITENT_B.MaxLength = 50
            Me.columnISIN_A.MaxLength = 50
            Me.columnISIN_B.MaxLength = 50
            Me.columnTENOR_A.MaxLength = 50
            Me.columnTENOR_B.MaxLength = 50
            Me.columnCURVE_A.MaxLength = 50
            Me.columnCURVE_B.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_SingleAssetsCorrelationRow() As CreditSpreadRisk_SingleAssetsCorrelationRow
            Return CType(Me.NewRow,CreditSpreadRisk_SingleAssetsCorrelationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_SingleAssetsCorrelationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_SingleAssetsCorrelationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_SingleAssetsCorrelationRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SingleAssetsCorrelationRowChanged(Me, New CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SingleAssetsCorrelationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_SingleAssetsCorrelationRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SingleAssetsCorrelationRowChanging(Me, New CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SingleAssetsCorrelationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_SingleAssetsCorrelationRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SingleAssetsCorrelationRowDeleted(Me, New CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SingleAssetsCorrelationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_SingleAssetsCorrelationRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_SingleAssetsCorrelationRowDeleting(Me, New CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent(CType(e.Row,CreditSpreadRisk_SingleAssetsCorrelationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_SingleAssetsCorrelationRow(ByVal row As CreditSpreadRisk_SingleAssetsCorrelationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_SingleAssetsCorrelationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CreditSpreadRisk_TOTALSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CreditSpreadRisk_TOTALSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSegmentRisk_MidVec_Total As Global.System.Data.DataColumn
        
        Private columnPortfolioRisk As Global.System.Data.DataColumn
        
        Private columnConfidenceNiveau_1 As Global.System.Data.DataColumn
        
        Private columnZ_1 As Global.System.Data.DataColumn
        
        Private columnConfidenceNiveau_2 As Global.System.Data.DataColumn
        
        Private columnZ_2 As Global.System.Data.DataColumn
        
        Private columnMarketValueSum As Global.System.Data.DataColumn
        
        Private columnRelativePortofolioMarketValue1 As Global.System.Data.DataColumn
        
        Private columnRelativePortofolioMarketValue2 As Global.System.Data.DataColumn
        
        Private columnCreditSpreadRisk As Global.System.Data.DataColumn
        
        Private columnRiskDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CreditSpreadRisk_TOTALS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SegmentRisk_MidVec_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegmentRisk_MidVec_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PortfolioRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPortfolioRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ConfidenceNiveau_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfidenceNiveau_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Z_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ConfidenceNiveau_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfidenceNiveau_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Z_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MarketValueSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketValueSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RelativePortofolioMarketValue1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRelativePortofolioMarketValue1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RelativePortofolioMarketValue2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRelativePortofolioMarketValue2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreditSpreadRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditSpreadRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSpreadRisk_TOTALSRow
            Get
                Return CType(Me.Rows(index),CreditSpreadRisk_TOTALSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_TOTALSRowChanging As CreditSpreadRisk_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_TOTALSRowChanged As CreditSpreadRisk_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_TOTALSRowDeleting As CreditSpreadRisk_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event CreditSpreadRisk_TOTALSRowDeleted As CreditSpreadRisk_TOTALSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddCreditSpreadRisk_TOTALSRow(ByVal row As CreditSpreadRisk_TOTALSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddCreditSpreadRisk_TOTALSRow(ByVal SegmentRisk_MidVec_Total As Double, ByVal PortfolioRisk As Double, ByVal ConfidenceNiveau_1 As Double, ByVal Z_1 As Double, ByVal ConfidenceNiveau_2 As Double, ByVal Z_2 As Double, ByVal MarketValueSum As Double, ByVal RelativePortofolioMarketValue1 As Double, ByVal RelativePortofolioMarketValue2 As Double, ByVal CreditSpreadRisk As Double, ByVal RiskDate As Date) As CreditSpreadRisk_TOTALSRow
            Dim rowCreditSpreadRisk_TOTALSRow As CreditSpreadRisk_TOTALSRow = CType(Me.NewRow,CreditSpreadRisk_TOTALSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SegmentRisk_MidVec_Total, PortfolioRisk, ConfidenceNiveau_1, Z_1, ConfidenceNiveau_2, Z_2, MarketValueSum, RelativePortofolioMarketValue1, RelativePortofolioMarketValue2, CreditSpreadRisk, RiskDate}
            rowCreditSpreadRisk_TOTALSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCreditSpreadRisk_TOTALSRow)
            Return rowCreditSpreadRisk_TOTALSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As CreditSpreadRisk_TOTALSRow
            Return CType(Me.Rows.Find(New Object() {ID}),CreditSpreadRisk_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CreditSpreadRisk_TOTALSDataTable = CType(MyBase.Clone,CreditSpreadRisk_TOTALSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CreditSpreadRisk_TOTALSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSegmentRisk_MidVec_Total = MyBase.Columns("SegmentRisk_MidVec_Total")
            Me.columnPortfolioRisk = MyBase.Columns("PortfolioRisk")
            Me.columnConfidenceNiveau_1 = MyBase.Columns("ConfidenceNiveau_1")
            Me.columnZ_1 = MyBase.Columns("Z_1")
            Me.columnConfidenceNiveau_2 = MyBase.Columns("ConfidenceNiveau_2")
            Me.columnZ_2 = MyBase.Columns("Z_2")
            Me.columnMarketValueSum = MyBase.Columns("MarketValueSum")
            Me.columnRelativePortofolioMarketValue1 = MyBase.Columns("RelativePortofolioMarketValue1")
            Me.columnRelativePortofolioMarketValue2 = MyBase.Columns("RelativePortofolioMarketValue2")
            Me.columnCreditSpreadRisk = MyBase.Columns("CreditSpreadRisk")
            Me.columnRiskDate = MyBase.Columns("RiskDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSegmentRisk_MidVec_Total = New Global.System.Data.DataColumn("SegmentRisk_MidVec_Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegmentRisk_MidVec_Total)
            Me.columnPortfolioRisk = New Global.System.Data.DataColumn("PortfolioRisk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPortfolioRisk)
            Me.columnConfidenceNiveau_1 = New Global.System.Data.DataColumn("ConfidenceNiveau_1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfidenceNiveau_1)
            Me.columnZ_1 = New Global.System.Data.DataColumn("Z_1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ_1)
            Me.columnConfidenceNiveau_2 = New Global.System.Data.DataColumn("ConfidenceNiveau_2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfidenceNiveau_2)
            Me.columnZ_2 = New Global.System.Data.DataColumn("Z_2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ_2)
            Me.columnMarketValueSum = New Global.System.Data.DataColumn("MarketValueSum", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketValueSum)
            Me.columnRelativePortofolioMarketValue1 = New Global.System.Data.DataColumn("RelativePortofolioMarketValue1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRelativePortofolioMarketValue1)
            Me.columnRelativePortofolioMarketValue2 = New Global.System.Data.DataColumn("RelativePortofolioMarketValue2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRelativePortofolioMarketValue2)
            Me.columnCreditSpreadRisk = New Global.System.Data.DataColumn("CreditSpreadRisk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditSpreadRisk)
            Me.columnRiskDate = New Global.System.Data.DataColumn("RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewCreditSpreadRisk_TOTALSRow() As CreditSpreadRisk_TOTALSRow
            Return CType(Me.NewRow,CreditSpreadRisk_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CreditSpreadRisk_TOTALSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CreditSpreadRisk_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSpreadRisk_TOTALSRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_TOTALSRowChanged(Me, New CreditSpreadRisk_TOTALSRowChangeEvent(CType(e.Row,CreditSpreadRisk_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSpreadRisk_TOTALSRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_TOTALSRowChanging(Me, New CreditSpreadRisk_TOTALSRowChangeEvent(CType(e.Row,CreditSpreadRisk_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSpreadRisk_TOTALSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_TOTALSRowDeleted(Me, New CreditSpreadRisk_TOTALSRowChangeEvent(CType(e.Row,CreditSpreadRisk_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSpreadRisk_TOTALSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSpreadRisk_TOTALSRowDeleting(Me, New CreditSpreadRisk_TOTALSRowChangeEvent(CType(e.Row,CreditSpreadRisk_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveCreditSpreadRisk_TOTALSRow(ByVal row As CreditSpreadRisk_TOTALSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CreditSpreadRiskDataSet = New CreditSpreadRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CreditSpreadRisk_TOTALSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Parameter_CreditSpreadRisk_ReferencesRow
        Inherits Global.System.Data.DataRow
        
        Private tableParameter_CreditSpreadRisk_References As Parameter_CreditSpreadRisk_ReferencesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParameter_CreditSpreadRisk_References = CType(Me.Table,Parameter_CreditSpreadRisk_ReferencesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterNr() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNrColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterNr' in table 'Parameter_CreditSpreadRisk_Reference"& _ 
                            "s' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterNameGeneral() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNameGeneralColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterNameGeneral' in table 'Parameter_CreditSpreadRisk_"& _ 
                            "References' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNameGeneralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName1' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterName2() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName2' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterName3() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName3' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterName4() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName4' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterName5() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName5' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterValue1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterValue1' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterValue2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterValue2' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterValue3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterValue3' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterValue4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterValue4' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterValue5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterValue5' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterDate1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterDate1' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterDate2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterDate2' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterDate3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterDate3' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterDate4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterDate4' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterDate5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterDate5' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ParameterStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.ParameterStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterStatus' in table 'Parameter_CreditSpreadRisk_Refer"& _ 
                            "ences' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.ParameterStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.LastActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastAction' in table 'Parameter_CreditSpreadRisk_References"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.LastActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastUpdateUser() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateUser' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastUpdateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateDate' in table 'Parameter_CreditSpreadRisk_Refere"& _ 
                            "nces' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterNrNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterNrNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterNameGeneralNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterNameGeneralColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterNameGeneralNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterNameGeneralColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterName1Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterName1Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterName2Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterName2Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterName3Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterName3Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterName4Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterName4Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterName5Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterName5Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterValue1Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterValue1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterValue1Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterValue2Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterValue2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterValue2Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterValue3Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterValue3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterValue3Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterValue4Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterValue4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterValue4Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterValue5Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterValue5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterValue5Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterValue5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterDate1Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterDate1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterDate1Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterDate2Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterDate2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterDate2Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterDate3Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterDate3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterDate3Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterDate4Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterDate4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterDate4Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterDate5Null() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterDate5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterDate5Null()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterDate5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsParameterStatusNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.ParameterStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetParameterStatusNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.ParameterStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastActionNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.LastActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastActionNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.LastActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastUpdateUserNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.LastUpdateUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastUpdateUserNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_References.LastUpdateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastUpdateDateNull()
            Me(Me.tableParameter_CreditSpreadRisk_References.LastUpdateDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Parameter_CreditSpreadRisk_CorrelationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableParameter_CreditSpreadRisk_Correlations As Parameter_CreditSpreadRisk_CorrelationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParameter_CreditSpreadRisk_Correlations = CType(Me.Table,Parameter_CreditSpreadRisk_CorrelationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNrColumn),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr1() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr1Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr2() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr2Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr3() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr3Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr4() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr4Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr5() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr5Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr6() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr6Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr7() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr7Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr8() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr8Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr9() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr9Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr10() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr10Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr11() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr11Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr12() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr12Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr13() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr13Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr14() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr14Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr15() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr15Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SeqNr16() As Double
            Get
                Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr16Column),Double)
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.SeqNr16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastAction' in table 'Parameter_CreditSpreadRisk_Correlatio"& _ 
                            "ns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastUpdateUser() As String
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateUser' in table 'Parameter_CreditSpreadRisk_Correl"& _ 
                            "ations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LastUpdateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateDate' in table 'Parameter_CreditSpreadRisk_Correl"& _ 
                            "ations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastActionNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_Correlations.LastActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastActionNull()
            Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastUpdateUserNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastUpdateUserNull()
            Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLastUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLastUpdateDateNull()
            Me(Me.tableParameter_CreditSpreadRisk_Correlations.LastUpdateDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_BondPortfolioRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_BondPortfolio As CreditSpreadRisk_BondPortfolioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_BondPortfolio = CType(Me.Table,CreditSpreadRisk_BondPortfolioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.ISINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN' in table 'CreditSpreadRisk_BondPortfolio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.ISINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EmmitentNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.EmmitentNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmmitentNr' in table 'CreditSpreadRisk_BondPortfolio' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.EmmitentNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SecurityName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.SecurityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecurityName' in table 'CreditSpreadRisk_BondPortfolio' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.SecurityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Nominal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.NominalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nominal' in table 'CreditSpreadRisk_BondPortfolio' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.NominalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MarketValueEUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.MarketValueEURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketValueEUR' in table 'CreditSpreadRisk_BondPortfolio' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.MarketValueEURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ModifiedDuration() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.ModifiedDurationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDuration' in table 'CreditSpreadRisk_BondPortfolio'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.ModifiedDurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CS01() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.CS01Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CS01' in table 'CreditSpreadRisk_BondPortfolio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.CS01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Segment() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.SegmentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment' in table 'CreditSpreadRisk_BondPortfolio' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.SegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SpreadMovement() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.SpreadMovementColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpreadMovement' in table 'CreditSpreadRisk_BondPortfolio' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.SpreadMovementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Curve_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.Curve_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Curve_Type' in table 'CreditSpreadRisk_BondPortfolio' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.Curve_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SingleAssetRisk() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.SingleAssetRiskColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SingleAssetRisk' in table 'CreditSpreadRisk_BondPortfolio' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.SingleAssetRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_Tenor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.K_TenorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_Tenor' in table 'CreditSpreadRisk_BondPortfolio' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.K_TenorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MidVec() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.MidVecColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MidVec' in table 'CreditSpreadRisk_BondPortfolio' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.MidVecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_BondPortfolio.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_BondPortfolio' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_BondPortfolio.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISINNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.ISINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISINNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.ISINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEmmitentNrNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.EmmitentNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEmmitentNrNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.EmmitentNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSecurityNameNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.SecurityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSecurityNameNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.SecurityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNominalNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.NominalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNominalNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.NominalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMarketValueEURNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.MarketValueEURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMarketValueEURNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.MarketValueEURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsModifiedDurationNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.ModifiedDurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetModifiedDurationNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.ModifiedDurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCS01Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.CS01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCS01Null()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.CS01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.SegmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.SegmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSpreadMovementNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.SpreadMovementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSpreadMovementNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.SpreadMovementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCurve_TypeNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.Curve_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCurve_TypeNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.Curve_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSingleAssetRiskNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.SingleAssetRiskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSingleAssetRiskNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.SingleAssetRiskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_TenorNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.K_TenorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_TenorNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.K_TenorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMidVecNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.MidVecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMidVecNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.MidVecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_BondPortfolio.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_BondPortfolio.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_MatrixCorrelationCalculationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_MatrixCorrelationCalculations As CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_MatrixCorrelationCalculations = CType(Me.Table,CreditSpreadRisk_MatrixCorrelationCalculationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CalculationDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.CalculationDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalculationDescription' in table 'CreditSpreadRisk_MatrixCo"& _ 
                            "rrelationCalculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.CalculationDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RowNr() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RowNrColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowNr' in table 'CreditSpreadRisk_MatrixCorrelationCalculat"& _ 
                            "ions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RowNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ColNr() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ColNrColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColNr' in table 'CreditSpreadRisk_MatrixCorrelationCalculat"& _ 
                            "ions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ColNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName1' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName2' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName3' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName4' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName5() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName5' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName6() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName6' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName7() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName7' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName8() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName8' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName9() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName9' in table 'CreditSpreadRisk_MatrixCorrelationCal"& _ 
                            "culations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldName10() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldName10' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue1' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue2' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue3' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue4' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue5' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue6' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue7' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue8' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue9' in table 'CreditSpreadRisk_MatrixCorrelationCa"& _ 
                            "lculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FieldValue10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldValue10' in table 'CreditSpreadRisk_MatrixCorrelationC"& _ 
                            "alculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ResultFieldName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResultFieldName' in table 'CreditSpreadRisk_MatrixCorrelati"& _ 
                            "onCalculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ResultFieldValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResultFieldValue' in table 'CreditSpreadRisk_MatrixCorrelat"& _ 
                            "ionCalculations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_MatrixCorrelationCalcu"& _ 
                            "lations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCalculationDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.CalculationDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCalculationDescriptionNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.CalculationDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRowNrNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RowNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRowNrNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RowNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsColNrNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ColNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetColNrNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ColNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName1Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName1Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName2Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName2Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName3Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName3Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName4Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName4Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName5Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName5Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName6Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName6Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName7Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName7Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName8Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName8Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName9Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName9Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldName10Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldName10Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldName10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue1Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue1Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue2Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue2Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue3Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue3Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue4Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue4Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue5Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue5Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue6Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue6Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue7Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue7Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue8Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue8Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue9Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue9Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFieldValue10Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFieldValue10Null()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.FieldValue10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsResultFieldNameNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetResultFieldNameNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsResultFieldValueNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetResultFieldValueNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.ResultFieldValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_MatrixCorrelationCalculations.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_PortfolioRiskCalculationRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_PortfolioRiskCalculation As CreditSpreadRisk_PortfolioRiskCalculationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_PortfolioRiskCalculation = CType(Me.Table,CreditSpreadRisk_PortfolioRiskCalculationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Segment_A() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_AColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_A' in table 'CreditSpreadRisk_PortfolioRiskCalculat"& _ 
                            "ion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Segment_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_B' in table 'CreditSpreadRisk_PortfolioRiskCalculat"& _ 
                            "ion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SegmentCorrelation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.SegmentCorrelationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SegmentCorrelation' in table 'CreditSpreadRisk_PortfolioRis"& _ 
                            "kCalculation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.SegmentCorrelationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_PortfolioRiskCalculati"& _ 
                            "on' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegment_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegment_ANull()
            Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegment_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegment_BNull()
            Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.Segment_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentCorrelationNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.SegmentCorrelationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentCorrelationNull()
            Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.SegmentCorrelationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_PortfolioRiskCalculation.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_SegmentRiskCalculationRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_SegmentRiskCalculation As CreditSpreadRisk_SegmentRiskCalculationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_SegmentRiskCalculation = CType(Me.Table,CreditSpreadRisk_SegmentRiskCalculationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Segment() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment' in table 'CreditSpreadRisk_SegmentRiskCalculation'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AssetRisk_MidVec() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.AssetRisk_MidVecColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetRisk_MidVec' in table 'CreditSpreadRisk_SegmentRiskCal"& _ 
                            "culation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.AssetRisk_MidVecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SegmentRisk() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentRiskColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SegmentRisk' in table 'CreditSpreadRisk_SegmentRiskCalculat"& _ 
                            "ion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_SegmentRiskCalculation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentNull()
            Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAssetRisk_MidVecNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SegmentRiskCalculation.AssetRisk_MidVecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAssetRisk_MidVecNull()
            Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.AssetRisk_MidVecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentRiskNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentRiskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentRiskNull()
            Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.SegmentRiskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SegmentRiskCalculation.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_SegmentRiskCalculation.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_SegmentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_Segments As CreditSpreadRisk_SegmentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_Segments = CType(Me.Table,CreditSpreadRisk_SegmentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_Segments.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Segment() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_Segments.SegmentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment' in table 'CreditSpreadRisk_Segments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.SegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AssetRisk_MidVec() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_Segments.AssetRisk_MidVecColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetRisk_MidVec' in table 'CreditSpreadRisk_Segments' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.AssetRisk_MidVecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SegmentRisk() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_Segments.SegmentRiskColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SegmentRisk' in table 'CreditSpreadRisk_Segments' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.SegmentRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SegmentRisk_MidVec() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_Segments.SegmentRisk_MidVecColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SegmentRisk_MidVec' in table 'CreditSpreadRisk_Segments' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.SegmentRisk_MidVecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_Segments.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_Segments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_Segments.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_Segments.SegmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentNull()
            Me(Me.tableCreditSpreadRisk_Segments.SegmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAssetRisk_MidVecNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_Segments.AssetRisk_MidVecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAssetRisk_MidVecNull()
            Me(Me.tableCreditSpreadRisk_Segments.AssetRisk_MidVecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentRiskNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_Segments.SegmentRiskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentRiskNull()
            Me(Me.tableCreditSpreadRisk_Segments.SegmentRiskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentRisk_MidVecNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_Segments.SegmentRisk_MidVecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentRisk_MidVecNull()
            Me(Me.tableCreditSpreadRisk_Segments.SegmentRisk_MidVecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_Segments.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_Segments.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_SingleAssetsCorrelationRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_SingleAssetsCorrelation As CreditSpreadRisk_SingleAssetsCorrelationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_SingleAssetsCorrelation = CType(Me.Table,CreditSpreadRisk_SingleAssetsCorrelationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EMMITENT_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMMITENT_A' in table 'CreditSpreadRisk_SingleAssetsCorrelat"& _ 
                            "ion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EMMITENT_B() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMMITENT_B' in table 'CreditSpreadRisk_SingleAssetsCorrelat"& _ 
                            "ion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID_A() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_AColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_A' in table 'CreditSpreadRisk_SingleAssetsCorrelation' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID_B() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_BColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_B' in table 'CreditSpreadRisk_SingleAssetsCorrelation' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_A' in table 'CreditSpreadRisk_SingleAssetsCorrelation'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISIN_B() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISIN_B' in table 'CreditSpreadRisk_SingleAssetsCorrelation'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TENOR_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TENOR_A' in table 'CreditSpreadRisk_SingleAssetsCorrelation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TENOR_B() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TENOR_B' in table 'CreditSpreadRisk_SingleAssetsCorrelation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURVE_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURVE_A' in table 'CreditSpreadRisk_SingleAssetsCorrelation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURVE_B() As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURVE_B' in table 'CreditSpreadRisk_SingleAssetsCorrelation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SEGMENT_A() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_AColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEGMENT_A' in table 'CreditSpreadRisk_SingleAssetsCorrelati"& _ 
                            "on' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SEGMENT_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEGMENT_B' in table 'CreditSpreadRisk_SingleAssetsCorrelati"& _ 
                            "on' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Correlation_Name() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_NameColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Correlation_Name' in table 'CreditSpreadRisk_SingleAssetsCo"& _ 
                            "rrelation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Correlation_Tenor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_TenorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Correlation_Tenor' in table 'CreditSpreadRisk_SingleAssetsC"& _ 
                            "orrelation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_TenorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Correlation_Basis() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_BasisColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Correlation_Basis' in table 'CreditSpreadRisk_SingleAssetsC"& _ 
                            "orrelation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_BasisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CorrelationValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CorrelationValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CorrelationValue' in table 'CreditSpreadRisk_SingleAssetsCo"& _ 
                            "rrelation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CorrelationValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_SingleAssetsCorrelatio"& _ 
                            "n' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEMMITENT_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEMMITENT_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEMMITENT_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEMMITENT_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.EMMITENT_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsID_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetID_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsID_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetID_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ID_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISIN_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISIN_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.ISIN_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTENOR_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTENOR_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTENOR_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTENOR_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.TENOR_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURVE_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURVE_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURVE_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURVE_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CURVE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSEGMENT_ANull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSEGMENT_ANull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSEGMENT_BNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSEGMENT_BNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.SEGMENT_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCorrelation_NameNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCorrelation_NameNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCorrelation_TenorNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_TenorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCorrelation_TenorNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_TenorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCorrelation_BasisNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_BasisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCorrelation_BasisNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.Correlation_BasisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCorrelationValueNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CorrelationValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCorrelationValueNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.CorrelationValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_SingleAssetsCorrelation.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CreditSpreadRisk_TOTALSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCreditSpreadRisk_TOTALS As CreditSpreadRisk_TOTALSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSpreadRisk_TOTALS = CType(Me.Table,CreditSpreadRisk_TOTALSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SegmentRisk_MidVec_Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.SegmentRisk_MidVec_TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SegmentRisk_MidVec_Total' in table 'CreditSpreadRisk_TOTALS"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.SegmentRisk_MidVec_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PortfolioRisk() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.PortfolioRiskColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PortfolioRisk' in table 'CreditSpreadRisk_TOTALS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.PortfolioRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ConfidenceNiveau_1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfidenceNiveau_1' in table 'CreditSpreadRisk_TOTALS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Z_1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.Z_1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z_1' in table 'CreditSpreadRisk_TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.Z_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ConfidenceNiveau_2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfidenceNiveau_2' in table 'CreditSpreadRisk_TOTALS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Z_2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.Z_2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z_2' in table 'CreditSpreadRisk_TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.Z_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MarketValueSum() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.MarketValueSumColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketValueSum' in table 'CreditSpreadRisk_TOTALS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.MarketValueSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RelativePortofolioMarketValue1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RelativePortofolioMarketValue1' in table 'CreditSpreadRisk_"& _ 
                            "TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RelativePortofolioMarketValue2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RelativePortofolioMarketValue2' in table 'CreditSpreadRisk_"& _ 
                            "TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CreditSpreadRisk() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.CreditSpreadRiskColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditSpreadRisk' in table 'CreditSpreadRisk_TOTALS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.CreditSpreadRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditSpreadRisk_TOTALS.RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RiskDate' in table 'CreditSpreadRisk_TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSpreadRisk_TOTALS.RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSegmentRisk_MidVec_TotalNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.SegmentRisk_MidVec_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSegmentRisk_MidVec_TotalNull()
            Me(Me.tableCreditSpreadRisk_TOTALS.SegmentRisk_MidVec_TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPortfolioRiskNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.PortfolioRiskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPortfolioRiskNull()
            Me(Me.tableCreditSpreadRisk_TOTALS.PortfolioRiskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsConfidenceNiveau_1Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetConfidenceNiveau_1Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsZ_1Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.Z_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetZ_1Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.Z_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsConfidenceNiveau_2Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetConfidenceNiveau_2Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.ConfidenceNiveau_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsZ_2Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.Z_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetZ_2Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.Z_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMarketValueSumNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.MarketValueSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMarketValueSumNull()
            Me(Me.tableCreditSpreadRisk_TOTALS.MarketValueSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRelativePortofolioMarketValue1Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRelativePortofolioMarketValue1Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRelativePortofolioMarketValue2Null() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRelativePortofolioMarketValue2Null()
            Me(Me.tableCreditSpreadRisk_TOTALS.RelativePortofolioMarketValue2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCreditSpreadRiskNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.CreditSpreadRiskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCreditSpreadRiskNull()
            Me(Me.tableCreditSpreadRisk_TOTALS.CreditSpreadRiskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableCreditSpreadRisk_TOTALS.RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRiskDateNull()
            Me(Me.tableCreditSpreadRisk_TOTALS.RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class Parameter_CreditSpreadRisk_ReferencesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Parameter_CreditSpreadRisk_ReferencesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As Parameter_CreditSpreadRisk_ReferencesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As Parameter_CreditSpreadRisk_ReferencesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class Parameter_CreditSpreadRisk_CorrelationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Parameter_CreditSpreadRisk_CorrelationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As Parameter_CreditSpreadRisk_CorrelationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As Parameter_CreditSpreadRisk_CorrelationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_BondPortfolioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_BondPortfolioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_BondPortfolioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_BondPortfolioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_MatrixCorrelationCalculationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_MatrixCorrelationCalculationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_MatrixCorrelationCalculationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_MatrixCorrelationCalculationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_PortfolioRiskCalculationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_PortfolioRiskCalculationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_PortfolioRiskCalculationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_PortfolioRiskCalculationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_SegmentRiskCalculationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_SegmentRiskCalculationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_SegmentRiskCalculationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_SegmentRiskCalculationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_SegmentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_SegmentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_SegmentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_SegmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_SingleAssetsCorrelationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_SingleAssetsCorrelationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_SingleAssetsCorrelationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_SingleAssetsCorrelationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class CreditSpreadRisk_TOTALSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CreditSpreadRisk_TOTALSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As CreditSpreadRisk_TOTALSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As CreditSpreadRisk_TOTALSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CreditSpreadRiskDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Parameter_CreditSpreadRisk_ReferencesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parameter_CreditSpreadRisk_References"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ParameterNr", "ParameterNr")
            tableMapping.ColumnMappings.Add("ParameterNameGeneral", "ParameterNameGeneral")
            tableMapping.ColumnMappings.Add("ParameterName1", "ParameterName1")
            tableMapping.ColumnMappings.Add("ParameterName2", "ParameterName2")
            tableMapping.ColumnMappings.Add("ParameterName3", "ParameterName3")
            tableMapping.ColumnMappings.Add("ParameterName4", "ParameterName4")
            tableMapping.ColumnMappings.Add("ParameterName5", "ParameterName5")
            tableMapping.ColumnMappings.Add("ParameterValue1", "ParameterValue1")
            tableMapping.ColumnMappings.Add("ParameterValue2", "ParameterValue2")
            tableMapping.ColumnMappings.Add("ParameterValue3", "ParameterValue3")
            tableMapping.ColumnMappings.Add("ParameterValue4", "ParameterValue4")
            tableMapping.ColumnMappings.Add("ParameterValue5", "ParameterValue5")
            tableMapping.ColumnMappings.Add("ParameterDate1", "ParameterDate1")
            tableMapping.ColumnMappings.Add("ParameterDate2", "ParameterDate2")
            tableMapping.ColumnMappings.Add("ParameterDate3", "ParameterDate3")
            tableMapping.ColumnMappings.Add("ParameterDate4", "ParameterDate4")
            tableMapping.ColumnMappings.Add("ParameterDate5", "ParameterDate5")
            tableMapping.ColumnMappings.Add("ParameterStatus", "ParameterStatus")
            tableMapping.ColumnMappings.Add("LastAction", "LastAction")
            tableMapping.ColumnMappings.Add("LastUpdateUser", "LastUpdateUser")
            tableMapping.ColumnMappings.Add("LastUpdateDate", "LastUpdateDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Parameter_CreditSpreadRisk_References] WHERE (([ID] = @Original_ID))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Parameter_CreditSpreadRisk_References] ([ParameterNr], [ParameterNam"& _ 
                "eGeneral], [ParameterName1], [ParameterName2], [ParameterName3], [ParameterName4"& _ 
                "], [ParameterName5], [ParameterValue1], [ParameterValue2], [ParameterValue3], [P"& _ 
                "arameterValue4], [ParameterValue5], [ParameterDate1], [ParameterDate2], [Paramet"& _ 
                "erDate3], [ParameterDate4], [ParameterDate5], [ParameterStatus], [LastAction], ["& _ 
                "LastUpdateUser], [LastUpdateDate]) VALUES (@ParameterNr, @ParameterNameGeneral, "& _ 
                "@ParameterName1, @ParameterName2, @ParameterName3, @ParameterName4, @ParameterNa"& _ 
                "me5, @ParameterValue1, @ParameterValue2, @ParameterValue3, @ParameterValue4, @Pa"& _ 
                "rameterValue5, @ParameterDate1, @ParameterDate2, @ParameterDate3, @ParameterDate"& _ 
                "4, @ParameterDate5, @ParameterStatus, @LastAction, @LastUpdateUser, @LastUpdateD"& _ 
                "ate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterNameGeneral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterNameGeneral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastAction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastAction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateUser", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Parameter_CreditSpreadRisk_References] SET [ParameterNr] = @ParameterNr, "& _ 
                "[ParameterNameGeneral] = @ParameterNameGeneral, [ParameterName1] = @ParameterNam"& _ 
                "e1, [ParameterName2] = @ParameterName2, [ParameterName3] = @ParameterName3, [Par"& _ 
                "ameterName4] = @ParameterName4, [ParameterName5] = @ParameterName5, [ParameterVa"& _ 
                "lue1] = @ParameterValue1, [ParameterValue2] = @ParameterValue2, [ParameterValue3"& _ 
                "] = @ParameterValue3, [ParameterValue4] = @ParameterValue4, [ParameterValue5] = "& _ 
                "@ParameterValue5, [ParameterDate1] = @ParameterDate1, [ParameterDate2] = @Parame"& _ 
                "terDate2, [ParameterDate3] = @ParameterDate3, [ParameterDate4] = @ParameterDate4"& _ 
                ", [ParameterDate5] = @ParameterDate5, [ParameterStatus] = @ParameterStatus, [Las"& _ 
                "tAction] = @LastAction, [LastUpdateUser] = @LastUpdateUser, [LastUpdateDate] = @"& _ 
                "LastUpdateDate WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterNameGeneral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterNameGeneral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterName5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterName5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterValue5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterValue5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterDate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParameterStatus", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastAction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastAction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateUser", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ParameterNr, ParameterNameGeneral, ParameterName1, ParameterNam"& _ 
                "e2, ParameterName3, ParameterName4, ParameterName5, ParameterValue1, ParameterVa"& _ 
                "lue2, ParameterValue3, ParameterValue4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ParameterValu"& _ 
                "e5, ParameterDate1, ParameterDate2, ParameterDate3, ParameterDate4, ParameterDat"& _ 
                "e5, ParameterStatus, LastAction, LastUpdateUser, LastUpdateDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " Parameter_CreditSpreadRisk_References"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, ParameterNr, ParameterNameGeneral, ParameterName1, ParameterNam"& _ 
                "e2, ParameterName3, ParameterName4, ParameterName5, ParameterValue1, ParameterVa"& _ 
                "lue2, ParameterValue3, ParameterValue4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ParameterValu"& _ 
                "e5, ParameterDate1, ParameterDate2, ParameterDate3, ParameterDate4, ParameterDat"& _ 
                "e5, ParameterStatus, LastAction, LastUpdateUser, LastUpdateDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " Parameter_CreditSpreadRisk_References"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ParameterNameGeneral = @Pa"& _ 
                "ram1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ParameterNr"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ParameterNameGeneral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable = New CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByGeneralParameter(ByVal dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByGeneralParameter(ByVal Param1 As String) As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable = New CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_ReferencesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Parameter_CreditSpreadRisk_References")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ParameterNr As Global.System.Nullable(Of Integer),  _
                    ByVal ParameterNameGeneral As String,  _
                    ByVal ParameterName1 As String,  _
                    ByVal ParameterName2 As String,  _
                    ByVal ParameterName3 As String,  _
                    ByVal ParameterName4 As String,  _
                    ByVal ParameterName5 As String,  _
                    ByVal ParameterValue1 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue2 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue3 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue4 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue5 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterDate1 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate2 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate3 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate4 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate5 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterStatus As String,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Global.System.Nullable(Of Date)) As Integer
            If (ParameterNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ParameterNr.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ParameterNameGeneral Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ParameterNameGeneral,String)
            End If
            If (ParameterName1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ParameterName1,String)
            End If
            If (ParameterName2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ParameterName2,String)
            End If
            If (ParameterName3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ParameterName3,String)
            End If
            If (ParameterName4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ParameterName4,String)
            End If
            If (ParameterName5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ParameterName5,String)
            End If
            If (ParameterValue1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ParameterValue1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ParameterValue2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ParameterValue3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ParameterValue4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ParameterValue5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ParameterDate1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ParameterDate2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ParameterDate3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ParameterDate4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ParameterDate5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (ParameterStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ParameterStatus,String)
            End If
            If (LastAction Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(LastAction,String)
            End If
            If (LastUpdateUser Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LastUpdateUser,String)
            End If
            If (LastUpdateDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LastUpdateDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ParameterNr As Global.System.Nullable(Of Integer),  _
                    ByVal ParameterNameGeneral As String,  _
                    ByVal ParameterName1 As String,  _
                    ByVal ParameterName2 As String,  _
                    ByVal ParameterName3 As String,  _
                    ByVal ParameterName4 As String,  _
                    ByVal ParameterName5 As String,  _
                    ByVal ParameterValue1 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue2 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue3 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue4 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterValue5 As Global.System.Nullable(Of Double),  _
                    ByVal ParameterDate1 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate2 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate3 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate4 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterDate5 As Global.System.Nullable(Of Date),  _
                    ByVal ParameterStatus As String,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer) As Integer
            If (ParameterNr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ParameterNr.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ParameterNameGeneral Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ParameterNameGeneral,String)
            End If
            If (ParameterName1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ParameterName1,String)
            End If
            If (ParameterName2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ParameterName2,String)
            End If
            If (ParameterName3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ParameterName3,String)
            End If
            If (ParameterName4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ParameterName4,String)
            End If
            If (ParameterName5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ParameterName5,String)
            End If
            If (ParameterValue1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ParameterValue1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ParameterValue2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ParameterValue3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ParameterValue4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ParameterValue5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ParameterValue5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ParameterDate1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ParameterDate2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ParameterDate3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ParameterDate4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ParameterDate5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ParameterDate5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (ParameterStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ParameterStatus,String)
            End If
            If (LastAction Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(LastAction,String)
            End If
            If (LastUpdateUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LastUpdateUser,String)
            End If
            If (LastUpdateDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LastUpdateDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Parameter_CreditSpreadRisk_CorrelationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parameter_CreditSpreadRisk_Correlations"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SeqNr", "SeqNr")
            tableMapping.ColumnMappings.Add("SeqNr1", "SeqNr1")
            tableMapping.ColumnMappings.Add("SeqNr2", "SeqNr2")
            tableMapping.ColumnMappings.Add("SeqNr3", "SeqNr3")
            tableMapping.ColumnMappings.Add("SeqNr4", "SeqNr4")
            tableMapping.ColumnMappings.Add("SeqNr5", "SeqNr5")
            tableMapping.ColumnMappings.Add("SeqNr6", "SeqNr6")
            tableMapping.ColumnMappings.Add("SeqNr7", "SeqNr7")
            tableMapping.ColumnMappings.Add("SeqNr8", "SeqNr8")
            tableMapping.ColumnMappings.Add("SeqNr9", "SeqNr9")
            tableMapping.ColumnMappings.Add("SeqNr10", "SeqNr10")
            tableMapping.ColumnMappings.Add("SeqNr11", "SeqNr11")
            tableMapping.ColumnMappings.Add("SeqNr12", "SeqNr12")
            tableMapping.ColumnMappings.Add("SeqNr13", "SeqNr13")
            tableMapping.ColumnMappings.Add("SeqNr14", "SeqNr14")
            tableMapping.ColumnMappings.Add("SeqNr15", "SeqNr15")
            tableMapping.ColumnMappings.Add("SeqNr16", "SeqNr16")
            tableMapping.ColumnMappings.Add("LastAction", "LastAction")
            tableMapping.ColumnMappings.Add("LastUpdateUser", "LastUpdateUser")
            tableMapping.ColumnMappings.Add("LastUpdateDate", "LastUpdateDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Parameter_CreditSpreadRisk_Correlations] WHERE (([ID] = @Original_ID"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Parameter_CreditSpreadRisk_Correlations] ([SeqNr], [SeqNr1], [SeqNr2"& _ 
                "], [SeqNr3], [SeqNr4], [SeqNr5], [SeqNr6], [SeqNr7], [SeqNr8], [SeqNr9], [SeqNr1"& _ 
                "0], [SeqNr11], [SeqNr12], [SeqNr13], [SeqNr14], [SeqNr15], [SeqNr16], [LastActio"& _ 
                "n], [LastUpdateUser], [LastUpdateDate]) VALUES (@SeqNr, @SeqNr1, @SeqNr2, @SeqNr"& _ 
                "3, @SeqNr4, @SeqNr5, @SeqNr6, @SeqNr7, @SeqNr8, @SeqNr9, @SeqNr10, @SeqNr11, @Se"& _ 
                "qNr12, @SeqNr13, @SeqNr14, @SeqNr15, @SeqNr16, @LastAction, @LastUpdateUser, @La"& _ 
                "stUpdateDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr14", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr15", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastAction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastAction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateUser", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Parameter_CreditSpreadRisk_Correlations] SET [SeqNr] = @SeqNr, [SeqNr1] ="& _ 
                " @SeqNr1, [SeqNr2] = @SeqNr2, [SeqNr3] = @SeqNr3, [SeqNr4] = @SeqNr4, [SeqNr5] ="& _ 
                " @SeqNr5, [SeqNr6] = @SeqNr6, [SeqNr7] = @SeqNr7, [SeqNr8] = @SeqNr8, [SeqNr9] ="& _ 
                " @SeqNr9, [SeqNr10] = @SeqNr10, [SeqNr11] = @SeqNr11, [SeqNr12] = @SeqNr12, [Seq"& _ 
                "Nr13] = @SeqNr13, [SeqNr14] = @SeqNr14, [SeqNr15] = @SeqNr15, [SeqNr16] = @SeqNr"& _ 
                "16, [LastAction] = @LastAction, [LastUpdateUser] = @LastUpdateUser, [LastUpdateD"& _ 
                "ate] = @LastUpdateDate WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr14", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr15", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNr16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNr16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastAction", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastAction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateUser", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, SeqNr, SeqNr1, SeqNr2, SeqNr3, SeqNr4, SeqNr5, SeqNr6, SeqNr7, "& _ 
                "SeqNr8, SeqNr9, SeqNr10, SeqNr11, SeqNr12, SeqNr13, SeqNr14, SeqNr15, SeqNr16, L"& _ 
                "astAction, LastUpdateUser, LastUpdateDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Parameter_CreditSprea"& _ 
                "dRisk_Correlations"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_CorrelationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_CorrelationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_CorrelationsDataTable = New CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_CorrelationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.Parameter_CreditSpreadRisk_CorrelationsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Parameter_CreditSpreadRisk_Correlations")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SeqNr As Double,  _
                    ByVal SeqNr1 As Double,  _
                    ByVal SeqNr2 As Double,  _
                    ByVal SeqNr3 As Double,  _
                    ByVal SeqNr4 As Double,  _
                    ByVal SeqNr5 As Double,  _
                    ByVal SeqNr6 As Double,  _
                    ByVal SeqNr7 As Double,  _
                    ByVal SeqNr8 As Double,  _
                    ByVal SeqNr9 As Double,  _
                    ByVal SeqNr10 As Double,  _
                    ByVal SeqNr11 As Double,  _
                    ByVal SeqNr12 As Double,  _
                    ByVal SeqNr13 As Double,  _
                    ByVal SeqNr14 As Double,  _
                    ByVal SeqNr15 As Double,  _
                    ByVal SeqNr16 As Double,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SeqNr,Double)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SeqNr1,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SeqNr2,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(SeqNr3,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SeqNr4,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(SeqNr5,Double)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(SeqNr6,Double)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SeqNr7,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(SeqNr8,Double)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(SeqNr9,Double)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(SeqNr10,Double)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(SeqNr11,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(SeqNr12,Double)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(SeqNr13,Double)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(SeqNr14,Double)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SeqNr15,Double)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(SeqNr16,Double)
            If (LastAction Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(LastAction,String)
            End If
            If (LastUpdateUser Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(LastUpdateUser,String)
            End If
            If (LastUpdateDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LastUpdateDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SeqNr As Double,  _
                    ByVal SeqNr1 As Double,  _
                    ByVal SeqNr2 As Double,  _
                    ByVal SeqNr3 As Double,  _
                    ByVal SeqNr4 As Double,  _
                    ByVal SeqNr5 As Double,  _
                    ByVal SeqNr6 As Double,  _
                    ByVal SeqNr7 As Double,  _
                    ByVal SeqNr8 As Double,  _
                    ByVal SeqNr9 As Double,  _
                    ByVal SeqNr10 As Double,  _
                    ByVal SeqNr11 As Double,  _
                    ByVal SeqNr12 As Double,  _
                    ByVal SeqNr13 As Double,  _
                    ByVal SeqNr14 As Double,  _
                    ByVal SeqNr15 As Double,  _
                    ByVal SeqNr16 As Double,  _
                    ByVal LastAction As String,  _
                    ByVal LastUpdateUser As String,  _
                    ByVal LastUpdateDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SeqNr,Double)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SeqNr1,Double)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SeqNr2,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SeqNr3,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SeqNr4,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SeqNr5,Double)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SeqNr6,Double)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SeqNr7,Double)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SeqNr8,Double)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SeqNr9,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SeqNr10,Double)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SeqNr11,Double)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SeqNr12,Double)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SeqNr13,Double)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SeqNr14,Double)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SeqNr15,Double)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SeqNr16,Double)
            If (LastAction Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(LastAction,String)
            End If
            If (LastUpdateUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(LastUpdateUser,String)
            End If
            If (LastUpdateDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LastUpdateDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_BondPortfolioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_BondPortfolio"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ISIN", "ISIN")
            tableMapping.ColumnMappings.Add("EmmitentNr", "EmmitentNr")
            tableMapping.ColumnMappings.Add("SecurityName", "SecurityName")
            tableMapping.ColumnMappings.Add("Nominal", "Nominal")
            tableMapping.ColumnMappings.Add("MarketValueEUR", "MarketValueEUR")
            tableMapping.ColumnMappings.Add("ModifiedDuration", "ModifiedDuration")
            tableMapping.ColumnMappings.Add("CS01", "CS01")
            tableMapping.ColumnMappings.Add("Segment", "Segment")
            tableMapping.ColumnMappings.Add("SpreadMovement", "SpreadMovement")
            tableMapping.ColumnMappings.Add("Curve_Type", "Curve_Type")
            tableMapping.ColumnMappings.Add("SingleAssetRisk", "SingleAssetRisk")
            tableMapping.ColumnMappings.Add("K_Tenor", "K_Tenor")
            tableMapping.ColumnMappings.Add("MidVec", "MidVec")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_BondPortfolio] ([ISIN], [EmmitentNr], [SecurityName"& _ 
                "], [Nominal], [MarketValueEUR], [ModifiedDuration], [CS01], [Segment], [SpreadMo"& _ 
                "vement], [Curve_Type], [SingleAssetRisk], [K_Tenor], [MidVec], [RiskDate]) VALUE"& _ 
                "S (@ISIN, @EmmitentNr, @SecurityName, @Nominal, @MarketValueEUR, @ModifiedDurati"& _ 
                "on, @CS01, @Segment, @SpreadMovement, @Curve_Type, @SingleAssetRisk, @K_Tenor, @"& _ 
                "MidVec, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmmitentNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmmitentNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecurityName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecurityName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nominal", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nominal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarketValueEUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueEUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDuration", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDuration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CS01", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CS01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segment", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Segment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpreadMovement", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpreadMovement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Curve_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curve_Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SingleAssetRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SingleAssetRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_Tenor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_Tenor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MidVec", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MidVec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, ISIN, EmmitentNr, SecurityName, Nominal, MarketValueEUR, Modifi"& _ 
                "edDuration, CS01, Segment, SpreadMovement, Curve_Type, SingleAssetRisk, K_Tenor,"& _ 
                " MidVec, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadRisk_BondPortfolio"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Risk"& _ 
                "Date DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, ISIN, EmmitentNr, SecurityName, Nominal, MarketValueEUR, Modifi"& _ 
                "edDuration, CS01, Segment, SpreadMovement, Curve_Type, SingleAssetRisk, K_Tenor,"& _ 
                " MidVec, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadRisk_BondPortfolio"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "(RiskDate = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_BondPortfolioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_BondPortfolio")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ISIN As String, ByVal EmmitentNr As String, ByVal SecurityName As String, ByVal Nominal As Global.System.Nullable(Of Double), ByVal MarketValueEUR As Global.System.Nullable(Of Double), ByVal ModifiedDuration As Global.System.Nullable(Of Double), ByVal CS01 As Global.System.Nullable(Of Double), ByVal Segment As Global.System.Nullable(Of Double), ByVal SpreadMovement As Global.System.Nullable(Of Double), ByVal Curve_Type As String, ByVal SingleAssetRisk As Global.System.Nullable(Of Double), ByVal K_Tenor As String, ByVal MidVec As Global.System.Nullable(Of Double), ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (ISIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ISIN,String)
            End If
            If (EmmitentNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EmmitentNr,String)
            End If
            If (SecurityName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SecurityName,String)
            End If
            If (Nominal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Nominal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MarketValueEUR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MarketValueEUR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDuration.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModifiedDuration.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CS01.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CS01.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Segment.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Segment.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SpreadMovement.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SpreadMovement.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Curve_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Curve_Type,String)
            End If
            If (SingleAssetRisk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SingleAssetRisk.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (K_Tenor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(K_Tenor,String)
            End If
            If (MidVec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MidVec.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_MatrixCorrelationCalculationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_MatrixCorrelationCalculations"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CalculationDescription", "CalculationDescription")
            tableMapping.ColumnMappings.Add("RowNr", "RowNr")
            tableMapping.ColumnMappings.Add("ColNr", "ColNr")
            tableMapping.ColumnMappings.Add("FieldName1", "FieldName1")
            tableMapping.ColumnMappings.Add("FieldName2", "FieldName2")
            tableMapping.ColumnMappings.Add("FieldName3", "FieldName3")
            tableMapping.ColumnMappings.Add("FieldName4", "FieldName4")
            tableMapping.ColumnMappings.Add("FieldName5", "FieldName5")
            tableMapping.ColumnMappings.Add("FieldName6", "FieldName6")
            tableMapping.ColumnMappings.Add("FieldName7", "FieldName7")
            tableMapping.ColumnMappings.Add("FieldName8", "FieldName8")
            tableMapping.ColumnMappings.Add("FieldName9", "FieldName9")
            tableMapping.ColumnMappings.Add("FieldName10", "FieldName10")
            tableMapping.ColumnMappings.Add("FieldValue1", "FieldValue1")
            tableMapping.ColumnMappings.Add("FieldValue2", "FieldValue2")
            tableMapping.ColumnMappings.Add("FieldValue3", "FieldValue3")
            tableMapping.ColumnMappings.Add("FieldValue4", "FieldValue4")
            tableMapping.ColumnMappings.Add("FieldValue5", "FieldValue5")
            tableMapping.ColumnMappings.Add("FieldValue6", "FieldValue6")
            tableMapping.ColumnMappings.Add("FieldValue7", "FieldValue7")
            tableMapping.ColumnMappings.Add("FieldValue8", "FieldValue8")
            tableMapping.ColumnMappings.Add("FieldValue9", "FieldValue9")
            tableMapping.ColumnMappings.Add("FieldValue10", "FieldValue10")
            tableMapping.ColumnMappings.Add("ResultFieldName", "ResultFieldName")
            tableMapping.ColumnMappings.Add("ResultFieldValue", "ResultFieldValue")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_MatrixCorrelationCalculations] ([CalculationDescrip"& _ 
                "tion], [RowNr], [ColNr], [FieldName1], [FieldName2], [FieldName3], [FieldName4],"& _ 
                " [FieldName5], [FieldName6], [FieldName7], [FieldName8], [FieldName9], [FieldNam"& _ 
                "e10], [FieldValue1], [FieldValue2], [FieldValue3], [FieldValue4], [FieldValue5],"& _ 
                " [FieldValue6], [FieldValue7], [FieldValue8], [FieldValue9], [FieldValue10], [Re"& _ 
                "sultFieldName], [ResultFieldValue], [RiskDate]) VALUES (@CalculationDescription,"& _ 
                " @RowNr, @ColNr, @FieldName1, @FieldName2, @FieldName3, @FieldName4, @FieldName5"& _ 
                ", @FieldName6, @FieldName7, @FieldName8, @FieldName9, @FieldName10, @FieldValue1"& _ 
                ", @FieldValue2, @FieldValue3, @FieldValue4, @FieldValue5, @FieldValue6, @FieldVa"& _ 
                "lue7, @FieldValue8, @FieldValue9, @FieldValue10, @ResultFieldName, @ResultFieldV"& _ 
                "alue, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalculationDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RowNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RowNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ColNr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ColNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName9", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldValue10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldValue10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResultFieldName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResultFieldName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResultFieldValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResultFieldValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, CalculationDescription, RowNr, ColNr, FieldName1, FieldName2, F"& _ 
                "ieldName3, FieldName4, FieldName5, FieldName6, FieldName7, FieldName8, FieldName"& _ 
                "9, FieldName10, FieldValue1, FieldValue2, FieldValue3, FieldValue4,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "               FieldValue5, FieldValue6, FieldValue7, FieldValue8, FieldValue9, "& _ 
                "FieldValue10, ResultFieldName, ResultFieldValue, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Credi"& _ 
                "tSpreadRisk_MatrixCorrelationCalculations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY RiskDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, CalculationDescription, RowNr, ColNr, FieldName1, FieldName2, F"& _ 
                "ieldName3, FieldName4, FieldName5, FieldName6, FieldName7, FieldName8, FieldName"& _ 
                "9, FieldName10, FieldValue1, FieldValue2, FieldValue3, FieldValue4,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "               FieldValue5, FieldValue6, FieldValue7, FieldValue8, FieldValue9, "& _ 
                "FieldValue10, ResultFieldName, ResultFieldValue, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Credi"& _ 
                "tSpreadRisk_MatrixCorrelationCalculations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        ID, CalculationDescription, RowNr, ColNr, FieldName1, FieldName2, F"& _ 
                "ieldName3, FieldName4, FieldName5, FieldName6, FieldName7, FieldName8, FieldName"& _ 
                "9, FieldName10, FieldValue1, FieldValue2, FieldValue3, FieldValue4,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "               FieldValue5, FieldValue6, FieldValue7, FieldValue8, FieldValue9, "& _ 
                "FieldValue10, ResultFieldName, ResultFieldValue, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Credi"& _ 
                "tSpreadRisk_MatrixCorrelationCalculations"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Param1) AND"& _ 
                " (CalculationDescription = @Param2)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDateCalculationDescription(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable, ByVal Param1 As Global.System.Nullable(Of Date), ByVal Param2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Param2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Param2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDateCalculationDescription(ByVal Param1 As Global.System.Nullable(Of Date), ByVal Param2 As String) As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Param2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Param2,String)
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_MatrixCorrelationCalculationsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_MatrixCorrelationCalculations")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CalculationDescription As String,  _
                    ByVal RowNr As Global.System.Nullable(Of Integer),  _
                    ByVal ColNr As Global.System.Nullable(Of Integer),  _
                    ByVal FieldName1 As String,  _
                    ByVal FieldName2 As String,  _
                    ByVal FieldName3 As String,  _
                    ByVal FieldName4 As String,  _
                    ByVal FieldName5 As String,  _
                    ByVal FieldName6 As String,  _
                    ByVal FieldName7 As String,  _
                    ByVal FieldName8 As String,  _
                    ByVal FieldName9 As String,  _
                    ByVal FieldName10 As String,  _
                    ByVal FieldValue1 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue2 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue3 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue4 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue5 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue6 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue7 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue8 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue9 As Global.System.Nullable(Of Double),  _
                    ByVal FieldValue10 As Global.System.Nullable(Of Double),  _
                    ByVal ResultFieldName As String,  _
                    ByVal ResultFieldValue As Global.System.Nullable(Of Double),  _
                    ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (CalculationDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CalculationDescription,String)
            End If
            If (RowNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RowNr.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ColNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ColNr.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FieldName1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FieldName1,String)
            End If
            If (FieldName2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FieldName2,String)
            End If
            If (FieldName3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FieldName3,String)
            End If
            If (FieldName4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FieldName4,String)
            End If
            If (FieldName5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FieldName5,String)
            End If
            If (FieldName6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FieldName6,String)
            End If
            If (FieldName7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FieldName7,String)
            End If
            If (FieldName8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FieldName8,String)
            End If
            If (FieldName9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FieldName9,String)
            End If
            If (FieldName10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FieldName10,String)
            End If
            If (FieldValue1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FieldValue1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (FieldValue2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(FieldValue2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (FieldValue3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FieldValue3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (FieldValue4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FieldValue4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FieldValue5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FieldValue5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (FieldValue6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FieldValue6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (FieldValue7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FieldValue7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (FieldValue8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(FieldValue8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (FieldValue9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(FieldValue9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (FieldValue10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(FieldValue10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (ResultFieldName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ResultFieldName,String)
            End If
            If (ResultFieldValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(ResultFieldValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_PortfolioRiskCalculationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_PortfolioRiskCalculation"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Segment_A", "Segment_A")
            tableMapping.ColumnMappings.Add("Segment_B", "Segment_B")
            tableMapping.ColumnMappings.Add("SegmentCorrelation", "SegmentCorrelation")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_PortfolioRiskCalculation] ([Segment_A], [Segment_B]"& _ 
                ", [SegmentCorrelation], [RiskDate]) VALUES (@Segment_A, @Segment_B, @SegmentCorr"& _ 
                "elation, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segment_A", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Segment_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segment_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Segment_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentCorrelation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentCorrelation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Segment_A, Segment_B, SegmentCorrelation, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "     CreditSpreadRisk_PortfolioRiskCalculation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, Segment_A, Segment_B, SegmentCorrelation, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "     CreditSpreadRisk_PortfolioRiskCalculation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Param1"& _ 
                ")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_PortfolioRiskCalculationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_PortfolioRiskCalculation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Segment_A As Global.System.Nullable(Of Double), ByVal Segment_B As Global.System.Nullable(Of Double), ByVal SegmentCorrelation As Global.System.Nullable(Of Double), ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (Segment_A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Segment_A.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Segment_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Segment_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SegmentCorrelation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SegmentCorrelation.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_SegmentRiskCalculationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_SegmentRiskCalculation"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Segment", "Segment")
            tableMapping.ColumnMappings.Add("AssetRisk_MidVec", "AssetRisk_MidVec")
            tableMapping.ColumnMappings.Add("SegmentRisk", "SegmentRisk")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_SegmentRiskCalculation] ([Segment], [AssetRisk_MidV"& _ 
                "ec], [SegmentRisk], [RiskDate]) VALUES (@Segment, @AssetRisk_MidVec, @SegmentRis"& _ 
                "k, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segment", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Segment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetRisk_MidVec", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetRisk_MidVec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Segment, AssetRisk_MidVec, SegmentRisk, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   CreditSpreadRisk_SegmentRiskCalculation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, Segment, AssetRisk_MidVec, SegmentRisk, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   CreditSpreadRisk_SegmentRiskCalculation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Param1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"O"& _ 
                "RDER BY ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentRiskCalculationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_SegmentRiskCalculation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Segment As Global.System.Nullable(Of Double), ByVal AssetRisk_MidVec As Global.System.Nullable(Of Double), ByVal SegmentRisk As Global.System.Nullable(Of Double), ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (Segment.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Segment.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AssetRisk_MidVec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AssetRisk_MidVec.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SegmentRisk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SegmentRisk.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_SegmentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_Segments"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Segment", "Segment")
            tableMapping.ColumnMappings.Add("AssetRisk_MidVec", "AssetRisk_MidVec")
            tableMapping.ColumnMappings.Add("SegmentRisk", "SegmentRisk")
            tableMapping.ColumnMappings.Add("SegmentRisk_MidVec", "SegmentRisk_MidVec")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_Segments] ([Segment], [AssetRisk_MidVec], [SegmentR"& _ 
                "isk], [SegmentRisk_MidVec], [RiskDate]) VALUES (@Segment, @AssetRisk_MidVec, @Se"& _ 
                "gmentRisk, @SegmentRisk_MidVec, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segment", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Segment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssetRisk_MidVec", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssetRisk_MidVec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentRisk_MidVec", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Segment, AssetRisk_MidVec, SegmentRisk, SegmentRisk_MidVec, Ris"& _ 
                "kDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadRisk_Segments"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, Segment, AssetRisk_MidVec, SegmentRisk, SegmentRisk_MidVec, Ris"& _ 
                "kDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadRisk_Segments"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Para"& _ 
                "m1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SegmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_Segments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Segment As Global.System.Nullable(Of Double), ByVal AssetRisk_MidVec As Global.System.Nullable(Of Double), ByVal SegmentRisk As Global.System.Nullable(Of Double), ByVal SegmentRisk_MidVec As Global.System.Nullable(Of Double), ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (Segment.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Segment.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AssetRisk_MidVec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AssetRisk_MidVec.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SegmentRisk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SegmentRisk.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SegmentRisk_MidVec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SegmentRisk_MidVec.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_SingleAssetsCorrelationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_SingleAssetsCorrelation"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("EMMITENT_A", "EMMITENT_A")
            tableMapping.ColumnMappings.Add("EMMITENT_B", "EMMITENT_B")
            tableMapping.ColumnMappings.Add("ID_A", "ID_A")
            tableMapping.ColumnMappings.Add("ID_B", "ID_B")
            tableMapping.ColumnMappings.Add("ISIN_A", "ISIN_A")
            tableMapping.ColumnMappings.Add("ISIN_B", "ISIN_B")
            tableMapping.ColumnMappings.Add("TENOR_A", "TENOR_A")
            tableMapping.ColumnMappings.Add("TENOR_B", "TENOR_B")
            tableMapping.ColumnMappings.Add("CURVE_A", "CURVE_A")
            tableMapping.ColumnMappings.Add("CURVE_B", "CURVE_B")
            tableMapping.ColumnMappings.Add("SEGMENT_A", "SEGMENT_A")
            tableMapping.ColumnMappings.Add("SEGMENT_B", "SEGMENT_B")
            tableMapping.ColumnMappings.Add("Correlation_Name", "Correlation_Name")
            tableMapping.ColumnMappings.Add("Correlation_Tenor", "Correlation_Tenor")
            tableMapping.ColumnMappings.Add("Correlation_Basis", "Correlation_Basis")
            tableMapping.ColumnMappings.Add("CorrelationValue", "CorrelationValue")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_SingleAssetsCorrelation] ([EMMITENT_A], [EMMITENT_B"& _ 
                "], [ID_A], [ID_B], [ISIN_A], [ISIN_B], [TENOR_A], [TENOR_B], [CURVE_A], [CURVE_B"& _ 
                "], [SEGMENT_A], [SEGMENT_B], [Correlation_Name], [Correlation_Tenor], [Correlati"& _ 
                "on_Basis], [CorrelationValue], [RiskDate]) VALUES (@EMMITENT_A, @EMMITENT_B, @ID"& _ 
                "_A, @ID_B, @ISIN_A, @ISIN_B, @TENOR_A, @TENOR_B, @CURVE_A, @CURVE_B, @SEGMENT_A,"& _ 
                " @SEGMENT_B, @Correlation_Name, @Correlation_Tenor, @Correlation_Basis, @Correla"& _ 
                "tionValue, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMMITENT_A", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMMITENT_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMMITENT_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMMITENT_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_A", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_A", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISIN_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISIN_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TENOR_A", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TENOR_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TENOR_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TENOR_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURVE_A", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURVE_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURVE_B", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURVE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEGMENT_A", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEGMENT_A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEGMENT_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEGMENT_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Correlation_Name", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correlation_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Correlation_Tenor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correlation_Tenor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Correlation_Basis", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correlation_Basis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CorrelationValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CorrelationValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, EMMITENT_A, EMMITENT_B, ID_A, ID_B, ISIN_A, ISIN_B, TENOR_A, TE"& _ 
                "NOR_B, CURVE_A, CURVE_B, SEGMENT_A, SEGMENT_B, Correlation_Name, Correlation_Ten"& _ 
                "or, Correlation_Basis, CorrelationValue, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadR"& _ 
                "isk_SingleAssetsCorrelation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, EMMITENT_A, EMMITENT_B, ID_A, ID_B, ISIN_A, ISIN_B, TENOR_A, TE"& _ 
                "NOR_B, CURVE_A, CURVE_B, SEGMENT_A, SEGMENT_B, Correlation_Name, Correlation_Ten"& _ 
                "or, Correlation_Basis, CorrelationValue, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSpreadR"& _ 
                "isk_SingleAssetsCorrelation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RiskDate = @Param1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_SingleAssetsCorrelationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_SingleAssetsCorrelation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal EMMITENT_A As String,  _
                    ByVal EMMITENT_B As String,  _
                    ByVal ID_A As Global.System.Nullable(Of Integer),  _
                    ByVal ID_B As Global.System.Nullable(Of Integer),  _
                    ByVal ISIN_A As String,  _
                    ByVal ISIN_B As String,  _
                    ByVal TENOR_A As String,  _
                    ByVal TENOR_B As String,  _
                    ByVal CURVE_A As String,  _
                    ByVal CURVE_B As String,  _
                    ByVal SEGMENT_A As Global.System.Nullable(Of Double),  _
                    ByVal SEGMENT_B As Global.System.Nullable(Of Double),  _
                    ByVal Correlation_Name As Global.System.Nullable(Of Double),  _
                    ByVal Correlation_Tenor As Global.System.Nullable(Of Double),  _
                    ByVal Correlation_Basis As Global.System.Nullable(Of Double),  _
                    ByVal CorrelationValue As Global.System.Nullable(Of Double),  _
                    ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (EMMITENT_A Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(EMMITENT_A,String)
            End If
            If (EMMITENT_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EMMITENT_B,String)
            End If
            If (ID_A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_A.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_B.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ISIN_A Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ISIN_A,String)
            End If
            If (ISIN_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ISIN_B,String)
            End If
            If (TENOR_A Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TENOR_A,String)
            End If
            If (TENOR_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TENOR_B,String)
            End If
            If (CURVE_A Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CURVE_A,String)
            End If
            If (CURVE_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CURVE_B,String)
            End If
            If (SEGMENT_A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SEGMENT_A.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SEGMENT_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SEGMENT_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Correlation_Name.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Correlation_Name.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Correlation_Tenor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Correlation_Tenor.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Correlation_Basis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Correlation_Basis.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CorrelationValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CorrelationValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CreditSpreadRisk_TOTALSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CreditSpreadRisk_TOTALS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SegmentRisk_MidVec_Total", "SegmentRisk_MidVec_Total")
            tableMapping.ColumnMappings.Add("PortfolioRisk", "PortfolioRisk")
            tableMapping.ColumnMappings.Add("ConfidenceNiveau_1", "ConfidenceNiveau_1")
            tableMapping.ColumnMappings.Add("Z_1", "Z_1")
            tableMapping.ColumnMappings.Add("ConfidenceNiveau_2", "ConfidenceNiveau_2")
            tableMapping.ColumnMappings.Add("Z_2", "Z_2")
            tableMapping.ColumnMappings.Add("MarketValueSum", "MarketValueSum")
            tableMapping.ColumnMappings.Add("RelativePortofolioMarketValue1", "RelativePortofolioMarketValue1")
            tableMapping.ColumnMappings.Add("RelativePortofolioMarketValue2", "RelativePortofolioMarketValue2")
            tableMapping.ColumnMappings.Add("CreditSpreadRisk", "CreditSpreadRisk")
            tableMapping.ColumnMappings.Add("RiskDate", "RiskDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CreditSpreadRisk_TOTALS] WHERE (([ID] = @Original_ID) AND ((@IsNull_"& _ 
                "SegmentRisk_MidVec_Total = 1 AND [SegmentRisk_MidVec_Total] IS NULL) OR ([Segmen"& _ 
                "tRisk_MidVec_Total] = @Original_SegmentRisk_MidVec_Total)) AND ((@IsNull_Portfol"& _ 
                "ioRisk = 1 AND [PortfolioRisk] IS NULL) OR ([PortfolioRisk] = @Original_Portfoli"& _ 
                "oRisk)) AND ((@IsNull_ConfidenceNiveau_1 = 1 AND [ConfidenceNiveau_1] IS NULL) O"& _ 
                "R ([ConfidenceNiveau_1] = @Original_ConfidenceNiveau_1)) AND ((@IsNull_Z_1 = 1 A"& _ 
                "ND [Z_1] IS NULL) OR ([Z_1] = @Original_Z_1)) AND ((@IsNull_ConfidenceNiveau_2 ="& _ 
                " 1 AND [ConfidenceNiveau_2] IS NULL) OR ([ConfidenceNiveau_2] = @Original_Confid"& _ 
                "enceNiveau_2)) AND ((@IsNull_Z_2 = 1 AND [Z_2] IS NULL) OR ([Z_2] = @Original_Z_"& _ 
                "2)) AND ((@IsNull_MarketValueSum = 1 AND [MarketValueSum] IS NULL) OR ([MarketVa"& _ 
                "lueSum] = @Original_MarketValueSum)) AND ((@IsNull_RelativePortofolioMarketValue"& _ 
                "1 = 1 AND [RelativePortofolioMarketValue1] IS NULL) OR ([RelativePortofolioMarke"& _ 
                "tValue1] = @Original_RelativePortofolioMarketValue1)) AND ((@IsNull_RelativePort"& _ 
                "ofolioMarketValue2 = 1 AND [RelativePortofolioMarketValue2] IS NULL) OR ([Relati"& _ 
                "vePortofolioMarketValue2] = @Original_RelativePortofolioMarketValue2)) AND ((@Is"& _ 
                "Null_CreditSpreadRisk = 1 AND [CreditSpreadRisk] IS NULL) OR ([CreditSpreadRisk]"& _ 
                " = @Original_CreditSpreadRisk)) AND ((@IsNull_RiskDate = 1 AND [RiskDate] IS NUL"& _ 
                "L) OR ([RiskDate] = @Original_RiskDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PortfolioRisk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PortfolioRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ConfidenceNiveau_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ConfidenceNiveau_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ConfidenceNiveau_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ConfidenceNiveau_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarketValueSum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarketValueSum", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditSpreadRisk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditSpreadRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CreditSpreadRisk_TOTALS] ([SegmentRisk_MidVec_Total], [PortfolioRisk"& _ 
                "], [ConfidenceNiveau_1], [Z_1], [ConfidenceNiveau_2], [Z_2], [MarketValueSum], ["& _ 
                "RelativePortofolioMarketValue1], [RelativePortofolioMarketValue2], [CreditSpread"& _ 
                "Risk], [RiskDate]) VALUES (@SegmentRisk_MidVec_Total, @PortfolioRisk, @Confidenc"& _ 
                "eNiveau_1, @Z_1, @ConfidenceNiveau_2, @Z_2, @MarketValueSum, @RelativePortofolio"& _ 
                "MarketValue1, @RelativePortofolioMarketValue2, @CreditSpreadRisk, @RiskDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PortfolioRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfidenceNiveau_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfidenceNiveau_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarketValueSum", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditSpreadRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CreditSpreadRisk_TOTALS] SET [SegmentRisk_MidVec_Total] = @SegmentRisk_Mi"& _ 
                "dVec_Total, [PortfolioRisk] = @PortfolioRisk, [ConfidenceNiveau_1] = @Confidence"& _ 
                "Niveau_1, [Z_1] = @Z_1, [ConfidenceNiveau_2] = @ConfidenceNiveau_2, [Z_2] = @Z_2"& _ 
                ", [MarketValueSum] = @MarketValueSum, [RelativePortofolioMarketValue1] = @Relati"& _ 
                "vePortofolioMarketValue1, [RelativePortofolioMarketValue2] = @RelativePortofolio"& _ 
                "MarketValue2, [CreditSpreadRisk] = @CreditSpreadRisk, [RiskDate] = @RiskDate WHE"& _ 
                "RE (([ID] = @Original_ID) AND ((@IsNull_SegmentRisk_MidVec_Total = 1 AND [Segmen"& _ 
                "tRisk_MidVec_Total] IS NULL) OR ([SegmentRisk_MidVec_Total] = @Original_SegmentR"& _ 
                "isk_MidVec_Total)) AND ((@IsNull_PortfolioRisk = 1 AND [PortfolioRisk] IS NULL) "& _ 
                "OR ([PortfolioRisk] = @Original_PortfolioRisk)) AND ((@IsNull_ConfidenceNiveau_1"& _ 
                " = 1 AND [ConfidenceNiveau_1] IS NULL) OR ([ConfidenceNiveau_1] = @Original_Conf"& _ 
                "idenceNiveau_1)) AND ((@IsNull_Z_1 = 1 AND [Z_1] IS NULL) OR ([Z_1] = @Original_"& _ 
                "Z_1)) AND ((@IsNull_ConfidenceNiveau_2 = 1 AND [ConfidenceNiveau_2] IS NULL) OR "& _ 
                "([ConfidenceNiveau_2] = @Original_ConfidenceNiveau_2)) AND ((@IsNull_Z_2 = 1 AND"& _ 
                " [Z_2] IS NULL) OR ([Z_2] = @Original_Z_2)) AND ((@IsNull_MarketValueSum = 1 AND"& _ 
                " [MarketValueSum] IS NULL) OR ([MarketValueSum] = @Original_MarketValueSum)) AND"& _ 
                " ((@IsNull_RelativePortofolioMarketValue1 = 1 AND [RelativePortofolioMarketValue"& _ 
                "1] IS NULL) OR ([RelativePortofolioMarketValue1] = @Original_RelativePortofolioM"& _ 
                "arketValue1)) AND ((@IsNull_RelativePortofolioMarketValue2 = 1 AND [RelativePort"& _ 
                "ofolioMarketValue2] IS NULL) OR ([RelativePortofolioMarketValue2] = @Original_Re"& _ 
                "lativePortofolioMarketValue2)) AND ((@IsNull_CreditSpreadRisk = 1 AND [CreditSpr"& _ 
                "eadRisk] IS NULL) OR ([CreditSpreadRisk] = @Original_CreditSpreadRisk)) AND ((@I"& _ 
                "sNull_RiskDate = 1 AND [RiskDate] IS NULL) OR ([RiskDate] = @Original_RiskDate))"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PortfolioRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfidenceNiveau_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfidenceNiveau_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarketValueSum", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditSpreadRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SegmentRisk_MidVec_Total", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegmentRisk_MidVec_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PortfolioRisk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PortfolioRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PortfolioRisk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ConfidenceNiveau_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ConfidenceNiveau_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z_1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ConfidenceNiveau_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ConfidenceNiveau_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfidenceNiveau_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z_2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarketValueSum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarketValueSum", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarketValueSum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RelativePortofolioMarketValue1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RelativePortofolioMarketValue2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RelativePortofolioMarketValue2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditSpreadRisk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditSpreadRisk", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditSpreadRisk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RiskDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, SegmentRisk_MidVec_Total, PortfolioRisk, ConfidenceNiveau_1, Z_"& _ 
                "1, ConfidenceNiveau_2, Z_2, MarketValueSum, RelativePortofolioMarketValue1, Rela"& _ 
                "tivePortofolioMarketValue2, CreditSpreadRisk, RiskDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CreditSp"& _ 
                "readRisk_TOTALS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY RiskDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ConfidenceNiveau_1, ConfidenceNiveau_2, CreditSpreadRisk, ID, MarketValueS"& _ 
                "um, PortfolioRisk, RelativePortofolioMarketValue1, RelativePortofolioMarketValue"& _ 
                "2, RiskDate, SegmentRisk_MidVec_Total, Z_1, Z_2 FROM CreditSpreadRisk_TOTALS WHE"& _ 
                "RE (RiskDate = @Param1) ORDER BY ID DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable = New CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CreditSpreadRiskDataSet.CreditSpreadRisk_TOTALSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CreditSpreadRisk_TOTALS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_SegmentRisk_MidVec_Total As Global.System.Nullable(Of Double), ByVal Original_PortfolioRisk As Global.System.Nullable(Of Double), ByVal Original_ConfidenceNiveau_1 As Global.System.Nullable(Of Double), ByVal Original_Z_1 As Global.System.Nullable(Of Double), ByVal Original_ConfidenceNiveau_2 As Global.System.Nullable(Of Double), ByVal Original_Z_2 As Global.System.Nullable(Of Double), ByVal Original_MarketValueSum As Global.System.Nullable(Of Double), ByVal Original_RelativePortofolioMarketValue1 As Global.System.Nullable(Of Double), ByVal Original_RelativePortofolioMarketValue2 As Global.System.Nullable(Of Double), ByVal Original_CreditSpreadRisk As Global.System.Nullable(Of Double), ByVal Original_RiskDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_SegmentRisk_MidVec_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SegmentRisk_MidVec_Total.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PortfolioRisk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PortfolioRisk.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ConfidenceNiveau_1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ConfidenceNiveau_1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Z_1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Z_1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ConfidenceNiveau_2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ConfidenceNiveau_2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Z_2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Z_2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_MarketValueSum.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MarketValueSum.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_RelativePortofolioMarketValue1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_RelativePortofolioMarketValue1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_RelativePortofolioMarketValue2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_RelativePortofolioMarketValue2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditSpreadRisk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_CreditSpreadRisk.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SegmentRisk_MidVec_Total As Global.System.Nullable(Of Double), ByVal PortfolioRisk As Global.System.Nullable(Of Double), ByVal ConfidenceNiveau_1 As Global.System.Nullable(Of Double), ByVal Z_1 As Global.System.Nullable(Of Double), ByVal ConfidenceNiveau_2 As Global.System.Nullable(Of Double), ByVal Z_2 As Global.System.Nullable(Of Double), ByVal MarketValueSum As Global.System.Nullable(Of Double), ByVal RelativePortofolioMarketValue1 As Global.System.Nullable(Of Double), ByVal RelativePortofolioMarketValue2 As Global.System.Nullable(Of Double), ByVal CreditSpreadRisk As Global.System.Nullable(Of Double), ByVal RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (SegmentRisk_MidVec_Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SegmentRisk_MidVec_Total.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PortfolioRisk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PortfolioRisk.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ConfidenceNiveau_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ConfidenceNiveau_1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Z_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Z_1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConfidenceNiveau_2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ConfidenceNiveau_2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Z_2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Z_2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MarketValueSum.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MarketValueSum.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (RelativePortofolioMarketValue1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RelativePortofolioMarketValue1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RelativePortofolioMarketValue2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RelativePortofolioMarketValue2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (CreditSpreadRisk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CreditSpreadRisk.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SegmentRisk_MidVec_Total As Global.System.Nullable(Of Double),  _
                    ByVal PortfolioRisk As Global.System.Nullable(Of Double),  _
                    ByVal ConfidenceNiveau_1 As Global.System.Nullable(Of Double),  _
                    ByVal Z_1 As Global.System.Nullable(Of Double),  _
                    ByVal ConfidenceNiveau_2 As Global.System.Nullable(Of Double),  _
                    ByVal Z_2 As Global.System.Nullable(Of Double),  _
                    ByVal MarketValueSum As Global.System.Nullable(Of Double),  _
                    ByVal RelativePortofolioMarketValue1 As Global.System.Nullable(Of Double),  _
                    ByVal RelativePortofolioMarketValue2 As Global.System.Nullable(Of Double),  _
                    ByVal CreditSpreadRisk As Global.System.Nullable(Of Double),  _
                    ByVal RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_SegmentRisk_MidVec_Total As Global.System.Nullable(Of Double),  _
                    ByVal Original_PortfolioRisk As Global.System.Nullable(Of Double),  _
                    ByVal Original_ConfidenceNiveau_1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Z_1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ConfidenceNiveau_2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Z_2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_MarketValueSum As Global.System.Nullable(Of Double),  _
                    ByVal Original_RelativePortofolioMarketValue1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_RelativePortofolioMarketValue2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_CreditSpreadRisk As Global.System.Nullable(Of Double),  _
                    ByVal Original_RiskDate As Global.System.Nullable(Of Date)) As Integer
            If (SegmentRisk_MidVec_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SegmentRisk_MidVec_Total.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PortfolioRisk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PortfolioRisk.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ConfidenceNiveau_1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ConfidenceNiveau_1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Z_1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Z_1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConfidenceNiveau_2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ConfidenceNiveau_2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Z_2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Z_2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MarketValueSum.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MarketValueSum.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (RelativePortofolioMarketValue1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RelativePortofolioMarketValue1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RelativePortofolioMarketValue2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RelativePortofolioMarketValue2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (CreditSpreadRisk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CreditSpreadRisk.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Integer)
            If (Original_SegmentRisk_MidVec_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SegmentRisk_MidVec_Total.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_PortfolioRisk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PortfolioRisk.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_ConfidenceNiveau_1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ConfidenceNiveau_1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Z_1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Z_1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ConfidenceNiveau_2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ConfidenceNiveau_2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Z_2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Z_2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_MarketValueSum.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_MarketValueSum.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_RelativePortofolioMarketValue1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_RelativePortofolioMarketValue1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_RelativePortofolioMarketValue2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_RelativePortofolioMarketValue2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_CreditSpreadRisk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CreditSpreadRisk.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _parameter_CreditSpreadRisk_ReferencesTableAdapter As Parameter_CreditSpreadRisk_ReferencesTableAdapter
        
        Private _parameter_CreditSpreadRisk_CorrelationsTableAdapter As Parameter_CreditSpreadRisk_CorrelationsTableAdapter
        
        Private _creditSpreadRisk_BondPortfolioTableAdapter As CreditSpreadRisk_BondPortfolioTableAdapter
        
        Private _creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter As CreditSpreadRisk_MatrixCorrelationCalculationsTableAdapter
        
        Private _creditSpreadRisk_PortfolioRiskCalculationTableAdapter As CreditSpreadRisk_PortfolioRiskCalculationTableAdapter
        
        Private _creditSpreadRisk_SegmentRiskCalculationTableAdapter As CreditSpreadRisk_SegmentRiskCalculationTableAdapter
        
        Private _creditSpreadRisk_SegmentsTableAdapter As CreditSpreadRisk_SegmentsTableAdapter
        
        Private _creditSpreadRisk_SingleAssetsCorrelationTableAdapter As CreditSpreadRisk_SingleAssetsCorrelationTableAdapter
        
        Private _creditSpreadRisk_TOTALSTableAdapter As CreditSpreadRisk_TOTALSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Parameter_CreditSpreadRisk_ReferencesTableAdapter() As Parameter_CreditSpreadRisk_ReferencesTableAdapter
            Get
                Return Me._parameter_CreditSpreadRisk_ReferencesTableAdapter
            End Get
            Set
                Me._parameter_CreditSpreadRisk_ReferencesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Parameter_CreditSpreadRisk_CorrelationsTableAdapter() As Parameter_CreditSpreadRisk_CorrelationsTableAdapter
            Get
                Return Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter
            End Get
            Set
                Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_BondPortfolioTableAdapter() As CreditSpreadRisk_BondPortfolioTableAdapter
            Get
                Return Me._creditSpreadRisk_BondPortfolioTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_BondPortfolioTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_MatrixCorrelationCalculationsTableAdapter() As CreditSpreadRisk_MatrixCorrelationCalculationsTableAdapter
            Get
                Return Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_PortfolioRiskCalculationTableAdapter() As CreditSpreadRisk_PortfolioRiskCalculationTableAdapter
            Get
                Return Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_SegmentRiskCalculationTableAdapter() As CreditSpreadRisk_SegmentRiskCalculationTableAdapter
            Get
                Return Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_SegmentsTableAdapter() As CreditSpreadRisk_SegmentsTableAdapter
            Get
                Return Me._creditSpreadRisk_SegmentsTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_SegmentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_SingleAssetsCorrelationTableAdapter() As CreditSpreadRisk_SingleAssetsCorrelationTableAdapter
            Get
                Return Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CreditSpreadRisk_TOTALSTableAdapter() As CreditSpreadRisk_TOTALSTableAdapter
            Get
                Return Me._creditSpreadRisk_TOTALSTableAdapter
            End Get
            Set
                Me._creditSpreadRisk_TOTALSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection
                End If
                If ((Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_SegmentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_SegmentsTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection
                End If
                If ((Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._creditSpreadRisk_TOTALSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._creditSpreadRisk_TOTALSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As CreditSpreadRiskDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_References.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_Correlations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_BondPortfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_BondPortfolioTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_MatrixCorrelationCalculations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_PortfolioRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SegmentRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_Segments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SingleAssetsCorrelation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_TOTALSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As CreditSpreadRiskDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_References.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_Correlations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_BondPortfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_BondPortfolioTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_MatrixCorrelationCalculations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_PortfolioRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SegmentRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_Segments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SingleAssetsCorrelation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_TOTALSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As CreditSpreadRiskDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_TOTALSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SingleAssetsCorrelation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_Segments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_SegmentRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_PortfolioRiskCalculation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_MatrixCorrelationCalculations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CreditSpreadRisk_BondPortfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._creditSpreadRisk_BondPortfolioTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_Correlations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Parameter_CreditSpreadRisk_References.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As CreditSpreadRiskDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_SegmentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._creditSpreadRisk_TOTALSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._parameter_CreditSpreadRisk_ReferencesTableAdapter, Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection)
                    Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter, Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection)
                    Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_BondPortfolioTableAdapter, Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection)
                    Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_BondPortfolioTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_BondPortfolioTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_BondPortfolioTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_BondPortfolioTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter, Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection)
                    Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter, Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection)
                    Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter, Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection)
                    Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_SegmentsTableAdapter, Me._creditSpreadRisk_SegmentsTableAdapter.Connection)
                    Me._creditSpreadRisk_SegmentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SegmentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_SegmentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_SegmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_SegmentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter, Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection)
                    Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._creditSpreadRisk_TOTALSTableAdapter, Me._creditSpreadRisk_TOTALSTableAdapter.Connection)
                    Me._creditSpreadRisk_TOTALSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_TOTALSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._creditSpreadRisk_TOTALSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._creditSpreadRisk_TOTALSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._creditSpreadRisk_TOTALSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._parameter_CreditSpreadRisk_ReferencesTableAdapter) Is Nothing) Then
                    Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Connection = CType(revertConnections(Me._parameter_CreditSpreadRisk_ReferencesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._parameter_CreditSpreadRisk_ReferencesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter) Is Nothing) Then
                    Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Connection = CType(revertConnections(Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._parameter_CreditSpreadRisk_CorrelationsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_BondPortfolioTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_BondPortfolioTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_BondPortfolioTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_BondPortfolioTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_MatrixCorrelationCalculationsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_PortfolioRiskCalculationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SegmentRiskCalculationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_SegmentsTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_SegmentsTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_SegmentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SegmentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_SingleAssetsCorrelationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._creditSpreadRisk_TOTALSTableAdapter) Is Nothing) Then
                    Me._creditSpreadRisk_TOTALSTableAdapter.Connection = CType(revertConnections(Me._creditSpreadRisk_TOTALSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._creditSpreadRisk_TOTALSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
