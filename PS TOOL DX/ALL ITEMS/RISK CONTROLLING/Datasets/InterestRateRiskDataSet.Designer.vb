'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("InterestRateRiskDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InterestRateRiskDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableRATERISK_DATE As RATERISK_DATEDataTable
    
    Private tableRATERISK_DETAILS As RATERISK_DETAILSDataTable
    
    Private tableRATERISK_DETAILS_ALL_DATA As RATERISK_DETAILS_ALL_DATADataTable
    
    Private tableRATERISK_TOTALS As RATERISK_TOTALSDataTable
    
    Private tableRATERISK_DELETIONS As RATERISK_DELETIONSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RATERISK DATE")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DATEDataTable(ds.Tables("RATERISK DATE")))
            End If
            If (Not (ds.Tables("RATERISK DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DETAILSDataTable(ds.Tables("RATERISK DETAILS")))
            End If
            If (Not (ds.Tables("RATERISK DETAILS ALL DATA")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DETAILS_ALL_DATADataTable(ds.Tables("RATERISK DETAILS ALL DATA")))
            End If
            If (Not (ds.Tables("RATERISK TOTALS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_TOTALSDataTable(ds.Tables("RATERISK TOTALS")))
            End If
            If (Not (ds.Tables("RATERISK DELETIONS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DELETIONSDataTable(ds.Tables("RATERISK DELETIONS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RATERISK_DATE() As RATERISK_DATEDataTable
        Get
            Return Me.tableRATERISK_DATE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RATERISK_DETAILS() As RATERISK_DETAILSDataTable
        Get
            Return Me.tableRATERISK_DETAILS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RATERISK_DETAILS_ALL_DATA() As RATERISK_DETAILS_ALL_DATADataTable
        Get
            Return Me.tableRATERISK_DETAILS_ALL_DATA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RATERISK_TOTALS() As RATERISK_TOTALSDataTable
        Get
            Return Me.tableRATERISK_TOTALS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RATERISK_DELETIONS() As RATERISK_DELETIONSDataTable
        Get
            Return Me.tableRATERISK_DELETIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As InterestRateRiskDataSet = CType(MyBase.Clone,InterestRateRiskDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("RATERISK DATE")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DATEDataTable(ds.Tables("RATERISK DATE")))
            End If
            If (Not (ds.Tables("RATERISK DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DETAILSDataTable(ds.Tables("RATERISK DETAILS")))
            End If
            If (Not (ds.Tables("RATERISK DETAILS ALL DATA")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DETAILS_ALL_DATADataTable(ds.Tables("RATERISK DETAILS ALL DATA")))
            End If
            If (Not (ds.Tables("RATERISK TOTALS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_TOTALSDataTable(ds.Tables("RATERISK TOTALS")))
            End If
            If (Not (ds.Tables("RATERISK DELETIONS")) Is Nothing) Then
                MyBase.Tables.Add(New RATERISK_DELETIONSDataTable(ds.Tables("RATERISK DELETIONS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRATERISK_DATE = CType(MyBase.Tables("RATERISK DATE"),RATERISK_DATEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRATERISK_DATE) Is Nothing) Then
                Me.tableRATERISK_DATE.InitVars
            End If
        End If
        Me.tableRATERISK_DETAILS = CType(MyBase.Tables("RATERISK DETAILS"),RATERISK_DETAILSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRATERISK_DETAILS) Is Nothing) Then
                Me.tableRATERISK_DETAILS.InitVars
            End If
        End If
        Me.tableRATERISK_DETAILS_ALL_DATA = CType(MyBase.Tables("RATERISK DETAILS ALL DATA"),RATERISK_DETAILS_ALL_DATADataTable)
        If (initTable = true) Then
            If (Not (Me.tableRATERISK_DETAILS_ALL_DATA) Is Nothing) Then
                Me.tableRATERISK_DETAILS_ALL_DATA.InitVars
            End If
        End If
        Me.tableRATERISK_TOTALS = CType(MyBase.Tables("RATERISK TOTALS"),RATERISK_TOTALSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRATERISK_TOTALS) Is Nothing) Then
                Me.tableRATERISK_TOTALS.InitVars
            End If
        End If
        Me.tableRATERISK_DELETIONS = CType(MyBase.Tables("RATERISK DELETIONS"),RATERISK_DELETIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRATERISK_DELETIONS) Is Nothing) Then
                Me.tableRATERISK_DELETIONS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "InterestRateRiskDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InterestRateRiskDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRATERISK_DATE = New RATERISK_DATEDataTable()
        MyBase.Tables.Add(Me.tableRATERISK_DATE)
        Me.tableRATERISK_DETAILS = New RATERISK_DETAILSDataTable()
        MyBase.Tables.Add(Me.tableRATERISK_DETAILS)
        Me.tableRATERISK_DETAILS_ALL_DATA = New RATERISK_DETAILS_ALL_DATADataTable()
        MyBase.Tables.Add(Me.tableRATERISK_DETAILS_ALL_DATA)
        Me.tableRATERISK_TOTALS = New RATERISK_TOTALSDataTable()
        MyBase.Tables.Add(Me.tableRATERISK_TOTALS)
        Me.tableRATERISK_DELETIONS = New RATERISK_DELETIONSDataTable()
        MyBase.Tables.Add(Me.tableRATERISK_DELETIONS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeRATERISK_DATE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeRATERISK_DETAILS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeRATERISK_DETAILS_ALL_DATA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeRATERISK_TOTALS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeRATERISK_DELETIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub RATERISK_DATERowChangeEventHandler(ByVal sender As Object, ByVal e As RATERISK_DATERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub RATERISK_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As RATERISK_DETAILSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub RATERISK_DETAILS_ALL_DATARowChangeEventHandler(ByVal sender As Object, ByVal e As RATERISK_DETAILS_ALL_DATARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub RATERISK_TOTALSRowChangeEventHandler(ByVal sender As Object, ByVal e As RATERISK_TOTALSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub RATERISK_DELETIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As RATERISK_DELETIONSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RATERISK_DATEDataTable
        Inherits Global.System.Data.TypedTableBase(Of RATERISK_DATERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnRateRiskDate As Global.System.Data.DataColumn
        
        Private columnWorking_Capital As Global.System.Data.DataColumn
        
        Private _columnPosition_Capital As Global.System.Data.DataColumn
        
        Private columnSumAM1 As Global.System.Data.DataColumn
        
        Private columnSumAM2 As Global.System.Data.DataColumn
        
        Private columnIRR_200bps_Minus As Global.System.Data.DataColumn
        
        Private columnIRR_200bps_Plus As Global.System.Data.DataColumn
        
        Private columnVaR_99 As Global.System.Data.DataColumn
        
        Private columnVaR_95 As Global.System.Data.DataColumn
        
        Private columnVaR_IRRA As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        Private columnUNTER_BEARBEITUNG_VON As Global.System.Data.DataColumn
        
        Private columnIdBank As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RATERISK DATE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RateRiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRateRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Working_CapitalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorking_Capital
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Position_CapitalColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPosition_Capital
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SumAM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumAM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SumAM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumAM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IRR_200bps_MinusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRR_200bps_Minus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IRR_200bps_PlusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRR_200bps_Plus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VaR_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVaR_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VaR_95Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVaR_95
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VaR_IRRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVaR_IRRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UNTER_BEARBEITUNG_VONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNTER_BEARBEITUNG_VON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IdBankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RATERISK_DATERow
            Get
                Return CType(Me.Rows(index),RATERISK_DATERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DATERowChanging As RATERISK_DATERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DATERowChanged As RATERISK_DATERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DATERowDeleting As RATERISK_DATERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DATERowDeleted As RATERISK_DATERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddRATERISK_DATERow(ByVal row As RATERISK_DATERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddRATERISK_DATERow(ByVal RateRiskDate As Date, ByVal Working_Capital As Double, ByVal _Position_Capital As Double, ByVal SumAM1 As Double, ByVal SumAM2 As Double, ByVal IRR_200bps_Minus As Double, ByVal IRR_200bps_Plus As Double, ByVal VaR_99 As Double, ByVal VaR_95 As Double, ByVal VaR_IRRA As Double, ByVal USER As String, ByVal UNTER_BEARBEITUNG_VON As String, ByVal IdBank As Integer) As RATERISK_DATERow
            Dim rowRATERISK_DATERow As RATERISK_DATERow = CType(Me.NewRow,RATERISK_DATERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RateRiskDate, Working_Capital, _Position_Capital, SumAM1, SumAM2, IRR_200bps_Minus, IRR_200bps_Plus, VaR_99, VaR_95, VaR_IRRA, USER, UNTER_BEARBEITUNG_VON, IdBank}
            rowRATERISK_DATERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRATERISK_DATERow)
            Return rowRATERISK_DATERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByRateRiskDate(ByVal RateRiskDate As Date) As RATERISK_DATERow
            Return CType(Me.Rows.Find(New Object() {RateRiskDate}),RATERISK_DATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RATERISK_DATEDataTable = CType(MyBase.Clone,RATERISK_DATEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RATERISK_DATEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnRateRiskDate = MyBase.Columns("RateRiskDate")
            Me.columnWorking_Capital = MyBase.Columns("Working Capital")
            Me._columnPosition_Capital = MyBase.Columns("Position/Capital")
            Me.columnSumAM1 = MyBase.Columns("SumAM1")
            Me.columnSumAM2 = MyBase.Columns("SumAM2")
            Me.columnIRR_200bps_Minus = MyBase.Columns("IRR_200bps_Minus")
            Me.columnIRR_200bps_Plus = MyBase.Columns("IRR_200bps_Plus")
            Me.columnVaR_99 = MyBase.Columns("VaR_99")
            Me.columnVaR_95 = MyBase.Columns("VaR_95")
            Me.columnVaR_IRRA = MyBase.Columns("VaR_IRRA")
            Me.columnUSER = MyBase.Columns("USER")
            Me.columnUNTER_BEARBEITUNG_VON = MyBase.Columns("UNTER BEARBEITUNG VON")
            Me.columnIdBank = MyBase.Columns("IdBank")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnRateRiskDate = New Global.System.Data.DataColumn("RateRiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRateRiskDate)
            Me.columnWorking_Capital = New Global.System.Data.DataColumn("Working Capital", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorking_Capital)
            Me._columnPosition_Capital = New Global.System.Data.DataColumn("Position/Capital", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPosition_Capital.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPosition_Capital")
            Me._columnPosition_Capital.ExtendedProperties.Add("Generator_UserColumnName", "Position/Capital")
            MyBase.Columns.Add(Me._columnPosition_Capital)
            Me.columnSumAM1 = New Global.System.Data.DataColumn("SumAM1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumAM1)
            Me.columnSumAM2 = New Global.System.Data.DataColumn("SumAM2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumAM2)
            Me.columnIRR_200bps_Minus = New Global.System.Data.DataColumn("IRR_200bps_Minus", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRR_200bps_Minus)
            Me.columnIRR_200bps_Plus = New Global.System.Data.DataColumn("IRR_200bps_Plus", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRR_200bps_Plus)
            Me.columnVaR_99 = New Global.System.Data.DataColumn("VaR_99", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVaR_99)
            Me.columnVaR_95 = New Global.System.Data.DataColumn("VaR_95", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVaR_95)
            Me.columnVaR_IRRA = New Global.System.Data.DataColumn("VaR_IRRA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVaR_IRRA)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.columnUNTER_BEARBEITUNG_VON = New Global.System.Data.DataColumn("UNTER BEARBEITUNG VON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNTER_BEARBEITUNG_VON)
            Me.columnIdBank = New Global.System.Data.DataColumn("IdBank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBank)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRateRiskDate}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnRateRiskDate.AllowDBNull = false
            Me.columnRateRiskDate.Unique = true
            Me.columnUSER.MaxLength = 255
            Me.columnUNTER_BEARBEITUNG_VON.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewRATERISK_DATERow() As RATERISK_DATERow
            Return CType(Me.NewRow,RATERISK_DATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RATERISK_DATERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RATERISK_DATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RATERISK_DATERowChangedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DATERowChanged(Me, New RATERISK_DATERowChangeEvent(CType(e.Row,RATERISK_DATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RATERISK_DATERowChangingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DATERowChanging(Me, New RATERISK_DATERowChangeEvent(CType(e.Row,RATERISK_DATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RATERISK_DATERowDeletedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DATERowDeleted(Me, New RATERISK_DATERowChangeEvent(CType(e.Row,RATERISK_DATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RATERISK_DATERowDeletingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DATERowDeleting(Me, New RATERISK_DATERowChangeEvent(CType(e.Row,RATERISK_DATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveRATERISK_DATERow(ByVal row As RATERISK_DATERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RATERISK_DATEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RATERISK_DETAILSDataTable
        Inherits Global.System.Data.TypedTableBase(Of RATERISK_DETAILSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPERIOD As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnContract_Type As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private _columnGLMaster___Account_Type As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private _columnContract_Account As Global.System.Data.DataColumn
        
        Private columnContractClear As Global.System.Data.DataColumn
        
        Private _columnCounterparty_Issuer As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnNext_EventType As Global.System.Data.DataColumn
        
        Private columnNext_EventDate As Global.System.Data.DataColumn
        
        Private columnFinal_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnCURRENCY As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance_EUR_Equ_ As Global.System.Data.DataColumn
        
        Private columnInterestRate As Global.System.Data.DataColumn
        
        Private columnInterestAmountOrigCur As Global.System.Data.DataColumn
        
        Private columnInterestAmountEuro As Global.System.Data.DataColumn
        
        Private columnAccruedInterestEndDate As Global.System.Data.DataColumn
        
        Private columnAccruedInterestAmountEUR As Global.System.Data.DataColumn
        
        Private columnAccruedInterestAmountOrigCur As Global.System.Data.DataColumn
        
        Private columnAverageDuration As Global.System.Data.DataColumn
        
        Private columnDaysToEventDate As Global.System.Data.DataColumn
        
        Private columnDATA_DATE As Global.System.Data.DataColumn
        
        Private columnRISK_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_DATE As Global.System.Data.DataColumn
        
        Private columnIdRateRiskDate As Global.System.Data.DataColumn
        
        Private columnPERIOD_Additional As Global.System.Data.DataColumn
        
        Private columnPERIOD_MaturityDate As Global.System.Data.DataColumn
        
        Private columnDaysToMaturity As Global.System.Data.DataColumn
        
        Private columnClientNrM As Global.System.Data.DataColumn
        
        Private columnContractClearM As Global.System.Data.DataColumn
        
        Private columnPERIOD_N As Global.System.Data.DataColumn
        
        Private columnInterestType As Global.System.Data.DataColumn
        
        Private columnTOTAL_CASH_FLOW As Global.System.Data.DataColumn
        
        Private columnNextEventPeriod As Global.System.Data.DataColumn
        
        Private columnNextEventNr As Global.System.Data.DataColumn
        
        Private columnNextEventYears As Global.System.Data.DataColumn
        
        Private columnYield_RiskDate As Global.System.Data.DataColumn
        
        Private columnInterestRateCalculated As Global.System.Data.DataColumn
        
        Private columnPV_Calculated As Global.System.Data.DataColumn
        
        Private columnInterestRatePlus200_orig As Global.System.Data.DataColumn
        
        Private columnInterestRateMinus200_orig As Global.System.Data.DataColumn
        
        Private columnInterestRatePlus200_Corrected As Global.System.Data.DataColumn
        
        Private columnInterestRateMinus200_Corrected As Global.System.Data.DataColumn
        
        Private columnPV_IRplus200_Corrected As Global.System.Data.DataColumn
        
        Private columnPV_IRminus200_Corrected As Global.System.Data.DataColumn
        
        Private columnDifferencePV_IRplus200_PV_Calculated As Global.System.Data.DataColumn
        
        Private columnDifferencePV_IRminus200_PV_Calculated As Global.System.Data.DataColumn
        
        Private columnInternalInfo As Global.System.Data.DataColumn
        
        Private columnCalculationMethod As Global.System.Data.DataColumn
        
        Private columnPeriodNr As Global.System.Data.DataColumn
        
        Private columnMonthsToEventDate As Global.System.Data.DataColumn
        
        Private columnCashFlow As Global.System.Data.DataColumn
        
        Private columnWeightingFactor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RATERISK DETAILS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Contract_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _GLMaster___Account_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnGLMaster___Account_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractClearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractClear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Counterparty_IssuerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnCounterparty_Issuer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_Balance_EUR_Equ_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestAmountOrigCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestAmountOrigCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestAmountEuroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestAmountEuro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AccruedInterestEndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccruedInterestEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AccruedInterestAmountEURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccruedInterestAmountEUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AccruedInterestAmountOrigCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccruedInterestAmountOrigCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AverageDurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DaysToEventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDaysToEventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATA_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RISK_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRISK_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IMPORT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IdRateRiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRateRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIOD_AdditionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_Additional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIOD_MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_MaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DaysToMaturityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDaysToMaturity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ClientNrMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNrM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ContractClearMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractClearM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIOD_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TOTAL_CASH_FLOWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_CASH_FLOW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NextEventPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextEventPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NextEventNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextEventNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NextEventYearsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextEventYears
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Yield_RiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYield_RiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRateCalculatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateCalculated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PV_CalculatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPV_Calculated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRatePlus200_origColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRatePlus200_orig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRateMinus200_origColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateMinus200_orig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRatePlus200_CorrectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRatePlus200_Corrected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InterestRateMinus200_CorrectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateMinus200_Corrected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PV_IRplus200_CorrectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPV_IRplus200_Corrected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PV_IRminus200_CorrectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPV_IRminus200_Corrected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DifferencePV_IRplus200_PV_CalculatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDifferencePV_IRplus200_PV_Calculated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DifferencePV_IRminus200_PV_CalculatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDifferencePV_IRminus200_PV_Calculated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InternalInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInternalInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CalculationMethodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationMethod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PeriodNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MonthsToEventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthsToEventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CashFlowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashFlow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WeightingFactorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightingFactor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RATERISK_DETAILSRow
            Get
                Return CType(Me.Rows(index),RATERISK_DETAILSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILSRowChanging As RATERISK_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILSRowChanged As RATERISK_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILSRowDeleting As RATERISK_DETAILSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILSRowDeleted As RATERISK_DETAILSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddRATERISK_DETAILSRow(ByVal row As RATERISK_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddRATERISK_DETAILSRow( _
                    ByVal PERIOD As String,  _
                    ByVal BusinessType As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal ProductType As String,  _
                    ByVal _GLMaster___Account_Type As String,  _
                    ByVal ClientNr As String,  _
                    ByVal _Contract_Account As String,  _
                    ByVal ContractClear As String,  _
                    ByVal _Counterparty_Issuer As String,  _
                    ByVal StartDate As Date,  _
                    ByVal Next_EventType As String,  _
                    ByVal Next_EventDate As Date,  _
                    ByVal Final_Maturity_Date As Date,  _
                    ByVal Type As String,  _
                    ByVal CURRENCY As String,  _
                    ByVal _Principal_Amount_Value_Balance As Double,  _
                    ByVal _Principal_Amount_Value_Balance_EUR_Equ_ As Double,  _
                    ByVal InterestRate As Double,  _
                    ByVal InterestAmountOrigCur As Double,  _
                    ByVal InterestAmountEuro As Double,  _
                    ByVal AccruedInterestEndDate As Date,  _
                    ByVal AccruedInterestAmountEUR As Double,  _
                    ByVal AccruedInterestAmountOrigCur As Double,  _
                    ByVal AverageDuration As Double,  _
                    ByVal DaysToEventDate As Double,  _
                    ByVal DATA_DATE As Date,  _
                    ByVal RISK_DATE As Date,  _
                    ByVal IMPORT_DATE As Date,  _
                    ByVal IdRateRiskDate As Date,  _
                    ByVal PERIOD_Additional As String,  _
                    ByVal PERIOD_MaturityDate As String,  _
                    ByVal DaysToMaturity As Double,  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractClearM As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal InterestType As String,  _
                    ByVal TOTAL_CASH_FLOW As Double,  _
                    ByVal NextEventPeriod As String,  _
                    ByVal NextEventNr As Double,  _
                    ByVal NextEventYears As Double,  _
                    ByVal Yield_RiskDate As Date,  _
                    ByVal InterestRateCalculated As Double,  _
                    ByVal PV_Calculated As Double,  _
                    ByVal InterestRatePlus200_orig As Double,  _
                    ByVal InterestRateMinus200_orig As Double,  _
                    ByVal InterestRatePlus200_Corrected As Double,  _
                    ByVal InterestRateMinus200_Corrected As Double,  _
                    ByVal PV_IRplus200_Corrected As Double,  _
                    ByVal PV_IRminus200_Corrected As Double,  _
                    ByVal DifferencePV_IRplus200_PV_Calculated As Double,  _
                    ByVal DifferencePV_IRminus200_PV_Calculated As Double,  _
                    ByVal InternalInfo As String,  _
                    ByVal CalculationMethod As Double,  _
                    ByVal PeriodNr As Double,  _
                    ByVal MonthsToEventDate As Double,  _
                    ByVal CashFlow As Double,  _
                    ByVal WeightingFactor As Double) As RATERISK_DETAILSRow
            Dim rowRATERISK_DETAILSRow As RATERISK_DETAILSRow = CType(Me.NewRow,RATERISK_DETAILSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PERIOD, BusinessType, Contract_Type, ProductType, _GLMaster___Account_Type, ClientNr, _Contract_Account, ContractClear, _Counterparty_Issuer, StartDate, Next_EventType, Next_EventDate, Final_Maturity_Date, Type, CURRENCY, _Principal_Amount_Value_Balance, _Principal_Amount_Value_Balance_EUR_Equ_, InterestRate, InterestAmountOrigCur, InterestAmountEuro, AccruedInterestEndDate, AccruedInterestAmountEUR, AccruedInterestAmountOrigCur, AverageDuration, DaysToEventDate, DATA_DATE, RISK_DATE, IMPORT_DATE, IdRateRiskDate, PERIOD_Additional, PERIOD_MaturityDate, DaysToMaturity, ClientNrM, ContractClearM, PERIOD_N, InterestType, TOTAL_CASH_FLOW, NextEventPeriod, NextEventNr, NextEventYears, Yield_RiskDate, InterestRateCalculated, PV_Calculated, InterestRatePlus200_orig, InterestRateMinus200_orig, InterestRatePlus200_Corrected, InterestRateMinus200_Corrected, PV_IRplus200_Corrected, PV_IRminus200_Corrected, DifferencePV_IRplus200_PV_Calculated, DifferencePV_IRminus200_PV_Calculated, InternalInfo, CalculationMethod, PeriodNr, MonthsToEventDate, CashFlow, WeightingFactor}
            rowRATERISK_DETAILSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRATERISK_DETAILSRow)
            Return rowRATERISK_DETAILSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As RATERISK_DETAILSRow
            Return CType(Me.Rows.Find(New Object() {ID}),RATERISK_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RATERISK_DETAILSDataTable = CType(MyBase.Clone,RATERISK_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RATERISK_DETAILSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPERIOD = MyBase.Columns("PERIOD")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnContract_Type = MyBase.Columns("Contract Type")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me._columnGLMaster___Account_Type = MyBase.Columns("GLMaster / Account Type")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me._columnContract_Account = MyBase.Columns("Contract/Account")
            Me.columnContractClear = MyBase.Columns("ContractClear")
            Me._columnCounterparty_Issuer = MyBase.Columns("Counterparty/Issuer")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnNext_EventType = MyBase.Columns("Next EventType")
            Me.columnNext_EventDate = MyBase.Columns("Next EventDate")
            Me.columnFinal_Maturity_Date = MyBase.Columns("Final Maturity Date")
            Me.columnType = MyBase.Columns("Type")
            Me.columnCURRENCY = MyBase.Columns("CURRENCY")
            Me._columnPrincipal_Amount_Value_Balance = MyBase.Columns("Principal Amount/Value Balance")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = MyBase.Columns("Principal Amount/Value Balance(EUR Equ)")
            Me.columnInterestRate = MyBase.Columns("InterestRate")
            Me.columnInterestAmountOrigCur = MyBase.Columns("InterestAmountOrigCur")
            Me.columnInterestAmountEuro = MyBase.Columns("InterestAmountEuro")
            Me.columnAccruedInterestEndDate = MyBase.Columns("AccruedInterestEndDate")
            Me.columnAccruedInterestAmountEUR = MyBase.Columns("AccruedInterestAmountEUR")
            Me.columnAccruedInterestAmountOrigCur = MyBase.Columns("AccruedInterestAmountOrigCur")
            Me.columnAverageDuration = MyBase.Columns("AverageDuration")
            Me.columnDaysToEventDate = MyBase.Columns("DaysToEventDate")
            Me.columnDATA_DATE = MyBase.Columns("DATA DATE")
            Me.columnRISK_DATE = MyBase.Columns("RISK DATE")
            Me.columnIMPORT_DATE = MyBase.Columns("IMPORT DATE")
            Me.columnIdRateRiskDate = MyBase.Columns("IdRateRiskDate")
            Me.columnPERIOD_Additional = MyBase.Columns("PERIOD_Additional")
            Me.columnPERIOD_MaturityDate = MyBase.Columns("PERIOD_MaturityDate")
            Me.columnDaysToMaturity = MyBase.Columns("DaysToMaturity")
            Me.columnClientNrM = MyBase.Columns("ClientNrM")
            Me.columnContractClearM = MyBase.Columns("ContractClearM")
            Me.columnPERIOD_N = MyBase.Columns("PERIOD_N")
            Me.columnInterestType = MyBase.Columns("InterestType")
            Me.columnTOTAL_CASH_FLOW = MyBase.Columns("TOTAL_CASH_FLOW")
            Me.columnNextEventPeriod = MyBase.Columns("NextEventPeriod")
            Me.columnNextEventNr = MyBase.Columns("NextEventNr")
            Me.columnNextEventYears = MyBase.Columns("NextEventYears")
            Me.columnYield_RiskDate = MyBase.Columns("Yield_RiskDate")
            Me.columnInterestRateCalculated = MyBase.Columns("InterestRateCalculated")
            Me.columnPV_Calculated = MyBase.Columns("PV_Calculated")
            Me.columnInterestRatePlus200_orig = MyBase.Columns("InterestRatePlus200_orig")
            Me.columnInterestRateMinus200_orig = MyBase.Columns("InterestRateMinus200_orig")
            Me.columnInterestRatePlus200_Corrected = MyBase.Columns("InterestRatePlus200_Corrected")
            Me.columnInterestRateMinus200_Corrected = MyBase.Columns("InterestRateMinus200_Corrected")
            Me.columnPV_IRplus200_Corrected = MyBase.Columns("PV_IRplus200_Corrected")
            Me.columnPV_IRminus200_Corrected = MyBase.Columns("PV_IRminus200_Corrected")
            Me.columnDifferencePV_IRplus200_PV_Calculated = MyBase.Columns("DifferencePV_IRplus200_PV_Calculated")
            Me.columnDifferencePV_IRminus200_PV_Calculated = MyBase.Columns("DifferencePV_IRminus200_PV_Calculated")
            Me.columnInternalInfo = MyBase.Columns("InternalInfo")
            Me.columnCalculationMethod = MyBase.Columns("CalculationMethod")
            Me.columnPeriodNr = MyBase.Columns("PeriodNr")
            Me.columnMonthsToEventDate = MyBase.Columns("MonthsToEventDate")
            Me.columnCashFlow = MyBase.Columns("CashFlow")
            Me.columnWeightingFactor = MyBase.Columns("WeightingFactor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPERIOD = New Global.System.Data.DataColumn("PERIOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnContract_Type = New Global.System.Data.DataColumn("Contract Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Type)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me._columnGLMaster___Account_Type = New Global.System.Data.DataColumn("GLMaster / Account Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnGLMaster___Account_Type")
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_UserColumnName", "GLMaster / Account Type")
            MyBase.Columns.Add(Me._columnGLMaster___Account_Type)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me._columnContract_Account = New Global.System.Data.DataColumn("Contract/Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnContract_Account.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnContract_Account")
            Me._columnContract_Account.ExtendedProperties.Add("Generator_UserColumnName", "Contract/Account")
            MyBase.Columns.Add(Me._columnContract_Account)
            Me.columnContractClear = New Global.System.Data.DataColumn("ContractClear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractClear)
            Me._columnCounterparty_Issuer = New Global.System.Data.DataColumn("Counterparty/Issuer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCounterparty_Issuer")
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_UserColumnName", "Counterparty/Issuer")
            MyBase.Columns.Add(Me._columnCounterparty_Issuer)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnNext_EventType = New Global.System.Data.DataColumn("Next EventType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventType)
            Me.columnNext_EventDate = New Global.System.Data.DataColumn("Next EventDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventDate)
            Me.columnFinal_Maturity_Date = New Global.System.Data.DataColumn("Final Maturity Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Maturity_Date)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnCURRENCY = New Global.System.Data.DataColumn("CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY)
            Me._columnPrincipal_Amount_Value_Balance = New Global.System.Data.DataColumn("Principal Amount/Value Balance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance")
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = New Global.System.Data.DataColumn("Principal Amount/Value Balance(EUR Equ)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance_EUR_Equ_")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance(EUR Equ)")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_)
            Me.columnInterestRate = New Global.System.Data.DataColumn("InterestRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRate)
            Me.columnInterestAmountOrigCur = New Global.System.Data.DataColumn("InterestAmountOrigCur", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestAmountOrigCur)
            Me.columnInterestAmountEuro = New Global.System.Data.DataColumn("InterestAmountEuro", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestAmountEuro)
            Me.columnAccruedInterestEndDate = New Global.System.Data.DataColumn("AccruedInterestEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccruedInterestEndDate)
            Me.columnAccruedInterestAmountEUR = New Global.System.Data.DataColumn("AccruedInterestAmountEUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccruedInterestAmountEUR)
            Me.columnAccruedInterestAmountOrigCur = New Global.System.Data.DataColumn("AccruedInterestAmountOrigCur", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccruedInterestAmountOrigCur)
            Me.columnAverageDuration = New Global.System.Data.DataColumn("AverageDuration", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageDuration)
            Me.columnDaysToEventDate = New Global.System.Data.DataColumn("DaysToEventDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaysToEventDate)
            Me.columnDATA_DATE = New Global.System.Data.DataColumn("DATA DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_DATE)
            Me.columnRISK_DATE = New Global.System.Data.DataColumn("RISK DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRISK_DATE)
            Me.columnIMPORT_DATE = New Global.System.Data.DataColumn("IMPORT DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_DATE)
            Me.columnIdRateRiskDate = New Global.System.Data.DataColumn("IdRateRiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRateRiskDate)
            Me.columnPERIOD_Additional = New Global.System.Data.DataColumn("PERIOD_Additional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_Additional)
            Me.columnPERIOD_MaturityDate = New Global.System.Data.DataColumn("PERIOD_MaturityDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_MaturityDate)
            Me.columnDaysToMaturity = New Global.System.Data.DataColumn("DaysToMaturity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaysToMaturity)
            Me.columnClientNrM = New Global.System.Data.DataColumn("ClientNrM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNrM)
            Me.columnContractClearM = New Global.System.Data.DataColumn("ContractClearM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractClearM)
            Me.columnPERIOD_N = New Global.System.Data.DataColumn("PERIOD_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_N)
            Me.columnInterestType = New Global.System.Data.DataColumn("InterestType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestType)
            Me.columnTOTAL_CASH_FLOW = New Global.System.Data.DataColumn("TOTAL_CASH_FLOW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_CASH_FLOW)
            Me.columnNextEventPeriod = New Global.System.Data.DataColumn("NextEventPeriod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextEventPeriod)
            Me.columnNextEventNr = New Global.System.Data.DataColumn("NextEventNr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextEventNr)
            Me.columnNextEventYears = New Global.System.Data.DataColumn("NextEventYears", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextEventYears)
            Me.columnYield_RiskDate = New Global.System.Data.DataColumn("Yield_RiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYield_RiskDate)
            Me.columnInterestRateCalculated = New Global.System.Data.DataColumn("InterestRateCalculated", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateCalculated)
            Me.columnPV_Calculated = New Global.System.Data.DataColumn("PV_Calculated", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPV_Calculated)
            Me.columnInterestRatePlus200_orig = New Global.System.Data.DataColumn("InterestRatePlus200_orig", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRatePlus200_orig)
            Me.columnInterestRateMinus200_orig = New Global.System.Data.DataColumn("InterestRateMinus200_orig", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateMinus200_orig)
            Me.columnInterestRatePlus200_Corrected = New Global.System.Data.DataColumn("InterestRatePlus200_Corrected", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRatePlus200_Corrected)
            Me.columnInterestRateMinus200_Corrected = New Global.System.Data.DataColumn("InterestRateMinus200_Corrected", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateMinus200_Corrected)
            Me.columnPV_IRplus200_Corrected = New Global.System.Data.DataColumn("PV_IRplus200_Corrected", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPV_IRplus200_Corrected)
            Me.columnPV_IRminus200_Corrected = New Global.System.Data.DataColumn("PV_IRminus200_Corrected", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPV_IRminus200_Corrected)
            Me.columnDifferencePV_IRplus200_PV_Calculated = New Global.System.Data.DataColumn("DifferencePV_IRplus200_PV_Calculated", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDifferencePV_IRplus200_PV_Calculated)
            Me.columnDifferencePV_IRminus200_PV_Calculated = New Global.System.Data.DataColumn("DifferencePV_IRminus200_PV_Calculated", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDifferencePV_IRminus200_PV_Calculated)
            Me.columnInternalInfo = New Global.System.Data.DataColumn("InternalInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInternalInfo)
            Me.columnCalculationMethod = New Global.System.Data.DataColumn("CalculationMethod", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationMethod)
            Me.columnPeriodNr = New Global.System.Data.DataColumn("PeriodNr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodNr)
            Me.columnMonthsToEventDate = New Global.System.Data.DataColumn("MonthsToEventDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthsToEventDate)
            Me.columnCashFlow = New Global.System.Data.DataColumn("CashFlow", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashFlow)
            Me.columnWeightingFactor = New Global.System.Data.DataColumn("WeightingFactor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightingFactor)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnPERIOD.MaxLength = 255
            Me.columnBusinessType.MaxLength = 255
            Me.columnContract_Type.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me._columnGLMaster___Account_Type.MaxLength = 255
            Me.columnClientNr.MaxLength = 50
            Me._columnContract_Account.MaxLength = 255
            Me.columnContractClear.MaxLength = 255
            Me._columnCounterparty_Issuer.MaxLength = 255
            Me.columnNext_EventType.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnCURRENCY.MaxLength = 255
            Me.columnPERIOD_Additional.MaxLength = 255
            Me.columnPERIOD_MaturityDate.MaxLength = 255
            Me.columnClientNrM.MaxLength = 50
            Me.columnContractClearM.MaxLength = 50
            Me.columnPERIOD_N.MaxLength = 255
            Me.columnInterestType.MaxLength = 10
            Me.columnNextEventPeriod.MaxLength = 10
            Me.columnInternalInfo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewRATERISK_DETAILSRow() As RATERISK_DETAILSRow
            Return CType(Me.NewRow,RATERISK_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RATERISK_DETAILSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RATERISK_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RATERISK_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILSRowChanged(Me, New RATERISK_DETAILSRowChangeEvent(CType(e.Row,RATERISK_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RATERISK_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILSRowChanging(Me, New RATERISK_DETAILSRowChangeEvent(CType(e.Row,RATERISK_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RATERISK_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILSRowDeleted(Me, New RATERISK_DETAILSRowChangeEvent(CType(e.Row,RATERISK_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RATERISK_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILSRowDeleting(Me, New RATERISK_DETAILSRowChangeEvent(CType(e.Row,RATERISK_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveRATERISK_DETAILSRow(ByVal row As RATERISK_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RATERISK_DETAILSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RATERISK_DETAILS_ALL_DATADataTable
        Inherits Global.System.Data.TypedTableBase(Of RATERISK_DETAILS_ALL_DATARow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnContract_Type As Global.System.Data.DataColumn
        
        Private columnPERIOD As Global.System.Data.DataColumn
        
        Private columnPERIOD_N As Global.System.Data.DataColumn
        
        Private _columnGLMaster___Account_Type As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private _columnContract_Account As Global.System.Data.DataColumn
        
        Private _columnCounterparty_Issuer As Global.System.Data.DataColumn
        
        Private columnNext_EventDate As Global.System.Data.DataColumn
        
        Private columnNext_EventType As Global.System.Data.DataColumn
        
        Private columnFinal_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnCURRENCY As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance_EUR_Equ_ As Global.System.Data.DataColumn
        
        Private columnDATA_DATE As Global.System.Data.DataColumn
        
        Private columnRISK_DATE As Global.System.Data.DataColumn
        
        Private columnIdRateRiskDate As Global.System.Data.DataColumn
        
        Private columnDaysToEventDate As Global.System.Data.DataColumn
        
        Private columnInterest_Rate_Type As Global.System.Data.DataColumn
        
        Private columnWeighting_Factor As Global.System.Data.DataColumn
        
        Private _columnInterest_Rate_Change_200bps_ As Global.System.Data.DataColumn
        
        Private columnGL_Master As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RATERISK DETAILS ALL DATA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Contract_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIOD_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _GLMaster___Account_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnGLMaster___Account_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Counterparty_IssuerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnCounterparty_Issuer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_Balance_EUR_Equ_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATA_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RISK_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRISK_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IdRateRiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRateRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DaysToEventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDaysToEventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Interest_Rate_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest_Rate_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Weighting_FactorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeighting_Factor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Interest_Rate_Change_200bps_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnInterest_Rate_Change_200bps_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GL_MasterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_Master
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RATERISK_DETAILS_ALL_DATARow
            Get
                Return CType(Me.Rows(index),RATERISK_DETAILS_ALL_DATARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILS_ALL_DATARowChanging As RATERISK_DETAILS_ALL_DATARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILS_ALL_DATARowChanged As RATERISK_DETAILS_ALL_DATARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILS_ALL_DATARowDeleting As RATERISK_DETAILS_ALL_DATARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DETAILS_ALL_DATARowDeleted As RATERISK_DETAILS_ALL_DATARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddRATERISK_DETAILS_ALL_DATARow(ByVal row As RATERISK_DETAILS_ALL_DATARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddRATERISK_DETAILS_ALL_DATARow( _
                    ByVal Contract_Type As String,  _
                    ByVal PERIOD As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal _GLMaster___Account_Type As String,  _
                    ByVal ProductType As String,  _
                    ByVal _Contract_Account As String,  _
                    ByVal _Counterparty_Issuer As String,  _
                    ByVal Next_EventDate As Date,  _
                    ByVal Next_EventType As String,  _
                    ByVal Final_Maturity_Date As Date,  _
                    ByVal CURRENCY As String,  _
                    ByVal Type As String,  _
                    ByVal _Principal_Amount_Value_Balance As Double,  _
                    ByVal _Principal_Amount_Value_Balance_EUR_Equ_ As Double,  _
                    ByVal DATA_DATE As Date,  _
                    ByVal RISK_DATE As Date,  _
                    ByVal IdRateRiskDate As Date,  _
                    ByVal DaysToEventDate As Double,  _
                    ByVal Interest_Rate_Type As String,  _
                    ByVal Weighting_Factor As Double,  _
                    ByVal _Interest_Rate_Change_200bps_ As Double,  _
                    ByVal GL_Master As String) As RATERISK_DETAILS_ALL_DATARow
            Dim rowRATERISK_DETAILS_ALL_DATARow As RATERISK_DETAILS_ALL_DATARow = CType(Me.NewRow,RATERISK_DETAILS_ALL_DATARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Contract_Type, PERIOD, PERIOD_N, _GLMaster___Account_Type, ProductType, _Contract_Account, _Counterparty_Issuer, Next_EventDate, Next_EventType, Final_Maturity_Date, CURRENCY, Type, _Principal_Amount_Value_Balance, _Principal_Amount_Value_Balance_EUR_Equ_, DATA_DATE, RISK_DATE, IdRateRiskDate, DaysToEventDate, Interest_Rate_Type, Weighting_Factor, _Interest_Rate_Change_200bps_, GL_Master}
            rowRATERISK_DETAILS_ALL_DATARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRATERISK_DETAILS_ALL_DATARow)
            Return rowRATERISK_DETAILS_ALL_DATARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As RATERISK_DETAILS_ALL_DATARow
            Return CType(Me.Rows.Find(New Object() {ID}),RATERISK_DETAILS_ALL_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RATERISK_DETAILS_ALL_DATADataTable = CType(MyBase.Clone,RATERISK_DETAILS_ALL_DATADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RATERISK_DETAILS_ALL_DATADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnContract_Type = MyBase.Columns("Contract Type")
            Me.columnPERIOD = MyBase.Columns("PERIOD")
            Me.columnPERIOD_N = MyBase.Columns("PERIOD_N")
            Me._columnGLMaster___Account_Type = MyBase.Columns("GLMaster / Account Type")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me._columnContract_Account = MyBase.Columns("Contract/Account")
            Me._columnCounterparty_Issuer = MyBase.Columns("Counterparty/Issuer")
            Me.columnNext_EventDate = MyBase.Columns("Next EventDate")
            Me.columnNext_EventType = MyBase.Columns("Next EventType")
            Me.columnFinal_Maturity_Date = MyBase.Columns("Final Maturity Date")
            Me.columnCURRENCY = MyBase.Columns("CURRENCY")
            Me.columnType = MyBase.Columns("Type")
            Me._columnPrincipal_Amount_Value_Balance = MyBase.Columns("Principal Amount/Value Balance")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = MyBase.Columns("Principal Amount/Value Balance(EUR Equ)")
            Me.columnDATA_DATE = MyBase.Columns("DATA DATE")
            Me.columnRISK_DATE = MyBase.Columns("RISK DATE")
            Me.columnIdRateRiskDate = MyBase.Columns("IdRateRiskDate")
            Me.columnDaysToEventDate = MyBase.Columns("DaysToEventDate")
            Me.columnInterest_Rate_Type = MyBase.Columns("Interest Rate Type")
            Me.columnWeighting_Factor = MyBase.Columns("Weighting Factor")
            Me._columnInterest_Rate_Change_200bps_ = MyBase.Columns("Interest Rate Change(200bps)")
            Me.columnGL_Master = MyBase.Columns("GL Master")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnContract_Type = New Global.System.Data.DataColumn("Contract Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Type)
            Me.columnPERIOD = New Global.System.Data.DataColumn("PERIOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD)
            Me.columnPERIOD_N = New Global.System.Data.DataColumn("PERIOD_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_N)
            Me._columnGLMaster___Account_Type = New Global.System.Data.DataColumn("GLMaster / Account Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnGLMaster___Account_Type")
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_UserColumnName", "GLMaster / Account Type")
            MyBase.Columns.Add(Me._columnGLMaster___Account_Type)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me._columnContract_Account = New Global.System.Data.DataColumn("Contract/Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnContract_Account.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnContract_Account")
            Me._columnContract_Account.ExtendedProperties.Add("Generator_UserColumnName", "Contract/Account")
            MyBase.Columns.Add(Me._columnContract_Account)
            Me._columnCounterparty_Issuer = New Global.System.Data.DataColumn("Counterparty/Issuer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCounterparty_Issuer")
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_UserColumnName", "Counterparty/Issuer")
            MyBase.Columns.Add(Me._columnCounterparty_Issuer)
            Me.columnNext_EventDate = New Global.System.Data.DataColumn("Next EventDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventDate)
            Me.columnNext_EventType = New Global.System.Data.DataColumn("Next EventType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventType)
            Me.columnFinal_Maturity_Date = New Global.System.Data.DataColumn("Final Maturity Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Maturity_Date)
            Me.columnCURRENCY = New Global.System.Data.DataColumn("CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me._columnPrincipal_Amount_Value_Balance = New Global.System.Data.DataColumn("Principal Amount/Value Balance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance")
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = New Global.System.Data.DataColumn("Principal Amount/Value Balance(EUR Equ)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance_EUR_Equ_")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance(EUR Equ)")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_)
            Me.columnDATA_DATE = New Global.System.Data.DataColumn("DATA DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_DATE)
            Me.columnRISK_DATE = New Global.System.Data.DataColumn("RISK DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRISK_DATE)
            Me.columnIdRateRiskDate = New Global.System.Data.DataColumn("IdRateRiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRateRiskDate)
            Me.columnDaysToEventDate = New Global.System.Data.DataColumn("DaysToEventDate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaysToEventDate)
            Me.columnInterest_Rate_Type = New Global.System.Data.DataColumn("Interest Rate Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest_Rate_Type)
            Me.columnWeighting_Factor = New Global.System.Data.DataColumn("Weighting Factor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeighting_Factor)
            Me._columnInterest_Rate_Change_200bps_ = New Global.System.Data.DataColumn("Interest Rate Change(200bps)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnInterest_Rate_Change_200bps_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnInterest_Rate_Change_200bps_")
            Me._columnInterest_Rate_Change_200bps_.ExtendedProperties.Add("Generator_UserColumnName", "Interest Rate Change(200bps)")
            MyBase.Columns.Add(Me._columnInterest_Rate_Change_200bps_)
            Me.columnGL_Master = New Global.System.Data.DataColumn("GL Master", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_Master)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnContract_Type.MaxLength = 255
            Me.columnPERIOD.MaxLength = 255
            Me.columnPERIOD_N.MaxLength = 255
            Me._columnGLMaster___Account_Type.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me._columnContract_Account.MaxLength = 255
            Me._columnCounterparty_Issuer.MaxLength = 255
            Me.columnNext_EventType.MaxLength = 255
            Me.columnCURRENCY.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnInterest_Rate_Type.MaxLength = 50
            Me.columnGL_Master.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewRATERISK_DETAILS_ALL_DATARow() As RATERISK_DETAILS_ALL_DATARow
            Return CType(Me.NewRow,RATERISK_DETAILS_ALL_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RATERISK_DETAILS_ALL_DATARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RATERISK_DETAILS_ALL_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RATERISK_DETAILS_ALL_DATARowChangedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILS_ALL_DATARowChanged(Me, New RATERISK_DETAILS_ALL_DATARowChangeEvent(CType(e.Row,RATERISK_DETAILS_ALL_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RATERISK_DETAILS_ALL_DATARowChangingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILS_ALL_DATARowChanging(Me, New RATERISK_DETAILS_ALL_DATARowChangeEvent(CType(e.Row,RATERISK_DETAILS_ALL_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RATERISK_DETAILS_ALL_DATARowDeletedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILS_ALL_DATARowDeleted(Me, New RATERISK_DETAILS_ALL_DATARowChangeEvent(CType(e.Row,RATERISK_DETAILS_ALL_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RATERISK_DETAILS_ALL_DATARowDeletingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DETAILS_ALL_DATARowDeleting(Me, New RATERISK_DETAILS_ALL_DATARowChangeEvent(CType(e.Row,RATERISK_DETAILS_ALL_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveRATERISK_DETAILS_ALL_DATARow(ByVal row As RATERISK_DETAILS_ALL_DATARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RATERISK_DETAILS_ALL_DATADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RATERISK_TOTALSDataTable
        Inherits Global.System.Data.TypedTableBase(Of RATERISK_TOTALSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCURRENCY As Global.System.Data.DataColumn
        
        Private columnPeriod As Global.System.Data.DataColumn
        
        Private columnPERIOD_N As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance_EUR_Equ_ As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR As Global.System.Data.DataColumn
        
        Private columnPRINCIPAL_AMOUNT_N As Global.System.Data.DataColumn
        
        Private columnPRINCIPAL_AMOUNT_EUR_N As Global.System.Data.DataColumn
        
        Private columnWF_N As Global.System.Data.DataColumn
        
        Private columnAM_N As Global.System.Data.DataColumn
        
        Private columnWF1 As Global.System.Data.DataColumn
        
        Private columnAM1 As Global.System.Data.DataColumn
        
        Private columnWF2 As Global.System.Data.DataColumn
        
        Private columnAM2 As Global.System.Data.DataColumn
        
        Private columnWF3 As Global.System.Data.DataColumn
        
        Private columnAM3 As Global.System.Data.DataColumn
        
        Private columnWF4 As Global.System.Data.DataColumn
        
        Private columnAM4 As Global.System.Data.DataColumn
        
        Private columnWF10 As Global.System.Data.DataColumn
        
        Private columnAM10 As Global.System.Data.DataColumn
        
        Private columnWF20 As Global.System.Data.DataColumn
        
        Private columnAM20 As Global.System.Data.DataColumn
        
        Private columnWF25 As Global.System.Data.DataColumn
        
        Private columnAM25 As Global.System.Data.DataColumn
        
        Private columnWFHUMP As Global.System.Data.DataColumn
        
        Private columnAMHUMP As Global.System.Data.DataColumn
        
        Private columnWF_TWIST1 As Global.System.Data.DataColumn
        
        Private columnAM_TWIST1 As Global.System.Data.DataColumn
        
        Private columnWF_TWIST2 As Global.System.Data.DataColumn
        
        Private columnAM_TWIST2 As Global.System.Data.DataColumn
        
        Private columnDATA_DATE As Global.System.Data.DataColumn
        
        Private columnRISK_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_DATE As Global.System.Data.DataColumn
        
        Private columnBEMERKUNGEN As Global.System.Data.DataColumn
        
        Private columnIdRateRiskDate As Global.System.Data.DataColumn
        
        Private columnCalculationMethod As Global.System.Data.DataColumn
        
        Private columnPeriodNr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RATERISK TOTALS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIOD_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_Balance_EUR_Equ_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_Balance_EUR_Equ_withoutSECURColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PRINCIPAL_AMOUNT_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINCIPAL_AMOUNT_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PRINCIPAL_AMOUNT_EUR_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINCIPAL_AMOUNT_EUR_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WFHUMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWFHUMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AMHUMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMHUMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF_TWIST1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF_TWIST1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM_TWIST1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM_TWIST1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WF_TWIST2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWF_TWIST2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AM_TWIST2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM_TWIST2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATA_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RISK_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRISK_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IMPORT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BEMERKUNGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBEMERKUNGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IdRateRiskDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRateRiskDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CalculationMethodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationMethod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PeriodNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RATERISK_TOTALSRow
            Get
                Return CType(Me.Rows(index),RATERISK_TOTALSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_TOTALSRowChanging As RATERISK_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_TOTALSRowChanged As RATERISK_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_TOTALSRowDeleting As RATERISK_TOTALSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_TOTALSRowDeleted As RATERISK_TOTALSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddRATERISK_TOTALSRow(ByVal row As RATERISK_TOTALSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddRATERISK_TOTALSRow( _
                    ByVal CURRENCY As String,  _
                    ByVal Period As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal Type As String,  _
                    ByVal _Principal_Amount_Value_Balance As Double,  _
                    ByVal _Principal_Amount_Value_Balance_EUR_Equ_ As Double,  _
                    ByVal _Principal_Amount_Value_Balance_EUR_Equ_withoutSECUR As Double,  _
                    ByVal PRINCIPAL_AMOUNT_N As Double,  _
                    ByVal PRINCIPAL_AMOUNT_EUR_N As Double,  _
                    ByVal WF_N As Double,  _
                    ByVal AM_N As Double,  _
                    ByVal WF1 As Double,  _
                    ByVal AM1 As Double,  _
                    ByVal WF2 As Double,  _
                    ByVal AM2 As Double,  _
                    ByVal WF3 As Double,  _
                    ByVal AM3 As Double,  _
                    ByVal WF4 As Double,  _
                    ByVal AM4 As Double,  _
                    ByVal WF10 As Double,  _
                    ByVal AM10 As Double,  _
                    ByVal WF20 As Double,  _
                    ByVal AM20 As Double,  _
                    ByVal WF25 As Double,  _
                    ByVal AM25 As Double,  _
                    ByVal WFHUMP As Double,  _
                    ByVal AMHUMP As Double,  _
                    ByVal WF_TWIST1 As Double,  _
                    ByVal AM_TWIST1 As Double,  _
                    ByVal WF_TWIST2 As Double,  _
                    ByVal AM_TWIST2 As Double,  _
                    ByVal DATA_DATE As Date,  _
                    ByVal RISK_DATE As Date,  _
                    ByVal IMPORT_DATE As Date,  _
                    ByVal BEMERKUNGEN As String,  _
                    ByVal IdRateRiskDate As Date,  _
                    ByVal CalculationMethod As Double,  _
                    ByVal PeriodNr As Double) As RATERISK_TOTALSRow
            Dim rowRATERISK_TOTALSRow As RATERISK_TOTALSRow = CType(Me.NewRow,RATERISK_TOTALSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CURRENCY, Period, PERIOD_N, Type, _Principal_Amount_Value_Balance, _Principal_Amount_Value_Balance_EUR_Equ_, _Principal_Amount_Value_Balance_EUR_Equ_withoutSECUR, PRINCIPAL_AMOUNT_N, PRINCIPAL_AMOUNT_EUR_N, WF_N, AM_N, WF1, AM1, WF2, AM2, WF3, AM3, WF4, AM4, WF10, AM10, WF20, AM20, WF25, AM25, WFHUMP, AMHUMP, WF_TWIST1, AM_TWIST1, WF_TWIST2, AM_TWIST2, DATA_DATE, RISK_DATE, IMPORT_DATE, BEMERKUNGEN, IdRateRiskDate, CalculationMethod, PeriodNr}
            rowRATERISK_TOTALSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRATERISK_TOTALSRow)
            Return rowRATERISK_TOTALSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As RATERISK_TOTALSRow
            Return CType(Me.Rows.Find(New Object() {ID}),RATERISK_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RATERISK_TOTALSDataTable = CType(MyBase.Clone,RATERISK_TOTALSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RATERISK_TOTALSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCURRENCY = MyBase.Columns("CURRENCY")
            Me.columnPeriod = MyBase.Columns("Period")
            Me.columnPERIOD_N = MyBase.Columns("PERIOD_N")
            Me.columnType = MyBase.Columns("Type")
            Me._columnPrincipal_Amount_Value_Balance = MyBase.Columns("Principal Amount/Value Balance")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = MyBase.Columns("Principal Amount/Value Balance(EUR Equ)")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR = MyBase.Columns("Principal Amount/Value Balance(EUR Equ)withoutSECUR")
            Me.columnPRINCIPAL_AMOUNT_N = MyBase.Columns("PRINCIPAL_AMOUNT_N")
            Me.columnPRINCIPAL_AMOUNT_EUR_N = MyBase.Columns("PRINCIPAL_AMOUNT_EUR_N")
            Me.columnWF_N = MyBase.Columns("WF_N")
            Me.columnAM_N = MyBase.Columns("AM_N")
            Me.columnWF1 = MyBase.Columns("WF1")
            Me.columnAM1 = MyBase.Columns("AM1")
            Me.columnWF2 = MyBase.Columns("WF2")
            Me.columnAM2 = MyBase.Columns("AM2")
            Me.columnWF3 = MyBase.Columns("WF3")
            Me.columnAM3 = MyBase.Columns("AM3")
            Me.columnWF4 = MyBase.Columns("WF4")
            Me.columnAM4 = MyBase.Columns("AM4")
            Me.columnWF10 = MyBase.Columns("WF10")
            Me.columnAM10 = MyBase.Columns("AM10")
            Me.columnWF20 = MyBase.Columns("WF20")
            Me.columnAM20 = MyBase.Columns("AM20")
            Me.columnWF25 = MyBase.Columns("WF25")
            Me.columnAM25 = MyBase.Columns("AM25")
            Me.columnWFHUMP = MyBase.Columns("WFHUMP")
            Me.columnAMHUMP = MyBase.Columns("AMHUMP")
            Me.columnWF_TWIST1 = MyBase.Columns("WF_TWIST1")
            Me.columnAM_TWIST1 = MyBase.Columns("AM_TWIST1")
            Me.columnWF_TWIST2 = MyBase.Columns("WF_TWIST2")
            Me.columnAM_TWIST2 = MyBase.Columns("AM_TWIST2")
            Me.columnDATA_DATE = MyBase.Columns("DATA DATE")
            Me.columnRISK_DATE = MyBase.Columns("RISK DATE")
            Me.columnIMPORT_DATE = MyBase.Columns("IMPORT DATE")
            Me.columnBEMERKUNGEN = MyBase.Columns("BEMERKUNGEN")
            Me.columnIdRateRiskDate = MyBase.Columns("IdRateRiskDate")
            Me.columnCalculationMethod = MyBase.Columns("CalculationMethod")
            Me.columnPeriodNr = MyBase.Columns("PeriodNr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCURRENCY = New Global.System.Data.DataColumn("CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY)
            Me.columnPeriod = New Global.System.Data.DataColumn("Period", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriod)
            Me.columnPERIOD_N = New Global.System.Data.DataColumn("PERIOD_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_N)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me._columnPrincipal_Amount_Value_Balance = New Global.System.Data.DataColumn("Principal Amount/Value Balance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance")
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = New Global.System.Data.DataColumn("Principal Amount/Value Balance(EUR Equ)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance_EUR_Equ_")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance(EUR Equ)")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR = New Global.System.Data.DataColumn("Principal Amount/Value Balance(EUR Equ)withoutSECUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance(EUR Equ)withoutSECUR")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_withoutSECUR)
            Me.columnPRINCIPAL_AMOUNT_N = New Global.System.Data.DataColumn("PRINCIPAL_AMOUNT_N", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINCIPAL_AMOUNT_N)
            Me.columnPRINCIPAL_AMOUNT_EUR_N = New Global.System.Data.DataColumn("PRINCIPAL_AMOUNT_EUR_N", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINCIPAL_AMOUNT_EUR_N)
            Me.columnWF_N = New Global.System.Data.DataColumn("WF_N", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF_N)
            Me.columnAM_N = New Global.System.Data.DataColumn("AM_N", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM_N)
            Me.columnWF1 = New Global.System.Data.DataColumn("WF1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF1)
            Me.columnAM1 = New Global.System.Data.DataColumn("AM1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM1)
            Me.columnWF2 = New Global.System.Data.DataColumn("WF2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF2)
            Me.columnAM2 = New Global.System.Data.DataColumn("AM2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM2)
            Me.columnWF3 = New Global.System.Data.DataColumn("WF3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF3)
            Me.columnAM3 = New Global.System.Data.DataColumn("AM3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM3)
            Me.columnWF4 = New Global.System.Data.DataColumn("WF4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF4)
            Me.columnAM4 = New Global.System.Data.DataColumn("AM4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM4)
            Me.columnWF10 = New Global.System.Data.DataColumn("WF10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF10)
            Me.columnAM10 = New Global.System.Data.DataColumn("AM10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM10)
            Me.columnWF20 = New Global.System.Data.DataColumn("WF20", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF20)
            Me.columnAM20 = New Global.System.Data.DataColumn("AM20", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM20)
            Me.columnWF25 = New Global.System.Data.DataColumn("WF25", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF25)
            Me.columnAM25 = New Global.System.Data.DataColumn("AM25", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM25)
            Me.columnWFHUMP = New Global.System.Data.DataColumn("WFHUMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWFHUMP)
            Me.columnAMHUMP = New Global.System.Data.DataColumn("AMHUMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMHUMP)
            Me.columnWF_TWIST1 = New Global.System.Data.DataColumn("WF_TWIST1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF_TWIST1)
            Me.columnAM_TWIST1 = New Global.System.Data.DataColumn("AM_TWIST1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM_TWIST1)
            Me.columnWF_TWIST2 = New Global.System.Data.DataColumn("WF_TWIST2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWF_TWIST2)
            Me.columnAM_TWIST2 = New Global.System.Data.DataColumn("AM_TWIST2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM_TWIST2)
            Me.columnDATA_DATE = New Global.System.Data.DataColumn("DATA DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_DATE)
            Me.columnRISK_DATE = New Global.System.Data.DataColumn("RISK DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRISK_DATE)
            Me.columnIMPORT_DATE = New Global.System.Data.DataColumn("IMPORT DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_DATE)
            Me.columnBEMERKUNGEN = New Global.System.Data.DataColumn("BEMERKUNGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBEMERKUNGEN)
            Me.columnIdRateRiskDate = New Global.System.Data.DataColumn("IdRateRiskDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRateRiskDate)
            Me.columnCalculationMethod = New Global.System.Data.DataColumn("CalculationMethod", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationMethod)
            Me.columnPeriodNr = New Global.System.Data.DataColumn("PeriodNr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodNr)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCURRENCY.MaxLength = 255
            Me.columnPeriod.MaxLength = 255
            Me.columnPERIOD_N.MaxLength = 255
            Me.columnType.MaxLength = 50
            Me.columnBEMERKUNGEN.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewRATERISK_TOTALSRow() As RATERISK_TOTALSRow
            Return CType(Me.NewRow,RATERISK_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RATERISK_TOTALSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RATERISK_TOTALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RATERISK_TOTALSRowChangedEvent) Is Nothing) Then
                RaiseEvent RATERISK_TOTALSRowChanged(Me, New RATERISK_TOTALSRowChangeEvent(CType(e.Row,RATERISK_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RATERISK_TOTALSRowChangingEvent) Is Nothing) Then
                RaiseEvent RATERISK_TOTALSRowChanging(Me, New RATERISK_TOTALSRowChangeEvent(CType(e.Row,RATERISK_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RATERISK_TOTALSRowDeletedEvent) Is Nothing) Then
                RaiseEvent RATERISK_TOTALSRowDeleted(Me, New RATERISK_TOTALSRowChangeEvent(CType(e.Row,RATERISK_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RATERISK_TOTALSRowDeletingEvent) Is Nothing) Then
                RaiseEvent RATERISK_TOTALSRowDeleting(Me, New RATERISK_TOTALSRowChangeEvent(CType(e.Row,RATERISK_TOTALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveRATERISK_TOTALSRow(ByVal row As RATERISK_TOTALSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RATERISK_TOTALSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RATERISK_DELETIONSDataTable
        Inherits Global.System.Data.TypedTableBase(Of RATERISK_DELETIONSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPERIOD As Global.System.Data.DataColumn
        
        Private columnCURRENCY As Global.System.Data.DataColumn
        
        Private columnContract_Type As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private _columnGLMaster___Account_Type As Global.System.Data.DataColumn
        
        Private _columnContract_Account As Global.System.Data.DataColumn
        
        Private columnNext_EventType As Global.System.Data.DataColumn
        
        Private _columnCounterparty_Issuer As Global.System.Data.DataColumn
        
        Private columnNext_EventDate As Global.System.Data.DataColumn
        
        Private columnFinal_Maturity_Date As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance As Global.System.Data.DataColumn
        
        Private columnDATA_DATE As Global.System.Data.DataColumn
        
        Private _columnPrincipal_Amount_Value_Balance_EUR_Equ_ As Global.System.Data.DataColumn
        
        Private columnRISK_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RATERISK DELETIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Contract_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _GLMaster___Account_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnGLMaster___Account_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Counterparty_IssuerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnCounterparty_Issuer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Next_EventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNext_EventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Final_Maturity_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Maturity_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATA_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _Principal_Amount_Value_Balance_EUR_Equ_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RISK_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRISK_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RATERISK_DELETIONSRow
            Get
                Return CType(Me.Rows(index),RATERISK_DELETIONSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DELETIONSRowChanging As RATERISK_DELETIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DELETIONSRowChanged As RATERISK_DELETIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DELETIONSRowDeleting As RATERISK_DELETIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event RATERISK_DELETIONSRowDeleted As RATERISK_DELETIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddRATERISK_DELETIONSRow(ByVal row As RATERISK_DELETIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddRATERISK_DELETIONSRow(ByVal PERIOD As String, ByVal CURRENCY As String, ByVal Contract_Type As String, ByVal ProductType As String, ByVal _GLMaster___Account_Type As String, ByVal _Contract_Account As String, ByVal Next_EventType As String, ByVal _Counterparty_Issuer As String, ByVal Next_EventDate As Date, ByVal Final_Maturity_Date As Date, ByVal Type As String, ByVal _Principal_Amount_Value_Balance As Double, ByVal DATA_DATE As Date, ByVal _Principal_Amount_Value_Balance_EUR_Equ_ As Double, ByVal RISK_DATE As Date) As RATERISK_DELETIONSRow
            Dim rowRATERISK_DELETIONSRow As RATERISK_DELETIONSRow = CType(Me.NewRow,RATERISK_DELETIONSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PERIOD, CURRENCY, Contract_Type, ProductType, _GLMaster___Account_Type, _Contract_Account, Next_EventType, _Counterparty_Issuer, Next_EventDate, Final_Maturity_Date, Type, _Principal_Amount_Value_Balance, DATA_DATE, _Principal_Amount_Value_Balance_EUR_Equ_, RISK_DATE}
            rowRATERISK_DELETIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRATERISK_DELETIONSRow)
            Return rowRATERISK_DELETIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As RATERISK_DELETIONSRow
            Return CType(Me.Rows.Find(New Object() {ID}),RATERISK_DELETIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RATERISK_DELETIONSDataTable = CType(MyBase.Clone,RATERISK_DELETIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RATERISK_DELETIONSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPERIOD = MyBase.Columns("PERIOD")
            Me.columnCURRENCY = MyBase.Columns("CURRENCY")
            Me.columnContract_Type = MyBase.Columns("Contract Type")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me._columnGLMaster___Account_Type = MyBase.Columns("GLMaster / Account Type")
            Me._columnContract_Account = MyBase.Columns("Contract/Account")
            Me.columnNext_EventType = MyBase.Columns("Next EventType")
            Me._columnCounterparty_Issuer = MyBase.Columns("Counterparty/Issuer")
            Me.columnNext_EventDate = MyBase.Columns("Next EventDate")
            Me.columnFinal_Maturity_Date = MyBase.Columns("Final Maturity Date")
            Me.columnType = MyBase.Columns("Type")
            Me._columnPrincipal_Amount_Value_Balance = MyBase.Columns("Principal Amount/Value Balance")
            Me.columnDATA_DATE = MyBase.Columns("DATA DATE")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = MyBase.Columns("Principal Amount/Value Balance(EUR Equ)")
            Me.columnRISK_DATE = MyBase.Columns("RISK DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPERIOD = New Global.System.Data.DataColumn("PERIOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD)
            Me.columnCURRENCY = New Global.System.Data.DataColumn("CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY)
            Me.columnContract_Type = New Global.System.Data.DataColumn("Contract Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Type)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me._columnGLMaster___Account_Type = New Global.System.Data.DataColumn("GLMaster / Account Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnGLMaster___Account_Type")
            Me._columnGLMaster___Account_Type.ExtendedProperties.Add("Generator_UserColumnName", "GLMaster / Account Type")
            MyBase.Columns.Add(Me._columnGLMaster___Account_Type)
            Me._columnContract_Account = New Global.System.Data.DataColumn("Contract/Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnContract_Account.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnContract_Account")
            Me._columnContract_Account.ExtendedProperties.Add("Generator_UserColumnName", "Contract/Account")
            MyBase.Columns.Add(Me._columnContract_Account)
            Me.columnNext_EventType = New Global.System.Data.DataColumn("Next EventType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventType)
            Me._columnCounterparty_Issuer = New Global.System.Data.DataColumn("Counterparty/Issuer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCounterparty_Issuer")
            Me._columnCounterparty_Issuer.ExtendedProperties.Add("Generator_UserColumnName", "Counterparty/Issuer")
            MyBase.Columns.Add(Me._columnCounterparty_Issuer)
            Me.columnNext_EventDate = New Global.System.Data.DataColumn("Next EventDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNext_EventDate)
            Me.columnFinal_Maturity_Date = New Global.System.Data.DataColumn("Final Maturity Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Maturity_Date)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me._columnPrincipal_Amount_Value_Balance = New Global.System.Data.DataColumn("Principal Amount/Value Balance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance")
            Me._columnPrincipal_Amount_Value_Balance.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance)
            Me.columnDATA_DATE = New Global.System.Data.DataColumn("DATA DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_DATE)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_ = New Global.System.Data.DataColumn("Principal Amount/Value Balance(EUR Equ)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPrincipal_Amount_Value_Balance_EUR_Equ_")
            Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_.ExtendedProperties.Add("Generator_UserColumnName", "Principal Amount/Value Balance(EUR Equ)")
            MyBase.Columns.Add(Me._columnPrincipal_Amount_Value_Balance_EUR_Equ_)
            Me.columnRISK_DATE = New Global.System.Data.DataColumn("RISK DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRISK_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnPERIOD.MaxLength = 255
            Me.columnCURRENCY.MaxLength = 255
            Me.columnContract_Type.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me._columnGLMaster___Account_Type.MaxLength = 255
            Me._columnContract_Account.MaxLength = 255
            Me.columnNext_EventType.MaxLength = 255
            Me._columnCounterparty_Issuer.MaxLength = 255
            Me.columnType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewRATERISK_DELETIONSRow() As RATERISK_DELETIONSRow
            Return CType(Me.NewRow,RATERISK_DELETIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RATERISK_DELETIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RATERISK_DELETIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RATERISK_DELETIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DELETIONSRowChanged(Me, New RATERISK_DELETIONSRowChangeEvent(CType(e.Row,RATERISK_DELETIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RATERISK_DELETIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DELETIONSRowChanging(Me, New RATERISK_DELETIONSRowChangeEvent(CType(e.Row,RATERISK_DELETIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RATERISK_DELETIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent RATERISK_DELETIONSRowDeleted(Me, New RATERISK_DELETIONSRowChangeEvent(CType(e.Row,RATERISK_DELETIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RATERISK_DELETIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent RATERISK_DELETIONSRowDeleting(Me, New RATERISK_DELETIONSRowChangeEvent(CType(e.Row,RATERISK_DELETIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveRATERISK_DELETIONSRow(ByVal row As RATERISK_DELETIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterestRateRiskDataSet = New InterestRateRiskDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RATERISK_DELETIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RATERISK_DATERow
        Inherits Global.System.Data.DataRow
        
        Private tableRATERISK_DATE As RATERISK_DATEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRATERISK_DATE = CType(Me.Table,RATERISK_DATEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRATERISK_DATE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRATERISK_DATE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RateRiskDate() As Date
            Get
                Return CType(Me(Me.tableRATERISK_DATE.RateRiskDateColumn),Date)
            End Get
            Set
                Me(Me.tableRATERISK_DATE.RateRiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Working_Capital() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.Working_CapitalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Working Capital' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.Working_CapitalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Position_Capital() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE._Position_CapitalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Position/Capital' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE._Position_CapitalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SumAM1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.SumAM1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumAM1' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.SumAM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SumAM2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.SumAM2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumAM2' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.SumAM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IRR_200bps_Minus() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.IRR_200bps_MinusColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRR_200bps_Minus' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.IRR_200bps_MinusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IRR_200bps_Plus() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.IRR_200bps_PlusColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRR_200bps_Plus' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.IRR_200bps_PlusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VaR_99() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.VaR_99Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VaR_99' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.VaR_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VaR_95() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.VaR_95Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VaR_95' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.VaR_95Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VaR_IRRA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.VaR_IRRAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VaR_IRRA' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.VaR_IRRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UNTER_BEARBEITUNG_VON() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.UNTER_BEARBEITUNG_VONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNTER BEARBEITUNG VON' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.UNTER_BEARBEITUNG_VONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IdBank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DATE.IdBankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBank' in table 'RATERISK DATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DATE.IdBankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWorking_CapitalNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.Working_CapitalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWorking_CapitalNull()
            Me(Me.tableRATERISK_DATE.Working_CapitalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Position_CapitalNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE._Position_CapitalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Position_CapitalNull()
            Me(Me.tableRATERISK_DATE._Position_CapitalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSumAM1Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.SumAM1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSumAM1Null()
            Me(Me.tableRATERISK_DATE.SumAM1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSumAM2Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.SumAM2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSumAM2Null()
            Me(Me.tableRATERISK_DATE.SumAM2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIRR_200bps_MinusNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.IRR_200bps_MinusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIRR_200bps_MinusNull()
            Me(Me.tableRATERISK_DATE.IRR_200bps_MinusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIRR_200bps_PlusNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.IRR_200bps_PlusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIRR_200bps_PlusNull()
            Me(Me.tableRATERISK_DATE.IRR_200bps_PlusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVaR_99Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.VaR_99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVaR_99Null()
            Me(Me.tableRATERISK_DATE.VaR_99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVaR_95Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.VaR_95Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVaR_95Null()
            Me(Me.tableRATERISK_DATE.VaR_95Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVaR_IRRANull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.VaR_IRRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVaR_IRRANull()
            Me(Me.tableRATERISK_DATE.VaR_IRRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUSERNull()
            Me(Me.tableRATERISK_DATE.USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUNTER_BEARBEITUNG_VONNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.UNTER_BEARBEITUNG_VONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUNTER_BEARBEITUNG_VONNull()
            Me(Me.tableRATERISK_DATE.UNTER_BEARBEITUNG_VONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIdBankNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DATE.IdBankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIdBankNull()
            Me(Me.tableRATERISK_DATE.IdBankColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RATERISK_DETAILSRow
        Inherits Global.System.Data.DataRow
        
        Private tableRATERISK_DETAILS As RATERISK_DETAILSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRATERISK_DETAILS = CType(Me.Table,RATERISK_DETAILSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRATERISK_DETAILS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PERIODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.BusinessTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessType' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Contract_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.Contract_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract Type' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.Contract_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _GLMaster___Account_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS._GLMaster___Account_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLMaster / Account Type' in table 'RATERISK DETAILS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS._GLMaster___Account_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS._Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract/Account' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS._Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractClear() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.ContractClearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractClear' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.ContractClearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Counterparty_Issuer() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS._Counterparty_IssuerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counterparty/Issuer' in table 'RATERISK DETAILS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS._Counterparty_IssuerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.Next_EventTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventType' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.Next_EventTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.Next_EventDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.Next_EventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final Maturity Date' in table 'RATERISK DETAILS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_BalanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance' in table 'RATERISK DETAILS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance_EUR_Equ_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_Balance_EUR_Equ_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance(EUR Equ)' in table 'RATERISK"& _ 
                            " DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_Balance_EUR_Equ_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestAmountOrigCur() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestAmountOrigCurColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestAmountOrigCur' in table 'RATERISK DETAILS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestAmountOrigCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestAmountEuro() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestAmountEuroColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestAmountEuro' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestAmountEuroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AccruedInterestEndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.AccruedInterestEndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccruedInterestEndDate' in table 'RATERISK DETAILS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.AccruedInterestEndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AccruedInterestAmountEUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountEURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccruedInterestAmountEUR' in table 'RATERISK DETAILS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountEURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AccruedInterestAmountOrigCur() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountOrigCurColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccruedInterestAmountOrigCur' in table 'RATERISK DETAILS' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountOrigCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AverageDuration() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.AverageDurationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageDuration' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.AverageDurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DaysToEventDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.DaysToEventDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DaysToEventDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.DaysToEventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATA_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.DATA_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATA DATE' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.DATA_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RISK_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.RISK_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RISK DATE' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.RISK_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IMPORT_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.IMPORT_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT DATE' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.IMPORT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IdRateRiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.IdRateRiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdRateRiskDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.IdRateRiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD_Additional() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PERIOD_AdditionalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_Additional' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PERIOD_AdditionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD_MaturityDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PERIOD_MaturityDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_MaturityDate' in table 'RATERISK DETAILS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PERIOD_MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DaysToMaturity() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.DaysToMaturityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DaysToMaturity' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.DaysToMaturityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClientNrM() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.ClientNrMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNrM' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.ClientNrMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ContractClearM() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.ContractClearMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractClearM' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.ContractClearMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PERIOD_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_N' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PERIOD_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestType' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TOTAL_CASH_FLOW() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.TOTAL_CASH_FLOWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_CASH_FLOW' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.TOTAL_CASH_FLOWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NextEventPeriod() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.NextEventPeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextEventPeriod' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.NextEventPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NextEventNr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.NextEventNrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextEventNr' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.NextEventNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NextEventYears() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.NextEventYearsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextEventYears' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.NextEventYearsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Yield_RiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.Yield_RiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Yield_RiskDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.Yield_RiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRateCalculated() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRateCalculatedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateCalculated' in table 'RATERISK DETAILS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRateCalculatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PV_Calculated() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PV_CalculatedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PV_Calculated' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PV_CalculatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRatePlus200_orig() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_origColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRatePlus200_orig' in table 'RATERISK DETAILS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_origColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRateMinus200_orig() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_origColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateMinus200_orig' in table 'RATERISK DETAILS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_origColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRatePlus200_Corrected() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_CorrectedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRatePlus200_Corrected' in table 'RATERISK DETAILS' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_CorrectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InterestRateMinus200_Corrected() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_CorrectedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateMinus200_Corrected' in table 'RATERISK DETAILS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_CorrectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PV_IRplus200_Corrected() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PV_IRplus200_CorrectedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PV_IRplus200_Corrected' in table 'RATERISK DETAILS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PV_IRplus200_CorrectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PV_IRminus200_Corrected() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PV_IRminus200_CorrectedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PV_IRminus200_Corrected' in table 'RATERISK DETAILS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PV_IRminus200_CorrectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DifferencePV_IRplus200_PV_Calculated() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.DifferencePV_IRplus200_PV_CalculatedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DifferencePV_IRplus200_PV_Calculated' in table 'RATERISK DE"& _ 
                            "TAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.DifferencePV_IRplus200_PV_CalculatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DifferencePV_IRminus200_PV_Calculated() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.DifferencePV_IRminus200_PV_CalculatedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DifferencePV_IRminus200_PV_Calculated' in table 'RATERISK D"& _ 
                            "ETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.DifferencePV_IRminus200_PV_CalculatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InternalInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.InternalInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InternalInfo' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.InternalInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CalculationMethod() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.CalculationMethodColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalculationMethod' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.CalculationMethodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PeriodNr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.PeriodNrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodNr' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.PeriodNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MonthsToEventDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.MonthsToEventDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonthsToEventDate' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.MonthsToEventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CashFlow() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.CashFlowColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashFlow' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.CashFlowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WeightingFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS.WeightingFactorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeightingFactor' in table 'RATERISK DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS.WeightingFactorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIODNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PERIODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIODNull()
            Me(Me.tableRATERISK_DETAILS.PERIODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBusinessTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.BusinessTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBusinessTypeNull()
            Me(Me.tableRATERISK_DETAILS.BusinessTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContract_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.Contract_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContract_TypeNull()
            Me(Me.tableRATERISK_DETAILS.Contract_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableRATERISK_DETAILS.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_GLMaster___Account_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS._GLMaster___Account_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_GLMaster___Account_TypeNull()
            Me(Me.tableRATERISK_DETAILS._GLMaster___Account_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableRATERISK_DETAILS.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Contract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS._Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Contract_AccountNull()
            Me(Me.tableRATERISK_DETAILS._Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractClearNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.ContractClearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractClearNull()
            Me(Me.tableRATERISK_DETAILS.ContractClearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Counterparty_IssuerNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS._Counterparty_IssuerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Counterparty_IssuerNull()
            Me(Me.tableRATERISK_DETAILS._Counterparty_IssuerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableRATERISK_DETAILS.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.Next_EventTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventTypeNull()
            Me(Me.tableRATERISK_DETAILS.Next_EventTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.Next_EventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventDateNull()
            Me(Me.tableRATERISK_DETAILS.Next_EventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFinal_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFinal_Maturity_DateNull()
            Me(Me.tableRATERISK_DETAILS.Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableRATERISK_DETAILS.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURRENCYNull()
            Me(Me.tableRATERISK_DETAILS.CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_BalanceNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS._Principal_Amount_Value_BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_BalanceNull()
            Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_Balance_EUR_Equ_Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS._Principal_Amount_Value_Balance_EUR_Equ_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_Balance_EUR_Equ_Null()
            Me(Me.tableRATERISK_DETAILS._Principal_Amount_Value_Balance_EUR_Equ_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRateNull()
            Me(Me.tableRATERISK_DETAILS.InterestRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestAmountOrigCurNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestAmountOrigCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestAmountOrigCurNull()
            Me(Me.tableRATERISK_DETAILS.InterestAmountOrigCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestAmountEuroNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestAmountEuroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestAmountEuroNull()
            Me(Me.tableRATERISK_DETAILS.InterestAmountEuroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAccruedInterestEndDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.AccruedInterestEndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAccruedInterestEndDateNull()
            Me(Me.tableRATERISK_DETAILS.AccruedInterestEndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAccruedInterestAmountEURNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.AccruedInterestAmountEURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAccruedInterestAmountEURNull()
            Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountEURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAccruedInterestAmountOrigCurNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.AccruedInterestAmountOrigCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAccruedInterestAmountOrigCurNull()
            Me(Me.tableRATERISK_DETAILS.AccruedInterestAmountOrigCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAverageDurationNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.AverageDurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAverageDurationNull()
            Me(Me.tableRATERISK_DETAILS.AverageDurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDaysToEventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.DaysToEventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDaysToEventDateNull()
            Me(Me.tableRATERISK_DETAILS.DaysToEventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATA_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.DATA_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATA_DATENull()
            Me(Me.tableRATERISK_DETAILS.DATA_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRISK_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.RISK_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRISK_DATENull()
            Me(Me.tableRATERISK_DETAILS.RISK_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIMPORT_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.IMPORT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIMPORT_DATENull()
            Me(Me.tableRATERISK_DETAILS.IMPORT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIdRateRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.IdRateRiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIdRateRiskDateNull()
            Me(Me.tableRATERISK_DETAILS.IdRateRiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIOD_AdditionalNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PERIOD_AdditionalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIOD_AdditionalNull()
            Me(Me.tableRATERISK_DETAILS.PERIOD_AdditionalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIOD_MaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PERIOD_MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIOD_MaturityDateNull()
            Me(Me.tableRATERISK_DETAILS.PERIOD_MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDaysToMaturityNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.DaysToMaturityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDaysToMaturityNull()
            Me(Me.tableRATERISK_DETAILS.DaysToMaturityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsClientNrMNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.ClientNrMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetClientNrMNull()
            Me(Me.tableRATERISK_DETAILS.ClientNrMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContractClearMNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.ContractClearMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContractClearMNull()
            Me(Me.tableRATERISK_DETAILS.ContractClearMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIOD_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PERIOD_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIOD_NNull()
            Me(Me.tableRATERISK_DETAILS.PERIOD_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestTypeNull()
            Me(Me.tableRATERISK_DETAILS.InterestTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTOTAL_CASH_FLOWNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.TOTAL_CASH_FLOWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTOTAL_CASH_FLOWNull()
            Me(Me.tableRATERISK_DETAILS.TOTAL_CASH_FLOWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNextEventPeriodNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.NextEventPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNextEventPeriodNull()
            Me(Me.tableRATERISK_DETAILS.NextEventPeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNextEventNrNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.NextEventNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNextEventNrNull()
            Me(Me.tableRATERISK_DETAILS.NextEventNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNextEventYearsNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.NextEventYearsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNextEventYearsNull()
            Me(Me.tableRATERISK_DETAILS.NextEventYearsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsYield_RiskDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.Yield_RiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetYield_RiskDateNull()
            Me(Me.tableRATERISK_DETAILS.Yield_RiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRateCalculatedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRateCalculatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRateCalculatedNull()
            Me(Me.tableRATERISK_DETAILS.InterestRateCalculatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPV_CalculatedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PV_CalculatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPV_CalculatedNull()
            Me(Me.tableRATERISK_DETAILS.PV_CalculatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRatePlus200_origNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRatePlus200_origColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRatePlus200_origNull()
            Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_origColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRateMinus200_origNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRateMinus200_origColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRateMinus200_origNull()
            Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_origColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRatePlus200_CorrectedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRatePlus200_CorrectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRatePlus200_CorrectedNull()
            Me(Me.tableRATERISK_DETAILS.InterestRatePlus200_CorrectedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterestRateMinus200_CorrectedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InterestRateMinus200_CorrectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterestRateMinus200_CorrectedNull()
            Me(Me.tableRATERISK_DETAILS.InterestRateMinus200_CorrectedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPV_IRplus200_CorrectedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PV_IRplus200_CorrectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPV_IRplus200_CorrectedNull()
            Me(Me.tableRATERISK_DETAILS.PV_IRplus200_CorrectedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPV_IRminus200_CorrectedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PV_IRminus200_CorrectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPV_IRminus200_CorrectedNull()
            Me(Me.tableRATERISK_DETAILS.PV_IRminus200_CorrectedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDifferencePV_IRplus200_PV_CalculatedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.DifferencePV_IRplus200_PV_CalculatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDifferencePV_IRplus200_PV_CalculatedNull()
            Me(Me.tableRATERISK_DETAILS.DifferencePV_IRplus200_PV_CalculatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDifferencePV_IRminus200_PV_CalculatedNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.DifferencePV_IRminus200_PV_CalculatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDifferencePV_IRminus200_PV_CalculatedNull()
            Me(Me.tableRATERISK_DETAILS.DifferencePV_IRminus200_PV_CalculatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInternalInfoNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.InternalInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInternalInfoNull()
            Me(Me.tableRATERISK_DETAILS.InternalInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCalculationMethodNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.CalculationMethodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCalculationMethodNull()
            Me(Me.tableRATERISK_DETAILS.CalculationMethodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPeriodNrNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.PeriodNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPeriodNrNull()
            Me(Me.tableRATERISK_DETAILS.PeriodNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMonthsToEventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.MonthsToEventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMonthsToEventDateNull()
            Me(Me.tableRATERISK_DETAILS.MonthsToEventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCashFlowNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.CashFlowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCashFlowNull()
            Me(Me.tableRATERISK_DETAILS.CashFlowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWeightingFactorNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS.WeightingFactorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWeightingFactorNull()
            Me(Me.tableRATERISK_DETAILS.WeightingFactorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RATERISK_DETAILS_ALL_DATARow
        Inherits Global.System.Data.DataRow
        
        Private tableRATERISK_DETAILS_ALL_DATA As RATERISK_DETAILS_ALL_DATADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRATERISK_DETAILS_ALL_DATA = CType(Me.Table,RATERISK_DETAILS_ALL_DATADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Contract_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Contract_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract Type' in table 'RATERISK DETAILS ALL DATA' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Contract_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIOD_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_N' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIOD_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _GLMaster___Account_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._GLMaster___Account_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLMaster / Account Type' in table 'RATERISK DETAILS ALL DAT"& _ 
                            "A' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._GLMaster___Account_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'RATERISK DETAILS ALL DATA' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract/Account' in table 'RATERISK DETAILS ALL DATA' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Counterparty_Issuer() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._Counterparty_IssuerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counterparty/Issuer' in table 'RATERISK DETAILS ALL DATA' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._Counterparty_IssuerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventDate' in table 'RATERISK DETAILS ALL DATA' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventType' in table 'RATERISK DETAILS ALL DATA' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final Maturity Date' in table 'RATERISK DETAILS ALL DATA' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_BalanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance' in table 'RATERISK DETAILS "& _ 
                            "ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance_EUR_Equ_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_Balance_EUR_Equ_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance(EUR Equ)' in table 'RATERISK"& _ 
                            " DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_Balance_EUR_Equ_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATA_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.DATA_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATA DATE' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.DATA_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RISK_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.RISK_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RISK DATE' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.RISK_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IdRateRiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.IdRateRiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdRateRiskDate' in table 'RATERISK DETAILS ALL DATA' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.IdRateRiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DaysToEventDate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.DaysToEventDateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DaysToEventDate' in table 'RATERISK DETAILS ALL DATA' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.DaysToEventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Interest_Rate_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Interest_Rate_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Rate Type' in table 'RATERISK DETAILS ALL DATA' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Interest_Rate_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Weighting_Factor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.Weighting_FactorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weighting Factor' in table 'RATERISK DETAILS ALL DATA' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.Weighting_FactorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Interest_Rate_Change_200bps_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA._Interest_Rate_Change_200bps_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest Rate Change(200bps)' in table 'RATERISK DETAILS AL"& _ 
                            "L DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA._Interest_Rate_Change_200bps_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GL_Master() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DETAILS_ALL_DATA.GL_MasterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL Master' in table 'RATERISK DETAILS ALL DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DETAILS_ALL_DATA.GL_MasterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContract_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Contract_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContract_TypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Contract_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIODNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.PERIODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIODNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIOD_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.PERIOD_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIOD_NNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.PERIOD_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_GLMaster___Account_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._GLMaster___Account_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_GLMaster___Account_TypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._GLMaster___Account_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Contract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Contract_AccountNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Counterparty_IssuerNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._Counterparty_IssuerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Counterparty_IssuerNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._Counterparty_IssuerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventDateNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventTypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Next_EventTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFinal_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFinal_Maturity_DateNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURRENCYNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_BalanceNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_BalanceNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_Balance_EUR_Equ_Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_Balance_EUR_Equ_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_Balance_EUR_Equ_Null()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._Principal_Amount_Value_Balance_EUR_Equ_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATA_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.DATA_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATA_DATENull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.DATA_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRISK_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.RISK_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRISK_DATENull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.RISK_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIdRateRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.IdRateRiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIdRateRiskDateNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.IdRateRiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDaysToEventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.DaysToEventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDaysToEventDateNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.DaysToEventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInterest_Rate_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Interest_Rate_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInterest_Rate_TypeNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Interest_Rate_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWeighting_FactorNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.Weighting_FactorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWeighting_FactorNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.Weighting_FactorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Interest_Rate_Change_200bps_Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA._Interest_Rate_Change_200bps_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Interest_Rate_Change_200bps_Null()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA._Interest_Rate_Change_200bps_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGL_MasterNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DETAILS_ALL_DATA.GL_MasterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGL_MasterNull()
            Me(Me.tableRATERISK_DETAILS_ALL_DATA.GL_MasterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RATERISK_TOTALSRow
        Inherits Global.System.Data.DataRow
        
        Private tableRATERISK_TOTALS As RATERISK_TOTALSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRATERISK_TOTALS = CType(Me.Table,RATERISK_TOTALSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRATERISK_TOTALS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Period() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.PeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Period' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.PeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.PERIOD_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_N' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.PERIOD_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_BalanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance' in table 'RATERISK TOTALS' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance_EUR_Equ_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance(EUR Equ)' in table 'RATERISK"& _ 
                            " TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance_EUR_Equ_withoutSECUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_withoutSECURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance(EUR Equ)withoutSECUR' in tab"& _ 
                            "le 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_withoutSECURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PRINCIPAL_AMOUNT_N() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_NColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINCIPAL_AMOUNT_N' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PRINCIPAL_AMOUNT_EUR_N() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_EUR_NColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINCIPAL_AMOUNT_EUR_N' in table 'RATERISK TOTALS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_EUR_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF_N() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF_NColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF_N' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM_N() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM_NColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM_N' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF1' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM1' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF2' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM2' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF3' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM3' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF4' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM4' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF10' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM10' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF20() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF20Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF20' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM20() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM20Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM20' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF25() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF25Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF25' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM25() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM25Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM25' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WFHUMP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WFHUMPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WFHUMP' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WFHUMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AMHUMP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AMHUMPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMHUMP' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AMHUMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF_TWIST1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF_TWIST1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF_TWIST1' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF_TWIST1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM_TWIST1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM_TWIST1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM_TWIST1' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM_TWIST1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WF_TWIST2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.WF_TWIST2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WF_TWIST2' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.WF_TWIST2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AM_TWIST2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.AM_TWIST2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM_TWIST2' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.AM_TWIST2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATA_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.DATA_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATA DATE' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.DATA_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RISK_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.RISK_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RISK DATE' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.RISK_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IMPORT_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.IMPORT_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT DATE' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.IMPORT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BEMERKUNGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.BEMERKUNGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BEMERKUNGEN' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.BEMERKUNGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IdRateRiskDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.IdRateRiskDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdRateRiskDate' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.IdRateRiskDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CalculationMethod() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.CalculationMethodColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalculationMethod' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.CalculationMethodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PeriodNr() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_TOTALS.PeriodNrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodNr' in table 'RATERISK TOTALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_TOTALS.PeriodNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURRENCYNull()
            Me(Me.tableRATERISK_TOTALS.CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.PeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPeriodNull()
            Me(Me.tableRATERISK_TOTALS.PeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIOD_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.PERIOD_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIOD_NNull()
            Me(Me.tableRATERISK_TOTALS.PERIOD_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableRATERISK_TOTALS.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_BalanceNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS._Principal_Amount_Value_BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_BalanceNull()
            Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_Balance_EUR_Equ_Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_Balance_EUR_Equ_Null()
            Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_Balance_EUR_Equ_withoutSECURNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_withoutSECURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_Balance_EUR_Equ_withoutSECURNull()
            Me(Me.tableRATERISK_TOTALS._Principal_Amount_Value_Balance_EUR_Equ_withoutSECURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPRINCIPAL_AMOUNT_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPRINCIPAL_AMOUNT_NNull()
            Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPRINCIPAL_AMOUNT_EUR_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_EUR_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPRINCIPAL_AMOUNT_EUR_NNull()
            Me(Me.tableRATERISK_TOTALS.PRINCIPAL_AMOUNT_EUR_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF_NNull()
            Me(Me.tableRATERISK_TOTALS.WF_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM_NNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM_NNull()
            Me(Me.tableRATERISK_TOTALS.AM_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF1Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF1Null()
            Me(Me.tableRATERISK_TOTALS.WF1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM1Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM1Null()
            Me(Me.tableRATERISK_TOTALS.AM1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF2Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF2Null()
            Me(Me.tableRATERISK_TOTALS.WF2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM2Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM2Null()
            Me(Me.tableRATERISK_TOTALS.AM2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF3Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF3Null()
            Me(Me.tableRATERISK_TOTALS.WF3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM3Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM3Null()
            Me(Me.tableRATERISK_TOTALS.AM3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF4Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF4Null()
            Me(Me.tableRATERISK_TOTALS.WF4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM4Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM4Null()
            Me(Me.tableRATERISK_TOTALS.AM4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF10Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF10Null()
            Me(Me.tableRATERISK_TOTALS.WF10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM10Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM10Null()
            Me(Me.tableRATERISK_TOTALS.AM10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF20Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF20Null()
            Me(Me.tableRATERISK_TOTALS.WF20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM20Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM20Null()
            Me(Me.tableRATERISK_TOTALS.AM20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF25Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF25Null()
            Me(Me.tableRATERISK_TOTALS.WF25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM25Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM25Null()
            Me(Me.tableRATERISK_TOTALS.AM25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWFHUMPNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WFHUMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWFHUMPNull()
            Me(Me.tableRATERISK_TOTALS.WFHUMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAMHUMPNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AMHUMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAMHUMPNull()
            Me(Me.tableRATERISK_TOTALS.AMHUMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF_TWIST1Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF_TWIST1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF_TWIST1Null()
            Me(Me.tableRATERISK_TOTALS.WF_TWIST1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM_TWIST1Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM_TWIST1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM_TWIST1Null()
            Me(Me.tableRATERISK_TOTALS.AM_TWIST1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWF_TWIST2Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.WF_TWIST2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWF_TWIST2Null()
            Me(Me.tableRATERISK_TOTALS.WF_TWIST2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAM_TWIST2Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.AM_TWIST2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAM_TWIST2Null()
            Me(Me.tableRATERISK_TOTALS.AM_TWIST2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATA_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.DATA_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATA_DATENull()
            Me(Me.tableRATERISK_TOTALS.DATA_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRISK_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.RISK_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRISK_DATENull()
            Me(Me.tableRATERISK_TOTALS.RISK_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIMPORT_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.IMPORT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIMPORT_DATENull()
            Me(Me.tableRATERISK_TOTALS.IMPORT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBEMERKUNGENNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.BEMERKUNGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBEMERKUNGENNull()
            Me(Me.tableRATERISK_TOTALS.BEMERKUNGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIdRateRiskDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.IdRateRiskDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIdRateRiskDateNull()
            Me(Me.tableRATERISK_TOTALS.IdRateRiskDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCalculationMethodNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.CalculationMethodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCalculationMethodNull()
            Me(Me.tableRATERISK_TOTALS.CalculationMethodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPeriodNrNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_TOTALS.PeriodNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPeriodNrNull()
            Me(Me.tableRATERISK_TOTALS.PeriodNrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RATERISK_DELETIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableRATERISK_DELETIONS As RATERISK_DELETIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRATERISK_DELETIONS = CType(Me.Table,RATERISK_DELETIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRATERISK_DELETIONS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERIOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.PERIODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Contract_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.Contract_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract Type' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.Contract_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _GLMaster___Account_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS._GLMaster___Account_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLMaster / Account Type' in table 'RATERISK DELETIONS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS._GLMaster___Account_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS._Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract/Account' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS._Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.Next_EventTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventType' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.Next_EventTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Counterparty_Issuer() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS._Counterparty_IssuerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counterparty/Issuer' in table 'RATERISK DELETIONS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS._Counterparty_IssuerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Next_EventDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.Next_EventDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Next EventDate' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.Next_EventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Final_Maturity_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.Final_Maturity_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final Maturity Date' in table 'RATERISK DELETIONS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.Final_Maturity_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_BalanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance' in table 'RATERISK DELETION"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATA_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.DATA_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATA DATE' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.DATA_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Principal_Amount_Value_Balance_EUR_Equ_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_Balance_EUR_Equ_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal Amount/Value Balance(EUR Equ)' in table 'RATERISK"& _ 
                            " DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_Balance_EUR_Equ_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RISK_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRATERISK_DELETIONS.RISK_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RISK DATE' in table 'RATERISK DELETIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRATERISK_DELETIONS.RISK_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERIODNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.PERIODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERIODNull()
            Me(Me.tableRATERISK_DELETIONS.PERIODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCURRENCYNull()
            Me(Me.tableRATERISK_DELETIONS.CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsContract_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.Contract_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetContract_TypeNull()
            Me(Me.tableRATERISK_DELETIONS.Contract_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableRATERISK_DELETIONS.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_GLMaster___Account_TypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS._GLMaster___Account_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_GLMaster___Account_TypeNull()
            Me(Me.tableRATERISK_DELETIONS._GLMaster___Account_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Contract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS._Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Contract_AccountNull()
            Me(Me.tableRATERISK_DELETIONS._Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.Next_EventTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventTypeNull()
            Me(Me.tableRATERISK_DELETIONS.Next_EventTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Counterparty_IssuerNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS._Counterparty_IssuerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Counterparty_IssuerNull()
            Me(Me.tableRATERISK_DELETIONS._Counterparty_IssuerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNext_EventDateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.Next_EventDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNext_EventDateNull()
            Me(Me.tableRATERISK_DELETIONS.Next_EventDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFinal_Maturity_DateNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.Final_Maturity_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFinal_Maturity_DateNull()
            Me(Me.tableRATERISK_DELETIONS.Final_Maturity_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableRATERISK_DELETIONS.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_BalanceNull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_BalanceNull()
            Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATA_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.DATA_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATA_DATENull()
            Me(Me.tableRATERISK_DELETIONS.DATA_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_Principal_Amount_Value_Balance_EUR_Equ_Null() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_Balance_EUR_Equ_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_Principal_Amount_Value_Balance_EUR_Equ_Null()
            Me(Me.tableRATERISK_DELETIONS._Principal_Amount_Value_Balance_EUR_Equ_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRISK_DATENull() As Boolean
            Return Me.IsNull(Me.tableRATERISK_DELETIONS.RISK_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRISK_DATENull()
            Me(Me.tableRATERISK_DELETIONS.RISK_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class RATERISK_DATERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RATERISK_DATERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As RATERISK_DATERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As RATERISK_DATERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class RATERISK_DETAILSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RATERISK_DETAILSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As RATERISK_DETAILSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As RATERISK_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class RATERISK_DETAILS_ALL_DATARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RATERISK_DETAILS_ALL_DATARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As RATERISK_DETAILS_ALL_DATARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As RATERISK_DETAILS_ALL_DATARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class RATERISK_TOTALSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RATERISK_TOTALSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As RATERISK_TOTALSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As RATERISK_TOTALSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class RATERISK_DELETIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RATERISK_DELETIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As RATERISK_DELETIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As RATERISK_DELETIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace InterestRateRiskDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RATERISK_DATETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RATERISK DATE"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("RateRiskDate", "RateRiskDate")
            tableMapping.ColumnMappings.Add("Working Capital", "Working Capital")
            tableMapping.ColumnMappings.Add("Position/Capital", "Position/Capital")
            tableMapping.ColumnMappings.Add("SumAM1", "SumAM1")
            tableMapping.ColumnMappings.Add("SumAM2", "SumAM2")
            tableMapping.ColumnMappings.Add("IRR_200bps_Minus", "IRR_200bps_Minus")
            tableMapping.ColumnMappings.Add("IRR_200bps_Plus", "IRR_200bps_Plus")
            tableMapping.ColumnMappings.Add("VaR_99", "VaR_99")
            tableMapping.ColumnMappings.Add("VaR_95", "VaR_95")
            tableMapping.ColumnMappings.Add("VaR_IRRA", "VaR_IRRA")
            tableMapping.ColumnMappings.Add("USER", "USER")
            tableMapping.ColumnMappings.Add("UNTER BEARBEITUNG VON", "UNTER BEARBEITUNG VON")
            tableMapping.ColumnMappings.Add("IdBank", "IdBank")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RATERISK DATE] WHERE (([RateRiskDate] = @Original_RateRiskDate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RateRiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RATERISK DATE] ([RateRiskDate], [Working Capital], [Position/Capital"& _ 
                "], [SumAM1], [SumAM2], [IRR_200bps_Minus], [IRR_200bps_Plus], [VaR_99], [VaR_95]"& _ 
                ", [VaR_IRRA], [USER], [UNTER BEARBEITUNG VON], [IdBank]) VALUES (@RateRiskDate, "& _ 
                "@Working_Capital, @p1, @SumAM1, @SumAM2, @IRR_200bps_Minus, @IRR_200bps_Plus, @V"& _ 
                "aR_99, @VaR_95, @VaR_IRRA, @USER, @UNTER_BEARBEITUNG_VON, @IdBank)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Working_Capital", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Working Capital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Position/Capital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumAM1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumAM2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumAM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IRR_200bps_Minus", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IRR_200bps_Minus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IRR_200bps_Plus", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IRR_200bps_Plus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_99", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_95", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_95", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_IRRA", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_IRRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RATERISK DATE] SET [RateRiskDate] = @RateRiskDate, [Working Capital] = @W"& _ 
                "orking_Capital, [Position/Capital] = @p1, [SumAM1] = @SumAM1, [SumAM2] = @SumAM2"& _ 
                ", [IRR_200bps_Minus] = @IRR_200bps_Minus, [IRR_200bps_Plus] = @IRR_200bps_Plus, "& _ 
                "[VaR_99] = @VaR_99, [VaR_95] = @VaR_95, [VaR_IRRA] = @VaR_IRRA, [USER] = @USER, "& _ 
                "[UNTER BEARBEITUNG VON] = @UNTER_BEARBEITUNG_VON, [IdBank] = @IdBank WHERE (([Ra"& _ 
                "teRiskDate] = @Original_RateRiskDate))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Working_Capital", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Working Capital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Position/Capital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumAM1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SumAM2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SumAM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IRR_200bps_Minus", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IRR_200bps_Minus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IRR_200bps_Plus", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IRR_200bps_Plus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_99", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_95", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_95", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VaR_IRRA", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VaR_IRRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNTER_BEARBEITUNG_VON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNTER BEARBEITUNG VON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdBank", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdBank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RateRiskDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, RateRiskDate, [Working Capital], [Position/Capital], SumAM1, Su"& _ 
                "mAM2, IRR_200bps_Minus, IRR_200bps_Plus, VaR_99, VaR_95, VaR_IRRA, [USER], [UNTE"& _ 
                "R BEARBEITUNG VON], IdBank"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DATE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (RateR"& _ 
                "iskDate >= '20181231')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY RateRiskDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, IRR_200bps_Minus, IRR_200bps_Plus, IdBank, [Position/Capital], RateRis"& _ 
                "kDate, SumAM1, SumAM2, [UNTER BEARBEITUNG VON], [USER], VaR_95, VaR_99, VaR_IRRA"& _ 
                ", [Working Capital] FROM [RATERISK DATE] WHERE (RateRiskDate = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DATEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InterestRateRiskDataSet.RATERISK_DATEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DATEDataTable = New InterestRateRiskDataSet.RATERISK_DATEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DATEDataTable, ByVal Param1 As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Date) As InterestRateRiskDataSet.RATERISK_DATEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,Date)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DATEDataTable = New InterestRateRiskDataSet.RATERISK_DATEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DATEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As InterestRateRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RATERISK DATE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RateRiskDate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RateRiskDate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RateRiskDate As Date, ByVal Working_Capital As Global.System.Nullable(Of Double), ByVal p1 As Global.System.Nullable(Of Double), ByVal SumAM1 As Global.System.Nullable(Of Double), ByVal SumAM2 As Global.System.Nullable(Of Double), ByVal IRR_200bps_Minus As Global.System.Nullable(Of Double), ByVal IRR_200bps_Plus As Global.System.Nullable(Of Double), ByVal VaR_99 As Global.System.Nullable(Of Double), ByVal VaR_95 As Global.System.Nullable(Of Double), ByVal VaR_IRRA As Global.System.Nullable(Of Double), ByVal USER As String, ByVal UNTER_BEARBEITUNG_VON As String, ByVal IdBank As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(RateRiskDate,Date)
            If (Working_Capital.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Working_Capital.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SumAM1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SumAM1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SumAM2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SumAM2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IRR_200bps_Minus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IRR_200bps_Minus.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IRR_200bps_Plus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IRR_200bps_Plus.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (VaR_99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(VaR_99.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VaR_95.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(VaR_95.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (VaR_IRRA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(VaR_IRRA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(USER,String)
            End If
            If (UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(UNTER_BEARBEITUNG_VON,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RateRiskDate As Date, ByVal Working_Capital As Global.System.Nullable(Of Double), ByVal p1 As Global.System.Nullable(Of Double), ByVal SumAM1 As Global.System.Nullable(Of Double), ByVal SumAM2 As Global.System.Nullable(Of Double), ByVal IRR_200bps_Minus As Global.System.Nullable(Of Double), ByVal IRR_200bps_Plus As Global.System.Nullable(Of Double), ByVal VaR_99 As Global.System.Nullable(Of Double), ByVal VaR_95 As Global.System.Nullable(Of Double), ByVal VaR_IRRA As Global.System.Nullable(Of Double), ByVal USER As String, ByVal UNTER_BEARBEITUNG_VON As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_RateRiskDate As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RateRiskDate,Date)
            If (Working_Capital.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Working_Capital.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SumAM1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SumAM1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SumAM2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SumAM2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IRR_200bps_Minus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IRR_200bps_Minus.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IRR_200bps_Plus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IRR_200bps_Plus.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (VaR_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(VaR_99.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VaR_95.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(VaR_95.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (VaR_IRRA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(VaR_IRRA.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(USER,String)
            End If
            If (UNTER_BEARBEITUNG_VON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UNTER_BEARBEITUNG_VON,String)
            End If
            If (IdBank.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IdBank.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_RateRiskDate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Working_Capital As Global.System.Nullable(Of Double), ByVal p1 As Global.System.Nullable(Of Double), ByVal SumAM1 As Global.System.Nullable(Of Double), ByVal SumAM2 As Global.System.Nullable(Of Double), ByVal IRR_200bps_Minus As Global.System.Nullable(Of Double), ByVal IRR_200bps_Plus As Global.System.Nullable(Of Double), ByVal VaR_99 As Global.System.Nullable(Of Double), ByVal VaR_95 As Global.System.Nullable(Of Double), ByVal VaR_IRRA As Global.System.Nullable(Of Double), ByVal USER As String, ByVal UNTER_BEARBEITUNG_VON As String, ByVal IdBank As Global.System.Nullable(Of Integer), ByVal Original_RateRiskDate As Date) As Integer
            Return Me.Update(Original_RateRiskDate, Working_Capital, p1, SumAM1, SumAM2, IRR_200bps_Minus, IRR_200bps_Plus, VaR_99, VaR_95, VaR_IRRA, USER, UNTER_BEARBEITUNG_VON, IdBank, Original_RateRiskDate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RATERISK_DETAILSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RATERISK DETAILS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PERIOD", "PERIOD")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            tableMapping.ColumnMappings.Add("Contract Type", "Contract Type")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("GLMaster / Account Type", "GLMaster / Account Type")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("Contract/Account", "Contract/Account")
            tableMapping.ColumnMappings.Add("ContractClear", "ContractClear")
            tableMapping.ColumnMappings.Add("Counterparty/Issuer", "Counterparty/Issuer")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("Next EventType", "Next EventType")
            tableMapping.ColumnMappings.Add("Next EventDate", "Next EventDate")
            tableMapping.ColumnMappings.Add("Final Maturity Date", "Final Maturity Date")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("CURRENCY", "CURRENCY")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance", "Principal Amount/Value Balance")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance(EUR Equ)", "Principal Amount/Value Balance(EUR Equ)")
            tableMapping.ColumnMappings.Add("InterestRate", "InterestRate")
            tableMapping.ColumnMappings.Add("InterestAmountOrigCur", "InterestAmountOrigCur")
            tableMapping.ColumnMappings.Add("InterestAmountEuro", "InterestAmountEuro")
            tableMapping.ColumnMappings.Add("AccruedInterestEndDate", "AccruedInterestEndDate")
            tableMapping.ColumnMappings.Add("AccruedInterestAmountEUR", "AccruedInterestAmountEUR")
            tableMapping.ColumnMappings.Add("AccruedInterestAmountOrigCur", "AccruedInterestAmountOrigCur")
            tableMapping.ColumnMappings.Add("AverageDuration", "AverageDuration")
            tableMapping.ColumnMappings.Add("DaysToEventDate", "DaysToEventDate")
            tableMapping.ColumnMappings.Add("DATA DATE", "DATA DATE")
            tableMapping.ColumnMappings.Add("RISK DATE", "RISK DATE")
            tableMapping.ColumnMappings.Add("IMPORT DATE", "IMPORT DATE")
            tableMapping.ColumnMappings.Add("IdRateRiskDate", "IdRateRiskDate")
            tableMapping.ColumnMappings.Add("PERIOD_Additional", "PERIOD_Additional")
            tableMapping.ColumnMappings.Add("PERIOD_MaturityDate", "PERIOD_MaturityDate")
            tableMapping.ColumnMappings.Add("DaysToMaturity", "DaysToMaturity")
            tableMapping.ColumnMappings.Add("ClientNrM", "ClientNrM")
            tableMapping.ColumnMappings.Add("ContractClearM", "ContractClearM")
            tableMapping.ColumnMappings.Add("PERIOD_N", "PERIOD_N")
            tableMapping.ColumnMappings.Add("InterestType", "InterestType")
            tableMapping.ColumnMappings.Add("TOTAL_CASH_FLOW", "TOTAL_CASH_FLOW")
            tableMapping.ColumnMappings.Add("NextEventPeriod", "NextEventPeriod")
            tableMapping.ColumnMappings.Add("NextEventNr", "NextEventNr")
            tableMapping.ColumnMappings.Add("NextEventYears", "NextEventYears")
            tableMapping.ColumnMappings.Add("Yield_RiskDate", "Yield_RiskDate")
            tableMapping.ColumnMappings.Add("InterestRateCalculated", "InterestRateCalculated")
            tableMapping.ColumnMappings.Add("PV_Calculated", "PV_Calculated")
            tableMapping.ColumnMappings.Add("InterestRatePlus200_orig", "InterestRatePlus200_orig")
            tableMapping.ColumnMappings.Add("InterestRateMinus200_orig", "InterestRateMinus200_orig")
            tableMapping.ColumnMappings.Add("InterestRatePlus200_Corrected", "InterestRatePlus200_Corrected")
            tableMapping.ColumnMappings.Add("InterestRateMinus200_Corrected", "InterestRateMinus200_Corrected")
            tableMapping.ColumnMappings.Add("PV_IRplus200_Corrected", "PV_IRplus200_Corrected")
            tableMapping.ColumnMappings.Add("PV_IRminus200_Corrected", "PV_IRminus200_Corrected")
            tableMapping.ColumnMappings.Add("DifferencePV_IRplus200_PV_Calculated", "DifferencePV_IRplus200_PV_Calculated")
            tableMapping.ColumnMappings.Add("DifferencePV_IRminus200_PV_Calculated", "DifferencePV_IRminus200_PV_Calculated")
            tableMapping.ColumnMappings.Add("InternalInfo", "InternalInfo")
            tableMapping.ColumnMappings.Add("CalculationMethod", "CalculationMethod")
            tableMapping.ColumnMappings.Add("PeriodNr", "PeriodNr")
            tableMapping.ColumnMappings.Add("MonthsToEventDate", "MonthsToEventDate")
            tableMapping.ColumnMappings.Add("CashFlow", "CashFlow")
            tableMapping.ColumnMappings.Add("WeightingFactor", "WeightingFactor")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RATERISK DETAILS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RATERISK DETAILS] ([PERIOD], [BusinessType], [Contract Type], [Produ"& _ 
                "ctType], [GLMaster / Account Type], [ClientNr], [Contract/Account], [ContractCle"& _ 
                "ar], [Counterparty/Issuer], [StartDate], [Next EventType], [Next EventDate], [Fi"& _ 
                "nal Maturity Date], [Type], [CURRENCY], [Principal Amount/Value Balance], [Princ"& _ 
                "ipal Amount/Value Balance(EUR Equ)], [InterestRate], [InterestAmountOrigCur], [I"& _ 
                "nterestAmountEuro], [AccruedInterestEndDate], [AccruedInterestAmountEUR], [Accru"& _ 
                "edInterestAmountOrigCur], [AverageDuration], [DaysToEventDate], [DATA DATE], [RI"& _ 
                "SK DATE], [IMPORT DATE], [IdRateRiskDate], [PERIOD_Additional], [PERIOD_Maturity"& _ 
                "Date], [DaysToMaturity], [ClientNrM], [ContractClearM], [PERIOD_N], [InterestTyp"& _ 
                "e], [TOTAL_CASH_FLOW], [NextEventPeriod], [NextEventNr], [NextEventYears], [Yiel"& _ 
                "d_RiskDate], [InterestRateCalculated], [PV_Calculated], [InterestRatePlus200_ori"& _ 
                "g], [InterestRateMinus200_orig], [InterestRatePlus200_Corrected], [InterestRateM"& _ 
                "inus200_Corrected], [PV_IRplus200_Corrected], [PV_IRminus200_Corrected], [Differ"& _ 
                "encePV_IRplus200_PV_Calculated], [DifferencePV_IRminus200_PV_Calculated], [Inter"& _ 
                "nalInfo], [CalculationMethod], [PeriodNr], [MonthsToEventDate], [CashFlow], [Wei"& _ 
                "ghtingFactor]) VALUES (@PERIOD, @BusinessType, @Contract_Type, @ProductType, @p1"& _ 
                ", @ClientNr, @p4, @ContractClear, @p7, @StartDate, @Next_EventType, @Next_EventD"& _ 
                "ate, @Final_Maturity_Date, @Type, @CURRENCY, @p10, @p13, @InterestRate, @Interes"& _ 
                "tAmountOrigCur, @InterestAmountEuro, @AccruedInterestEndDate, @AccruedInterestAm"& _ 
                "ountEUR, @AccruedInterestAmountOrigCur, @AverageDuration, @DaysToEventDate, @DAT"& _ 
                "A_DATE, @RISK_DATE, @IMPORT_DATE, @IdRateRiskDate, @PERIOD_Additional, @PERIOD_M"& _ 
                "aturityDate, @DaysToMaturity, @ClientNrM, @ContractClearM, @PERIOD_N, @InterestT"& _ 
                "ype, @TOTAL_CASH_FLOW, @NextEventPeriod, @NextEventNr, @NextEventYears, @Yield_R"& _ 
                "iskDate, @InterestRateCalculated, @PV_Calculated, @InterestRatePlus200_orig, @In"& _ 
                "terestRateMinus200_orig, @InterestRatePlus200_Corrected, @InterestRateMinus200_C"& _ 
                "orrected, @PV_IRplus200_Corrected, @PV_IRminus200_Corrected, @DifferencePV_IRplu"& _ 
                "s200_PV_Calculated, @DifferencePV_IRminus200_PV_Calculated, @InternalInfo, @Calc"& _ 
                "ulationMethod, @PeriodNr, @MonthsToEventDate, @CashFlow, @WeightingFactor)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractClear", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractClear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestAmountOrigCur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestAmountOrigCur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestAmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestAmountEuro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestEndDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestEndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestAmountEUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestAmountEUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestAmountOrigCur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestAmountOrigCur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageDuration", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageDuration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_Additional", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_Additional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_MaturityDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToMaturity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToMaturity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNrM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNrM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractClearM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractClearM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_CASH_FLOW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_CASH_FLOW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventPeriod", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventPeriod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventYears", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventYears", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Yield_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Yield_RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateCalculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRatePlus200_orig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRatePlus200_orig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateMinus200_orig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateMinus200_orig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRatePlus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRatePlus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateMinus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateMinus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_IRplus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_IRplus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_IRminus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_IRminus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DifferencePV_IRplus200_PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DifferencePV_IRplus200_PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DifferencePV_IRminus200_PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DifferencePV_IRminus200_PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InternalInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InternalInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalculationMethod", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PeriodNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthsToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthsToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlow", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightingFactor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightingFactor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RATERISK DETAILS] SET [PERIOD] = @PERIOD, [BusinessType] = @BusinessType,"& _ 
                " [Contract Type] = @Contract_Type, [ProductType] = @ProductType, [GLMaster / Acc"& _ 
                "ount Type] = @p1, [ClientNr] = @ClientNr, [Contract/Account] = @p4, [ContractCle"& _ 
                "ar] = @ContractClear, [Counterparty/Issuer] = @p7, [StartDate] = @StartDate, [Ne"& _ 
                "xt EventType] = @Next_EventType, [Next EventDate] = @Next_EventDate, [Final Matu"& _ 
                "rity Date] = @Final_Maturity_Date, [Type] = @Type, [CURRENCY] = @CURRENCY, [Prin"& _ 
                "cipal Amount/Value Balance] = @p10, [Principal Amount/Value Balance(EUR Equ)] = "& _ 
                "@p13, [InterestRate] = @InterestRate, [InterestAmountOrigCur] = @InterestAmountO"& _ 
                "rigCur, [InterestAmountEuro] = @InterestAmountEuro, [AccruedInterestEndDate] = @"& _ 
                "AccruedInterestEndDate, [AccruedInterestAmountEUR] = @AccruedInterestAmountEUR, "& _ 
                "[AccruedInterestAmountOrigCur] = @AccruedInterestAmountOrigCur, [AverageDuration"& _ 
                "] = @AverageDuration, [DaysToEventDate] = @DaysToEventDate, [DATA DATE] = @DATA_"& _ 
                "DATE, [RISK DATE] = @RISK_DATE, [IMPORT DATE] = @IMPORT_DATE, [IdRateRiskDate] ="& _ 
                " @IdRateRiskDate, [PERIOD_Additional] = @PERIOD_Additional, [PERIOD_MaturityDate"& _ 
                "] = @PERIOD_MaturityDate, [DaysToMaturity] = @DaysToMaturity, [ClientNrM] = @Cli"& _ 
                "entNrM, [ContractClearM] = @ContractClearM, [PERIOD_N] = @PERIOD_N, [InterestTyp"& _ 
                "e] = @InterestType, [TOTAL_CASH_FLOW] = @TOTAL_CASH_FLOW, [NextEventPeriod] = @N"& _ 
                "extEventPeriod, [NextEventNr] = @NextEventNr, [NextEventYears] = @NextEventYears"& _ 
                ", [Yield_RiskDate] = @Yield_RiskDate, [InterestRateCalculated] = @InterestRateCa"& _ 
                "lculated, [PV_Calculated] = @PV_Calculated, [InterestRatePlus200_orig] = @Intere"& _ 
                "stRatePlus200_orig, [InterestRateMinus200_orig] = @InterestRateMinus200_orig, [I"& _ 
                "nterestRatePlus200_Corrected] = @InterestRatePlus200_Corrected, [InterestRateMin"& _ 
                "us200_Corrected] = @InterestRateMinus200_Corrected, [PV_IRplus200_Corrected] = @"& _ 
                "PV_IRplus200_Corrected, [PV_IRminus200_Corrected] = @PV_IRminus200_Corrected, [D"& _ 
                "ifferencePV_IRplus200_PV_Calculated] = @DifferencePV_IRplus200_PV_Calculated, [D"& _ 
                "ifferencePV_IRminus200_PV_Calculated] = @DifferencePV_IRminus200_PV_Calculated, "& _ 
                "[InternalInfo] = @InternalInfo, [CalculationMethod] = @CalculationMethod, [Perio"& _ 
                "dNr] = @PeriodNr, [MonthsToEventDate] = @MonthsToEventDate, [CashFlow] = @CashFl"& _ 
                "ow, [WeightingFactor] = @WeightingFactor WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractClear", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractClear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestAmountOrigCur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestAmountOrigCur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestAmountEuro", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestAmountEuro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestEndDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestEndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestAmountEUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestAmountEUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccruedInterestAmountOrigCur", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccruedInterestAmountOrigCur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageDuration", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageDuration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_Additional", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_Additional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_MaturityDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToMaturity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToMaturity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNrM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNrM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractClearM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractClearM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_CASH_FLOW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_CASH_FLOW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventPeriod", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventPeriod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextEventYears", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextEventYears", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Yield_RiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Yield_RiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateCalculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateCalculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRatePlus200_orig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRatePlus200_orig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateMinus200_orig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateMinus200_orig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRatePlus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRatePlus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateMinus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateMinus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_IRplus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_IRplus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PV_IRminus200_Corrected", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PV_IRminus200_Corrected", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DifferencePV_IRplus200_PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DifferencePV_IRplus200_PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DifferencePV_IRminus200_PV_Calculated", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DifferencePV_IRminus200_PV_Calculated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InternalInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InternalInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalculationMethod", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PeriodNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthsToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MonthsToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlow", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightingFactor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightingFactor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, PERIOD, BusinessType, [Contract Type], ProductType, [GLMaster /"& _ 
                " Account Type], ClientNr, [Contract/Account], ContractClear, [Counterparty/Issue"& _ 
                "r], StartDate, [Next EventType], [Next EventDate], [Final Maturity Date], Type, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CURRENCY, [Principal Amount/Value Balance], [Principa"& _ 
                "l Amount/Value Balance(EUR Equ)], InterestRate, InterestAmountOrigCur, InterestA"& _ 
                "mountEuro, AccruedInterestEndDate, AccruedInterestAmountEUR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "        AccruedInterestAmountOrigCur, AverageDuration, DaysToEventDate, [DATA DA"& _ 
                "TE], [RISK DATE], [IMPORT DATE], IdRateRiskDate, PERIOD_Additional, PERIOD_Matur"& _ 
                "ityDate, DaysToMaturity, ClientNrM, ContractClearM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         P"& _ 
                "ERIOD_N, InterestType, TOTAL_CASH_FLOW, NextEventPeriod, NextEventNr, NextEventY"& _ 
                "ears, Yield_RiskDate, InterestRateCalculated, PV_Calculated, InterestRatePlus200"& _ 
                "_orig, InterestRateMinus200_orig, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         InterestRatePlus200"& _ 
                "_Corrected, InterestRateMinus200_Corrected, PV_IRplus200_Corrected, PV_IRminus20"& _ 
                "0_Corrected, DifferencePV_IRplus200_PV_Calculated, DifferencePV_IRminus200_PV_Ca"& _ 
                "lculated, InternalInfo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CalculationMethod, PeriodNr, "& _ 
                "MonthsToEventDate, CashFlow, WeightingFactor"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DETAILS]"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AccruedInterestAmountEUR, AccruedInterestAmountOrigCur, AccruedInterestEnd"& _ 
                "Date, AverageDuration, BusinessType, CURRENCY, CalculationMethod, CashFlow, Clie"& _ 
                "ntNr, ClientNrM, [Contract Type], [Contract/Account], ContractClear, ContractCle"& _ 
                "arM, [Counterparty/Issuer], [DATA DATE], DaysToEventDate, DaysToMaturity, Differ"& _ 
                "encePV_IRminus200_PV_Calculated, DifferencePV_IRplus200_PV_Calculated, [Final Ma"& _ 
                "turity Date], [GLMaster / Account Type], ID, [IMPORT DATE], IdRateRiskDate, Inte"& _ 
                "restAmountEuro, InterestAmountOrigCur, InterestRate, InterestRateCalculated, Int"& _ 
                "erestRateMinus200_Corrected, InterestRateMinus200_orig, InterestRatePlus200_Corr"& _ 
                "ected, InterestRatePlus200_orig, InterestType, InternalInfo, MonthsToEventDate, "& _ 
                "[Next EventDate], [Next EventType], NextEventNr, NextEventPeriod, NextEventYears"& _ 
                ", PERIOD, PERIOD_Additional, PERIOD_MaturityDate, PERIOD_N, PV_Calculated, PV_IR"& _ 
                "minus200_Corrected, PV_IRplus200_Corrected, PeriodNr, [Principal Amount/Value Ba"& _ 
                "lance], [Principal Amount/Value Balance(EUR Equ)], ProductType, [RISK DATE], Sta"& _ 
                "rtDate, TOTAL_CASH_FLOW, Type, WeightingFactor, Yield_RiskDate FROM [RATERISK DE"& _ 
                "TAILS] WHERE ([RISK DATE] = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InterestRateRiskDataSet.RATERISK_DETAILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DETAILSDataTable = New InterestRateRiskDataSet.RATERISK_DETAILSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILSDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As InterestRateRiskDataSet.RATERISK_DETAILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DETAILSDataTable = New InterestRateRiskDataSet.RATERISK_DETAILSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As InterestRateRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RATERISK DETAILS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PERIOD As String,  _
                    ByVal BusinessType As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal ProductType As String,  _
                    ByVal p1 As String,  _
                    ByVal ClientNr As String,  _
                    ByVal p4 As String,  _
                    ByVal ContractClear As String,  _
                    ByVal p7 As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Next_EventType As String,  _
                    ByVal Next_EventDate As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Type As String,  _
                    ByVal CURRENCY As String,  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal p13 As Global.System.Nullable(Of Double),  _
                    ByVal InterestRate As Global.System.Nullable(Of Double),  _
                    ByVal InterestAmountOrigCur As Global.System.Nullable(Of Double),  _
                    ByVal InterestAmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal AccruedInterestEndDate As Global.System.Nullable(Of Date),  _
                    ByVal AccruedInterestAmountEUR As Global.System.Nullable(Of Double),  _
                    ByVal AccruedInterestAmountOrigCur As Global.System.Nullable(Of Double),  _
                    ByVal AverageDuration As Global.System.Nullable(Of Double),  _
                    ByVal DaysToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IMPORT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal PERIOD_Additional As String,  _
                    ByVal PERIOD_MaturityDate As String,  _
                    ByVal DaysToMaturity As Global.System.Nullable(Of Double),  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractClearM As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal InterestType As String,  _
                    ByVal TOTAL_CASH_FLOW As Global.System.Nullable(Of Double),  _
                    ByVal NextEventPeriod As String,  _
                    ByVal NextEventNr As Global.System.Nullable(Of Double),  _
                    ByVal NextEventYears As Global.System.Nullable(Of Double),  _
                    ByVal Yield_RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal InterestRateCalculated As Global.System.Nullable(Of Double),  _
                    ByVal PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal InterestRatePlus200_orig As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateMinus200_orig As Global.System.Nullable(Of Double),  _
                    ByVal InterestRatePlus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateMinus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal PV_IRplus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal PV_IRminus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal DifferencePV_IRplus200_PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal DifferencePV_IRminus200_PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal InternalInfo As String,  _
                    ByVal CalculationMethod As Global.System.Nullable(Of Double),  _
                    ByVal PeriodNr As Global.System.Nullable(Of Double),  _
                    ByVal MonthsToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal CashFlow As Global.System.Nullable(Of Double),  _
                    ByVal WeightingFactor As Global.System.Nullable(Of Double)) As Integer
            If (PERIOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PERIOD,String)
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BusinessType,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Contract_Type,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ProductType,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ClientNr,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p4,String)
            End If
            If (ContractClear Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ContractClear,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p7,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Next_EventType,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Type,String)
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CURRENCY,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (InterestRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(InterestRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (InterestAmountOrigCur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(InterestAmountOrigCur.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (InterestAmountEuro.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(InterestAmountEuro.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestEndDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AccruedInterestEndDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestAmountEUR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(AccruedInterestAmountEUR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestAmountOrigCur.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(AccruedInterestAmountOrigCur.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (AverageDuration.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(AverageDuration.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (DaysToEventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DaysToEventDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (IMPORT_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(IMPORT_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PERIOD_Additional Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PERIOD_Additional,String)
            End If
            If (PERIOD_MaturityDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PERIOD_MaturityDate,String)
            End If
            If (DaysToMaturity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DaysToMaturity.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (ClientNrM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(ClientNrM,String)
            End If
            If (ContractClearM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ContractClearM,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PERIOD_N,String)
            End If
            If (InterestType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(InterestType,String)
            End If
            If (TOTAL_CASH_FLOW.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(TOTAL_CASH_FLOW.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NextEventPeriod Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(NextEventPeriod,String)
            End If
            If (NextEventNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(NextEventNr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (NextEventYears.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(NextEventYears.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Yield_RiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(Yield_RiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (InterestRateCalculated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(InterestRateCalculated.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (PV_Calculated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(PV_Calculated.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (InterestRatePlus200_orig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(InterestRatePlus200_orig.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (InterestRateMinus200_orig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(InterestRateMinus200_orig.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (InterestRatePlus200_Corrected.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(InterestRatePlus200_Corrected.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (InterestRateMinus200_Corrected.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(InterestRateMinus200_Corrected.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PV_IRplus200_Corrected.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(PV_IRplus200_Corrected.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (PV_IRminus200_Corrected.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(PV_IRminus200_Corrected.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (DifferencePV_IRplus200_PV_Calculated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(DifferencePV_IRplus200_PV_Calculated.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (DifferencePV_IRminus200_PV_Calculated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(DifferencePV_IRminus200_PV_Calculated.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (InternalInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(InternalInfo,String)
            End If
            If (CalculationMethod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(CalculationMethod.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (PeriodNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(PeriodNr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (MonthsToEventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(MonthsToEventDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (CashFlow.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(CashFlow.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (WeightingFactor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(WeightingFactor.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PERIOD As String,  _
                    ByVal BusinessType As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal ProductType As String,  _
                    ByVal p1 As String,  _
                    ByVal ClientNr As String,  _
                    ByVal p4 As String,  _
                    ByVal ContractClear As String,  _
                    ByVal p7 As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Next_EventType As String,  _
                    ByVal Next_EventDate As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Type As String,  _
                    ByVal CURRENCY As String,  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal p13 As Global.System.Nullable(Of Double),  _
                    ByVal InterestRate As Global.System.Nullable(Of Double),  _
                    ByVal InterestAmountOrigCur As Global.System.Nullable(Of Double),  _
                    ByVal InterestAmountEuro As Global.System.Nullable(Of Double),  _
                    ByVal AccruedInterestEndDate As Global.System.Nullable(Of Date),  _
                    ByVal AccruedInterestAmountEUR As Global.System.Nullable(Of Double),  _
                    ByVal AccruedInterestAmountOrigCur As Global.System.Nullable(Of Double),  _
                    ByVal AverageDuration As Global.System.Nullable(Of Double),  _
                    ByVal DaysToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IMPORT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal PERIOD_Additional As String,  _
                    ByVal PERIOD_MaturityDate As String,  _
                    ByVal DaysToMaturity As Global.System.Nullable(Of Double),  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractClearM As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal InterestType As String,  _
                    ByVal TOTAL_CASH_FLOW As Global.System.Nullable(Of Double),  _
                    ByVal NextEventPeriod As String,  _
                    ByVal NextEventNr As Global.System.Nullable(Of Double),  _
                    ByVal NextEventYears As Global.System.Nullable(Of Double),  _
                    ByVal Yield_RiskDate As Global.System.Nullable(Of Date),  _
                    ByVal InterestRateCalculated As Global.System.Nullable(Of Double),  _
                    ByVal PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal InterestRatePlus200_orig As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateMinus200_orig As Global.System.Nullable(Of Double),  _
                    ByVal InterestRatePlus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateMinus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal PV_IRplus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal PV_IRminus200_Corrected As Global.System.Nullable(Of Double),  _
                    ByVal DifferencePV_IRplus200_PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal DifferencePV_IRminus200_PV_Calculated As Global.System.Nullable(Of Double),  _
                    ByVal InternalInfo As String,  _
                    ByVal CalculationMethod As Global.System.Nullable(Of Double),  _
                    ByVal PeriodNr As Global.System.Nullable(Of Double),  _
                    ByVal MonthsToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal CashFlow As Global.System.Nullable(Of Double),  _
                    ByVal WeightingFactor As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer) As Integer
            If (PERIOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PERIOD,String)
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(BusinessType,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Contract_Type,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ProductType,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ClientNr,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p4,String)
            End If
            If (ContractClear Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ContractClear,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p7,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Next_EventType,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Type,String)
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CURRENCY,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (InterestRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(InterestRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (InterestAmountOrigCur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(InterestAmountOrigCur.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (InterestAmountEuro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(InterestAmountEuro.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestEndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AccruedInterestEndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestAmountEUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AccruedInterestAmountEUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AccruedInterestAmountOrigCur.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(AccruedInterestAmountOrigCur.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (AverageDuration.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(AverageDuration.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (DaysToEventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(DaysToEventDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (IMPORT_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(IMPORT_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PERIOD_Additional Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(PERIOD_Additional,String)
            End If
            If (PERIOD_MaturityDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(PERIOD_MaturityDate,String)
            End If
            If (DaysToMaturity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DaysToMaturity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (ClientNrM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(ClientNrM,String)
            End If
            If (ContractClearM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ContractClearM,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PERIOD_N,String)
            End If
            If (InterestType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(InterestType,String)
            End If
            If (TOTAL_CASH_FLOW.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(TOTAL_CASH_FLOW.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NextEventPeriod Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(NextEventPeriod,String)
            End If
            If (NextEventNr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NextEventNr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (NextEventYears.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(NextEventYears.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Yield_RiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Yield_RiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (InterestRateCalculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(InterestRateCalculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (PV_Calculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(PV_Calculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (InterestRatePlus200_orig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(InterestRatePlus200_orig.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (InterestRateMinus200_orig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(InterestRateMinus200_orig.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (InterestRatePlus200_Corrected.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(InterestRatePlus200_Corrected.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (InterestRateMinus200_Corrected.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(InterestRateMinus200_Corrected.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PV_IRplus200_Corrected.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(PV_IRplus200_Corrected.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (PV_IRminus200_Corrected.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(PV_IRminus200_Corrected.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (DifferencePV_IRplus200_PV_Calculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(DifferencePV_IRplus200_PV_Calculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (DifferencePV_IRminus200_PV_Calculated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(DifferencePV_IRminus200_PV_Calculated.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (InternalInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(InternalInfo,String)
            End If
            If (CalculationMethod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(CalculationMethod.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (PeriodNr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(PeriodNr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (MonthsToEventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(MonthsToEventDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (CashFlow.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(CashFlow.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (WeightingFactor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(WeightingFactor.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RATERISK_DETAILS_ALL_DATATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RATERISK DETAILS ALL DATA"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Contract Type", "Contract Type")
            tableMapping.ColumnMappings.Add("PERIOD", "PERIOD")
            tableMapping.ColumnMappings.Add("PERIOD_N", "PERIOD_N")
            tableMapping.ColumnMappings.Add("GLMaster / Account Type", "GLMaster / Account Type")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("Contract/Account", "Contract/Account")
            tableMapping.ColumnMappings.Add("Counterparty/Issuer", "Counterparty/Issuer")
            tableMapping.ColumnMappings.Add("Next EventDate", "Next EventDate")
            tableMapping.ColumnMappings.Add("Next EventType", "Next EventType")
            tableMapping.ColumnMappings.Add("Final Maturity Date", "Final Maturity Date")
            tableMapping.ColumnMappings.Add("CURRENCY", "CURRENCY")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance", "Principal Amount/Value Balance")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance(EUR Equ)", "Principal Amount/Value Balance(EUR Equ)")
            tableMapping.ColumnMappings.Add("DATA DATE", "DATA DATE")
            tableMapping.ColumnMappings.Add("RISK DATE", "RISK DATE")
            tableMapping.ColumnMappings.Add("IdRateRiskDate", "IdRateRiskDate")
            tableMapping.ColumnMappings.Add("DaysToEventDate", "DaysToEventDate")
            tableMapping.ColumnMappings.Add("Interest Rate Type", "Interest Rate Type")
            tableMapping.ColumnMappings.Add("Weighting Factor", "Weighting Factor")
            tableMapping.ColumnMappings.Add("Interest Rate Change(200bps)", "Interest Rate Change(200bps)")
            tableMapping.ColumnMappings.Add("GL Master", "GL Master")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RATERISK DETAILS ALL DATA] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RATERISK DETAILS ALL DATA] ([Contract Type], [PERIOD], [PERIOD_N], ["& _ 
                "GLMaster / Account Type], [ProductType], [Contract/Account], [Counterparty/Issue"& _ 
                "r], [Next EventDate], [Next EventType], [Final Maturity Date], [CURRENCY], [Type"& _ 
                "], [Principal Amount/Value Balance], [Principal Amount/Value Balance(EUR Equ)], "& _ 
                "[DATA DATE], [RISK DATE], [IdRateRiskDate], [DaysToEventDate], [Interest Rate Ty"& _ 
                "pe], [Weighting Factor], [Interest Rate Change(200bps)], [GL Master]) VALUES (@C"& _ 
                "ontract_Type, @PERIOD, @PERIOD_N, @p1, @ProductType, @p4, @p7, @Next_EventDate, "& _ 
                "@Next_EventType, @Final_Maturity_Date, @CURRENCY, @Type, @p10, @p13, @DATA_DATE,"& _ 
                " @RISK_DATE, @IdRateRiskDate, @DaysToEventDate, @Interest_Rate_Type, @Weighting_"& _ 
                "Factor, @p16, @GL_Master)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Rate_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Rate Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Weighting_Factor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Weighting Factor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Rate Change(200bps)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RATERISK DETAILS ALL DATA] SET [Contract Type] = @Contract_Type, [PERIOD]"& _ 
                " = @PERIOD, [PERIOD_N] = @PERIOD_N, [GLMaster / Account Type] = @p1, [ProductTyp"& _ 
                "e] = @ProductType, [Contract/Account] = @p4, [Counterparty/Issuer] = @p7, [Next "& _ 
                "EventDate] = @Next_EventDate, [Next EventType] = @Next_EventType, [Final Maturit"& _ 
                "y Date] = @Final_Maturity_Date, [CURRENCY] = @CURRENCY, [Type] = @Type, [Princip"& _ 
                "al Amount/Value Balance] = @p10, [Principal Amount/Value Balance(EUR Equ)] = @p1"& _ 
                "3, [DATA DATE] = @DATA_DATE, [RISK DATE] = @RISK_DATE, [IdRateRiskDate] = @IdRat"& _ 
                "eRiskDate, [DaysToEventDate] = @DaysToEventDate, [Interest Rate Type] = @Interes"& _ 
                "t_Rate_Type, [Weighting Factor] = @Weighting_Factor, [Interest Rate Change(200bp"& _ 
                "s)] = @p16, [GL Master] = @GL_Master WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DaysToEventDate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DaysToEventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Interest_Rate_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Rate Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Weighting_Factor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Weighting Factor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Interest Rate Change(200bps)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GL_Master", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GL Master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, [Contract Type], PERIOD, PERIOD_N, [GLMaster / Account Type], P"& _ 
                "roductType, [Contract/Account], [Counterparty/Issuer], [Next EventDate], [Next E"& _ 
                "ventType], [Final Maturity Date], CURRENCY, Type, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Pr"& _ 
                "incipal Amount/Value Balance], [Principal Amount/Value Balance(EUR Equ)], [DATA "& _ 
                "DATE], [RISK DATE], IdRateRiskDate, DaysToEventDate, [Interest Rate Type], [Weig"& _ 
                "hting Factor], [Interest Rate Change(200bps)], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [GL Ma"& _ 
                "ster]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DETAILS ALL DATA]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, [Contract Type], PERIOD, PERIOD_N, [GLMaster / Account Type], P"& _ 
                "roductType, [Contract/Account], [Counterparty/Issuer], [Next EventDate], [Next E"& _ 
                "ventType], [Final Maturity Date], CURRENCY, Type, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [Pr"& _ 
                "incipal Amount/Value Balance], [Principal Amount/Value Balance(EUR Equ)], [DATA "& _ 
                "DATE], [RISK DATE], IdRateRiskDate, DaysToEventDate, [Interest Rate Type], [Weig"& _ 
                "hting Factor], [Interest Rate Change(200bps)], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [GL Ma"& _ 
                "ster]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DETAILS ALL DATA]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        ([RISK DATE] = "& _ 
                "@Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable = New InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable = New InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DETAILS_ALL_DATADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As InterestRateRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RATERISK DETAILS ALL DATA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Contract_Type As String,  _
                    ByVal PERIOD As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal p1 As String,  _
                    ByVal ProductType As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal Next_EventDate As Global.System.Nullable(Of Date),  _
                    ByVal Next_EventType As String,  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal CURRENCY As String,  _
                    ByVal Type As String,  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal p13 As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal DaysToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Rate_Type As String,  _
                    ByVal Weighting_Factor As Global.System.Nullable(Of Double),  _
                    ByVal p16 As Global.System.Nullable(Of Double),  _
                    ByVal GL_Master As String) As Integer
            If (Contract_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Contract_Type,String)
            End If
            If (PERIOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PERIOD,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PERIOD_N,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p1,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Next_EventType,String)
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CURRENCY,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Type,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DaysToEventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DaysToEventDate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Interest_Rate_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Interest_Rate_Type,String)
            End If
            If (Weighting_Factor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Weighting_Factor.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p16.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (GL_Master Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(GL_Master,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Contract_Type As String,  _
                    ByVal PERIOD As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal p1 As String,  _
                    ByVal ProductType As String,  _
                    ByVal p4 As String,  _
                    ByVal p7 As String,  _
                    ByVal Next_EventDate As Global.System.Nullable(Of Date),  _
                    ByVal Next_EventType As String,  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal CURRENCY As String,  _
                    ByVal Type As String,  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal p13 As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal DaysToEventDate As Global.System.Nullable(Of Double),  _
                    ByVal Interest_Rate_Type As String,  _
                    ByVal Weighting_Factor As Global.System.Nullable(Of Double),  _
                    ByVal p16 As Global.System.Nullable(Of Double),  _
                    ByVal GL_Master As String,  _
                    ByVal Original_ID As Integer) As Integer
            If (Contract_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Contract_Type,String)
            End If
            If (PERIOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PERIOD,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PERIOD_N,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p1,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p4,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Next_EventType,String)
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CURRENCY,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Type,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DaysToEventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DaysToEventDate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Interest_Rate_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Interest_Rate_Type,String)
            End If
            If (Weighting_Factor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Weighting_Factor.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p16.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (GL_Master Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(GL_Master,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RATERISK_TOTALSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RATERISK TOTALS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CURRENCY", "CURRENCY")
            tableMapping.ColumnMappings.Add("Period", "Period")
            tableMapping.ColumnMappings.Add("PERIOD_N", "PERIOD_N")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance", "Principal Amount/Value Balance")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance(EUR Equ)", "Principal Amount/Value Balance(EUR Equ)")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance(EUR Equ)withoutSECUR", "Principal Amount/Value Balance(EUR Equ)withoutSECUR")
            tableMapping.ColumnMappings.Add("PRINCIPAL_AMOUNT_N", "PRINCIPAL_AMOUNT_N")
            tableMapping.ColumnMappings.Add("PRINCIPAL_AMOUNT_EUR_N", "PRINCIPAL_AMOUNT_EUR_N")
            tableMapping.ColumnMappings.Add("WF_N", "WF_N")
            tableMapping.ColumnMappings.Add("AM_N", "AM_N")
            tableMapping.ColumnMappings.Add("WF1", "WF1")
            tableMapping.ColumnMappings.Add("AM1", "AM1")
            tableMapping.ColumnMappings.Add("WF2", "WF2")
            tableMapping.ColumnMappings.Add("AM2", "AM2")
            tableMapping.ColumnMappings.Add("WF3", "WF3")
            tableMapping.ColumnMappings.Add("AM3", "AM3")
            tableMapping.ColumnMappings.Add("WF4", "WF4")
            tableMapping.ColumnMappings.Add("AM4", "AM4")
            tableMapping.ColumnMappings.Add("WF10", "WF10")
            tableMapping.ColumnMappings.Add("AM10", "AM10")
            tableMapping.ColumnMappings.Add("WF20", "WF20")
            tableMapping.ColumnMappings.Add("AM20", "AM20")
            tableMapping.ColumnMappings.Add("WF25", "WF25")
            tableMapping.ColumnMappings.Add("AM25", "AM25")
            tableMapping.ColumnMappings.Add("WFHUMP", "WFHUMP")
            tableMapping.ColumnMappings.Add("AMHUMP", "AMHUMP")
            tableMapping.ColumnMappings.Add("WF_TWIST1", "WF_TWIST1")
            tableMapping.ColumnMappings.Add("AM_TWIST1", "AM_TWIST1")
            tableMapping.ColumnMappings.Add("WF_TWIST2", "WF_TWIST2")
            tableMapping.ColumnMappings.Add("AM_TWIST2", "AM_TWIST2")
            tableMapping.ColumnMappings.Add("DATA DATE", "DATA DATE")
            tableMapping.ColumnMappings.Add("RISK DATE", "RISK DATE")
            tableMapping.ColumnMappings.Add("IMPORT DATE", "IMPORT DATE")
            tableMapping.ColumnMappings.Add("BEMERKUNGEN", "BEMERKUNGEN")
            tableMapping.ColumnMappings.Add("IdRateRiskDate", "IdRateRiskDate")
            tableMapping.ColumnMappings.Add("CalculationMethod", "CalculationMethod")
            tableMapping.ColumnMappings.Add("PeriodNr", "PeriodNr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RATERISK TOTALS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RATERISK TOTALS] ([CURRENCY], [Period], [PERIOD_N], [Type], [Princip"& _ 
                "al Amount/Value Balance], [Principal Amount/Value Balance(EUR Equ)], [Principal "& _ 
                "Amount/Value Balance(EUR Equ)withoutSECUR], [PRINCIPAL_AMOUNT_N], [PRINCIPAL_AMO"& _ 
                "UNT_EUR_N], [WF_N], [AM_N], [WF1], [AM1], [WF2], [AM2], [WF3], [AM3], [WF4], [AM"& _ 
                "4], [WF10], [AM10], [WF20], [AM20], [WF25], [AM25], [WFHUMP], [AMHUMP], [WF_TWIS"& _ 
                "T1], [AM_TWIST1], [WF_TWIST2], [AM_TWIST2], [DATA DATE], [RISK DATE], [IMPORT DA"& _ 
                "TE], [BEMERKUNGEN], [IdRateRiskDate], [CalculationMethod], [PeriodNr]) VALUES (@"& _ 
                "CURRENCY, @Period, @PERIOD_N, @Type, @p1, @p4, @p7, @PRINCIPAL_AMOUNT_N, @PRINCI"& _ 
                "PAL_AMOUNT_EUR_N, @WF_N, @AM_N, @WF1, @AM1, @WF2, @AM2, @WF3, @AM3, @WF4, @AM4, "& _ 
                "@WF10, @AM10, @WF20, @AM20, @WF25, @AM25, @WFHUMP, @AMHUMP, @WF_TWIST1, @AM_TWIS"& _ 
                "T1, @WF_TWIST2, @AM_TWIST2, @DATA_DATE, @RISK_DATE, @IMPORT_DATE, @BEMERKUNGEN, "& _ 
                "@IdRateRiskDate, @CalculationMethod, @PeriodNr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Period", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Period", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)withoutSECUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINCIPAL_AMOUNT_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINCIPAL_AMOUNT_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINCIPAL_AMOUNT_EUR_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINCIPAL_AMOUNT_EUR_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF20", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM20", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WFHUMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WFHUMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMHUMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMHUMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_TWIST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_TWIST1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_TWIST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_TWIST1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_TWIST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_TWIST2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_TWIST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_TWIST2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BEMERKUNGEN", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BEMERKUNGEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalculationMethod", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PeriodNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RATERISK TOTALS] SET [CURRENCY] = @CURRENCY, [Period] = @Period, [PERIOD_"& _ 
                "N] = @PERIOD_N, [Type] = @Type, [Principal Amount/Value Balance] = @p1, [Princip"& _ 
                "al Amount/Value Balance(EUR Equ)] = @p4, [Principal Amount/Value Balance(EUR Equ"& _ 
                ")withoutSECUR] = @p7, [PRINCIPAL_AMOUNT_N] = @PRINCIPAL_AMOUNT_N, [PRINCIPAL_AMO"& _ 
                "UNT_EUR_N] = @PRINCIPAL_AMOUNT_EUR_N, [WF_N] = @WF_N, [AM_N] = @AM_N, [WF1] = @W"& _ 
                "F1, [AM1] = @AM1, [WF2] = @WF2, [AM2] = @AM2, [WF3] = @WF3, [AM3] = @AM3, [WF4] "& _ 
                "= @WF4, [AM4] = @AM4, [WF10] = @WF10, [AM10] = @AM10, [WF20] = @WF20, [AM20] = @"& _ 
                "AM20, [WF25] = @WF25, [AM25] = @AM25, [WFHUMP] = @WFHUMP, [AMHUMP] = @AMHUMP, [W"& _ 
                "F_TWIST1] = @WF_TWIST1, [AM_TWIST1] = @AM_TWIST1, [WF_TWIST2] = @WF_TWIST2, [AM_"& _ 
                "TWIST2] = @AM_TWIST2, [DATA DATE] = @DATA_DATE, [RISK DATE] = @RISK_DATE, [IMPOR"& _ 
                "T DATE] = @IMPORT_DATE, [BEMERKUNGEN] = @BEMERKUNGEN, [IdRateRiskDate] = @IdRate"& _ 
                "RiskDate, [CalculationMethod] = @CalculationMethod, [PeriodNr] = @PeriodNr WHERE"& _ 
                " (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Period", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Period", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD_N", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)withoutSECUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINCIPAL_AMOUNT_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINCIPAL_AMOUNT_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINCIPAL_AMOUNT_EUR_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINCIPAL_AMOUNT_EUR_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_N", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_N", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF20", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM20", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM25", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM25", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WFHUMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WFHUMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMHUMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMHUMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_TWIST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_TWIST1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_TWIST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_TWIST1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WF_TWIST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WF_TWIST2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM_TWIST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM_TWIST2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BEMERKUNGEN", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BEMERKUNGEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdRateRiskDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdRateRiskDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalculationMethod", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalculationMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PeriodNr", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, CURRENCY, Period, PERIOD_N, Type, [Principal Amount/Value Balan"& _ 
                "ce], [Principal Amount/Value Balance(EUR Equ)], [Principal Amount/Value Balance("& _ 
                "EUR Equ)withoutSECUR], PRINCIPAL_AMOUNT_N, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PRINCIPAL_"& _ 
                "AMOUNT_EUR_N, WF_N, AM_N, WF1, AM1, WF2, AM2, WF3, AM3, WF4, AM4, WF10, AM10, WF"& _ 
                "20, AM20, WF25, AM25, WFHUMP, AMHUMP, WF_TWIST1, AM_TWIST1, WF_TWIST2, AM_TWIST2"& _ 
                ", [DATA DATE], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         [RISK DATE], [IMPORT DATE], BEMERKUNGE"& _ 
                "N, IdRateRiskDate, CalculationMethod, PeriodNr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK TOTALS"& _ 
                "]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AM1, AM10, AM2, AM20, AM25, AM3, AM4, AMHUMP, AM_N, AM_TWIST1, AM_TWIST2, "& _ 
                "BEMERKUNGEN, CURRENCY, CalculationMethod, [DATA DATE], ID, [IMPORT DATE], IdRate"& _ 
                "RiskDate, PERIOD_N, PRINCIPAL_AMOUNT_EUR_N, PRINCIPAL_AMOUNT_N, Period, PeriodNr"& _ 
                ", [Principal Amount/Value Balance], [Principal Amount/Value Balance(EUR Equ)], ["& _ 
                "Principal Amount/Value Balance(EUR Equ)withoutSECUR], [RISK DATE], Type, WF1, WF"& _ 
                "10, WF2, WF20, WF25, WF3, WF4, WFHUMP, WF_N, WF_TWIST1, WF_TWIST2 FROM [RATERISK"& _ 
                " TOTALS] WHERE ([RISK DATE] = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InterestRateRiskDataSet.RATERISK_TOTALSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InterestRateRiskDataSet.RATERISK_TOTALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_TOTALSDataTable = New InterestRateRiskDataSet.RATERISK_TOTALSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As InterestRateRiskDataSet.RATERISK_TOTALSDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As InterestRateRiskDataSet.RATERISK_TOTALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As InterestRateRiskDataSet.RATERISK_TOTALSDataTable = New InterestRateRiskDataSet.RATERISK_TOTALSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As InterestRateRiskDataSet.RATERISK_TOTALSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As InterestRateRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RATERISK TOTALS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CURRENCY As String,  _
                    ByVal Period As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal Type As String,  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal p4 As Global.System.Nullable(Of Double),  _
                    ByVal p7 As Global.System.Nullable(Of Double),  _
                    ByVal PRINCIPAL_AMOUNT_N As Global.System.Nullable(Of Double),  _
                    ByVal PRINCIPAL_AMOUNT_EUR_N As Global.System.Nullable(Of Double),  _
                    ByVal WF_N As Global.System.Nullable(Of Double),  _
                    ByVal AM_N As Global.System.Nullable(Of Double),  _
                    ByVal WF1 As Global.System.Nullable(Of Double),  _
                    ByVal AM1 As Global.System.Nullable(Of Double),  _
                    ByVal WF2 As Global.System.Nullable(Of Double),  _
                    ByVal AM2 As Global.System.Nullable(Of Double),  _
                    ByVal WF3 As Global.System.Nullable(Of Double),  _
                    ByVal AM3 As Global.System.Nullable(Of Double),  _
                    ByVal WF4 As Global.System.Nullable(Of Double),  _
                    ByVal AM4 As Global.System.Nullable(Of Double),  _
                    ByVal WF10 As Global.System.Nullable(Of Double),  _
                    ByVal AM10 As Global.System.Nullable(Of Double),  _
                    ByVal WF20 As Global.System.Nullable(Of Double),  _
                    ByVal AM20 As Global.System.Nullable(Of Double),  _
                    ByVal WF25 As Global.System.Nullable(Of Double),  _
                    ByVal AM25 As Global.System.Nullable(Of Double),  _
                    ByVal WFHUMP As Global.System.Nullable(Of Double),  _
                    ByVal AMHUMP As Global.System.Nullable(Of Double),  _
                    ByVal WF_TWIST1 As Global.System.Nullable(Of Double),  _
                    ByVal AM_TWIST1 As Global.System.Nullable(Of Double),  _
                    ByVal WF_TWIST2 As Global.System.Nullable(Of Double),  _
                    ByVal AM_TWIST2 As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IMPORT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal BEMERKUNGEN As String,  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal CalculationMethod As Global.System.Nullable(Of Double),  _
                    ByVal PeriodNr As Global.System.Nullable(Of Double)) As Integer
            If (CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CURRENCY,String)
            End If
            If (Period Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Period,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PERIOD_N,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Type,String)
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PRINCIPAL_AMOUNT_N.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PRINCIPAL_AMOUNT_N.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRINCIPAL_AMOUNT_EUR_N.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PRINCIPAL_AMOUNT_EUR_N.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (WF_N.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(WF_N.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AM_N.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AM_N.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (WF1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(WF1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AM1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AM1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (WF2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(WF2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (AM2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(AM2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (WF3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(WF3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (AM3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(AM3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (WF4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(WF4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (AM4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AM4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (WF10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(WF10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (AM10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AM10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (WF20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(WF20.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AM20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(AM20.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WF25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(WF25.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (AM25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(AM25.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (WFHUMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(WFHUMP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (AMHUMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(AMHUMP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (WF_TWIST1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(WF_TWIST1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (AM_TWIST1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(AM_TWIST1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (WF_TWIST2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(WF_TWIST2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (AM_TWIST2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(AM_TWIST2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (IMPORT_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(IMPORT_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (BEMERKUNGEN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(BEMERKUNGEN,String)
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (CalculationMethod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(CalculationMethod.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (PeriodNr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(PeriodNr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CURRENCY As String,  _
                    ByVal Period As String,  _
                    ByVal PERIOD_N As String,  _
                    ByVal Type As String,  _
                    ByVal p1 As Global.System.Nullable(Of Double),  _
                    ByVal p4 As Global.System.Nullable(Of Double),  _
                    ByVal p7 As Global.System.Nullable(Of Double),  _
                    ByVal PRINCIPAL_AMOUNT_N As Global.System.Nullable(Of Double),  _
                    ByVal PRINCIPAL_AMOUNT_EUR_N As Global.System.Nullable(Of Double),  _
                    ByVal WF_N As Global.System.Nullable(Of Double),  _
                    ByVal AM_N As Global.System.Nullable(Of Double),  _
                    ByVal WF1 As Global.System.Nullable(Of Double),  _
                    ByVal AM1 As Global.System.Nullable(Of Double),  _
                    ByVal WF2 As Global.System.Nullable(Of Double),  _
                    ByVal AM2 As Global.System.Nullable(Of Double),  _
                    ByVal WF3 As Global.System.Nullable(Of Double),  _
                    ByVal AM3 As Global.System.Nullable(Of Double),  _
                    ByVal WF4 As Global.System.Nullable(Of Double),  _
                    ByVal AM4 As Global.System.Nullable(Of Double),  _
                    ByVal WF10 As Global.System.Nullable(Of Double),  _
                    ByVal AM10 As Global.System.Nullable(Of Double),  _
                    ByVal WF20 As Global.System.Nullable(Of Double),  _
                    ByVal AM20 As Global.System.Nullable(Of Double),  _
                    ByVal WF25 As Global.System.Nullable(Of Double),  _
                    ByVal AM25 As Global.System.Nullable(Of Double),  _
                    ByVal WFHUMP As Global.System.Nullable(Of Double),  _
                    ByVal AMHUMP As Global.System.Nullable(Of Double),  _
                    ByVal WF_TWIST1 As Global.System.Nullable(Of Double),  _
                    ByVal AM_TWIST1 As Global.System.Nullable(Of Double),  _
                    ByVal WF_TWIST2 As Global.System.Nullable(Of Double),  _
                    ByVal AM_TWIST2 As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IMPORT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal BEMERKUNGEN As String,  _
                    ByVal IdRateRiskDate As Global.System.Nullable(Of Date),  _
                    ByVal CalculationMethod As Global.System.Nullable(Of Double),  _
                    ByVal PeriodNr As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Integer) As Integer
            If (CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CURRENCY,String)
            End If
            If (Period Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Period,String)
            End If
            If (PERIOD_N Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PERIOD_N,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Type,String)
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PRINCIPAL_AMOUNT_N.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PRINCIPAL_AMOUNT_N.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRINCIPAL_AMOUNT_EUR_N.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PRINCIPAL_AMOUNT_EUR_N.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (WF_N.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(WF_N.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AM_N.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AM_N.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (WF1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(WF1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AM1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AM1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (WF2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(WF2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (AM2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(AM2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (WF3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(WF3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (AM3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(AM3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (WF4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(WF4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (AM4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AM4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (WF10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(WF10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (AM10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AM10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (WF20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(WF20.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AM20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(AM20.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WF25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(WF25.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (AM25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(AM25.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (WFHUMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(WFHUMP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (AMHUMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(AMHUMP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (WF_TWIST1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(WF_TWIST1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (AM_TWIST1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(AM_TWIST1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (WF_TWIST2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(WF_TWIST2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (AM_TWIST2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(AM_TWIST2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (IMPORT_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(IMPORT_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (BEMERKUNGEN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(BEMERKUNGEN,String)
            End If
            If (IdRateRiskDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IdRateRiskDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (CalculationMethod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(CalculationMethod.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (PeriodNr.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(PeriodNr.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RATERISK_DELETIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RATERISK DELETIONS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PERIOD", "PERIOD")
            tableMapping.ColumnMappings.Add("CURRENCY", "CURRENCY")
            tableMapping.ColumnMappings.Add("Contract Type", "Contract Type")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("GLMaster / Account Type", "GLMaster / Account Type")
            tableMapping.ColumnMappings.Add("Contract/Account", "Contract/Account")
            tableMapping.ColumnMappings.Add("Next EventType", "Next EventType")
            tableMapping.ColumnMappings.Add("Counterparty/Issuer", "Counterparty/Issuer")
            tableMapping.ColumnMappings.Add("Next EventDate", "Next EventDate")
            tableMapping.ColumnMappings.Add("Final Maturity Date", "Final Maturity Date")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance", "Principal Amount/Value Balance")
            tableMapping.ColumnMappings.Add("DATA DATE", "DATA DATE")
            tableMapping.ColumnMappings.Add("Principal Amount/Value Balance(EUR Equ)", "Principal Amount/Value Balance(EUR Equ)")
            tableMapping.ColumnMappings.Add("RISK DATE", "RISK DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RATERISK DELETIONS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RATERISK DELETIONS] ([PERIOD], [CURRENCY], [Contract Type], [Product"& _ 
                "Type], [GLMaster / Account Type], [Contract/Account], [Next EventType], [Counter"& _ 
                "party/Issuer], [Next EventDate], [Final Maturity Date], [Type], [Principal Amoun"& _ 
                "t/Value Balance], [DATA DATE], [Principal Amount/Value Balance(EUR Equ)], [RISK "& _ 
                "DATE]) VALUES (@PERIOD, @CURRENCY, @Contract_Type, @ProductType, @p1, @p4, @Next"& _ 
                "_EventType, @p7, @Next_EventDate, @Final_Maturity_Date, @Type, @p10, @DATA_DATE,"& _ 
                " @p13, @RISK_DATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RATERISK DELETIONS] SET [PERIOD] = @PERIOD, [CURRENCY] = @CURRENCY, [Cont"& _ 
                "ract Type] = @Contract_Type, [ProductType] = @ProductType, [GLMaster / Account T"& _ 
                "ype] = @p1, [Contract/Account] = @p4, [Next EventType] = @Next_EventType, [Count"& _ 
                "erparty/Issuer] = @p7, [Next EventDate] = @Next_EventDate, [Final Maturity Date]"& _ 
                " = @Final_Maturity_Date, [Type] = @Type, [Principal Amount/Value Balance] = @p10"& _ 
                ", [DATA DATE] = @DATA_DATE, [Principal Amount/Value Balance(EUR Equ)] = @p13, [R"& _ 
                "ISK DATE] = @RISK_DATE WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERIOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLMaster / Account Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract/Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Counterparty/Issuer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Next_EventDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Next EventDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final_Maturity_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Final Maturity Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Principal Amount/Value Balance(EUR Equ)", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RISK_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, PERIOD, CURRENCY, [Contract Type], ProductType, [GLMaster / Acc"& _ 
                "ount Type], [Contract/Account], [Next EventType], [Counterparty/Issuer], [Next E"& _ 
                "ventDate], [Final Maturity Date], Type, [Principal Amount/Value Balance], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     [DATA DATE], [Principal Amount/Value Balance(EUR Equ)], [RI"& _ 
                "SK DATE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DELETIONS]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ID, PERIOD, CURRENCY, [Contract Type], ProductType, [GLMaster / Acc"& _ 
                "ount Type], [Contract/Account], [Next EventType], [Counterparty/Issuer], [Next E"& _ 
                "ventDate], [Final Maturity Date], Type, [Principal Amount/Value Balance], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     [DATA DATE], [Principal Amount/Value Balance(EUR Equ)], [RI"& _ 
                "SK DATE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            [RATERISK DELETIONS]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        ([RISK DATE] = @Par"& _ 
                "am1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RISK DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable = New InterestRateRiskDataSet.RATERISK_DELETIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRiskDate(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable, ByVal Param1 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRiskDate(ByVal Param1 As Global.System.Nullable(Of Date)) As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable = New InterestRateRiskDataSet.RATERISK_DELETIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As InterestRateRiskDataSet.RATERISK_DELETIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As InterestRateRiskDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RATERISK DELETIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PERIOD As String, ByVal CURRENCY As String, ByVal Contract_Type As String, ByVal ProductType As String, ByVal p1 As String, ByVal p4 As String, ByVal Next_EventType As String, ByVal p7 As String, ByVal Next_EventDate As Global.System.Nullable(Of Date), ByVal Final_Maturity_Date As Global.System.Nullable(Of Date), ByVal Type As String, ByVal p10 As Global.System.Nullable(Of Double), ByVal DATA_DATE As Global.System.Nullable(Of Date), ByVal p13 As Global.System.Nullable(Of Double), ByVal RISK_DATE As Global.System.Nullable(Of Date)) As Integer
            If (PERIOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PERIOD,String)
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CURRENCY,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Contract_Type,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ProductType,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p4,String)
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Next_EventType,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p7,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Type,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PERIOD As String,  _
                    ByVal CURRENCY As String,  _
                    ByVal Contract_Type As String,  _
                    ByVal ProductType As String,  _
                    ByVal p1 As String,  _
                    ByVal p4 As String,  _
                    ByVal Next_EventType As String,  _
                    ByVal p7 As String,  _
                    ByVal Next_EventDate As Global.System.Nullable(Of Date),  _
                    ByVal Final_Maturity_Date As Global.System.Nullable(Of Date),  _
                    ByVal Type As String,  _
                    ByVal p10 As Global.System.Nullable(Of Double),  _
                    ByVal DATA_DATE As Global.System.Nullable(Of Date),  _
                    ByVal p13 As Global.System.Nullable(Of Double),  _
                    ByVal RISK_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer) As Integer
            If (PERIOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PERIOD,String)
            End If
            If (CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CURRENCY,String)
            End If
            If (Contract_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Contract_Type,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ProductType,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p4,String)
            End If
            If (Next_EventType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Next_EventType,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p7,String)
            End If
            If (Next_EventDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Next_EventDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Final_Maturity_Date.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Final_Maturity_Date.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Type,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p10.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DATA_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DATA_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RISK_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RISK_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _rATERISK_DATETableAdapter As RATERISK_DATETableAdapter
        
        Private _rATERISK_DETAILSTableAdapter As RATERISK_DETAILSTableAdapter
        
        Private _rATERISK_DETAILS_ALL_DATATableAdapter As RATERISK_DETAILS_ALL_DATATableAdapter
        
        Private _rATERISK_TOTALSTableAdapter As RATERISK_TOTALSTableAdapter
        
        Private _rATERISK_DELETIONSTableAdapter As RATERISK_DELETIONSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RATERISK_DATETableAdapter() As RATERISK_DATETableAdapter
            Get
                Return Me._rATERISK_DATETableAdapter
            End Get
            Set
                Me._rATERISK_DATETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RATERISK_DETAILSTableAdapter() As RATERISK_DETAILSTableAdapter
            Get
                Return Me._rATERISK_DETAILSTableAdapter
            End Get
            Set
                Me._rATERISK_DETAILSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RATERISK_DETAILS_ALL_DATATableAdapter() As RATERISK_DETAILS_ALL_DATATableAdapter
            Get
                Return Me._rATERISK_DETAILS_ALL_DATATableAdapter
            End Get
            Set
                Me._rATERISK_DETAILS_ALL_DATATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RATERISK_TOTALSTableAdapter() As RATERISK_TOTALSTableAdapter
            Get
                Return Me._rATERISK_TOTALSTableAdapter
            End Get
            Set
                Me._rATERISK_TOTALSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RATERISK_DELETIONSTableAdapter() As RATERISK_DELETIONSTableAdapter
            Get
                Return Me._rATERISK_DELETIONSTableAdapter
            End Get
            Set
                Me._rATERISK_DELETIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._rATERISK_DATETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rATERISK_DATETableAdapter.Connection) Is Nothing)) Then
                    Return Me._rATERISK_DATETableAdapter.Connection
                End If
                If ((Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rATERISK_DETAILSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rATERISK_DETAILSTableAdapter.Connection
                End If
                If ((Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection) Is Nothing)) Then
                    Return Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection
                End If
                If ((Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rATERISK_TOTALSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rATERISK_TOTALSTableAdapter.Connection
                End If
                If ((Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rATERISK_DELETIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rATERISK_DELETIONSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As InterestRateRiskDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rATERISK_DATETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS_ALL_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILS_ALL_DATATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RATERISK_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rATERISK_TOTALSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DELETIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rATERISK_DELETIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As InterestRateRiskDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rATERISK_DATETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS_ALL_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILS_ALL_DATATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RATERISK_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rATERISK_TOTALSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DELETIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rATERISK_DELETIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As InterestRateRiskDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DELETIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rATERISK_DELETIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RATERISK_TOTALS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rATERISK_TOTALSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS_ALL_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILS_ALL_DATATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rATERISK_DETAILSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RATERISK_DATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rATERISK_DATETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As InterestRateRiskDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._rATERISK_DATETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rATERISK_DATETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rATERISK_DETAILSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rATERISK_TOTALSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rATERISK_DELETIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rATERISK_DATETableAdapter, Me._rATERISK_DATETableAdapter.Connection)
                    Me._rATERISK_DATETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DATETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rATERISK_DATETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rATERISK_DATETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rATERISK_DATETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rATERISK_DETAILSTableAdapter, Me._rATERISK_DETAILSTableAdapter.Connection)
                    Me._rATERISK_DETAILSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DETAILSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rATERISK_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rATERISK_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rATERISK_DETAILSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rATERISK_DETAILS_ALL_DATATableAdapter, Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection)
                    Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DETAILS_ALL_DATATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rATERISK_DETAILS_ALL_DATATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rATERISK_DETAILS_ALL_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rATERISK_DETAILS_ALL_DATATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rATERISK_TOTALSTableAdapter, Me._rATERISK_TOTALSTableAdapter.Connection)
                    Me._rATERISK_TOTALSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_TOTALSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rATERISK_TOTALSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rATERISK_TOTALSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rATERISK_TOTALSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rATERISK_DELETIONSTableAdapter, Me._rATERISK_DELETIONSTableAdapter.Connection)
                    Me._rATERISK_DELETIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DELETIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rATERISK_DELETIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rATERISK_DELETIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rATERISK_DELETIONSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._rATERISK_DATETableAdapter) Is Nothing) Then
                    Me._rATERISK_DATETableAdapter.Connection = CType(revertConnections(Me._rATERISK_DATETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DATETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rATERISK_DETAILSTableAdapter) Is Nothing) Then
                    Me._rATERISK_DETAILSTableAdapter.Connection = CType(revertConnections(Me._rATERISK_DETAILSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DETAILSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rATERISK_DETAILS_ALL_DATATableAdapter) Is Nothing) Then
                    Me._rATERISK_DETAILS_ALL_DATATableAdapter.Connection = CType(revertConnections(Me._rATERISK_DETAILS_ALL_DATATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DETAILS_ALL_DATATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rATERISK_TOTALSTableAdapter) Is Nothing) Then
                    Me._rATERISK_TOTALSTableAdapter.Connection = CType(revertConnections(Me._rATERISK_TOTALSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_TOTALSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rATERISK_DELETIONSTableAdapter) Is Nothing) Then
                    Me._rATERISK_DELETIONSTableAdapter.Connection = CType(revertConnections(Me._rATERISK_DELETIONSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rATERISK_DELETIONSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
