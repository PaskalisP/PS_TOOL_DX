'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("AllContractsAccountsDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class AllContractsAccountsDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableALL_CONTRACTS_ACCOUNTS As ALL_CONTRACTS_ACCOUNTSDataTable
    
    Private tableALL_GL_ITEMS_BS As ALL_GL_ITEMS_BSDataTable
    
    Private tableALL_GL_ITEMS_PL As ALL_GL_ITEMS_PLDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ALL_CONTRACTS_ACCOUNTS")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_CONTRACTS_ACCOUNTSDataTable(ds.Tables("ALL_CONTRACTS_ACCOUNTS")))
            End If
            If (Not (ds.Tables("ALL_GL_ITEMS_BS")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_GL_ITEMS_BSDataTable(ds.Tables("ALL_GL_ITEMS_BS")))
            End If
            If (Not (ds.Tables("ALL_GL_ITEMS_PL")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_GL_ITEMS_PLDataTable(ds.Tables("ALL_GL_ITEMS_PL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ALL_CONTRACTS_ACCOUNTS() As ALL_CONTRACTS_ACCOUNTSDataTable
        Get
            Return Me.tableALL_CONTRACTS_ACCOUNTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ALL_GL_ITEMS_BS() As ALL_GL_ITEMS_BSDataTable
        Get
            Return Me.tableALL_GL_ITEMS_BS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ALL_GL_ITEMS_PL() As ALL_GL_ITEMS_PLDataTable
        Get
            Return Me.tableALL_GL_ITEMS_PL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As AllContractsAccountsDataSet = CType(MyBase.Clone,AllContractsAccountsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ALL_CONTRACTS_ACCOUNTS")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_CONTRACTS_ACCOUNTSDataTable(ds.Tables("ALL_CONTRACTS_ACCOUNTS")))
            End If
            If (Not (ds.Tables("ALL_GL_ITEMS_BS")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_GL_ITEMS_BSDataTable(ds.Tables("ALL_GL_ITEMS_BS")))
            End If
            If (Not (ds.Tables("ALL_GL_ITEMS_PL")) Is Nothing) Then
                MyBase.Tables.Add(New ALL_GL_ITEMS_PLDataTable(ds.Tables("ALL_GL_ITEMS_PL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableALL_CONTRACTS_ACCOUNTS = CType(MyBase.Tables("ALL_CONTRACTS_ACCOUNTS"),ALL_CONTRACTS_ACCOUNTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableALL_CONTRACTS_ACCOUNTS) Is Nothing) Then
                Me.tableALL_CONTRACTS_ACCOUNTS.InitVars
            End If
        End If
        Me.tableALL_GL_ITEMS_BS = CType(MyBase.Tables("ALL_GL_ITEMS_BS"),ALL_GL_ITEMS_BSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableALL_GL_ITEMS_BS) Is Nothing) Then
                Me.tableALL_GL_ITEMS_BS.InitVars
            End If
        End If
        Me.tableALL_GL_ITEMS_PL = CType(MyBase.Tables("ALL_GL_ITEMS_PL"),ALL_GL_ITEMS_PLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableALL_GL_ITEMS_PL) Is Nothing) Then
                Me.tableALL_GL_ITEMS_PL.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "AllContractsAccountsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AllContractsAccountsDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableALL_CONTRACTS_ACCOUNTS = New ALL_CONTRACTS_ACCOUNTSDataTable()
        MyBase.Tables.Add(Me.tableALL_CONTRACTS_ACCOUNTS)
        Me.tableALL_GL_ITEMS_BS = New ALL_GL_ITEMS_BSDataTable()
        MyBase.Tables.Add(Me.tableALL_GL_ITEMS_BS)
        Me.tableALL_GL_ITEMS_PL = New ALL_GL_ITEMS_PLDataTable()
        MyBase.Tables.Add(Me.tableALL_GL_ITEMS_PL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeALL_CONTRACTS_ACCOUNTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeALL_GL_ITEMS_BS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeALL_GL_ITEMS_PL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AllContractsAccountsDataSet = New AllContractsAccountsDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ALL_CONTRACTS_ACCOUNTSRowChangeEventHandler(ByVal sender As Object, ByVal e As ALL_CONTRACTS_ACCOUNTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ALL_GL_ITEMS_BSRowChangeEventHandler(ByVal sender As Object, ByVal e As ALL_GL_ITEMS_BSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ALL_GL_ITEMS_PLRowChangeEventHandler(ByVal sender As Object, ByVal e As ALL_GL_ITEMS_PLRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ALL_CONTRACTS_ACCOUNTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ALL_CONTRACTS_ACCOUNTSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnContract_Account As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnContractType As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnKEV_Collateral As Global.System.Data.DataColumn
        
        Private columnValid As Global.System.Data.DataColumn
        
        Private columnAnaCredit_Valid As Global.System.Data.DataColumn
        
        Private columnIsAnaCredit As Global.System.Data.DataColumn
        
        Private columnCCY As Global.System.Data.DataColumn
        
        Private columnGSTIFF_Reference As Global.System.Data.DataColumn
        
        Private columnCCB_Group As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnTypeOfInstrument As Global.System.Data.DataColumn
        
        Private columnTypeOfInstrumentDescription As Global.System.Data.DataColumn
        
        Private columnAmortisationType As Global.System.Data.DataColumn
        
        Private columnAmortisationTypeDescription As Global.System.Data.DataColumn
        
        Private columnFiduciaryInstrument As Global.System.Data.DataColumn
        
        Private columnFiduciaryInstrumentDescription As Global.System.Data.DataColumn
        
        Private columnInterestRate As Global.System.Data.DataColumn
        
        Private columnSpread As Global.System.Data.DataColumn
        
        Private columnInterestRateType As Global.System.Data.DataColumn
        
        Private columnInterestRateTypeDescription As Global.System.Data.DataColumn
        
        Private columnInterestRateCap As Global.System.Data.DataColumn
        
        Private columnInterestRateFloor As Global.System.Data.DataColumn
        
        Private columnInterestRateResetFrequency As Global.System.Data.DataColumn
        
        Private columnInterestRateResetFrequencyDescription As Global.System.Data.DataColumn
        
        Private columnCommitmentAmountInceptionOrig As Global.System.Data.DataColumn
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        Private columnCommitmentAmountInceptionEUR As Global.System.Data.DataColumn
        
        Private columnPaymentFrequency As Global.System.Data.DataColumn
        
        Private columnPaymentFrequencyDescription As Global.System.Data.DataColumn
        
        Private columnProjectFinanceLoan As Global.System.Data.DataColumn
        
        Private columnProjectFinanceLoanDescription As Global.System.Data.DataColumn
        
        Private columnPurpose As Global.System.Data.DataColumn
        
        Private columnPurposeDescription As Global.System.Data.DataColumn
        
        Private columnRecourse As Global.System.Data.DataColumn
        
        Private columnRecourseDescription As Global.System.Data.DataColumn
        
        Private columnReferenceRate As Global.System.Data.DataColumn
        
        Private columnReferenceRateDescription As Global.System.Data.DataColumn
        
        Private columnSettlementDate As Global.System.Data.DataColumn
        
        Private columnSyndicatedContractIdentifier As Global.System.Data.DataColumn
        
        Private columnRepaymentRights As Global.System.Data.DataColumn
        
        Private columnRepaymentRightsDescription As Global.System.Data.DataColumn
        
        Private columnInterestRateAverage As Global.System.Data.DataColumn
        
        Private columnNextInterestRateDateReset As Global.System.Data.DataColumn
        
        Private columnDefaultStatusInstrument As Global.System.Data.DataColumn
        
        Private columnDefaultStatusInstrumentDescription As Global.System.Data.DataColumn
        
        Private columnDateDefaultStatusInstrument As Global.System.Data.DataColumn
        
        Private columnAmountPastDue As Global.System.Data.DataColumn
        
        Private columnDatePastDue As Global.System.Data.DataColumn
        
        Private columnTypeOfSecurisation As Global.System.Data.DataColumn
        
        Private columnTypeOfSecurisationDescription As Global.System.Data.DataColumn
        
        Private columnOutstandingNominalAmount As Global.System.Data.DataColumn
        
        Private columnAccountingClassifInstruments As Global.System.Data.DataColumn
        
        Private columnAccountingClassifInstrumentsDescription As Global.System.Data.DataColumn
        
        Private columnPerformingStatusInstrument As Global.System.Data.DataColumn
        
        Private columnPerformingStatusInstrumentDescription As Global.System.Data.DataColumn
        
        Private columnDatePerformingStatus As Global.System.Data.DataColumn
        
        Private columnStatusForbearance As Global.System.Data.DataColumn
        
        Private columnDateStatusForbearance As Global.System.Data.DataColumn
        
        Private columnComulativeRecoveryAmount As Global.System.Data.DataColumn
        
        Private columnStatusForbearance_Description As Global.System.Data.DataColumn
        
        Private columnContract_AccountM As Global.System.Data.DataColumn
        
        Private columnClientNrM As Global.System.Data.DataColumn
        
        Private columnContractTypeDescription As Global.System.Data.DataColumn
        
        Private columnProductTypeDescription As Global.System.Data.DataColumn
        
        Private columnCounterpartyRole As Global.System.Data.DataColumn
        
        Private columnCounterpartyRoleDescription As Global.System.Data.DataColumn
        
        Private columnJointLiabilityAmount As Global.System.Data.DataColumn
        
        Private columnEndDateOfInterestPaymentOnlyPeriod As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ALL_CONTRACTS_ACCOUNTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KEV_CollateralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEV_Collateral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnaCredit_ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnaCredit_Valid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsAnaCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAnaCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GSTIFF_ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTIFF_Reference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCB_GroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCB_Group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfInstrumentDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfInstrumentDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmortisationTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmortisationType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmortisationTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmortisationTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FiduciaryInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFiduciaryInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FiduciaryInstrumentDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFiduciaryInstrumentDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpreadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpread
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateCapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateCap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateFloorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateFloor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateResetFrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateResetFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateResetFrequencyDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateResetFrequencyDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommitmentAmountInceptionOrigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommitmentAmountInceptionOrig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommitmentAmountInceptionEURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommitmentAmountInceptionEUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PaymentFrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PaymentFrequencyDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentFrequencyDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectFinanceLoanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectFinanceLoan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectFinanceLoanDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectFinanceLoanDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PurposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurpose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PurposeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurposeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecourseDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecourseDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenceRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenceRateDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceRateDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SettlementDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSettlementDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SyndicatedContractIdentifierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSyndicatedContractIdentifier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RepaymentRightsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepaymentRights
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RepaymentRightsDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepaymentRightsDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterestRateAverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRateAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NextInterestRateDateResetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextInterestRateDateReset
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DefaultStatusInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefaultStatusInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DefaultStatusInstrumentDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefaultStatusInstrumentDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DateDefaultStatusInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDefaultStatusInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmountPastDueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountPastDue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatePastDueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePastDue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfSecurisationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfSecurisation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfSecurisationDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfSecurisationDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OutstandingNominalAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutstandingNominalAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AccountingClassifInstrumentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountingClassifInstruments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AccountingClassifInstrumentsDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountingClassifInstrumentsDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PerformingStatusInstrumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerformingStatusInstrument
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PerformingStatusInstrumentDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerformingStatusInstrumentDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatePerformingStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePerformingStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusForbearanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusForbearance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DateStatusForbearanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateStatusForbearance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ComulativeRecoveryAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComulativeRecoveryAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusForbearance_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusForbearance_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Contract_AccountMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_AccountM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNrMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNrM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CounterpartyRoleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterpartyRole
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CounterpartyRoleDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterpartyRoleDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JointLiabilityAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJointLiabilityAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EndDateOfInterestPaymentOnlyPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDateOfInterestPaymentOnlyPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ALL_CONTRACTS_ACCOUNTSRow
            Get
                Return CType(Me.Rows(index),ALL_CONTRACTS_ACCOUNTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_CONTRACTS_ACCOUNTSRowChanging As ALL_CONTRACTS_ACCOUNTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_CONTRACTS_ACCOUNTSRowChanged As ALL_CONTRACTS_ACCOUNTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_CONTRACTS_ACCOUNTSRowDeleting As ALL_CONTRACTS_ACCOUNTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_CONTRACTS_ACCOUNTSRowDeleted As ALL_CONTRACTS_ACCOUNTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddALL_CONTRACTS_ACCOUNTSRow(ByVal row As ALL_CONTRACTS_ACCOUNTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddALL_CONTRACTS_ACCOUNTSRow( _
                    ByVal Contract_Account As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal ContractType As String,  _
                    ByVal ProductType As String,  _
                    ByVal StartDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal BusinessType As String,  _
                    ByVal KEV_Collateral As String,  _
                    ByVal Valid As String,  _
                    ByVal AnaCredit_Valid As String,  _
                    ByVal IsAnaCredit As String,  _
                    ByVal CCY As String,  _
                    ByVal GSTIFF_Reference As String,  _
                    ByVal CCB_Group As String,  _
                    ByVal InputDate As Date,  _
                    ByVal TypeOfInstrument As String,  _
                    ByVal TypeOfInstrumentDescription As String,  _
                    ByVal AmortisationType As String,  _
                    ByVal AmortisationTypeDescription As String,  _
                    ByVal FiduciaryInstrument As String,  _
                    ByVal FiduciaryInstrumentDescription As String,  _
                    ByVal InterestRate As Double,  _
                    ByVal Spread As Double,  _
                    ByVal InterestRateType As String,  _
                    ByVal InterestRateTypeDescription As String,  _
                    ByVal InterestRateCap As Double,  _
                    ByVal InterestRateFloor As Double,  _
                    ByVal InterestRateResetFrequency As String,  _
                    ByVal InterestRateResetFrequencyDescription As String,  _
                    ByVal CommitmentAmountInceptionOrig As Double,  _
                    ByVal ExchangeRate As Double,  _
                    ByVal CommitmentAmountInceptionEUR As Double,  _
                    ByVal PaymentFrequency As String,  _
                    ByVal PaymentFrequencyDescription As String,  _
                    ByVal ProjectFinanceLoan As String,  _
                    ByVal ProjectFinanceLoanDescription As String,  _
                    ByVal Purpose As String,  _
                    ByVal PurposeDescription As String,  _
                    ByVal Recourse As String,  _
                    ByVal RecourseDescription As String,  _
                    ByVal ReferenceRate As String,  _
                    ByVal ReferenceRateDescription As String,  _
                    ByVal SettlementDate As Date,  _
                    ByVal SyndicatedContractIdentifier As String,  _
                    ByVal RepaymentRights As String,  _
                    ByVal RepaymentRightsDescription As String,  _
                    ByVal InterestRateAverage As Double,  _
                    ByVal NextInterestRateDateReset As Date,  _
                    ByVal DefaultStatusInstrument As String,  _
                    ByVal DefaultStatusInstrumentDescription As String,  _
                    ByVal DateDefaultStatusInstrument As Date,  _
                    ByVal AmountPastDue As Double,  _
                    ByVal DatePastDue As Date,  _
                    ByVal TypeOfSecurisation As String,  _
                    ByVal TypeOfSecurisationDescription As String,  _
                    ByVal OutstandingNominalAmount As Double,  _
                    ByVal AccountingClassifInstruments As String,  _
                    ByVal AccountingClassifInstrumentsDescription As String,  _
                    ByVal PerformingStatusInstrument As String,  _
                    ByVal PerformingStatusInstrumentDescription As String,  _
                    ByVal DatePerformingStatus As Date,  _
                    ByVal StatusForbearance As String,  _
                    ByVal DateStatusForbearance As Date,  _
                    ByVal ComulativeRecoveryAmount As Double,  _
                    ByVal StatusForbearance_Description As String,  _
                    ByVal Contract_AccountM As String,  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractTypeDescription As String,  _
                    ByVal ProductTypeDescription As String,  _
                    ByVal CounterpartyRole As String,  _
                    ByVal CounterpartyRoleDescription As String,  _
                    ByVal JointLiabilityAmount As Double,  _
                    ByVal EndDateOfInterestPaymentOnlyPeriod As Date) As ALL_CONTRACTS_ACCOUNTSRow
            Dim rowALL_CONTRACTS_ACCOUNTSRow As ALL_CONTRACTS_ACCOUNTSRow = CType(Me.NewRow,ALL_CONTRACTS_ACCOUNTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Contract_Account, ClientNr, ClientName, ContractType, ProductType, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Valid, IsAnaCredit, CCY, GSTIFF_Reference, CCB_Group, InputDate, TypeOfInstrument, TypeOfInstrumentDescription, AmortisationType, AmortisationTypeDescription, FiduciaryInstrument, FiduciaryInstrumentDescription, InterestRate, Spread, InterestRateType, InterestRateTypeDescription, InterestRateCap, InterestRateFloor, InterestRateResetFrequency, InterestRateResetFrequencyDescription, CommitmentAmountInceptionOrig, ExchangeRate, CommitmentAmountInceptionEUR, PaymentFrequency, PaymentFrequencyDescription, ProjectFinanceLoan, ProjectFinanceLoanDescription, Purpose, PurposeDescription, Recourse, RecourseDescription, ReferenceRate, ReferenceRateDescription, SettlementDate, SyndicatedContractIdentifier, RepaymentRights, RepaymentRightsDescription, InterestRateAverage, NextInterestRateDateReset, DefaultStatusInstrument, DefaultStatusInstrumentDescription, DateDefaultStatusInstrument, AmountPastDue, DatePastDue, TypeOfSecurisation, TypeOfSecurisationDescription, OutstandingNominalAmount, AccountingClassifInstruments, AccountingClassifInstrumentsDescription, PerformingStatusInstrument, PerformingStatusInstrumentDescription, DatePerformingStatus, StatusForbearance, DateStatusForbearance, ComulativeRecoveryAmount, StatusForbearance_Description, Contract_AccountM, ClientNrM, ContractTypeDescription, ProductTypeDescription, CounterpartyRole, CounterpartyRoleDescription, JointLiabilityAmount, EndDateOfInterestPaymentOnlyPeriod}
            rowALL_CONTRACTS_ACCOUNTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowALL_CONTRACTS_ACCOUNTSRow)
            Return rowALL_CONTRACTS_ACCOUNTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ALL_CONTRACTS_ACCOUNTSRow
            Return CType(Me.Rows.Find(New Object() {ID}),ALL_CONTRACTS_ACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ALL_CONTRACTS_ACCOUNTSDataTable = CType(MyBase.Clone,ALL_CONTRACTS_ACCOUNTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ALL_CONTRACTS_ACCOUNTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnContract_Account = MyBase.Columns("Contract_Account")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnContractType = MyBase.Columns("ContractType")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnKEV_Collateral = MyBase.Columns("KEV_Collateral")
            Me.columnValid = MyBase.Columns("Valid")
            Me.columnAnaCredit_Valid = MyBase.Columns("AnaCredit_Valid")
            Me.columnIsAnaCredit = MyBase.Columns("IsAnaCredit")
            Me.columnCCY = MyBase.Columns("CCY")
            Me.columnGSTIFF_Reference = MyBase.Columns("GSTIFF_Reference")
            Me.columnCCB_Group = MyBase.Columns("CCB_Group")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnTypeOfInstrument = MyBase.Columns("TypeOfInstrument")
            Me.columnTypeOfInstrumentDescription = MyBase.Columns("TypeOfInstrumentDescription")
            Me.columnAmortisationType = MyBase.Columns("AmortisationType")
            Me.columnAmortisationTypeDescription = MyBase.Columns("AmortisationTypeDescription")
            Me.columnFiduciaryInstrument = MyBase.Columns("FiduciaryInstrument")
            Me.columnFiduciaryInstrumentDescription = MyBase.Columns("FiduciaryInstrumentDescription")
            Me.columnInterestRate = MyBase.Columns("InterestRate")
            Me.columnSpread = MyBase.Columns("Spread")
            Me.columnInterestRateType = MyBase.Columns("InterestRateType")
            Me.columnInterestRateTypeDescription = MyBase.Columns("InterestRateTypeDescription")
            Me.columnInterestRateCap = MyBase.Columns("InterestRateCap")
            Me.columnInterestRateFloor = MyBase.Columns("InterestRateFloor")
            Me.columnInterestRateResetFrequency = MyBase.Columns("InterestRateResetFrequency")
            Me.columnInterestRateResetFrequencyDescription = MyBase.Columns("InterestRateResetFrequencyDescription")
            Me.columnCommitmentAmountInceptionOrig = MyBase.Columns("CommitmentAmountInceptionOrig")
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
            Me.columnCommitmentAmountInceptionEUR = MyBase.Columns("CommitmentAmountInceptionEUR")
            Me.columnPaymentFrequency = MyBase.Columns("PaymentFrequency")
            Me.columnPaymentFrequencyDescription = MyBase.Columns("PaymentFrequencyDescription")
            Me.columnProjectFinanceLoan = MyBase.Columns("ProjectFinanceLoan")
            Me.columnProjectFinanceLoanDescription = MyBase.Columns("ProjectFinanceLoanDescription")
            Me.columnPurpose = MyBase.Columns("Purpose")
            Me.columnPurposeDescription = MyBase.Columns("PurposeDescription")
            Me.columnRecourse = MyBase.Columns("Recourse")
            Me.columnRecourseDescription = MyBase.Columns("RecourseDescription")
            Me.columnReferenceRate = MyBase.Columns("ReferenceRate")
            Me.columnReferenceRateDescription = MyBase.Columns("ReferenceRateDescription")
            Me.columnSettlementDate = MyBase.Columns("SettlementDate")
            Me.columnSyndicatedContractIdentifier = MyBase.Columns("SyndicatedContractIdentifier")
            Me.columnRepaymentRights = MyBase.Columns("RepaymentRights")
            Me.columnRepaymentRightsDescription = MyBase.Columns("RepaymentRightsDescription")
            Me.columnInterestRateAverage = MyBase.Columns("InterestRateAverage")
            Me.columnNextInterestRateDateReset = MyBase.Columns("NextInterestRateDateReset")
            Me.columnDefaultStatusInstrument = MyBase.Columns("DefaultStatusInstrument")
            Me.columnDefaultStatusInstrumentDescription = MyBase.Columns("DefaultStatusInstrumentDescription")
            Me.columnDateDefaultStatusInstrument = MyBase.Columns("DateDefaultStatusInstrument")
            Me.columnAmountPastDue = MyBase.Columns("AmountPastDue")
            Me.columnDatePastDue = MyBase.Columns("DatePastDue")
            Me.columnTypeOfSecurisation = MyBase.Columns("TypeOfSecurisation")
            Me.columnTypeOfSecurisationDescription = MyBase.Columns("TypeOfSecurisationDescription")
            Me.columnOutstandingNominalAmount = MyBase.Columns("OutstandingNominalAmount")
            Me.columnAccountingClassifInstruments = MyBase.Columns("AccountingClassifInstruments")
            Me.columnAccountingClassifInstrumentsDescription = MyBase.Columns("AccountingClassifInstrumentsDescription")
            Me.columnPerformingStatusInstrument = MyBase.Columns("PerformingStatusInstrument")
            Me.columnPerformingStatusInstrumentDescription = MyBase.Columns("PerformingStatusInstrumentDescription")
            Me.columnDatePerformingStatus = MyBase.Columns("DatePerformingStatus")
            Me.columnStatusForbearance = MyBase.Columns("StatusForbearance")
            Me.columnDateStatusForbearance = MyBase.Columns("DateStatusForbearance")
            Me.columnComulativeRecoveryAmount = MyBase.Columns("ComulativeRecoveryAmount")
            Me.columnStatusForbearance_Description = MyBase.Columns("StatusForbearance_Description")
            Me.columnContract_AccountM = MyBase.Columns("Contract_AccountM")
            Me.columnClientNrM = MyBase.Columns("ClientNrM")
            Me.columnContractTypeDescription = MyBase.Columns("ContractTypeDescription")
            Me.columnProductTypeDescription = MyBase.Columns("ProductTypeDescription")
            Me.columnCounterpartyRole = MyBase.Columns("CounterpartyRole")
            Me.columnCounterpartyRoleDescription = MyBase.Columns("CounterpartyRoleDescription")
            Me.columnJointLiabilityAmount = MyBase.Columns("JointLiabilityAmount")
            Me.columnEndDateOfInterestPaymentOnlyPeriod = MyBase.Columns("EndDateOfInterestPaymentOnlyPeriod")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnContract_Account = New Global.System.Data.DataColumn("Contract_Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Account)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnContractType = New Global.System.Data.DataColumn("ContractType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractType)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnKEV_Collateral = New Global.System.Data.DataColumn("KEV_Collateral", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEV_Collateral)
            Me.columnValid = New Global.System.Data.DataColumn("Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValid)
            Me.columnAnaCredit_Valid = New Global.System.Data.DataColumn("AnaCredit_Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnaCredit_Valid)
            Me.columnIsAnaCredit = New Global.System.Data.DataColumn("IsAnaCredit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAnaCredit)
            Me.columnCCY = New Global.System.Data.DataColumn("CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY)
            Me.columnGSTIFF_Reference = New Global.System.Data.DataColumn("GSTIFF_Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTIFF_Reference)
            Me.columnCCB_Group = New Global.System.Data.DataColumn("CCB_Group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCB_Group)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnTypeOfInstrument = New Global.System.Data.DataColumn("TypeOfInstrument", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfInstrument)
            Me.columnTypeOfInstrumentDescription = New Global.System.Data.DataColumn("TypeOfInstrumentDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfInstrumentDescription)
            Me.columnAmortisationType = New Global.System.Data.DataColumn("AmortisationType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmortisationType)
            Me.columnAmortisationTypeDescription = New Global.System.Data.DataColumn("AmortisationTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmortisationTypeDescription)
            Me.columnFiduciaryInstrument = New Global.System.Data.DataColumn("FiduciaryInstrument", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFiduciaryInstrument)
            Me.columnFiduciaryInstrumentDescription = New Global.System.Data.DataColumn("FiduciaryInstrumentDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFiduciaryInstrumentDescription)
            Me.columnInterestRate = New Global.System.Data.DataColumn("InterestRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRate)
            Me.columnSpread = New Global.System.Data.DataColumn("Spread", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpread)
            Me.columnInterestRateType = New Global.System.Data.DataColumn("InterestRateType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateType)
            Me.columnInterestRateTypeDescription = New Global.System.Data.DataColumn("InterestRateTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateTypeDescription)
            Me.columnInterestRateCap = New Global.System.Data.DataColumn("InterestRateCap", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateCap)
            Me.columnInterestRateFloor = New Global.System.Data.DataColumn("InterestRateFloor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateFloor)
            Me.columnInterestRateResetFrequency = New Global.System.Data.DataColumn("InterestRateResetFrequency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateResetFrequency)
            Me.columnInterestRateResetFrequencyDescription = New Global.System.Data.DataColumn("InterestRateResetFrequencyDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateResetFrequencyDescription)
            Me.columnCommitmentAmountInceptionOrig = New Global.System.Data.DataColumn("CommitmentAmountInceptionOrig", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommitmentAmountInceptionOrig)
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
            Me.columnCommitmentAmountInceptionEUR = New Global.System.Data.DataColumn("CommitmentAmountInceptionEUR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommitmentAmountInceptionEUR)
            Me.columnPaymentFrequency = New Global.System.Data.DataColumn("PaymentFrequency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentFrequency)
            Me.columnPaymentFrequencyDescription = New Global.System.Data.DataColumn("PaymentFrequencyDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentFrequencyDescription)
            Me.columnProjectFinanceLoan = New Global.System.Data.DataColumn("ProjectFinanceLoan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectFinanceLoan)
            Me.columnProjectFinanceLoanDescription = New Global.System.Data.DataColumn("ProjectFinanceLoanDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectFinanceLoanDescription)
            Me.columnPurpose = New Global.System.Data.DataColumn("Purpose", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurpose)
            Me.columnPurposeDescription = New Global.System.Data.DataColumn("PurposeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurposeDescription)
            Me.columnRecourse = New Global.System.Data.DataColumn("Recourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecourse)
            Me.columnRecourseDescription = New Global.System.Data.DataColumn("RecourseDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecourseDescription)
            Me.columnReferenceRate = New Global.System.Data.DataColumn("ReferenceRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceRate)
            Me.columnReferenceRateDescription = New Global.System.Data.DataColumn("ReferenceRateDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceRateDescription)
            Me.columnSettlementDate = New Global.System.Data.DataColumn("SettlementDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSettlementDate)
            Me.columnSyndicatedContractIdentifier = New Global.System.Data.DataColumn("SyndicatedContractIdentifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSyndicatedContractIdentifier)
            Me.columnRepaymentRights = New Global.System.Data.DataColumn("RepaymentRights", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepaymentRights)
            Me.columnRepaymentRightsDescription = New Global.System.Data.DataColumn("RepaymentRightsDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepaymentRightsDescription)
            Me.columnInterestRateAverage = New Global.System.Data.DataColumn("InterestRateAverage", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRateAverage)
            Me.columnNextInterestRateDateReset = New Global.System.Data.DataColumn("NextInterestRateDateReset", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextInterestRateDateReset)
            Me.columnDefaultStatusInstrument = New Global.System.Data.DataColumn("DefaultStatusInstrument", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefaultStatusInstrument)
            Me.columnDefaultStatusInstrumentDescription = New Global.System.Data.DataColumn("DefaultStatusInstrumentDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefaultStatusInstrumentDescription)
            Me.columnDateDefaultStatusInstrument = New Global.System.Data.DataColumn("DateDefaultStatusInstrument", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDefaultStatusInstrument)
            Me.columnAmountPastDue = New Global.System.Data.DataColumn("AmountPastDue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountPastDue)
            Me.columnDatePastDue = New Global.System.Data.DataColumn("DatePastDue", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePastDue)
            Me.columnTypeOfSecurisation = New Global.System.Data.DataColumn("TypeOfSecurisation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfSecurisation)
            Me.columnTypeOfSecurisationDescription = New Global.System.Data.DataColumn("TypeOfSecurisationDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfSecurisationDescription)
            Me.columnOutstandingNominalAmount = New Global.System.Data.DataColumn("OutstandingNominalAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutstandingNominalAmount)
            Me.columnAccountingClassifInstruments = New Global.System.Data.DataColumn("AccountingClassifInstruments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountingClassifInstruments)
            Me.columnAccountingClassifInstrumentsDescription = New Global.System.Data.DataColumn("AccountingClassifInstrumentsDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountingClassifInstrumentsDescription)
            Me.columnPerformingStatusInstrument = New Global.System.Data.DataColumn("PerformingStatusInstrument", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerformingStatusInstrument)
            Me.columnPerformingStatusInstrumentDescription = New Global.System.Data.DataColumn("PerformingStatusInstrumentDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerformingStatusInstrumentDescription)
            Me.columnDatePerformingStatus = New Global.System.Data.DataColumn("DatePerformingStatus", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePerformingStatus)
            Me.columnStatusForbearance = New Global.System.Data.DataColumn("StatusForbearance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusForbearance)
            Me.columnDateStatusForbearance = New Global.System.Data.DataColumn("DateStatusForbearance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateStatusForbearance)
            Me.columnComulativeRecoveryAmount = New Global.System.Data.DataColumn("ComulativeRecoveryAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComulativeRecoveryAmount)
            Me.columnStatusForbearance_Description = New Global.System.Data.DataColumn("StatusForbearance_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusForbearance_Description)
            Me.columnContract_AccountM = New Global.System.Data.DataColumn("Contract_AccountM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_AccountM)
            Me.columnClientNrM = New Global.System.Data.DataColumn("ClientNrM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNrM)
            Me.columnContractTypeDescription = New Global.System.Data.DataColumn("ContractTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractTypeDescription)
            Me.columnProductTypeDescription = New Global.System.Data.DataColumn("ProductTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductTypeDescription)
            Me.columnCounterpartyRole = New Global.System.Data.DataColumn("CounterpartyRole", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterpartyRole)
            Me.columnCounterpartyRoleDescription = New Global.System.Data.DataColumn("CounterpartyRoleDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterpartyRoleDescription)
            Me.columnJointLiabilityAmount = New Global.System.Data.DataColumn("JointLiabilityAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJointLiabilityAmount)
            Me.columnEndDateOfInterestPaymentOnlyPeriod = New Global.System.Data.DataColumn("EndDateOfInterestPaymentOnlyPeriod", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDateOfInterestPaymentOnlyPeriod)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnContract_Account.MaxLength = 50
            Me.columnClientNr.MaxLength = 50
            Me.columnClientName.MaxLength = 255
            Me.columnContractType.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me.columnBusinessType.MaxLength = 255
            Me.columnKEV_Collateral.MaxLength = 10
            Me.columnValid.MaxLength = 10
            Me.columnAnaCredit_Valid.MaxLength = 10
            Me.columnIsAnaCredit.MaxLength = 10
            Me.columnCCY.MaxLength = 3
            Me.columnGSTIFF_Reference.MaxLength = 50
            Me.columnCCB_Group.MaxLength = 1
            Me.columnTypeOfInstrument.MaxLength = 3
            Me.columnTypeOfInstrumentDescription.MaxLength = 255
            Me.columnAmortisationType.MaxLength = 1
            Me.columnAmortisationTypeDescription.MaxLength = 255
            Me.columnFiduciaryInstrument.MaxLength = 1
            Me.columnFiduciaryInstrumentDescription.MaxLength = 255
            Me.columnInterestRateType.MaxLength = 1
            Me.columnInterestRateTypeDescription.MaxLength = 255
            Me.columnInterestRateResetFrequency.MaxLength = 1
            Me.columnInterestRateResetFrequencyDescription.MaxLength = 255
            Me.columnPaymentFrequency.MaxLength = 1
            Me.columnPaymentFrequencyDescription.MaxLength = 255
            Me.columnProjectFinanceLoan.MaxLength = 1
            Me.columnProjectFinanceLoanDescription.MaxLength = 255
            Me.columnPurpose.MaxLength = 1
            Me.columnPurposeDescription.MaxLength = 255
            Me.columnRecourse.MaxLength = 1
            Me.columnRecourseDescription.MaxLength = 255
            Me.columnReferenceRate.MaxLength = 3
            Me.columnReferenceRateDescription.MaxLength = 255
            Me.columnSyndicatedContractIdentifier.MaxLength = 60
            Me.columnRepaymentRights.MaxLength = 1
            Me.columnRepaymentRightsDescription.MaxLength = 255
            Me.columnDefaultStatusInstrument.MaxLength = 1
            Me.columnDefaultStatusInstrumentDescription.MaxLength = 255
            Me.columnTypeOfSecurisation.MaxLength = 1
            Me.columnTypeOfSecurisationDescription.MaxLength = 255
            Me.columnAccountingClassifInstruments.MaxLength = 2
            Me.columnAccountingClassifInstrumentsDescription.MaxLength = 255
            Me.columnPerformingStatusInstrument.MaxLength = 1
            Me.columnPerformingStatusInstrumentDescription.MaxLength = 255
            Me.columnStatusForbearance.MaxLength = 1
            Me.columnStatusForbearance_Description.MaxLength = 255
            Me.columnContract_AccountM.MaxLength = 50
            Me.columnClientNrM.MaxLength = 50
            Me.columnContractTypeDescription.MaxLength = 255
            Me.columnProductTypeDescription.MaxLength = 255
            Me.columnCounterpartyRole.MaxLength = 1
            Me.columnCounterpartyRoleDescription.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewALL_CONTRACTS_ACCOUNTSRow() As ALL_CONTRACTS_ACCOUNTSRow
            Return CType(Me.NewRow,ALL_CONTRACTS_ACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ALL_CONTRACTS_ACCOUNTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ALL_CONTRACTS_ACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ALL_CONTRACTS_ACCOUNTSRowChangedEvent) Is Nothing) Then
                RaiseEvent ALL_CONTRACTS_ACCOUNTSRowChanged(Me, New ALL_CONTRACTS_ACCOUNTSRowChangeEvent(CType(e.Row,ALL_CONTRACTS_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ALL_CONTRACTS_ACCOUNTSRowChangingEvent) Is Nothing) Then
                RaiseEvent ALL_CONTRACTS_ACCOUNTSRowChanging(Me, New ALL_CONTRACTS_ACCOUNTSRowChangeEvent(CType(e.Row,ALL_CONTRACTS_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ALL_CONTRACTS_ACCOUNTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ALL_CONTRACTS_ACCOUNTSRowDeleted(Me, New ALL_CONTRACTS_ACCOUNTSRowChangeEvent(CType(e.Row,ALL_CONTRACTS_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ALL_CONTRACTS_ACCOUNTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ALL_CONTRACTS_ACCOUNTSRowDeleting(Me, New ALL_CONTRACTS_ACCOUNTSRowChangeEvent(CType(e.Row,ALL_CONTRACTS_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveALL_CONTRACTS_ACCOUNTSRow(ByVal row As ALL_CONTRACTS_ACCOUNTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AllContractsAccountsDataSet = New AllContractsAccountsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ALL_CONTRACTS_ACCOUNTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ALL_GL_ITEMS_BSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ALL_GL_ITEMS_BSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnContract_Account As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnContractType As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnKEV_Collateral As Global.System.Data.DataColumn
        
        Private columnValid As Global.System.Data.DataColumn
        
        Private columnAnaCredit_Valid As Global.System.Data.DataColumn
        
        Private columnIsAnaCredit As Global.System.Data.DataColumn
        
        Private columnCCY As Global.System.Data.DataColumn
        
        Private columnHGB_Bilanz_Match As Global.System.Data.DataColumn
        
        Private columnHGB_GV_Match As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ALL_GL_ITEMS_BS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KEV_CollateralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEV_Collateral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnaCredit_ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnaCredit_Valid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsAnaCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAnaCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HGB_Bilanz_MatchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHGB_Bilanz_Match
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HGB_GV_MatchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHGB_GV_Match
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ALL_GL_ITEMS_BSRow
            Get
                Return CType(Me.Rows(index),ALL_GL_ITEMS_BSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_BSRowChanging As ALL_GL_ITEMS_BSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_BSRowChanged As ALL_GL_ITEMS_BSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_BSRowDeleting As ALL_GL_ITEMS_BSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_BSRowDeleted As ALL_GL_ITEMS_BSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddALL_GL_ITEMS_BSRow(ByVal row As ALL_GL_ITEMS_BSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddALL_GL_ITEMS_BSRow(ByVal Contract_Account As String, ByVal ClientNr As String, ByVal ClientName As String, ByVal ContractType As String, ByVal ProductType As String, ByVal StartDate As Date, ByVal MaturityDate As Date, ByVal BusinessType As String, ByVal KEV_Collateral As String, ByVal Valid As String, ByVal AnaCredit_Valid As String, ByVal IsAnaCredit As String, ByVal CCY As String, ByVal HGB_Bilanz_Match As String, ByVal HGB_GV_Match As String) As ALL_GL_ITEMS_BSRow
            Dim rowALL_GL_ITEMS_BSRow As ALL_GL_ITEMS_BSRow = CType(Me.NewRow,ALL_GL_ITEMS_BSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Contract_Account, ClientNr, ClientName, ContractType, ProductType, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Valid, IsAnaCredit, CCY, HGB_Bilanz_Match, HGB_GV_Match}
            rowALL_GL_ITEMS_BSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowALL_GL_ITEMS_BSRow)
            Return rowALL_GL_ITEMS_BSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ALL_GL_ITEMS_BSRow
            Return CType(Me.Rows.Find(New Object() {ID}),ALL_GL_ITEMS_BSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ALL_GL_ITEMS_BSDataTable = CType(MyBase.Clone,ALL_GL_ITEMS_BSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ALL_GL_ITEMS_BSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnContract_Account = MyBase.Columns("Contract_Account")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnContractType = MyBase.Columns("ContractType")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnKEV_Collateral = MyBase.Columns("KEV_Collateral")
            Me.columnValid = MyBase.Columns("Valid")
            Me.columnAnaCredit_Valid = MyBase.Columns("AnaCredit_Valid")
            Me.columnIsAnaCredit = MyBase.Columns("IsAnaCredit")
            Me.columnCCY = MyBase.Columns("CCY")
            Me.columnHGB_Bilanz_Match = MyBase.Columns("HGB_Bilanz_Match")
            Me.columnHGB_GV_Match = MyBase.Columns("HGB_GV_Match")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnContract_Account = New Global.System.Data.DataColumn("Contract_Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Account)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnContractType = New Global.System.Data.DataColumn("ContractType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractType)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnKEV_Collateral = New Global.System.Data.DataColumn("KEV_Collateral", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEV_Collateral)
            Me.columnValid = New Global.System.Data.DataColumn("Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValid)
            Me.columnAnaCredit_Valid = New Global.System.Data.DataColumn("AnaCredit_Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnaCredit_Valid)
            Me.columnIsAnaCredit = New Global.System.Data.DataColumn("IsAnaCredit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAnaCredit)
            Me.columnCCY = New Global.System.Data.DataColumn("CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY)
            Me.columnHGB_Bilanz_Match = New Global.System.Data.DataColumn("HGB_Bilanz_Match", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHGB_Bilanz_Match)
            Me.columnHGB_GV_Match = New Global.System.Data.DataColumn("HGB_GV_Match", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHGB_GV_Match)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnContract_Account.MaxLength = 50
            Me.columnClientNr.MaxLength = 50
            Me.columnClientName.MaxLength = 255
            Me.columnContractType.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me.columnBusinessType.MaxLength = 255
            Me.columnKEV_Collateral.MaxLength = 10
            Me.columnValid.MaxLength = 10
            Me.columnAnaCredit_Valid.MaxLength = 10
            Me.columnIsAnaCredit.MaxLength = 10
            Me.columnCCY.MaxLength = 3
            Me.columnHGB_Bilanz_Match.MaxLength = 50
            Me.columnHGB_GV_Match.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewALL_GL_ITEMS_BSRow() As ALL_GL_ITEMS_BSRow
            Return CType(Me.NewRow,ALL_GL_ITEMS_BSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ALL_GL_ITEMS_BSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ALL_GL_ITEMS_BSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ALL_GL_ITEMS_BSRowChangedEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_BSRowChanged(Me, New ALL_GL_ITEMS_BSRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_BSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ALL_GL_ITEMS_BSRowChangingEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_BSRowChanging(Me, New ALL_GL_ITEMS_BSRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_BSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ALL_GL_ITEMS_BSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_BSRowDeleted(Me, New ALL_GL_ITEMS_BSRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_BSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ALL_GL_ITEMS_BSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_BSRowDeleting(Me, New ALL_GL_ITEMS_BSRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_BSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveALL_GL_ITEMS_BSRow(ByVal row As ALL_GL_ITEMS_BSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AllContractsAccountsDataSet = New AllContractsAccountsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ALL_GL_ITEMS_BSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ALL_GL_ITEMS_PLDataTable
        Inherits Global.System.Data.TypedTableBase(Of ALL_GL_ITEMS_PLRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnContract_Account As Global.System.Data.DataColumn
        
        Private columnClientNr As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnContractType As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnKEV_Collateral As Global.System.Data.DataColumn
        
        Private columnValid As Global.System.Data.DataColumn
        
        Private columnAnaCredit_Valid As Global.System.Data.DataColumn
        
        Private columnIsAnaCredit As Global.System.Data.DataColumn
        
        Private columnCCY As Global.System.Data.DataColumn
        
        Private columnHGB_Bilanz_Match As Global.System.Data.DataColumn
        
        Private columnHGB_GV_Match As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ALL_GL_ITEMS_PL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Contract_AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientNr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KEV_CollateralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEV_Collateral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnaCredit_ValidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnaCredit_Valid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsAnaCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAnaCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HGB_Bilanz_MatchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHGB_Bilanz_Match
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HGB_GV_MatchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHGB_GV_Match
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ALL_GL_ITEMS_PLRow
            Get
                Return CType(Me.Rows(index),ALL_GL_ITEMS_PLRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_PLRowChanging As ALL_GL_ITEMS_PLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_PLRowChanged As ALL_GL_ITEMS_PLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_PLRowDeleting As ALL_GL_ITEMS_PLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ALL_GL_ITEMS_PLRowDeleted As ALL_GL_ITEMS_PLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddALL_GL_ITEMS_PLRow(ByVal row As ALL_GL_ITEMS_PLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddALL_GL_ITEMS_PLRow(ByVal Contract_Account As String, ByVal ClientNr As String, ByVal ClientName As String, ByVal ContractType As String, ByVal ProductType As String, ByVal StartDate As Date, ByVal MaturityDate As Date, ByVal BusinessType As String, ByVal KEV_Collateral As String, ByVal Valid As String, ByVal AnaCredit_Valid As String, ByVal IsAnaCredit As String, ByVal CCY As String, ByVal HGB_Bilanz_Match As String, ByVal HGB_GV_Match As String) As ALL_GL_ITEMS_PLRow
            Dim rowALL_GL_ITEMS_PLRow As ALL_GL_ITEMS_PLRow = CType(Me.NewRow,ALL_GL_ITEMS_PLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Contract_Account, ClientNr, ClientName, ContractType, ProductType, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Valid, IsAnaCredit, CCY, HGB_Bilanz_Match, HGB_GV_Match}
            rowALL_GL_ITEMS_PLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowALL_GL_ITEMS_PLRow)
            Return rowALL_GL_ITEMS_PLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ALL_GL_ITEMS_PLRow
            Return CType(Me.Rows.Find(New Object() {ID}),ALL_GL_ITEMS_PLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ALL_GL_ITEMS_PLDataTable = CType(MyBase.Clone,ALL_GL_ITEMS_PLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ALL_GL_ITEMS_PLDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnContract_Account = MyBase.Columns("Contract_Account")
            Me.columnClientNr = MyBase.Columns("ClientNr")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnContractType = MyBase.Columns("ContractType")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnKEV_Collateral = MyBase.Columns("KEV_Collateral")
            Me.columnValid = MyBase.Columns("Valid")
            Me.columnAnaCredit_Valid = MyBase.Columns("AnaCredit_Valid")
            Me.columnIsAnaCredit = MyBase.Columns("IsAnaCredit")
            Me.columnCCY = MyBase.Columns("CCY")
            Me.columnHGB_Bilanz_Match = MyBase.Columns("HGB_Bilanz_Match")
            Me.columnHGB_GV_Match = MyBase.Columns("HGB_GV_Match")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnContract_Account = New Global.System.Data.DataColumn("Contract_Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_Account)
            Me.columnClientNr = New Global.System.Data.DataColumn("ClientNr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientNr)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnContractType = New Global.System.Data.DataColumn("ContractType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractType)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnKEV_Collateral = New Global.System.Data.DataColumn("KEV_Collateral", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEV_Collateral)
            Me.columnValid = New Global.System.Data.DataColumn("Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValid)
            Me.columnAnaCredit_Valid = New Global.System.Data.DataColumn("AnaCredit_Valid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnaCredit_Valid)
            Me.columnIsAnaCredit = New Global.System.Data.DataColumn("IsAnaCredit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAnaCredit)
            Me.columnCCY = New Global.System.Data.DataColumn("CCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCY)
            Me.columnHGB_Bilanz_Match = New Global.System.Data.DataColumn("HGB_Bilanz_Match", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHGB_Bilanz_Match)
            Me.columnHGB_GV_Match = New Global.System.Data.DataColumn("HGB_GV_Match", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHGB_GV_Match)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnContract_Account.MaxLength = 50
            Me.columnClientNr.MaxLength = 50
            Me.columnClientName.MaxLength = 255
            Me.columnContractType.MaxLength = 255
            Me.columnProductType.MaxLength = 255
            Me.columnBusinessType.MaxLength = 255
            Me.columnKEV_Collateral.MaxLength = 10
            Me.columnValid.MaxLength = 10
            Me.columnAnaCredit_Valid.MaxLength = 10
            Me.columnIsAnaCredit.MaxLength = 10
            Me.columnCCY.MaxLength = 3
            Me.columnHGB_Bilanz_Match.MaxLength = 50
            Me.columnHGB_GV_Match.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewALL_GL_ITEMS_PLRow() As ALL_GL_ITEMS_PLRow
            Return CType(Me.NewRow,ALL_GL_ITEMS_PLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ALL_GL_ITEMS_PLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ALL_GL_ITEMS_PLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ALL_GL_ITEMS_PLRowChangedEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_PLRowChanged(Me, New ALL_GL_ITEMS_PLRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_PLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ALL_GL_ITEMS_PLRowChangingEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_PLRowChanging(Me, New ALL_GL_ITEMS_PLRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_PLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ALL_GL_ITEMS_PLRowDeletedEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_PLRowDeleted(Me, New ALL_GL_ITEMS_PLRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_PLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ALL_GL_ITEMS_PLRowDeletingEvent) Is Nothing) Then
                RaiseEvent ALL_GL_ITEMS_PLRowDeleting(Me, New ALL_GL_ITEMS_PLRowChangeEvent(CType(e.Row,ALL_GL_ITEMS_PLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveALL_GL_ITEMS_PLRow(ByVal row As ALL_GL_ITEMS_PLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AllContractsAccountsDataSet = New AllContractsAccountsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ALL_GL_ITEMS_PLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ALL_CONTRACTS_ACCOUNTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableALL_CONTRACTS_ACCOUNTS As ALL_CONTRACTS_ACCOUNTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableALL_CONTRACTS_ACCOUNTS = CType(Me.Table,ALL_CONTRACTS_ACCOUNTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract_Account' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContractType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractType' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.BusinessTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessType' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KEV_Collateral() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.KEV_CollateralColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KEV_Collateral' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.KEV_CollateralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valid' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnaCredit_Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AnaCredit_ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnaCredit_Valid' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AnaCredit_ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IsAnaCredit() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.IsAnaCreditColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsAnaCredit' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.IsAnaCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GSTIFF_Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.GSTIFF_ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTIFF_Reference' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.GSTIFF_ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCB_Group() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCB_GroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCB_Group' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCB_GroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfInstrument() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeOfInstrument' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfInstrumentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeOfInstrumentDescription' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AmortisationType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmortisationType' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AmortisationTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmortisationTypeDescription' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FiduciaryInstrument() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FiduciaryInstrument' in table 'ALL_CONTRACTS_ACCOUNTS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FiduciaryInstrumentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FiduciaryInstrumentDescription' in table 'ALL_CONTRACTS_ACC"& _ 
                            "OUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Spread() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.SpreadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Spread' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.SpreadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateType' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateTypeDescription' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateCap() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateCapColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateCap' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateCapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateFloor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateFloorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateFloor' in table 'ALL_CONTRACTS_ACCOUNTS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateFloorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateResetFrequency() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateResetFrequency' in table 'ALL_CONTRACTS_ACCOUNT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateResetFrequencyDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateResetFrequencyDescription' in table 'ALL_CONTRA"& _ 
                            "CTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CommitmentAmountInceptionOrig() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionOrigColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommitmentAmountInceptionOrig' in table 'ALL_CONTRACTS_ACCO"& _ 
                            "UNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionOrigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ExchangeRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ExchangeRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CommitmentAmountInceptionEUR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionEURColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommitmentAmountInceptionEUR' in table 'ALL_CONTRACTS_ACCOU"& _ 
                            "NTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionEURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PaymentFrequency() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentFrequency' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PaymentFrequencyDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentFrequencyDescription' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectFinanceLoan() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProjectFinanceLoan' in table 'ALL_CONTRACTS_ACCOUNTS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectFinanceLoanDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProjectFinanceLoanDescription' in table 'ALL_CONTRACTS_ACCO"& _ 
                            "UNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Purpose() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purpose' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PurposeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurposeDescription' in table 'ALL_CONTRACTS_ACCOUNTS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Recourse() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recourse' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecourseDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecourseDescription' in table 'ALL_CONTRACTS_ACCOUNTS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReferenceRate() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceRate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReferenceRateDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceRateDescription' in table 'ALL_CONTRACTS_ACCOUNTS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SettlementDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.SettlementDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SettlementDate' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.SettlementDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SyndicatedContractIdentifier() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.SyndicatedContractIdentifierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SyndicatedContractIdentifier' in table 'ALL_CONTRACTS_ACCOU"& _ 
                            "NTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.SyndicatedContractIdentifierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RepaymentRights() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepaymentRights' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RepaymentRightsDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepaymentRightsDescription' in table 'ALL_CONTRACTS_ACCOUNT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InterestRateAverage() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateAverageColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestRateAverage' in table 'ALL_CONTRACTS_ACCOUNTS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateAverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NextInterestRateDateReset() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.NextInterestRateDateResetColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextInterestRateDateReset' in table 'ALL_CONTRACTS_ACCOUNTS"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.NextInterestRateDateResetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DefaultStatusInstrument() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DefaultStatusInstrument' in table 'ALL_CONTRACTS_ACCOUNTS' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DefaultStatusInstrumentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DefaultStatusInstrumentDescription' in table 'ALL_CONTRACTS"& _ 
                            "_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DateDefaultStatusInstrument() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateDefaultStatusInstrumentColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDefaultStatusInstrument' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateDefaultStatusInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AmountPastDue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmountPastDueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountPastDue' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmountPastDueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatePastDue() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePastDueColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePastDue' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePastDueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfSecurisation() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeOfSecurisation' in table 'ALL_CONTRACTS_ACCOUNTS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfSecurisationDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeOfSecurisationDescription' in table 'ALL_CONTRACTS_ACCO"& _ 
                            "UNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OutstandingNominalAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.OutstandingNominalAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OutstandingNominalAmount' in table 'ALL_CONTRACTS_ACCOUNTS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.OutstandingNominalAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AccountingClassifInstruments() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountingClassifInstruments' in table 'ALL_CONTRACTS_ACCOU"& _ 
                            "NTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AccountingClassifInstrumentsDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountingClassifInstrumentsDescription' in table 'ALL_CONT"& _ 
                            "RACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PerformingStatusInstrument() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerformingStatusInstrument' in table 'ALL_CONTRACTS_ACCOUNT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PerformingStatusInstrumentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerformingStatusInstrumentDescription' in table 'ALL_CONTRA"& _ 
                            "CTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatePerformingStatus() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePerformingStatusColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePerformingStatus' in table 'ALL_CONTRACTS_ACCOUNTS' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePerformingStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StatusForbearance() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusForbearance' in table 'ALL_CONTRACTS_ACCOUNTS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DateStatusForbearance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateStatusForbearanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateStatusForbearance' in table 'ALL_CONTRACTS_ACCOUNTS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateStatusForbearanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ComulativeRecoveryAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ComulativeRecoveryAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComulativeRecoveryAmount' in table 'ALL_CONTRACTS_ACCOUNTS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ComulativeRecoveryAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StatusForbearance_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearance_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusForbearance_Description' in table 'ALL_CONTRACTS_ACCO"& _ 
                            "UNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearance_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contract_AccountM() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract_AccountM' in table 'ALL_CONTRACTS_ACCOUNTS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientNrM() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNrM' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContractTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractTypeDescription' in table 'ALL_CONTRACTS_ACCOUNTS' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductTypeDescription' in table 'ALL_CONTRACTS_ACCOUNTS' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CounterpartyRole() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterpartyRole' in table 'ALL_CONTRACTS_ACCOUNTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CounterpartyRoleDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterpartyRoleDescription' in table 'ALL_CONTRACTS_ACCOUN"& _ 
                            "TS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JointLiabilityAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.JointLiabilityAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JointLiabilityAmount' in table 'ALL_CONTRACTS_ACCOUNTS' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.JointLiabilityAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EndDateOfInterestPaymentOnlyPeriod() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_CONTRACTS_ACCOUNTS.EndDateOfInterestPaymentOnlyPeriodColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDateOfInterestPaymentOnlyPeriod' in table 'ALL_CONTRACTS"& _ 
                            "_ACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_CONTRACTS_ACCOUNTS.EndDateOfInterestPaymentOnlyPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContract_AccountNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractTypeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBusinessTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.BusinessTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBusinessTypeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.BusinessTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKEV_CollateralNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.KEV_CollateralColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKEV_CollateralNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.KEV_CollateralColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValidNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnaCredit_ValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AnaCredit_ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnaCredit_ValidNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AnaCredit_ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIsAnaCreditNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.IsAnaCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIsAnaCreditNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.IsAnaCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCCYNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCCYNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGSTIFF_ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.GSTIFF_ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGSTIFF_ReferenceNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.GSTIFF_ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCCB_GroupNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CCB_GroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCCB_GroupNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CCB_GroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInputDateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeOfInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeOfInstrumentNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeOfInstrumentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeOfInstrumentDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfInstrumentDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmortisationTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmortisationTypeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmortisationTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmortisationTypeDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmortisationTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFiduciaryInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFiduciaryInstrumentNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFiduciaryInstrumentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFiduciaryInstrumentDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.FiduciaryInstrumentDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpreadNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.SpreadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpreadNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.SpreadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateTypeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateTypeDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateCapNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateCapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateCapNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateCapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateFloorNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateFloorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateFloorNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateFloorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateResetFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateResetFrequencyNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateResetFrequencyDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateResetFrequencyDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateResetFrequencyDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommitmentAmountInceptionOrigNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionOrigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommitmentAmountInceptionOrigNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionOrigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommitmentAmountInceptionEURNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionEURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommitmentAmountInceptionEURNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CommitmentAmountInceptionEURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPaymentFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPaymentFrequencyNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPaymentFrequencyDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPaymentFrequencyDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PaymentFrequencyDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProjectFinanceLoanNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProjectFinanceLoanNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProjectFinanceLoanDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProjectFinanceLoanDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProjectFinanceLoanDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPurposeNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPurposeNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPurposeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPurposeDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PurposeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRecourseNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRecourseNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRecourseDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRecourseDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.RecourseDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReferenceRateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReferenceRateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReferenceRateDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReferenceRateDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ReferenceRateDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSettlementDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.SettlementDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSettlementDateNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.SettlementDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSyndicatedContractIdentifierNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.SyndicatedContractIdentifierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSyndicatedContractIdentifierNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.SyndicatedContractIdentifierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRepaymentRightsNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRepaymentRightsNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRepaymentRightsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRepaymentRightsDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.RepaymentRightsDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterestRateAverageNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateAverageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterestRateAverageNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.InterestRateAverageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNextInterestRateDateResetNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.NextInterestRateDateResetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNextInterestRateDateResetNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.NextInterestRateDateResetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDefaultStatusInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDefaultStatusInstrumentNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDefaultStatusInstrumentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDefaultStatusInstrumentDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DefaultStatusInstrumentDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDateDefaultStatusInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DateDefaultStatusInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDateDefaultStatusInstrumentNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateDefaultStatusInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmountPastDueNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AmountPastDueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmountPastDueNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AmountPastDueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatePastDueNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DatePastDueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatePastDueNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePastDueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeOfSecurisationNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeOfSecurisationNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeOfSecurisationDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeOfSecurisationDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.TypeOfSecurisationDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOutstandingNominalAmountNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.OutstandingNominalAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOutstandingNominalAmountNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.OutstandingNominalAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAccountingClassifInstrumentsNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAccountingClassifInstrumentsNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAccountingClassifInstrumentsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAccountingClassifInstrumentsDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.AccountingClassifInstrumentsDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPerformingStatusInstrumentNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPerformingStatusInstrumentNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPerformingStatusInstrumentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPerformingStatusInstrumentDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.PerformingStatusInstrumentDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatePerformingStatusNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DatePerformingStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatePerformingStatusNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DatePerformingStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStatusForbearanceNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStatusForbearanceNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDateStatusForbearanceNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.DateStatusForbearanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDateStatusForbearanceNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.DateStatusForbearanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsComulativeRecoveryAmountNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ComulativeRecoveryAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetComulativeRecoveryAmountNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ComulativeRecoveryAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStatusForbearance_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearance_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStatusForbearance_DescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.StatusForbearance_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContract_AccountMNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContract_AccountMNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.Contract_AccountMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNrMNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNrMNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ClientNrMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractTypeDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ContractTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProductTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProductTypeDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.ProductTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCounterpartyRoleNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCounterpartyRoleNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCounterpartyRoleDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCounterpartyRoleDescriptionNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.CounterpartyRoleDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsJointLiabilityAmountNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.JointLiabilityAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetJointLiabilityAmountNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.JointLiabilityAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEndDateOfInterestPaymentOnlyPeriodNull() As Boolean
            Return Me.IsNull(Me.tableALL_CONTRACTS_ACCOUNTS.EndDateOfInterestPaymentOnlyPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEndDateOfInterestPaymentOnlyPeriodNull()
            Me(Me.tableALL_CONTRACTS_ACCOUNTS.EndDateOfInterestPaymentOnlyPeriodColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ALL_GL_ITEMS_BSRow
        Inherits Global.System.Data.DataRow
        
        Private tableALL_GL_ITEMS_BS As ALL_GL_ITEMS_BSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableALL_GL_ITEMS_BS = CType(Me.Table,ALL_GL_ITEMS_BSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableALL_GL_ITEMS_BS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract_Account' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContractType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.ContractTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractType' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.ContractTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.BusinessTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessType' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KEV_Collateral() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.KEV_CollateralColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KEV_Collateral' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.KEV_CollateralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valid' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnaCredit_Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.AnaCredit_ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnaCredit_Valid' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.AnaCredit_ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IsAnaCredit() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.IsAnaCreditColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsAnaCredit' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.IsAnaCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HGB_Bilanz_Match() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.HGB_Bilanz_MatchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HGB_Bilanz_Match' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.HGB_Bilanz_MatchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HGB_GV_Match() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_BS.HGB_GV_MatchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HGB_GV_Match' in table 'ALL_GL_ITEMS_BS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_BS.HGB_GV_MatchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContract_AccountNull()
            Me(Me.tableALL_GL_ITEMS_BS.Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableALL_GL_ITEMS_BS.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableALL_GL_ITEMS_BS.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.ContractTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractTypeNull()
            Me(Me.tableALL_GL_ITEMS_BS.ContractTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableALL_GL_ITEMS_BS.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableALL_GL_ITEMS_BS.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableALL_GL_ITEMS_BS.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBusinessTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.BusinessTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBusinessTypeNull()
            Me(Me.tableALL_GL_ITEMS_BS.BusinessTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKEV_CollateralNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.KEV_CollateralColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKEV_CollateralNull()
            Me(Me.tableALL_GL_ITEMS_BS.KEV_CollateralColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValidNull()
            Me(Me.tableALL_GL_ITEMS_BS.ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnaCredit_ValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.AnaCredit_ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnaCredit_ValidNull()
            Me(Me.tableALL_GL_ITEMS_BS.AnaCredit_ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIsAnaCreditNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.IsAnaCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIsAnaCreditNull()
            Me(Me.tableALL_GL_ITEMS_BS.IsAnaCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCCYNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCCYNull()
            Me(Me.tableALL_GL_ITEMS_BS.CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHGB_Bilanz_MatchNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.HGB_Bilanz_MatchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHGB_Bilanz_MatchNull()
            Me(Me.tableALL_GL_ITEMS_BS.HGB_Bilanz_MatchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHGB_GV_MatchNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_BS.HGB_GV_MatchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHGB_GV_MatchNull()
            Me(Me.tableALL_GL_ITEMS_BS.HGB_GV_MatchColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ALL_GL_ITEMS_PLRow
        Inherits Global.System.Data.DataRow
        
        Private tableALL_GL_ITEMS_PL As ALL_GL_ITEMS_PLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableALL_GL_ITEMS_PL = CType(Me.Table,ALL_GL_ITEMS_PLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableALL_GL_ITEMS_PL.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contract_Account() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.Contract_AccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contract_Account' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.Contract_AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientNr() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.ClientNrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientNr' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.ClientNrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.ClientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientName' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContractType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.ContractTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContractType' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.ContractTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.BusinessTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessType' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KEV_Collateral() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.KEV_CollateralColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KEV_Collateral' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.KEV_CollateralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valid' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnaCredit_Valid() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.AnaCredit_ValidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnaCredit_Valid' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.AnaCredit_ValidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IsAnaCredit() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.IsAnaCreditColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsAnaCredit' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.IsAnaCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.CCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCY' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.CCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HGB_Bilanz_Match() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.HGB_Bilanz_MatchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HGB_Bilanz_Match' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.HGB_Bilanz_MatchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HGB_GV_Match() As String
            Get
                Try 
                    Return CType(Me(Me.tableALL_GL_ITEMS_PL.HGB_GV_MatchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HGB_GV_Match' in table 'ALL_GL_ITEMS_PL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableALL_GL_ITEMS_PL.HGB_GV_MatchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContract_AccountNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.Contract_AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContract_AccountNull()
            Me(Me.tableALL_GL_ITEMS_PL.Contract_AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNrNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.ClientNrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNrNull()
            Me(Me.tableALL_GL_ITEMS_PL.ClientNrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.ClientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClientNameNull()
            Me(Me.tableALL_GL_ITEMS_PL.ClientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.ContractTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractTypeNull()
            Me(Me.tableALL_GL_ITEMS_PL.ContractTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProductTypeNull()
            Me(Me.tableALL_GL_ITEMS_PL.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableALL_GL_ITEMS_PL.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tableALL_GL_ITEMS_PL.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBusinessTypeNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.BusinessTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBusinessTypeNull()
            Me(Me.tableALL_GL_ITEMS_PL.BusinessTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKEV_CollateralNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.KEV_CollateralColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKEV_CollateralNull()
            Me(Me.tableALL_GL_ITEMS_PL.KEV_CollateralColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValidNull()
            Me(Me.tableALL_GL_ITEMS_PL.ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnaCredit_ValidNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.AnaCredit_ValidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnaCredit_ValidNull()
            Me(Me.tableALL_GL_ITEMS_PL.AnaCredit_ValidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIsAnaCreditNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.IsAnaCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIsAnaCreditNull()
            Me(Me.tableALL_GL_ITEMS_PL.IsAnaCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCCYNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.CCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCCYNull()
            Me(Me.tableALL_GL_ITEMS_PL.CCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHGB_Bilanz_MatchNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.HGB_Bilanz_MatchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHGB_Bilanz_MatchNull()
            Me(Me.tableALL_GL_ITEMS_PL.HGB_Bilanz_MatchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHGB_GV_MatchNull() As Boolean
            Return Me.IsNull(Me.tableALL_GL_ITEMS_PL.HGB_GV_MatchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHGB_GV_MatchNull()
            Me(Me.tableALL_GL_ITEMS_PL.HGB_GV_MatchColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ALL_CONTRACTS_ACCOUNTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ALL_CONTRACTS_ACCOUNTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ALL_CONTRACTS_ACCOUNTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ALL_CONTRACTS_ACCOUNTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ALL_GL_ITEMS_BSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ALL_GL_ITEMS_BSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ALL_GL_ITEMS_BSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ALL_GL_ITEMS_BSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ALL_GL_ITEMS_PLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ALL_GL_ITEMS_PLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ALL_GL_ITEMS_PLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ALL_GL_ITEMS_PLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AllContractsAccountsDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ALL_CONTRACTS_ACCOUNTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ALL_CONTRACTS_ACCOUNTS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Contract_Account", "Contract_Account")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("ContractType", "ContractType")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            tableMapping.ColumnMappings.Add("KEV_Collateral", "KEV_Collateral")
            tableMapping.ColumnMappings.Add("Valid", "Valid")
            tableMapping.ColumnMappings.Add("AnaCredit_Valid", "AnaCredit_Valid")
            tableMapping.ColumnMappings.Add("IsAnaCredit", "IsAnaCredit")
            tableMapping.ColumnMappings.Add("CCY", "CCY")
            tableMapping.ColumnMappings.Add("GSTIFF_Reference", "GSTIFF_Reference")
            tableMapping.ColumnMappings.Add("CCB_Group", "CCB_Group")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("TypeOfInstrument", "TypeOfInstrument")
            tableMapping.ColumnMappings.Add("TypeOfInstrumentDescription", "TypeOfInstrumentDescription")
            tableMapping.ColumnMappings.Add("AmortisationType", "AmortisationType")
            tableMapping.ColumnMappings.Add("AmortisationTypeDescription", "AmortisationTypeDescription")
            tableMapping.ColumnMappings.Add("FiduciaryInstrument", "FiduciaryInstrument")
            tableMapping.ColumnMappings.Add("FiduciaryInstrumentDescription", "FiduciaryInstrumentDescription")
            tableMapping.ColumnMappings.Add("InterestRate", "InterestRate")
            tableMapping.ColumnMappings.Add("Spread", "Spread")
            tableMapping.ColumnMappings.Add("InterestRateType", "InterestRateType")
            tableMapping.ColumnMappings.Add("InterestRateTypeDescription", "InterestRateTypeDescription")
            tableMapping.ColumnMappings.Add("InterestRateCap", "InterestRateCap")
            tableMapping.ColumnMappings.Add("InterestRateFloor", "InterestRateFloor")
            tableMapping.ColumnMappings.Add("InterestRateResetFrequency", "InterestRateResetFrequency")
            tableMapping.ColumnMappings.Add("InterestRateResetFrequencyDescription", "InterestRateResetFrequencyDescription")
            tableMapping.ColumnMappings.Add("CommitmentAmountInceptionOrig", "CommitmentAmountInceptionOrig")
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            tableMapping.ColumnMappings.Add("CommitmentAmountInceptionEUR", "CommitmentAmountInceptionEUR")
            tableMapping.ColumnMappings.Add("PaymentFrequency", "PaymentFrequency")
            tableMapping.ColumnMappings.Add("PaymentFrequencyDescription", "PaymentFrequencyDescription")
            tableMapping.ColumnMappings.Add("ProjectFinanceLoan", "ProjectFinanceLoan")
            tableMapping.ColumnMappings.Add("ProjectFinanceLoanDescription", "ProjectFinanceLoanDescription")
            tableMapping.ColumnMappings.Add("Purpose", "Purpose")
            tableMapping.ColumnMappings.Add("PurposeDescription", "PurposeDescription")
            tableMapping.ColumnMappings.Add("Recourse", "Recourse")
            tableMapping.ColumnMappings.Add("RecourseDescription", "RecourseDescription")
            tableMapping.ColumnMappings.Add("ReferenceRate", "ReferenceRate")
            tableMapping.ColumnMappings.Add("ReferenceRateDescription", "ReferenceRateDescription")
            tableMapping.ColumnMappings.Add("SettlementDate", "SettlementDate")
            tableMapping.ColumnMappings.Add("SyndicatedContractIdentifier", "SyndicatedContractIdentifier")
            tableMapping.ColumnMappings.Add("RepaymentRights", "RepaymentRights")
            tableMapping.ColumnMappings.Add("RepaymentRightsDescription", "RepaymentRightsDescription")
            tableMapping.ColumnMappings.Add("InterestRateAverage", "InterestRateAverage")
            tableMapping.ColumnMappings.Add("NextInterestRateDateReset", "NextInterestRateDateReset")
            tableMapping.ColumnMappings.Add("DefaultStatusInstrument", "DefaultStatusInstrument")
            tableMapping.ColumnMappings.Add("DefaultStatusInstrumentDescription", "DefaultStatusInstrumentDescription")
            tableMapping.ColumnMappings.Add("DateDefaultStatusInstrument", "DateDefaultStatusInstrument")
            tableMapping.ColumnMappings.Add("AmountPastDue", "AmountPastDue")
            tableMapping.ColumnMappings.Add("DatePastDue", "DatePastDue")
            tableMapping.ColumnMappings.Add("TypeOfSecurisation", "TypeOfSecurisation")
            tableMapping.ColumnMappings.Add("TypeOfSecurisationDescription", "TypeOfSecurisationDescription")
            tableMapping.ColumnMappings.Add("OutstandingNominalAmount", "OutstandingNominalAmount")
            tableMapping.ColumnMappings.Add("AccountingClassifInstruments", "AccountingClassifInstruments")
            tableMapping.ColumnMappings.Add("AccountingClassifInstrumentsDescription", "AccountingClassifInstrumentsDescription")
            tableMapping.ColumnMappings.Add("PerformingStatusInstrument", "PerformingStatusInstrument")
            tableMapping.ColumnMappings.Add("PerformingStatusInstrumentDescription", "PerformingStatusInstrumentDescription")
            tableMapping.ColumnMappings.Add("DatePerformingStatus", "DatePerformingStatus")
            tableMapping.ColumnMappings.Add("StatusForbearance", "StatusForbearance")
            tableMapping.ColumnMappings.Add("DateStatusForbearance", "DateStatusForbearance")
            tableMapping.ColumnMappings.Add("ComulativeRecoveryAmount", "ComulativeRecoveryAmount")
            tableMapping.ColumnMappings.Add("StatusForbearance_Description", "StatusForbearance_Description")
            tableMapping.ColumnMappings.Add("Contract_AccountM", "Contract_AccountM")
            tableMapping.ColumnMappings.Add("ClientNrM", "ClientNrM")
            tableMapping.ColumnMappings.Add("ContractTypeDescription", "ContractTypeDescription")
            tableMapping.ColumnMappings.Add("ProductTypeDescription", "ProductTypeDescription")
            tableMapping.ColumnMappings.Add("CounterpartyRole", "CounterpartyRole")
            tableMapping.ColumnMappings.Add("CounterpartyRoleDescription", "CounterpartyRoleDescription")
            tableMapping.ColumnMappings.Add("JointLiabilityAmount", "JointLiabilityAmount")
            tableMapping.ColumnMappings.Add("EndDateOfInterestPaymentOnlyPeriod", "EndDateOfInterestPaymentOnlyPeriod")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ALL_CONTRACTS_ACCOUNTS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ALL_CONTRACTS_ACCOUNTS] ([Contract_Account], [ClientNr], [ClientName"& _ 
                "], [ContractType], [ProductType], [StartDate], [MaturityDate], [BusinessType], ["& _ 
                "KEV_Collateral], [Valid], [AnaCredit_Valid], [IsAnaCredit], [CCY], [GSTIFF_Refer"& _ 
                "ence], [CCB_Group], [InputDate], [TypeOfInstrument], [TypeOfInstrumentDescriptio"& _ 
                "n], [AmortisationType], [AmortisationTypeDescription], [FiduciaryInstrument], [F"& _ 
                "iduciaryInstrumentDescription], [InterestRate], [Spread], [InterestRateType], [I"& _ 
                "nterestRateTypeDescription], [InterestRateCap], [InterestRateFloor], [InterestRa"& _ 
                "teResetFrequency], [InterestRateResetFrequencyDescription], [CommitmentAmountInc"& _ 
                "eptionOrig], [ExchangeRate], [CommitmentAmountInceptionEUR], [PaymentFrequency],"& _ 
                " [PaymentFrequencyDescription], [ProjectFinanceLoan], [ProjectFinanceLoanDescrip"& _ 
                "tion], [Purpose], [PurposeDescription], [Recourse], [RecourseDescription], [Refe"& _ 
                "renceRate], [ReferenceRateDescription], [SettlementDate], [SyndicatedContractIde"& _ 
                "ntifier], [RepaymentRights], [RepaymentRightsDescription], [InterestRateAverage]"& _ 
                ", [NextInterestRateDateReset], [DefaultStatusInstrument], [DefaultStatusInstrume"& _ 
                "ntDescription], [DateDefaultStatusInstrument], [AmountPastDue], [DatePastDue], ["& _ 
                "TypeOfSecurisation], [TypeOfSecurisationDescription], [OutstandingNominalAmount]"& _ 
                ", [AccountingClassifInstruments], [AccountingClassifInstrumentsDescription], [Pe"& _ 
                "rformingStatusInstrument], [PerformingStatusInstrumentDescription], [DatePerform"& _ 
                "ingStatus], [StatusForbearance], [DateStatusForbearance], [ComulativeRecoveryAmo"& _ 
                "unt], [StatusForbearance_Description], [Contract_AccountM], [ClientNrM], [Contra"& _ 
                "ctTypeDescription], [ProductTypeDescription], [CounterpartyRole], [CounterpartyR"& _ 
                "oleDescription], [JointLiabilityAmount], [EndDateOfInterestPaymentOnlyPeriod]) V"& _ 
                "ALUES (@Contract_Account, @ClientNr, @ClientName, @ContractType, @ProductType, @"& _ 
                "StartDate, @MaturityDate, @BusinessType, @KEV_Collateral, @Valid, @AnaCredit_Val"& _ 
                "id, @IsAnaCredit, @CCY, @GSTIFF_Reference, @CCB_Group, @InputDate, @TypeOfInstru"& _ 
                "ment, @TypeOfInstrumentDescription, @AmortisationType, @AmortisationTypeDescript"& _ 
                "ion, @FiduciaryInstrument, @FiduciaryInstrumentDescription, @InterestRate, @Spre"& _ 
                "ad, @InterestRateType, @InterestRateTypeDescription, @InterestRateCap, @Interest"& _ 
                "RateFloor, @InterestRateResetFrequency, @InterestRateResetFrequencyDescription, "& _ 
                "@CommitmentAmountInceptionOrig, @ExchangeRate, @CommitmentAmountInceptionEUR, @P"& _ 
                "aymentFrequency, @PaymentFrequencyDescription, @ProjectFinanceLoan, @ProjectFina"& _ 
                "nceLoanDescription, @Purpose, @PurposeDescription, @Recourse, @RecourseDescripti"& _ 
                "on, @ReferenceRate, @ReferenceRateDescription, @SettlementDate, @SyndicatedContr"& _ 
                "actIdentifier, @RepaymentRights, @RepaymentRightsDescription, @InterestRateAvera"& _ 
                "ge, @NextInterestRateDateReset, @DefaultStatusInstrument, @DefaultStatusInstrume"& _ 
                "ntDescription, @DateDefaultStatusInstrument, @AmountPastDue, @DatePastDue, @Type"& _ 
                "OfSecurisation, @TypeOfSecurisationDescription, @OutstandingNominalAmount, @Acco"& _ 
                "untingClassifInstruments, @AccountingClassifInstrumentsDescription, @PerformingS"& _ 
                "tatusInstrument, @PerformingStatusInstrumentDescription, @DatePerformingStatus, "& _ 
                "@StatusForbearance, @DateStatusForbearance, @ComulativeRecoveryAmount, @StatusFo"& _ 
                "rbearance_Description, @Contract_AccountM, @ClientNrM, @ContractTypeDescription,"& _ 
                " @ProductTypeDescription, @CounterpartyRole, @CounterpartyRoleDescription, @Join"& _ 
                "tLiabilityAmount, @EndDateOfInterestPaymentOnlyPeriod)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSTIFF_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSTIFF_Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCB_Group", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCB_Group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmortisationType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmortisationType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmortisationTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmortisationTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FiduciaryInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FiduciaryInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FiduciaryInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FiduciaryInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Spread", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spread", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateCap", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateCap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateFloor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateFloor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateResetFrequency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateResetFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateResetFrequencyDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateResetFrequencyDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CommitmentAmountInceptionOrig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CommitmentAmountInceptionOrig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CommitmentAmountInceptionEUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CommitmentAmountInceptionEUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentFrequency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentFrequencyDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentFrequencyDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectFinanceLoan", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectFinanceLoan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectFinanceLoanDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectFinanceLoanDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purpose", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purpose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurposeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurposeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Recourse", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Recourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecourseDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecourseDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceRate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceRateDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceRateDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SettlementDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SettlementDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SyndicatedContractIdentifier", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SyndicatedContractIdentifier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepaymentRights", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepaymentRights", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepaymentRightsDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepaymentRightsDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateAverage", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateAverage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextInterestRateDateReset", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextInterestRateDateReset", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DefaultStatusInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DefaultStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DefaultStatusInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DefaultStatusInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDefaultStatusInstrument", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDefaultStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountPastDue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountPastDue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePastDue", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePastDue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfSecurisation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfSecurisation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfSecurisationDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfSecurisationDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OutstandingNominalAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OutstandingNominalAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingClassifInstruments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingClassifInstruments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingClassifInstrumentsDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingClassifInstrumentsDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PerformingStatusInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PerformingStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PerformingStatusInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PerformingStatusInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePerformingStatus", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePerformingStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusForbearance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusForbearance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateStatusForbearance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateStatusForbearance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComulativeRecoveryAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComulativeRecoveryAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusForbearance_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusForbearance_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_AccountM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_AccountM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNrM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNrM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CounterpartyRole", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CounterpartyRole", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CounterpartyRoleDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CounterpartyRoleDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JointLiabilityAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JointLiabilityAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDateOfInterestPaymentOnlyPeriod", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDateOfInterestPaymentOnlyPeriod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ALL_CONTRACTS_ACCOUNTS] SET [Contract_Account] = @Contract_Account, [Clie"& _ 
                "ntNr] = @ClientNr, [ClientName] = @ClientName, [ContractType] = @ContractType, ["& _ 
                "ProductType] = @ProductType, [StartDate] = @StartDate, [MaturityDate] = @Maturit"& _ 
                "yDate, [BusinessType] = @BusinessType, [KEV_Collateral] = @KEV_Collateral, [Vali"& _ 
                "d] = @Valid, [AnaCredit_Valid] = @AnaCredit_Valid, [IsAnaCredit] = @IsAnaCredit,"& _ 
                " [CCY] = @CCY, [GSTIFF_Reference] = @GSTIFF_Reference, [CCB_Group] = @CCB_Group,"& _ 
                " [InputDate] = @InputDate, [TypeOfInstrument] = @TypeOfInstrument, [TypeOfInstru"& _ 
                "mentDescription] = @TypeOfInstrumentDescription, [AmortisationType] = @Amortisat"& _ 
                "ionType, [AmortisationTypeDescription] = @AmortisationTypeDescription, [Fiduciar"& _ 
                "yInstrument] = @FiduciaryInstrument, [FiduciaryInstrumentDescription] = @Fiducia"& _ 
                "ryInstrumentDescription, [InterestRate] = @InterestRate, [Spread] = @Spread, [In"& _ 
                "terestRateType] = @InterestRateType, [InterestRateTypeDescription] = @InterestRa"& _ 
                "teTypeDescription, [InterestRateCap] = @InterestRateCap, [InterestRateFloor] = @"& _ 
                "InterestRateFloor, [InterestRateResetFrequency] = @InterestRateResetFrequency, ["& _ 
                "InterestRateResetFrequencyDescription] = @InterestRateResetFrequencyDescription,"& _ 
                " [CommitmentAmountInceptionOrig] = @CommitmentAmountInceptionOrig, [ExchangeRate"& _ 
                "] = @ExchangeRate, [CommitmentAmountInceptionEUR] = @CommitmentAmountInceptionEU"& _ 
                "R, [PaymentFrequency] = @PaymentFrequency, [PaymentFrequencyDescription] = @Paym"& _ 
                "entFrequencyDescription, [ProjectFinanceLoan] = @ProjectFinanceLoan, [ProjectFin"& _ 
                "anceLoanDescription] = @ProjectFinanceLoanDescription, [Purpose] = @Purpose, [Pu"& _ 
                "rposeDescription] = @PurposeDescription, [Recourse] = @Recourse, [RecourseDescri"& _ 
                "ption] = @RecourseDescription, [ReferenceRate] = @ReferenceRate, [ReferenceRateD"& _ 
                "escription] = @ReferenceRateDescription, [SettlementDate] = @SettlementDate, [Sy"& _ 
                "ndicatedContractIdentifier] = @SyndicatedContractIdentifier, [RepaymentRights] ="& _ 
                " @RepaymentRights, [RepaymentRightsDescription] = @RepaymentRightsDescription, ["& _ 
                "InterestRateAverage] = @InterestRateAverage, [NextInterestRateDateReset] = @Next"& _ 
                "InterestRateDateReset, [DefaultStatusInstrument] = @DefaultStatusInstrument, [De"& _ 
                "faultStatusInstrumentDescription] = @DefaultStatusInstrumentDescription, [DateDe"& _ 
                "faultStatusInstrument] = @DateDefaultStatusInstrument, [AmountPastDue] = @Amount"& _ 
                "PastDue, [DatePastDue] = @DatePastDue, [TypeOfSecurisation] = @TypeOfSecurisatio"& _ 
                "n, [TypeOfSecurisationDescription] = @TypeOfSecurisationDescription, [Outstandin"& _ 
                "gNominalAmount] = @OutstandingNominalAmount, [AccountingClassifInstruments] = @A"& _ 
                "ccountingClassifInstruments, [AccountingClassifInstrumentsDescription] = @Accoun"& _ 
                "tingClassifInstrumentsDescription, [PerformingStatusInstrument] = @PerformingSta"& _ 
                "tusInstrument, [PerformingStatusInstrumentDescription] = @PerformingStatusInstru"& _ 
                "mentDescription, [DatePerformingStatus] = @DatePerformingStatus, [StatusForbeara"& _ 
                "nce] = @StatusForbearance, [DateStatusForbearance] = @DateStatusForbearance, [Co"& _ 
                "mulativeRecoveryAmount] = @ComulativeRecoveryAmount, [StatusForbearance_Descript"& _ 
                "ion] = @StatusForbearance_Description, [Contract_AccountM] = @Contract_AccountM,"& _ 
                " [ClientNrM] = @ClientNrM, [ContractTypeDescription] = @ContractTypeDescription,"& _ 
                " [ProductTypeDescription] = @ProductTypeDescription, [CounterpartyRole] = @Count"& _ 
                "erpartyRole, [CounterpartyRoleDescription] = @CounterpartyRoleDescription, [Join"& _ 
                "tLiabilityAmount] = @JointLiabilityAmount, [EndDateOfInterestPaymentOnlyPeriod] "& _ 
                "= @EndDateOfInterestPaymentOnlyPeriod WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSTIFF_Reference", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSTIFF_Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCB_Group", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCB_Group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmortisationType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmortisationType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmortisationTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmortisationTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FiduciaryInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FiduciaryInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FiduciaryInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FiduciaryInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Spread", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spread", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateCap", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateCap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateFloor", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateFloor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateResetFrequency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateResetFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateResetFrequencyDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateResetFrequencyDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CommitmentAmountInceptionOrig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CommitmentAmountInceptionOrig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CommitmentAmountInceptionEUR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CommitmentAmountInceptionEUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentFrequency", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentFrequencyDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentFrequencyDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectFinanceLoan", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectFinanceLoan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectFinanceLoanDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectFinanceLoanDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Purpose", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Purpose", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurposeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurposeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Recourse", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Recourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecourseDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecourseDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceRate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceRateDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceRateDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SettlementDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SettlementDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SyndicatedContractIdentifier", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SyndicatedContractIdentifier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepaymentRights", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepaymentRights", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepaymentRightsDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepaymentRightsDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InterestRateAverage", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InterestRateAverage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextInterestRateDateReset", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextInterestRateDateReset", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DefaultStatusInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DefaultStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DefaultStatusInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DefaultStatusInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDefaultStatusInstrument", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDefaultStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AmountPastDue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AmountPastDue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePastDue", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePastDue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfSecurisation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfSecurisation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeOfSecurisationDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeOfSecurisationDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OutstandingNominalAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OutstandingNominalAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingClassifInstruments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingClassifInstruments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AccountingClassifInstrumentsDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AccountingClassifInstrumentsDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PerformingStatusInstrument", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PerformingStatusInstrument", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PerformingStatusInstrumentDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PerformingStatusInstrumentDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DatePerformingStatus", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DatePerformingStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusForbearance", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusForbearance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateStatusForbearance", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateStatusForbearance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComulativeRecoveryAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComulativeRecoveryAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusForbearance_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusForbearance_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_AccountM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_AccountM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNrM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNrM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductTypeDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CounterpartyRole", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CounterpartyRole", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CounterpartyRoleDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CounterpartyRoleDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JointLiabilityAmount", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JointLiabilityAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDateOfInterestPaymentOnlyPeriod", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDateOfInterestPaymentOnlyPeriod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Contract_Account, ClientNr, ClientName, ContractType, ProductTy"& _ 
                "pe, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Vali"& _ 
                "d, IsAnaCredit, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CCY, GSTIFF_Reference, CCB_Group, Inp"& _ 
                "utDate, TypeOfInstrument, TypeOfInstrumentDescription, AmortisationType, Amortis"& _ 
                "ationTypeDescription, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         FiduciaryInstrument, FiduciaryI"& _ 
                "nstrumentDescription, InterestRate, Spread, InterestRateType, InterestRateTypeDe"& _ 
                "scription, InterestRateCap, InterestRateFloor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Intere"& _ 
                "stRateResetFrequency, InterestRateResetFrequencyDescription, CommitmentAmountInc"& _ 
                "eptionOrig, ExchangeRate, CommitmentAmountInceptionEUR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   PaymentFrequency, PaymentFrequencyDescription, ProjectFinanceLoan, ProjectFin"& _ 
                "anceLoanDescription, Purpose, PurposeDescription, Recourse, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "       RecourseDescription, ReferenceRate, ReferenceRateDescription, SettlementD"& _ 
                "ate, SyndicatedContractIdentifier, RepaymentRights, RepaymentRightsDescription, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         InterestRateAverage, NextInterestRateDateReset, Defau"& _ 
                "ltStatusInstrument, DefaultStatusInstrumentDescription, DateDefaultStatusInstrum"& _ 
                "ent, AmountPastDue, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DatePastDue, TypeOfSecurisation, "& _ 
                "TypeOfSecurisationDescription, OutstandingNominalAmount, AccountingClassifInstru"& _ 
                "ments, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AccountingClassifInstrumentsDescription, Perfo"& _ 
                "rmingStatusInstrument, PerformingStatusInstrumentDescription, DatePerformingStat"& _ 
                "us, StatusForbearance, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DateStatusForbearance, Comulat"& _ 
                "iveRecoveryAmount, StatusForbearance_Description, Contract_AccountM, ClientNrM, "& _ 
                "ContractTypeDescription, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ProductTypeDescription, Coun"& _ 
                "terpartyRole, CounterpartyRoleDescription, JointLiabilityAmount, EndDateOfIntere"& _ 
                "stPaymentOnlyPeriod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ALL_CONTRACTS_ACCOUNTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Clien"& _ 
                "tNr <> '0')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY StartDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AccountingClassifInstruments, AccountingClassifInstrumentsDescription, Amo"& _ 
                "rtisationType, AmortisationTypeDescription, AmountPastDue, AnaCredit_Valid, Busi"& _ 
                "nessType, CCB_Group, CCY, ClientName, ClientNr, ClientNrM, CommitmentAmountIncep"& _ 
                "tionEUR, CommitmentAmountInceptionOrig, ComulativeRecoveryAmount, ContractType, "& _ 
                "ContractTypeDescription, Contract_Account, Contract_AccountM, CounterpartyRole, "& _ 
                "CounterpartyRoleDescription, DateDefaultStatusInstrument, DatePastDue, DatePerfo"& _ 
                "rmingStatus, DateStatusForbearance, DefaultStatusInstrument, DefaultStatusInstru"& _ 
                "mentDescription, EndDateOfInterestPaymentOnlyPeriod, ExchangeRate, FiduciaryInst"& _ 
                "rument, FiduciaryInstrumentDescription, GSTIFF_Reference, ID, InputDate, Interes"& _ 
                "tRate, InterestRateAverage, InterestRateCap, InterestRateFloor, InterestRateRese"& _ 
                "tFrequency, InterestRateResetFrequencyDescription, InterestRateType, InterestRat"& _ 
                "eTypeDescription, IsAnaCredit, JointLiabilityAmount, KEV_Collateral, MaturityDat"& _ 
                "e, NextInterestRateDateReset, OutstandingNominalAmount, PaymentFrequency, Paymen"& _ 
                "tFrequencyDescription, PerformingStatusInstrument, PerformingStatusInstrumentDes"& _ 
                "cription, ProductType, ProductTypeDescription, ProjectFinanceLoan, ProjectFinanc"& _ 
                "eLoanDescription, Purpose, PurposeDescription, Recourse, RecourseDescription, Re"& _ 
                "ferenceRate, ReferenceRateDescription, RepaymentRights, RepaymentRightsDescripti"& _ 
                "on, SettlementDate, Spread, StartDate, StatusForbearance, StatusForbearance_Desc"& _ 
                "ription, SyndicatedContractIdentifier, TypeOfInstrument, TypeOfInstrumentDescrip"& _ 
                "tion, TypeOfSecurisation, TypeOfSecurisationDescription, Valid FROM ALL_CONTRACT"& _ 
                "S_ACCOUNTS WHERE (Contract_Account = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable = New AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByContractNr(ByVal dataTable As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByContractNr(ByVal Param1 As String) As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable = New AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AllContractsAccountsDataSet.ALL_CONTRACTS_ACCOUNTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AllContractsAccountsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ALL_CONTRACTS_ACCOUNTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Contract_Account As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal ContractType As String,  _
                    ByVal ProductType As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal BusinessType As String,  _
                    ByVal KEV_Collateral As String,  _
                    ByVal Valid As String,  _
                    ByVal AnaCredit_Valid As String,  _
                    ByVal IsAnaCredit As String,  _
                    ByVal CCY As String,  _
                    ByVal GSTIFF_Reference As String,  _
                    ByVal CCB_Group As String,  _
                    ByVal InputDate As Global.System.Nullable(Of Date),  _
                    ByVal TypeOfInstrument As String,  _
                    ByVal TypeOfInstrumentDescription As String,  _
                    ByVal AmortisationType As String,  _
                    ByVal AmortisationTypeDescription As String,  _
                    ByVal FiduciaryInstrument As String,  _
                    ByVal FiduciaryInstrumentDescription As String,  _
                    ByVal InterestRate As Global.System.Nullable(Of Double),  _
                    ByVal Spread As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateType As String,  _
                    ByVal InterestRateTypeDescription As String,  _
                    ByVal InterestRateCap As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateFloor As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateResetFrequency As String,  _
                    ByVal InterestRateResetFrequencyDescription As String,  _
                    ByVal CommitmentAmountInceptionOrig As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal CommitmentAmountInceptionEUR As Global.System.Nullable(Of Double),  _
                    ByVal PaymentFrequency As String,  _
                    ByVal PaymentFrequencyDescription As String,  _
                    ByVal ProjectFinanceLoan As String,  _
                    ByVal ProjectFinanceLoanDescription As String,  _
                    ByVal Purpose As String,  _
                    ByVal PurposeDescription As String,  _
                    ByVal Recourse As String,  _
                    ByVal RecourseDescription As String,  _
                    ByVal ReferenceRate As String,  _
                    ByVal ReferenceRateDescription As String,  _
                    ByVal SettlementDate As Global.System.Nullable(Of Date),  _
                    ByVal SyndicatedContractIdentifier As String,  _
                    ByVal RepaymentRights As String,  _
                    ByVal RepaymentRightsDescription As String,  _
                    ByVal InterestRateAverage As Global.System.Nullable(Of Double),  _
                    ByVal NextInterestRateDateReset As Global.System.Nullable(Of Date),  _
                    ByVal DefaultStatusInstrument As String,  _
                    ByVal DefaultStatusInstrumentDescription As String,  _
                    ByVal DateDefaultStatusInstrument As Global.System.Nullable(Of Date),  _
                    ByVal AmountPastDue As Global.System.Nullable(Of Double),  _
                    ByVal DatePastDue As Global.System.Nullable(Of Date),  _
                    ByVal TypeOfSecurisation As String,  _
                    ByVal TypeOfSecurisationDescription As String,  _
                    ByVal OutstandingNominalAmount As Global.System.Nullable(Of Double),  _
                    ByVal AccountingClassifInstruments As String,  _
                    ByVal AccountingClassifInstrumentsDescription As String,  _
                    ByVal PerformingStatusInstrument As String,  _
                    ByVal PerformingStatusInstrumentDescription As String,  _
                    ByVal DatePerformingStatus As Global.System.Nullable(Of Date),  _
                    ByVal StatusForbearance As String,  _
                    ByVal DateStatusForbearance As Global.System.Nullable(Of Date),  _
                    ByVal ComulativeRecoveryAmount As Global.System.Nullable(Of Double),  _
                    ByVal StatusForbearance_Description As String,  _
                    ByVal Contract_AccountM As String,  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractTypeDescription As String,  _
                    ByVal ProductTypeDescription As String,  _
                    ByVal CounterpartyRole As String,  _
                    ByVal CounterpartyRoleDescription As String,  _
                    ByVal JointLiabilityAmount As Global.System.Nullable(Of Double),  _
                    ByVal EndDateOfInterestPaymentOnlyPeriod As Global.System.Nullable(Of Date)) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (GSTIFF_Reference Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(GSTIFF_Reference,String)
            End If
            If (CCB_Group Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CCB_Group,String)
            End If
            If (InputDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(InputDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TypeOfInstrument Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TypeOfInstrument,String)
            End If
            If (TypeOfInstrumentDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TypeOfInstrumentDescription,String)
            End If
            If (AmortisationType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AmortisationType,String)
            End If
            If (AmortisationTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(AmortisationTypeDescription,String)
            End If
            If (FiduciaryInstrument Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(FiduciaryInstrument,String)
            End If
            If (FiduciaryInstrumentDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(FiduciaryInstrumentDescription,String)
            End If
            If (InterestRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(InterestRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Spread.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Spread.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (InterestRateType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(InterestRateType,String)
            End If
            If (InterestRateTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(InterestRateTypeDescription,String)
            End If
            If (InterestRateCap.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(InterestRateCap.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (InterestRateFloor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(InterestRateFloor.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (InterestRateResetFrequency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(InterestRateResetFrequency,String)
            End If
            If (InterestRateResetFrequencyDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(InterestRateResetFrequencyDescription,String)
            End If
            If (CommitmentAmountInceptionOrig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(CommitmentAmountInceptionOrig.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (CommitmentAmountInceptionEUR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(CommitmentAmountInceptionEUR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PaymentFrequency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PaymentFrequency,String)
            End If
            If (PaymentFrequencyDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PaymentFrequencyDescription,String)
            End If
            If (ProjectFinanceLoan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ProjectFinanceLoan,String)
            End If
            If (ProjectFinanceLoanDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ProjectFinanceLoanDescription,String)
            End If
            If (Purpose Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Purpose,String)
            End If
            If (PurposeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(PurposeDescription,String)
            End If
            If (Recourse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Recourse,String)
            End If
            If (RecourseDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(RecourseDescription,String)
            End If
            If (ReferenceRate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ReferenceRate,String)
            End If
            If (ReferenceRateDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(ReferenceRateDescription,String)
            End If
            If (SettlementDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(SettlementDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (SyndicatedContractIdentifier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(SyndicatedContractIdentifier,String)
            End If
            If (RepaymentRights Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(RepaymentRights,String)
            End If
            If (RepaymentRightsDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(RepaymentRightsDescription,String)
            End If
            If (InterestRateAverage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(InterestRateAverage.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (NextInterestRateDateReset.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(NextInterestRateDateReset.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (DefaultStatusInstrument Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(DefaultStatusInstrument,String)
            End If
            If (DefaultStatusInstrumentDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(DefaultStatusInstrumentDescription,String)
            End If
            If (DateDefaultStatusInstrument.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(DateDefaultStatusInstrument.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (AmountPastDue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(AmountPastDue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (DatePastDue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(DatePastDue.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (TypeOfSecurisation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(TypeOfSecurisation,String)
            End If
            If (TypeOfSecurisationDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(TypeOfSecurisationDescription,String)
            End If
            If (OutstandingNominalAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(OutstandingNominalAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (AccountingClassifInstruments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(AccountingClassifInstruments,String)
            End If
            If (AccountingClassifInstrumentsDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(AccountingClassifInstrumentsDescription,String)
            End If
            If (PerformingStatusInstrument Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(PerformingStatusInstrument,String)
            End If
            If (PerformingStatusInstrumentDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(PerformingStatusInstrumentDescription,String)
            End If
            If (DatePerformingStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(DatePerformingStatus.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (StatusForbearance Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(StatusForbearance,String)
            End If
            If (DateStatusForbearance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(DateStatusForbearance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (ComulativeRecoveryAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(ComulativeRecoveryAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (StatusForbearance_Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(StatusForbearance_Description,String)
            End If
            If (Contract_AccountM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(Contract_AccountM,String)
            End If
            If (ClientNrM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(ClientNrM,String)
            End If
            If (ContractTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(ContractTypeDescription,String)
            End If
            If (ProductTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(ProductTypeDescription,String)
            End If
            If (CounterpartyRole Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(CounterpartyRole,String)
            End If
            If (CounterpartyRoleDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(CounterpartyRoleDescription,String)
            End If
            If (JointLiabilityAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(JointLiabilityAmount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (EndDateOfInterestPaymentOnlyPeriod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(EndDateOfInterestPaymentOnlyPeriod.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Contract_Account As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal ContractType As String,  _
                    ByVal ProductType As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal BusinessType As String,  _
                    ByVal KEV_Collateral As String,  _
                    ByVal Valid As String,  _
                    ByVal AnaCredit_Valid As String,  _
                    ByVal IsAnaCredit As String,  _
                    ByVal CCY As String,  _
                    ByVal GSTIFF_Reference As String,  _
                    ByVal CCB_Group As String,  _
                    ByVal InputDate As Global.System.Nullable(Of Date),  _
                    ByVal TypeOfInstrument As String,  _
                    ByVal TypeOfInstrumentDescription As String,  _
                    ByVal AmortisationType As String,  _
                    ByVal AmortisationTypeDescription As String,  _
                    ByVal FiduciaryInstrument As String,  _
                    ByVal FiduciaryInstrumentDescription As String,  _
                    ByVal InterestRate As Global.System.Nullable(Of Double),  _
                    ByVal Spread As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateType As String,  _
                    ByVal InterestRateTypeDescription As String,  _
                    ByVal InterestRateCap As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateFloor As Global.System.Nullable(Of Double),  _
                    ByVal InterestRateResetFrequency As String,  _
                    ByVal InterestRateResetFrequencyDescription As String,  _
                    ByVal CommitmentAmountInceptionOrig As Global.System.Nullable(Of Double),  _
                    ByVal ExchangeRate As Global.System.Nullable(Of Double),  _
                    ByVal CommitmentAmountInceptionEUR As Global.System.Nullable(Of Double),  _
                    ByVal PaymentFrequency As String,  _
                    ByVal PaymentFrequencyDescription As String,  _
                    ByVal ProjectFinanceLoan As String,  _
                    ByVal ProjectFinanceLoanDescription As String,  _
                    ByVal Purpose As String,  _
                    ByVal PurposeDescription As String,  _
                    ByVal Recourse As String,  _
                    ByVal RecourseDescription As String,  _
                    ByVal ReferenceRate As String,  _
                    ByVal ReferenceRateDescription As String,  _
                    ByVal SettlementDate As Global.System.Nullable(Of Date),  _
                    ByVal SyndicatedContractIdentifier As String,  _
                    ByVal RepaymentRights As String,  _
                    ByVal RepaymentRightsDescription As String,  _
                    ByVal InterestRateAverage As Global.System.Nullable(Of Double),  _
                    ByVal NextInterestRateDateReset As Global.System.Nullable(Of Date),  _
                    ByVal DefaultStatusInstrument As String,  _
                    ByVal DefaultStatusInstrumentDescription As String,  _
                    ByVal DateDefaultStatusInstrument As Global.System.Nullable(Of Date),  _
                    ByVal AmountPastDue As Global.System.Nullable(Of Double),  _
                    ByVal DatePastDue As Global.System.Nullable(Of Date),  _
                    ByVal TypeOfSecurisation As String,  _
                    ByVal TypeOfSecurisationDescription As String,  _
                    ByVal OutstandingNominalAmount As Global.System.Nullable(Of Double),  _
                    ByVal AccountingClassifInstruments As String,  _
                    ByVal AccountingClassifInstrumentsDescription As String,  _
                    ByVal PerformingStatusInstrument As String,  _
                    ByVal PerformingStatusInstrumentDescription As String,  _
                    ByVal DatePerformingStatus As Global.System.Nullable(Of Date),  _
                    ByVal StatusForbearance As String,  _
                    ByVal DateStatusForbearance As Global.System.Nullable(Of Date),  _
                    ByVal ComulativeRecoveryAmount As Global.System.Nullable(Of Double),  _
                    ByVal StatusForbearance_Description As String,  _
                    ByVal Contract_AccountM As String,  _
                    ByVal ClientNrM As String,  _
                    ByVal ContractTypeDescription As String,  _
                    ByVal ProductTypeDescription As String,  _
                    ByVal CounterpartyRole As String,  _
                    ByVal CounterpartyRoleDescription As String,  _
                    ByVal JointLiabilityAmount As Global.System.Nullable(Of Double),  _
                    ByVal EndDateOfInterestPaymentOnlyPeriod As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (GSTIFF_Reference Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(GSTIFF_Reference,String)
            End If
            If (CCB_Group Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CCB_Group,String)
            End If
            If (InputDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(InputDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TypeOfInstrument Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TypeOfInstrument,String)
            End If
            If (TypeOfInstrumentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TypeOfInstrumentDescription,String)
            End If
            If (AmortisationType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AmortisationType,String)
            End If
            If (AmortisationTypeDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(AmortisationTypeDescription,String)
            End If
            If (FiduciaryInstrument Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(FiduciaryInstrument,String)
            End If
            If (FiduciaryInstrumentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(FiduciaryInstrumentDescription,String)
            End If
            If (InterestRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(InterestRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Spread.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Spread.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (InterestRateType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(InterestRateType,String)
            End If
            If (InterestRateTypeDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(InterestRateTypeDescription,String)
            End If
            If (InterestRateCap.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(InterestRateCap.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (InterestRateFloor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(InterestRateFloor.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (InterestRateResetFrequency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(InterestRateResetFrequency,String)
            End If
            If (InterestRateResetFrequencyDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(InterestRateResetFrequencyDescription,String)
            End If
            If (CommitmentAmountInceptionOrig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(CommitmentAmountInceptionOrig.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ExchangeRate.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (CommitmentAmountInceptionEUR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(CommitmentAmountInceptionEUR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PaymentFrequency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(PaymentFrequency,String)
            End If
            If (PaymentFrequencyDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PaymentFrequencyDescription,String)
            End If
            If (ProjectFinanceLoan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ProjectFinanceLoan,String)
            End If
            If (ProjectFinanceLoanDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(ProjectFinanceLoanDescription,String)
            End If
            If (Purpose Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Purpose,String)
            End If
            If (PurposeDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(PurposeDescription,String)
            End If
            If (Recourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Recourse,String)
            End If
            If (RecourseDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(RecourseDescription,String)
            End If
            If (ReferenceRate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(ReferenceRate,String)
            End If
            If (ReferenceRateDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(ReferenceRateDescription,String)
            End If
            If (SettlementDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(SettlementDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (SyndicatedContractIdentifier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(SyndicatedContractIdentifier,String)
            End If
            If (RepaymentRights Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(RepaymentRights,String)
            End If
            If (RepaymentRightsDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(RepaymentRightsDescription,String)
            End If
            If (InterestRateAverage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(InterestRateAverage.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (NextInterestRateDateReset.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(NextInterestRateDateReset.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (DefaultStatusInstrument Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(DefaultStatusInstrument,String)
            End If
            If (DefaultStatusInstrumentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(DefaultStatusInstrumentDescription,String)
            End If
            If (DateDefaultStatusInstrument.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(DateDefaultStatusInstrument.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (AmountPastDue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(AmountPastDue.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (DatePastDue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(DatePastDue.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (TypeOfSecurisation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(TypeOfSecurisation,String)
            End If
            If (TypeOfSecurisationDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(TypeOfSecurisationDescription,String)
            End If
            If (OutstandingNominalAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(OutstandingNominalAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (AccountingClassifInstruments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(AccountingClassifInstruments,String)
            End If
            If (AccountingClassifInstrumentsDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(AccountingClassifInstrumentsDescription,String)
            End If
            If (PerformingStatusInstrument Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(PerformingStatusInstrument,String)
            End If
            If (PerformingStatusInstrumentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(PerformingStatusInstrumentDescription,String)
            End If
            If (DatePerformingStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(DatePerformingStatus.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (StatusForbearance Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(StatusForbearance,String)
            End If
            If (DateStatusForbearance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(DateStatusForbearance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (ComulativeRecoveryAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(ComulativeRecoveryAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (StatusForbearance_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(StatusForbearance_Description,String)
            End If
            If (Contract_AccountM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Contract_AccountM,String)
            End If
            If (ClientNrM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(ClientNrM,String)
            End If
            If (ContractTypeDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(ContractTypeDescription,String)
            End If
            If (ProductTypeDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(ProductTypeDescription,String)
            End If
            If (CounterpartyRole Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(CounterpartyRole,String)
            End If
            If (CounterpartyRoleDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(CounterpartyRoleDescription,String)
            End If
            If (JointLiabilityAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(JointLiabilityAmount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (EndDateOfInterestPaymentOnlyPeriod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(EndDateOfInterestPaymentOnlyPeriod.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ALL_GL_ITEMS_BS_TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ALL_GL_ITEMS_BS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Contract_Account", "Contract_Account")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("ContractType", "ContractType")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            tableMapping.ColumnMappings.Add("KEV_Collateral", "KEV_Collateral")
            tableMapping.ColumnMappings.Add("Valid", "Valid")
            tableMapping.ColumnMappings.Add("AnaCredit_Valid", "AnaCredit_Valid")
            tableMapping.ColumnMappings.Add("IsAnaCredit", "IsAnaCredit")
            tableMapping.ColumnMappings.Add("CCY", "CCY")
            tableMapping.ColumnMappings.Add("HGB_Bilanz_Match", "HGB_Bilanz_Match")
            tableMapping.ColumnMappings.Add("HGB_GV_Match", "HGB_GV_Match")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ALL_CONTRACTS_ACCOUNTS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ALL_CONTRACTS_ACCOUNTS] ([Contract_Account], [ClientNr], [ClientName"& _ 
                "], [ContractType], [ProductType], [StartDate], [MaturityDate], [BusinessType], ["& _ 
                "KEV_Collateral], [Valid], [AnaCredit_Valid], [IsAnaCredit], [CCY], [HGB_Bilanz_M"& _ 
                "atch], [HGB_GV_Match]) VALUES (@Contract_Account, @ClientNr, @ClientName, @Contr"& _ 
                "actType, @ProductType, @StartDate, @MaturityDate, @BusinessType, @KEV_Collateral"& _ 
                ", @Valid, @AnaCredit_Valid, @IsAnaCredit, @CCY, @HGB_Bilanz_Match, @HGB_GV_Match"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_Bilanz_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_Bilanz_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_GV_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_GV_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ALL_CONTRACTS_ACCOUNTS] SET [Contract_Account] = @Contract_Account, [Clie"& _ 
                "ntNr] = @ClientNr, [ClientName] = @ClientName, [ContractType] = @ContractType, ["& _ 
                "ProductType] = @ProductType, [StartDate] = @StartDate, [MaturityDate] = @Maturit"& _ 
                "yDate, [BusinessType] = @BusinessType, [KEV_Collateral] = @KEV_Collateral, [Vali"& _ 
                "d] = @Valid, [AnaCredit_Valid] = @AnaCredit_Valid, [IsAnaCredit] = @IsAnaCredit,"& _ 
                " [CCY] = @CCY, [HGB_Bilanz_Match] = @HGB_Bilanz_Match, [HGB_GV_Match] = @HGB_GV_"& _ 
                "Match WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_Bilanz_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_Bilanz_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_GV_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_GV_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Contract_Account, ClientNr, ClientName, ContractType, ProductTy"& _ 
                "pe, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Vali"& _ 
                "d, IsAnaCredit, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CCY, HGB_Bilanz_Match, HGB_GV_Match"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM            ALL_CONTRACTS_ACCOUNTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ContractType = 'GL_ITEM') "& _ 
                "AND (dbo.fn_StripCharacters(Contract_Account, '^0-9') NOT BETWEEN 5001 AND 7999)"& _ 
                " AND (Contract_Account NOT IN ('499', '699', '1199', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "'2049', '2099', '3199', '3699', '3899', '8999', '9999'))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.fn_StripC"& _ 
                "haracters(Contract_Account, '^0-9') * 1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_BSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AllContractsAccountsDataSet.ALL_GL_ITEMS_BSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_BSDataTable = New AllContractsAccountsDataSet.ALL_GL_ITEMS_BSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_BSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AllContractsAccountsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ALL_GL_ITEMS_BS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Contract_Account As String, ByVal ClientNr As String, ByVal ClientName As String, ByVal ContractType As String, ByVal ProductType As String, ByVal StartDate As Global.System.Nullable(Of Date), ByVal MaturityDate As Global.System.Nullable(Of Date), ByVal BusinessType As String, ByVal KEV_Collateral As String, ByVal Valid As String, ByVal AnaCredit_Valid As String, ByVal IsAnaCredit As String, ByVal CCY As String, ByVal HGB_Bilanz_Match As String, ByVal HGB_GV_Match As String) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (HGB_Bilanz_Match Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(HGB_Bilanz_Match,String)
            End If
            If (HGB_GV_Match Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(HGB_GV_Match,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Contract_Account As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal ContractType As String,  _
                    ByVal ProductType As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal BusinessType As String,  _
                    ByVal KEV_Collateral As String,  _
                    ByVal Valid As String,  _
                    ByVal AnaCredit_Valid As String,  _
                    ByVal IsAnaCredit As String,  _
                    ByVal CCY As String,  _
                    ByVal HGB_Bilanz_Match As String,  _
                    ByVal HGB_GV_Match As String,  _
                    ByVal Original_ID As Integer) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (HGB_Bilanz_Match Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(HGB_Bilanz_Match,String)
            End If
            If (HGB_GV_Match Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(HGB_GV_Match,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ALL_GL_ITEMS_PL_TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ALL_GL_ITEMS_PL"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Contract_Account", "Contract_Account")
            tableMapping.ColumnMappings.Add("ClientNr", "ClientNr")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("ContractType", "ContractType")
            tableMapping.ColumnMappings.Add("ProductType", "ProductType")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            tableMapping.ColumnMappings.Add("KEV_Collateral", "KEV_Collateral")
            tableMapping.ColumnMappings.Add("Valid", "Valid")
            tableMapping.ColumnMappings.Add("AnaCredit_Valid", "AnaCredit_Valid")
            tableMapping.ColumnMappings.Add("IsAnaCredit", "IsAnaCredit")
            tableMapping.ColumnMappings.Add("CCY", "CCY")
            tableMapping.ColumnMappings.Add("HGB_Bilanz_Match", "HGB_Bilanz_Match")
            tableMapping.ColumnMappings.Add("HGB_GV_Match", "HGB_GV_Match")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ALL_CONTRACTS_ACCOUNTS] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ALL_CONTRACTS_ACCOUNTS] ([Contract_Account], [ClientNr], [ClientName"& _ 
                "], [ContractType], [ProductType], [StartDate], [MaturityDate], [BusinessType], ["& _ 
                "KEV_Collateral], [Valid], [AnaCredit_Valid], [IsAnaCredit], [CCY], [HGB_Bilanz_M"& _ 
                "atch], [HGB_GV_Match]) VALUES (@Contract_Account, @ClientNr, @ClientName, @Contr"& _ 
                "actType, @ProductType, @StartDate, @MaturityDate, @BusinessType, @KEV_Collateral"& _ 
                ", @Valid, @AnaCredit_Valid, @IsAnaCredit, @CCY, @HGB_Bilanz_Match, @HGB_GV_Match"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_Bilanz_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_Bilanz_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_GV_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_GV_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ALL_CONTRACTS_ACCOUNTS] SET [Contract_Account] = @Contract_Account, [Clie"& _ 
                "ntNr] = @ClientNr, [ClientName] = @ClientName, [ContractType] = @ContractType, ["& _ 
                "ProductType] = @ProductType, [StartDate] = @StartDate, [MaturityDate] = @Maturit"& _ 
                "yDate, [BusinessType] = @BusinessType, [KEV_Collateral] = @KEV_Collateral, [Vali"& _ 
                "d] = @Valid, [AnaCredit_Valid] = @AnaCredit_Valid, [IsAnaCredit] = @IsAnaCredit,"& _ 
                " [CCY] = @CCY, [HGB_Bilanz_Match] = @HGB_Bilanz_Match, [HGB_GV_Match] = @HGB_GV_"& _ 
                "Match WHERE (([ID] = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_Account", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_Account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientNr", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientNr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContractType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContractType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaturityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BusinessType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BusinessType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEV_Collateral", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEV_Collateral", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnaCredit_Valid", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnaCredit_Valid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsAnaCredit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsAnaCredit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_Bilanz_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_Bilanz_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HGB_GV_Match", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HGB_GV_Match", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PS_TOOL_DX.My.MySettings.Default.PS_TOOL_DX_SQL_Client_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Contract_Account, ClientNr, ClientName, ContractType, ProductTy"& _ 
                "pe, StartDate, MaturityDate, BusinessType, KEV_Collateral, Valid, AnaCredit_Vali"& _ 
                "d, IsAnaCredit, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CCY, HGB_Bilanz_Match, HGB_GV_Match"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM            ALL_CONTRACTS_ACCOUNTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ContractType = 'GL_ITEM') "& _ 
                "AND (dbo.fn_StripCharacters(Contract_Account, '^0-9') BETWEEN 5001 AND 7999)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"OR"& _ 
                "DER BY dbo.fn_StripCharacters(Contract_Account, '^0-9') * 1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_PLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AllContractsAccountsDataSet.ALL_GL_ITEMS_PLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_PLDataTable = New AllContractsAccountsDataSet.ALL_GL_ITEMS_PLDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AllContractsAccountsDataSet.ALL_GL_ITEMS_PLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AllContractsAccountsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ALL_GL_ITEMS_PL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Contract_Account As String, ByVal ClientNr As String, ByVal ClientName As String, ByVal ContractType As String, ByVal ProductType As String, ByVal StartDate As Global.System.Nullable(Of Date), ByVal MaturityDate As Global.System.Nullable(Of Date), ByVal BusinessType As String, ByVal KEV_Collateral As String, ByVal Valid As String, ByVal AnaCredit_Valid As String, ByVal IsAnaCredit As String, ByVal CCY As String, ByVal HGB_Bilanz_Match As String, ByVal HGB_GV_Match As String) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (HGB_Bilanz_Match Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(HGB_Bilanz_Match,String)
            End If
            If (HGB_GV_Match Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(HGB_GV_Match,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Contract_Account As String,  _
                    ByVal ClientNr As String,  _
                    ByVal ClientName As String,  _
                    ByVal ContractType As String,  _
                    ByVal ProductType As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal MaturityDate As Global.System.Nullable(Of Date),  _
                    ByVal BusinessType As String,  _
                    ByVal KEV_Collateral As String,  _
                    ByVal Valid As String,  _
                    ByVal AnaCredit_Valid As String,  _
                    ByVal IsAnaCredit As String,  _
                    ByVal CCY As String,  _
                    ByVal HGB_Bilanz_Match As String,  _
                    ByVal HGB_GV_Match As String,  _
                    ByVal Original_ID As Integer) As Integer
            If (Contract_Account Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Contract_Account,String)
            End If
            If (ClientNr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientNr,String)
            End If
            If (ClientName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientName,String)
            End If
            If (ContractType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ContractType,String)
            End If
            If (ProductType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProductType,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MaturityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MaturityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BusinessType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BusinessType,String)
            End If
            If (KEV_Collateral Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(KEV_Collateral,String)
            End If
            If (Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Valid,String)
            End If
            If (AnaCredit_Valid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AnaCredit_Valid,String)
            End If
            If (IsAnaCredit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IsAnaCredit,String)
            End If
            If (CCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CCY,String)
            End If
            If (HGB_Bilanz_Match Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(HGB_Bilanz_Match,String)
            End If
            If (HGB_GV_Match Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(HGB_GV_Match,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aLL_CONTRACTS_ACCOUNTSTableAdapter As ALL_CONTRACTS_ACCOUNTSTableAdapter
        
        Private _aLL_GL_ITEMS_BS_TableAdapter As ALL_GL_ITEMS_BS_TableAdapter
        
        Private _aLL_GL_ITEMS_PL_TableAdapter As ALL_GL_ITEMS_PL_TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ALL_CONTRACTS_ACCOUNTSTableAdapter() As ALL_CONTRACTS_ACCOUNTSTableAdapter
            Get
                Return Me._aLL_CONTRACTS_ACCOUNTSTableAdapter
            End Get
            Set
                Me._aLL_CONTRACTS_ACCOUNTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ALL_GL_ITEMS_BS_TableAdapter() As ALL_GL_ITEMS_BS_TableAdapter
            Get
                Return Me._aLL_GL_ITEMS_BS_TableAdapter
            End Get
            Set
                Me._aLL_GL_ITEMS_BS_TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ALL_GL_ITEMS_PL_TableAdapter() As ALL_GL_ITEMS_PL_TableAdapter
            Get
                Return Me._aLL_GL_ITEMS_PL_TableAdapter
            End Get
            Set
                Me._aLL_GL_ITEMS_PL_TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection
                End If
                If ((Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aLL_GL_ITEMS_BS_TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aLL_GL_ITEMS_BS_TableAdapter.Connection
                End If
                If ((Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aLL_GL_ITEMS_PL_TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aLL_GL_ITEMS_PL_TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As AllContractsAccountsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ALL_CONTRACTS_ACCOUNTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_BS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_BS_TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_PL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_PL_TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As AllContractsAccountsDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ALL_CONTRACTS_ACCOUNTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_BS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_BS_TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_PL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_PL_TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As AllContractsAccountsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_PL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_PL_TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ALL_GL_ITEMS_BS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aLL_GL_ITEMS_BS_TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ALL_CONTRACTS_ACCOUNTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As AllContractsAccountsDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aLL_GL_ITEMS_BS_TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aLL_GL_ITEMS_PL_TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aLL_CONTRACTS_ACCOUNTSTableAdapter, Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection)
                    Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aLL_GL_ITEMS_BS_TableAdapter, Me._aLL_GL_ITEMS_BS_TableAdapter.Connection)
                    Me._aLL_GL_ITEMS_BS_TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_GL_ITEMS_BS_TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aLL_GL_ITEMS_BS_TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aLL_GL_ITEMS_BS_TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aLL_GL_ITEMS_BS_TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aLL_GL_ITEMS_PL_TableAdapter, Me._aLL_GL_ITEMS_PL_TableAdapter.Connection)
                    Me._aLL_GL_ITEMS_PL_TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_GL_ITEMS_PL_TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aLL_GL_ITEMS_PL_TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aLL_GL_ITEMS_PL_TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aLL_GL_ITEMS_PL_TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aLL_CONTRACTS_ACCOUNTSTableAdapter) Is Nothing) Then
                    Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Connection = CType(revertConnections(Me._aLL_CONTRACTS_ACCOUNTSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_CONTRACTS_ACCOUNTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aLL_GL_ITEMS_BS_TableAdapter) Is Nothing) Then
                    Me._aLL_GL_ITEMS_BS_TableAdapter.Connection = CType(revertConnections(Me._aLL_GL_ITEMS_BS_TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_GL_ITEMS_BS_TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aLL_GL_ITEMS_PL_TableAdapter) Is Nothing) Then
                    Me._aLL_GL_ITEMS_PL_TableAdapter.Connection = CType(revertConnections(Me._aLL_GL_ITEMS_PL_TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aLL_GL_ITEMS_PL_TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
